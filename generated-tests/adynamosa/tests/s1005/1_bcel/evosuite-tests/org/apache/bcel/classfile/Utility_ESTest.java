/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 05:11:46 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7'D`c;=k*y1#M+OxU*", "fconst_2", "`fix$ERebWzD9B", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7'D`c;=k*y1#M+OxU*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 161;
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.accessToString(161);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Es#\"5sr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Es#\"5sr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.replace("The prefix must not be null", "The prefix must not be null", "The prefix must not be null");
      assertEquals("The prefix must not be null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)8;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-84), false);
      assertEquals("0:    iconst_4\n1:    ifgt\t\t#-21495\n", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.setBit(2581, (-90));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.compactClassName("bawzG%47hDSqS", true);
      Utility.toHexString(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.convertString("e eeu^s ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.compactClassName("long", "static", true);
      try { 
        Utility.typeOfSignature("#`j&77!e,Y+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #`j&77!e,Y+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte) (-70));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(73, 67);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-888));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)118;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$e8Pv", string0);
      
      Utility.accessToString((int) (byte)80);
      String string1 = Utility.signatureToString("TPl]|h5SC];Q[");
      assertEquals("Pl]|h5SC]", string1);
      
      String string2 = Utility.accessToString(66, false);
      assertEquals("private volatile", string2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.decode("boolean", false);
      MockFile mockFile0 = new MockFile("boolean");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(256, 86);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8z_?]V'r(sPs{<";
      stringArray0[1] = "8z_?]V'r(sPs{<";
      stringArray0[2] = "8z_?]V'r(sPs{<";
      stringArray0[3] = "$fQ\"t";
      stringArray0[4] = "\r";
      stringArray0[5] = "8z_?]V'r(sPs{<";
      Utility.methodTypeToSignature("8z_?]V'r(sPs{<", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      try { 
        Utility.typeOfSignature("8z_?]V'r(sPs{<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8z_?]V'r(sPs{<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "'yc>akz@%h";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'yc>akz@%h");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "W0>FII  >Zk";
      try { 
        Utility.typeOfSignature("W0>FII  >Zk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W0>FII  >Zk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("76 f7", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.convertString("OHTW7FT?i&wJk");
      Utility.getSignature("OHTW7FT\\?i&wJk");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte) (-83);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-120);
      byte byte0 = (byte)106;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(90, (byte) (-124));
      Constant constant0 = constantFieldref0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.generic.BasicType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.generic.BasicType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodTypeToSignature("G=", (String[]) null);
      assertEquals("()LG=;", string0);
      
      String string1 = Utility.methodSignatureToString("()LG=;", "()LG=;", "");
      assertEquals("G= ()LG=;()", string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LInvalid;V");
      String string0 = Utility.methodTypeToSignature("G=", (String[]) null);
      assertEquals("()LG=;", string0);
      
      String string1 = Utility.methodSignatureToString("()LG=;", "LInvalid;V", "G=");
      assertEquals("G= G= LInvalid;V()", string1);
      
      String string2 = Utility.fillup("LInvalid;V", (-600), false, 'V');
      assertEquals("LInvalid;V", string2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "athrow";
      Utility.searchOpcode("athrow");
      // Undeclared exception!
      try { 
        Utility.signatureToString("GakI8x:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GakI8x:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("bmQydPD}w/}YD#m", "bmQydPD}w/}YD#m", true);
      assertEquals("bmQydPD}w.}YD#m", string0);
      
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      EmptyVisitor emptyVisitor2 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor1);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      Utility.compactClassName("void");
      Utility.compactClassName("dstore_1", true);
      String string1 = Utility.accessToString((int) (byte) (-57), false);
      assertEquals("public private protected volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-100);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    fconst_2
         // 4:    ifge\t\t#160
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      String string0 = Utility.replace("(", "[]", "(");
      assertEquals("(", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("[]", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = byteSequence0.read();
      assertEquals(93, int0);
      
      byteSequence0.markSupported();
      String string1 = Utility.methodSignatureReturnType("Dx3B^{Yhc'k.yI<");
      assertEquals("double", string1);
      
      String string2 = Utility.fillup("Dx3B^{Yhc'k.yI<", (byte)114, true, '\'');
      assertEquals("Dx3B^{Yhc'k.yI<''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VM%Vx[Ob?:JF@(V>g");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      Utility.getSignature("");
      Utility.signatureToString("L;", true);
      String string0 = "a)kJ]{hf";
      Utility.compactClassName("a)kJ]{hf", "a)kJ]{hf", true);
      Utility.compactClassName("a)kJ]{hf");
      Utility.methodSignatureReturnType("L;");
      Utility.setBit(46, 46);
      // Undeclared exception!
      try { 
        Utility.replace("Nc1OQFEzN@|A}q", (String) null, "monitorexit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("protected", false);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1067, 1067);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte) (-34), 48);
      boolean boolean0 = false;
      Utility.compactClassName("protected", ")\t", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@-yp}+c%L$5vGY3U}");
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readShort();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantLong constantLong0 = new ConstantLong((-1686L));
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Utility.signatureToString("Z+EWsu7B", true);
      byteSequence0.readUnsignedByte();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      String string0 = Utility.methodTypeToSignature("boolean", stringArray0);
      assertEquals("(ZZZZZ)Z", string0);
      
      String string1 = Utility.compactClassName("boolean", "(ZZZZZ)Z", true);
      assertEquals("boolean", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 197);
      assertEquals("0:    f2l\n1:    istore_0\n2:    nop\n3:    nop\n", string2);
      
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$8c$3b$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-87);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("2'/Gu?{Q^", "2'/Gu?{Q^", "nop");
      byteSequence0.readUnsignedShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 169, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("W(EzZ'[a}r'PVJX3p2");
      Utility.replace("eav!", "W(EzZ'[a}r'PVJX3p2", "&!3~wSHHR31x1r=orSB");
      Utility.getSignature("&!3~wSHHR31x1r=orSB");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("W(EzZ'[a}r'PVJX3p2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W(EzZ'[a}r'PVJX3p2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "\t";
      Utility.compactClassName("\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((Constant) constantMethodType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      ConstantFloat constantFloat0 = new ConstantFloat((-221.6F));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Integer integer0 = new Integer((byte) (-119));
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)22);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool2, false);
      try { 
        Utility.typeOfSignature("n_D??MIuKysF.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n_D??MIuKysF.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "GJ6cJ";
      stringArray0[1] = "GJ6cJ";
      stringArray0[2] = "GJ6cJ";
      stringArray0[3] = "GJ6cJ";
      stringArray0[4] = "GJ6cJ";
      Utility.methodTypeToSignature("GJ6cJ", stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.format(65536, (-3), false, 'O');
      Utility.compactClassName("GJ6cJ", false);
      String string0 = "GUIP\\&w9^Gdn5\\";
      try { 
        Utility.typeOfSignature("GUIP&w9^Gdn5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GUIP&w9^Gdn5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(256, 64);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      Utility.setBit(2374, 2198);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$feLL$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      Utility.setBit(2374, (byte)76);
      Utility.compactClassName("X<z.bFm-?iL~JO}u");
      Utility.compactClassName("(B07/0*Ln01&-");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      try { 
        Utility.decode("org.apache.bcel.classfile.Method$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, (int) (byte) (-108), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)51;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()");
      Utility.compactClassName("()", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(125, (-1207));
      Utility.encode(byteArray0, false);
      Utility.compactClassName("()");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " gN");
      Utility.setBit((-977), 637);
      Utility.compactClassName("()");
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.compactClassName("f!<RnRI /yO;x0/0", "", true);
      String string0 = "9|p^NU";
      try { 
        Utility.methodSignatureReturnType("9|p^NU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9|p^NU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("1\"g}:{z[", false);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(187, 187);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((byte) (-2), 48);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3221);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, constantPool0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("fload_0", string0);
      
      String string1 = Utility.compactClassName("=6.|;Z7$p+%FLoN", "dsub", false);
      assertEquals("=6.|;Z7$p+%FLoN", string1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$A$40$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E6x&z\"9p?=TiT6");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((byte)64);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(78);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      byte[] byteArray1 = new byte[2];
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("wvPz");
      Utility.accessToString((int) (byte)0, false);
      Utility.equals(byteArray1, byteArray1);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable((byte)64, 78, (byte)0, (byte)0, 177, (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(324, 1412, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("java.lang.", "$A$40$A$A$A$A$A$A", "EZ{|", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@-yp}+c%L$5vGY3U}");
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readInt();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readShort();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantLong constantLong0 = new ConstantLong((-1686L));
      constantPool0.constantToString((Constant) constantLong0);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = "<";
      Utility.compactClassName("<");
      Utility.compactClassName("@-yp}+c%L$5vGY3U}", true);
      try { 
        Utility.methodSignatureArgumentTypes("<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)65;
      String string0 = "C\\4Vefi[\\ncdI";
      String string1 = "org.apache.bcel.classfile.Utility";
      Utility.replace("]B>p@", "org.apache.bcel.classfile.Utility", "C\u0004Vefi[\ncdI");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("]B>p@", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.markSupported();
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(0, (byte)66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.getSignature("ifge");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ifge";
      stringArray0[1] = "Lifge;";
      stringArray0[2] = "Lifge;";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("return");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = Utility.decode("-ZD", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("J+7E+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J+7E+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-117), true);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("0:    f2i\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    f2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      String string0 = "apz\"<8L8nn^[bQPJ #";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "apz\"<8L8nn^[bQPJ #");
      Utility.compactClassName("apz\"<8L8nn^[bQPJ #", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit((-4640), (byte)26);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-100);
      Utility.replace("new", "breakpoint", "new");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-100);
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)33;
      byteArray1[4] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.decode("breakpoint", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.markSupported();
      Utility.searchOpcode("multianewarray");
      Utility.encode(byteArray0, false);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-17);
      Utility.accessToString((-17));
      String[] stringArray0 = new String[5];
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      byte byte1 = (byte)65;
      byteArray0[1] = (byte)65;
      byte byte2 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)65;
      stringArray0[0] = "public private protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[2] = "public private protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[3] = stringArray0[1];
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)65, (byte)65);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.read(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, stringArray0[3]);
      Utility.compactClassName("lstore_2");
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((byte)64);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(78);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      try { 
        Utility.typeOfSignature("/O-c!{u0^B9M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /O-c!{u0^B9M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte)20;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Integer integer0 = new Integer((byte) (-58));
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-58));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)65;
      Utility.replace("(", "(", "C\u0004Vefi[\ncd,I");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("C\u0004Vefi[\ncd,I", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.signatureToString("C\u0004Vefi[\ncd,I");
      ConstantClass constantClass0 = new ConstantClass(16384);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((Constant) constantClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)71;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte)71;
      byte byte1 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)104;
      byteArray0[3] = (byte)104;
      byte byte4 = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      int int0 = 169;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_0
         // 1:    ifge\t\t#105
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-29);
      String string0 = Utility.convertString(",c]u`");
      assertEquals(",c]u`", string0);
      
      byte[] byteArray2 = Utility.decode(",c]u`", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      char char0 = byteSequence0.readChar();
      assertEquals('\u2C63', char0);
      
      String string1 = Utility.fillup("dreturn", (byte) (-29), false, '\u2C63');
      assertEquals("dreturn", string1);
      
      String string2 = Utility.getSignature("o+_\\u#");
      assertEquals("Lo+_\\u#;", string2);
      
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-29), 81);
      assertEquals("0:    istore_3\n1:    dreturn\n2:    fstore_3\n3:    iconst_3\n", string3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("oiZa$?.0", false);
      Utility.compactClassName("oiZa$?.0", "oiZa$?.0", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      byteSequence0.readInt();
      byteSequence1.available();
      Utility.format((byte) (-42), (byte) (-42), false, 'a');
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ddiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokespecial", false);
      Utility.compactClassName("invokespecial", "invokespecial", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "_GtGDWr4";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokespecial");
      byteSequence0.readInt();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.skip(1768846959);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("invokespecial");
      constantArray0[0] = (Constant) constantUtf8_0;
      char char0 = 'F';
      Utility.fillup("_GtGDWr4", 171, true, 'F');
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)51;
      byteArray0[3] = (byte) (-83);
      Utility.signatureToString("VW vU/&Dpec0tZst");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("double", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2977), 246);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantMethodHandle constantMethodHandle2 = null;
      try {
        constantMethodHandle2 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)5;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte) (-117), true);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.isSet(1024, (byte)73);
      Utility.replace("Z _VCp;%)KOm#b", ")$f,tm7$B~TsR5D;/6", "$l$8b$I$A$A$A$A$A$A$A");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      String string0 = Utility.accessToString(253);
      assertEquals("public protected static final synchronized volatile transient", string0);
      
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.convertString("9tE?<>7qB].5K)c|1(k");
      assertEquals("9tE?<>7qB].5K)c|1(k", string1);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$97$976$A", string2);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      String string3 = Utility.classOrInterface(12);
      assertEquals("class", string3);
      
      String string4 = Utility.getSignature("$97$976$A");
      assertEquals("L$97$976$A;", string4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.getSignature("Illegal type: ");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(34, 2427);
      Constant.setComparator((BCELComparator) null);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle0.copy();
      Utility.clearBit(123, (byte)10);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte)43;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)22;
      Utility.convertString("LIllegal;");
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.typeOfSignature("2w`.k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2w`.k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.classOrInterface((-3230));
      ConstantFloat constantFloat0 = new ConstantFloat(76);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-109);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      Utility.setBit((byte) (-109), (byte) (-109));
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface((-913));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(84, true);
      byteSequence0.readInt();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "protected final volatile";
      objectArray0[0] = (Object) "i2s";
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) (byte) (-109);
      objectArray0[4] = (Object) "protected final volatile";
      objectArray0[0] = (Object) byteSequence0;
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.accessToString(40);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)56, 3957);
      ConstantInteger constantInteger0 = new ConstantInteger(57);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("'@#");
      try { 
        Utility.methodSignatureReturnType("'@#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'@#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.typeOfSignature("FZu3mNV.jOJZkT");
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("K/5v)JY5", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)6;
      ConstantFloat constantFloat0 = new ConstantFloat(2188.3945F);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)6);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.decode("!'%)+R+}(G]?puo$ek+", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ek\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(54);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 2205, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    i2b\n", string0);
      
      Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    i2b\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[2] = (Constant) constantDouble0;
      constantPool2.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.accessToString((-443), false);
      assertEquals("public protected volatile interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      byteSequence0.readBoolean();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 36
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 124
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-58);
      byteArray1[4] = (byte)20;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.clearBit(1492, (byte) (-58));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 67, (-34));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = ",c]u`";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",c]u`");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString(",c]u`");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = Utility.decode("VUc[XWkw9q:&", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.readChar();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VUc[XWkw9q:&");
      Utility.accessToString(93);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-2801), true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2801), (-1502));
      ConstantDouble constantDouble0 = new ConstantDouble(2786.4179948345545);
      constantDouble0.clone();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.setBytes((-1502));
      int int0 = 82;
      ConstantInteger constantInteger0 = new ConstantInteger(82);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isSet((byte)108, 69);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(0);
      byte byte0 = (byte)79;
      int int0 = 179;
      ConstantInteger constantInteger0 = new ConstantInteger(179);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger1;
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString((-2801), true);
      assertEquals("public private protected static native abstract synthetic annotation enum", string0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2801), (-1502));
      ConstantDouble constantDouble0 = new ConstantDouble(2786.4179948345545);
      constantDouble0.clone();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.setBytes((-1502));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.convertString("ifnull");
      assertEquals("ifnull", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.accessToString(2388, false);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      String string0 = Utility.replace("boolean", "boolean", "boolean");
      assertEquals("boolean", string0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(451);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool2, false);
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Integer[3](bytes = 451)}", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-2801), true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2801), (-2801));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureToString("class", "a|pG@q(+&$E %uE[ -", "public private protected static native abstract synthetic annotation enum", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Integer integer0 = new Integer((byte) (-87));
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor2 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor2);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("X!^5dZMQ8 Nl");
      ConstantClass constantClass0 = new ConstantClass((byte) (-87));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-87), 39, (LocalVariable[]) null, (ConstantPool) null);
      Attribute.removeAttributeReader("za#.r^=X@-(CsC:b]{?");
      try { 
        Utility.methodSignatureToString("X!^5dZMQ8 Nl", "nop", "za#.r^=X@-(CsC:b]{?", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X!^5dZMQ8 Nl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = Utility.decode("arraylength", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readShort();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "org.apache.bel.classfile.AnnotationEntry";
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",c]u`");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(127, 127);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle0.copy();
      int int0 = (-4065);
      Utility.clearBit((-4065), 4513);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2116, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S8slzeH", false);
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)74;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.convertString("\t");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(3534);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(1856, 4, false, '/');
      assertEquals("1856", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)122;
      byteArray0[0] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      Utility.signatureToString("F4_", true);
      Utility.classOrInterface(1608);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[19];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte) (-95);
      byteArray0[6] = (byte)122;
      byteArray1[6] = (byte) (-95);
      Utility.encode(byteArray1, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      Utility.replace("ifnull", "Womya?Ii,<=#^\"_", "ireturn");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode(">_S4T:Je}3dXd5`bMGI", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",:nNC>y{", "6-7<GZ!JC||N4", "ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,:nNC>y{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte)51;
      byteArray0[3] = (byte) (-83);
      String string0 = "org.apache.bcel.classfile.Utility";
      String string1 = "f_C5\\Fw@`$e2\\-w:";
      Utility.replace("VW vU/&Dpec0tZst", "f_C5Fw@`$e2-w:", "VW vU/&Dpec0tZst");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("double", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitoroenter", "goto_w", "6-7<GZ!JC||N4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitoroenter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.classOrInterface((-3230));
      ConstantFloat constantFloat0 = new ConstantFloat(384.1618F);
      ConstantFloat constantFloat1 = new ConstantFloat(76);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Integer integer0 = new Integer((byte)110);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("za#.r^=X@-(CsC:b]{?");
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(192, (byte)110, (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("interface", "goto\t\t#28270", "za#.r^=X@-(CsC:b]{?", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte byte0 = (byte)48;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-72);
      int int0 = 4091;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)48, 4091);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)48);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = (byte)65;
      byte byte1 = (byte)51;
      Utility.replace("VW vU/&Dpec0tZst", "VW vU/&Dpec0tZst", "\n");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("VW vU/&Dpec0tZst", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "AmV*jWk:SbB\"Q_uJ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Vvojd", "AmV*jWk:SbB\"Q_uJ", "AmV*jWk:SbB\"Q_uJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vvojd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.convertString(">");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "org.apache.bcel.classfile.DescendingVisitor", "8la<8123>i\"bzghs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("iload_2");
      assertEquals("iload_2", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.isSet(64, (-620));
      assertFalse(boolean0);
      
      Utility.printArray((Object[]) null);
      String string1 = Utility.getSignature("iastore");
      assertEquals("Liastore;", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.isSet((-216), (byte)31);
      Utility.printArray((Object[]) null);
      Utility.classOrInterface(1088);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.getSignature("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L;";
      String string0 = Utility.methodSignatureReturnType("L;", true);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isSet((-1556), 2069);
      assertTrue(boolean0);
      
      String string1 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{L;, null, null, null, null, null, null, null, null}", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.classOrInterface((-15));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.storeClass(javaClass0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      assertEquals("java.lang.Object", javaClass0.getClassName());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.accept(emptyVisitor0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("dm[:>HQ)qd]j", "\t<", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool2, true);
      Utility.convertString("dm[:>HQ)qd]j");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.encode(byteArray0, true);
      Utility.compactClassName(",Onol", "[(O!JRn", true);
      Utility.convertString("\t<");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte) (-79);
      byteArray1[4] = (byte)103;
      byteArray1[5] = (byte) (-79);
      byteArray1[6] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, 649, (int) (byte)87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byte byte0 = (byte) (-93);
      byte byte1 = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-117), false);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.isSet(1024, (byte)73);
      Utility.replace("Z _VCp;%)KOm#b", ")$f,tm7$B~TsR5D;/6", "$8bI$A$A$A$A$A$A");
      Utility.typeOfSignature("Z _VCp;%)KOm#b");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.compactClassName("boolean", "q|lFb$,d;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)19;
      byteArray0[6] = (byte)77;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)59);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readShort();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.replace("2|", ";L", "org.apache.bcel.classfile.AnnotationEntry");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 570, 177, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.accessToString((-15));
      String[] stringArray0 = new String[5];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-13);
      stringArray0[0] = "public final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[1] = "public final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[2] = "public final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[3] = "public final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)65, (byte) (-13));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("lstore_2");
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("ifnonnull", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      String string0 = Utility.methodTypeToSignature("boolean", stringArray0);
      assertEquals("(ZZZZZ)Z", string0);
      
      String string1 = Utility.compactClassName("boolean", "q|lFb$,d;", true);
      assertEquals("boolean", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)59);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string2 = Utility.convertString("static");
      assertEquals("static", string2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      String string0 = Utility.methodTypeToSignature("boolean", stringArray0);
      assertEquals("(ZZZZZ)Z", string0);
      
      String string1 = Utility.compactClassName("boolean", "q|lFb$,d;", true);
      assertEquals("boolean", string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(184, 184);
      ConstantInteger constantInteger0 = new ConstantInteger(1219);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(112);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      boolean boolean0 = Utility.isSet(184, (byte)87);
      assertFalse(boolean0);
      
      String string2 = Utility.classOrInterface((-81));
      assertEquals("interface", string2);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.SimpleElementValue");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "raylng!h");
      Utility.getSignature(":");
      Locale locale0 = Locale.CHINA;
      byte byte0 = (byte)47;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)61;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(241, (byte)47);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("L:;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.mark((byte)61);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.fillup("$A$v$A$v$_$3d$A", (byte)61, true, ',');
      Utility.methodSignatureReturnType("L:;");
      Utility.compactClassName(":");
      // Undeclared exception!
      try { 
        Utility.signatureToString("raylng!h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `raylng!h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-127);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-127), 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46730. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("oia$?.0", false);
      byte byte0 = (byte) (-6);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-6), (int) (byte)54);
      try { 
        byteSequence1.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte) (-13);
      byteArray0[4] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString(".?/D82BPH\"|");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.getSignature("ifge");
      Utility.isSet(27, 27);
      Utility.accessToString(27, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ifge";
      stringArray0[1] = "Lifge;";
      stringArray0[2] = "Lifge;";
      stringArray0[3] = "Lifge;";
      stringArray0[4] = "public private static final";
      ConstantInteger constantInteger0 = new ConstantInteger(2434);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(155);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isSet(221, (byte)23);
      Utility.equals(byteArray0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Lifge;", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "(J&jpf4%:M_du", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ':'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lload_3");
      int int0 = 177;
      Utility.fillup("org.apache.commons.io.filefilter.DelegateFileFilter", 177, true, 'k');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("impdeR2");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      Utility.compactClassName("impdeR2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)61;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte) (-116);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte)93;
      byteArray1[6] = (byte)97;
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString(13);
      Utility.convertString("9tE?<>7qB].5K)c|1(k");
      byte[] byteArray2 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.printArray((Object[]) constantArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.getSignature("ifge");
      Utility.isSet(27, 27);
      Utility.accessToString(27, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ifge";
      stringArray0[1] = "Lifge;";
      stringArray0[2] = "Lifge;";
      stringArray0[3] = "Lifge;";
      stringArray0[4] = "public private static final";
      stringArray0[5] = "return";
      stringArray0[6] = "Lifge;";
      stringArray0[7] = "Lifge;";
      stringArray0[8] = "Lifge;";
      Utility.methodTypeToSignature("ifge", stringArray0);
      Utility.replace("public private static final", "iadd", "int");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-60);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, (int) (byte) (-48), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      Utility.accessToString(253);
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("9tE?<>7qB].5K)c|1(k");
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "raylng!h");
      Utility.getSignature(":");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("raylng!h");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "~.*^wCp cN";
      try { 
        Utility.methodSignatureReturnType("~.*^wCp cN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~.*^wCp cN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte)9, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.classOrInterface(40);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.storeClass(javaClass0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(emptyVisitor0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "istore_0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("istore_0");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.classOrInterface((-2792));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2792), (-1502));
      ConstantDouble constantDouble0 = new ConstantDouble(2786.4179948345545);
      constantDouble0.clone();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.setBytes((-1502));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), (-2792), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.classOrInterface((-3589));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-127));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.classfile.Utility$1");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3589), (byte) (-84));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger((-3589));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass((byte) (-84));
      constantArray0[5] = (Constant) constantClass2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.convertString("\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("geVstat:ic");
      assertEquals("geVstat:ic", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$8fS$ce", string1);
      
      String string2 = Utility.compactClassName("9<buLV#]`%qP'MAJSy", "v &ueSJ:u=;vQz", true);
      assertEquals("9<buLV#]`%qP'MAJSy", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Utility.getSignature("double");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-83), (byte) (-83));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      constantMethodHandle0.copy();
      Utility.clearBit((byte)58, (byte) (-83));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 321, 2363);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.getSignature("");
      Utility.signatureToString("L;", true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)4;
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)27;
      Utility.encode(byteArray1, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 197, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("%{s,DHT[\"OXUo", false);
      ConstantInteger constantInteger0 = new ConstantInteger(3367);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.isSet(200, 3367);
      // Undeclared exception!
      try { 
        Utility.compactClassName("%{s,DHT[\"OXUo", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.compactClassName("boolean", "q|lFb$,d;", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString(184, false);
      Utility.compactClassName("(ZZZZZ)Z", "boolean", true);
      Utility.replace("boolean", "boolean", "q|lFb$,d;");
      Utility.compactClassName("boolean");
      Utility.compactClassName("boolean", true);
      Utility.methodSignatureArgumentTypes("(ZZZZZ)Z");
      int int0 = (-754);
      Utility.isSet((-754), (-189));
      String string0 = ")~y['";
      String string1 = "d1fsC~x,Z_N";
      String string2 = "The FilenameFilter must not be null";
      boolean boolean0 = true;
      int int1 = 8;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(52);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('A');
      charArrayWriter1.append('A');
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1274), 52);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.signatureToString("JGI.i#8.W@,pJC~", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantClass constantClass0 = new ConstantClass(52);
      constantClass0.toString();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte)87, 90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.replace("N\"Vl4KOmT|0", "N\"Vl4KOmT|0", "N\"Vl4KOmT|0");
      Utility.format((byte)125, 0, false, 'K');
      String string0 = "ifnonnull";
      try { 
        Utility.decode("$I(-z/-mF$mSh4x{a", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2205);
      ConstantClass constantClass1 = new ConstantClass(54);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-111);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), 2205, true);
      Utility.convertString("0:    ifnull\t\t#-14650\n3:    i2b\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.replace("+^=*J6[bY", "x2qs9LL,bWE>", "0:    ifnull\t\t#-14650\n3:    i2b\n");
      Utility.classOrInterface((byte) (-111));
      try { 
        Utility.methodSignatureArgumentTypes("+^=*J6[bY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +^=*J6[bY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("9pB]]vzgD", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1039), (-1039));
      assertEquals("0:    dstore\t\t%112\n2:    lstore_3\n3:    dup2_x1\n4:    dup2_x1\n5:    fneg\n6:    ishr\n7:    dsub\n8:    fstore_1\n", string0);
      
      Utility.getSignature("9pB]]vzgD");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9pB]]vzgD";
      stringArray0[1] = "9pB]]vzgD";
      stringArray0[2] = "0:    dstore\t\t%112\n2:    lstore_3\n3:    dup2_x1\n4:    dup2_x1\n5:    fneg\n6:    ishr\n7:    dsub\n8:    fstore_1\n";
      stringArray0[3] = "0:    dstore\t\t%112\n2:    lstore_3\n3:    dup2_x1\n4:    dup2_x1\n5:    fneg\n6:    ishr\n7:    dsub\n8:    fstore_1\n";
      stringArray0[4] = "9pB]]vzgD";
      stringArray0[5] = "9pB]]vzgD";
      stringArray0[6] = "L9pB]]vzgD;";
      stringArray0[7] = "Unreachable default case reached!";
      String string1 = Utility.methodTypeToSignature("9pB]]vzgD", stringArray0);
      assertEquals("(L9pB]]vzgD;L9pB]]vzgD;L0:;L0:;L9pB]]vzgD;L9pB]]vzgD;LL9pB]]vzgD;;LUnreachable;)L9pB]]vzgD;", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.replace("TMU0K$~+uT?", "void", "long");
      Utility.signatureToString("FaK$/D(05 FeR&\"TkxS", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) "FaK$/D(05 FeR&\"TkxS";
      objectArray0[3] = (Object) "void";
      objectArray0[5] = (Object) "long";
      Utility.methodSignatureReturnType("FaK$/D(05 FeR&\"TkxS", false);
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, 7, 1992);
      Utility.setBit((-201), 78);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = 85;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(85, 85);
      ConstantFloat constantFloat0 = new ConstantFloat(310.7F);
      ConstantFloat constantFloat1 = new ConstantFloat(1.0F);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(2527, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("nop", "nop", "public private protected static final volatile transient native strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readFloat();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = null;
      Utility.accessToString((-2000));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      byte byte1 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byte byte3 = (byte)11;
      byteArray0[4] = (byte)11;
      int int0 = 169;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 169);
      Utility.getSignature("0:    lload_3\n1:    ifge\t\t#105\n4:    fconst_0\n");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.classOrInterface((-1027));
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-58);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-95);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-55);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, (byte)59);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger(57);
      constantArray0[2] = (Constant) constantInteger0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("nop");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.classOrInterface((-3589));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-127);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)74, (-3589), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 159;
      Utility.getSignature(", class=<unknown>");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3085), (byte) (-24));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("constant pool\t\t");
      Utility.encode(byteArray0, false);
      Locale locale0 = Locale.KOREAN;
      Utility.format((-1524), (byte)22, false, '-');
      try { 
        Utility.decode("ifnonnull", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.clearBit((byte)0, (byte)0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.classOrInterface((-3589));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-127);
      Constant[] constantArray0 = null;
      byte[] byteArray1 = Utility.decode("c*KCfqn X$*b:\"ezi<", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)0;
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AH:Hy5$4<z?nwL9l");
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4534, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)61);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool1, true);
      String string0 = Utility.convertString("Invalid IOCase name: ");
      assertEquals("Invalid IOCase name: ", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byte byte3 = (byte)11;
      byteArray0[4] = (byte)11;
      int int0 = 169;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 169);
      Utility.getSignature("0:    impdep2\n1:    ifge\t\t#105\n4:    fconst_0\n");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("2'/Gu?{Q^", "2'/Gu?{Q^", "ret\t\t%182");
      byteSequence0.readUnsignedShort();
      String string0 = ";&y2[6r,8";
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 178, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.compactClassName("monitorexit", "long", true);
      byte[] byteArray0 = new byte[1];
      Utility.replace("long", "monitorexit", "class");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("monitorexit", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("]Oo#[}1x?");
      Utility.compactClassName("", "BmW_%{>m}$", true);
      int int0 = 39;
      Utility.format(4957, 4957, true, 's');
      Utility.encode(byteArray1, true);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 116
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-492), 64);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantNameAndType0;
      constantArray0[5] = (Constant) constantNameAndType0;
      constantArray0[6] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)76);
      constantArray0[7] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.isSet(1236, 91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      Utility.encode(byteArray0, false);
      Utility.getSignature("double");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-725), 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)65;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.getSignature(")\t");
      assertEquals("L);", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-86), 1220);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[13];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[8] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle0;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.convertString(")\t");
      String string3 = Utility.compactClassName(")\t", ")\t", false);
      assertTrue(string3.equals((Object)string2));
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      String string0 = "+Kqrh}*cq*yQ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Kqrh}*cq*yQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Kqrh}*cq*yQ");
      Utility.getSignature("+Kqrh}*cq*yQ");
      try { 
        Utility.typeOfSignature("+Kqrh}*cq*yQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kqrh}*cq*yQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "2|";
      Utility.replace("2|", ";L", "org.apache.bcel.classfile.AnnotationEntry");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)66;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 570, 177, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.compactClassName("monitorexit", "ng", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      boolean boolean1 = true;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("monitorexit");
      Utility.convertString("monitorexit");
      Utility.replace("dsub", "E`Se", "monitorexit");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPool0.constantToString((Constant) constantUtf8_1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = 'I';
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_1", string0);
      
      String string1 = Utility.replace("2|", ";L", "org.apache.bcel.classfile.AnnotationEntry");
      assertEquals("2|", string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)66;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)69;
      String string2 = Utility.encode(byteArray2, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("%{s,DHT[\"OXUo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("lshr");
      Utility.compactClassName("\t\t#", "\t\t#", false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureToString("(Lclass;Lclass;Lclass;Lclass;Lclass;)Lclass;", "\"", "class");
      Utility.clearBit((byte)78, 1225);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), 158, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    astore_3
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 287, 287, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-1953));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("class", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 247, (-3241), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("2'/Gu?{Q^");
      String string0 = ";&y2[6r,8";
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_1", string0);
      
      String string1 = Utility.replace(".BL'<6j!", "(LM}lvN8bDi-CL(GH{", "org.apache.bcel.classfile.AnnotationEntry");
      assertEquals(".BL'<6j!", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_icmpgt";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (-838), 10, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)65;
      Utility.encode(byteArray0, true);
      Utility.getSignature(")\t");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2844, 1220);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[13];
      byteSequence0.readUnsignedShort();
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[8] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle0;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.convertString(")\t");
      // Undeclared exception!
      try { 
        Utility.signatureToString(";&y2[6r,8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;&y2[6r,8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.classOrInterface((-3230));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(40, 76);
      ConstantFloat constantFloat0 = new ConstantFloat(384.1618F);
      ConstantFloat constantFloat1 = new ConstantFloat(76);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((-3230), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("castore", "private synchronized volatile native interface synthetic annotation enum", "MgbgB`ulvYCg)7z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-66);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "arraylength";
      stringArray0[1] = "arraylength";
      Utility.methodTypeToSignature("arraylength", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.convertString("S");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("SX'(t08~e$%ob", stringArray0);
      assertEquals("()LSX'(t08~e$%ob;", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifnull\t\t#-14650", string2);
      
      String string3 = Utility.convertString("()LSX'(t08~e$%ob;");
      assertEquals("()LSX\\'(t08~e$%ob;", string3);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string4 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals("{}", string4);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.accessToString((-1027));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-95);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("jd~zTP[", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 59, (int) (byte) (-58), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.classOrInterface(2237);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.fillup("Y(Q.ff(|", (byte)13, true, 'z');
      assertEquals("Y(Q.ff(|zzzzz", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-1953));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("class", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool2, true);
      assertEquals(1, byteSequence1.getIndex());
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte byte0 = (byte)95;
      Utility.getSignature("M");
      byte byte1 = (byte) (-52);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte)95, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Illegally nested brackets:", false);
      byte[] byteArray0 = Utility.decode("Z+EWsu7B", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 248);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("%{s,DHT[\"OXUo", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[IujbBsbsKAE2 ";
      Utility.classOrInterface(40);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("baQN2~O]{4p?;R<poh)", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals(1, byteSequence1.getIndex());
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.classOrInterface(244);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("2l/#;K78bC", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (int) (byte) (-73), false);
      String string0 = "#B7b";
      Utility.compactClassName("2l/#;K78bC", false);
      Utility.setBit((byte) (-73), 40);
      String string1 = "b";
      try { 
        Utility.methodSignatureReturnType("b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-119);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("G'(W*wETmGPtVL|R");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%{s,DHT[\"OXUo";
      stringArray0[1] = "";
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)88;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-26);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (-1123), false);
      assertEquals("0:    nop\n1:    aastore\n2:    dastore\n3:    istore_3\n4:    nop\n5:    <illegal opcode>\n", string0);
      
      short short0 = Utility.searchOpcode("%{s,DHT[\"OXUo");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("en%T027t4}EvP", ", high = ", true);
      assertEquals("en%T027t4}EvP", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?>...", (String) null, "Illegal type: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%{s,DHT[\"OXUo";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)113;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)89;
      byteArray1[5] = (byte)113;
      byteArray1[6] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte) (-117), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.searchOpcode("Ou.Z3(FVcB4V!");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.classOrInterface((-1027));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-55);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-58), (byte)59);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-55), (byte) (-55));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(57);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte)34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)6;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      byteSequence1.reset();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.clearBit((byte) (-50), (byte)121);
      Utility.codeToString(byteSequence1, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[IujbBsbsKAE2 ";
      Utility.classOrInterface(40);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("baQN2~O]{4p?;R<poh)", false);
      byte byte0 = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool1, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)27, (int) (byte) (-52), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("invokevirtual");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      String string0 = Utility.getSignature(":");
      assertEquals("L:;", string0);
      
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)61;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.setBit(241, (byte)47);
      assertEquals(33009, int0);
      
      Utility.encode(byteArray0, false);
      String string1 = Utility.compactClassName("$_$_AA$_$3d");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)61);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string2 = Utility.encode(byteArray0, false);
      assertTrue(string2.equals((Object)string1));
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readShort();
      int int1 = Utility.clearBit(110, 333);
      assertEquals(110, int1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string3 = Utility.classOrInterface(218);
      assertEquals("class", string3);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-883));
      String string0 = Utility.classOrInterface(183);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.mark(183);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-1), (-165));
      assertEquals("0:    baload\n1:    baload\n2:    l2d\n3:    aload_1\n4:    aload_1\n5:    aload_1\n6:    aload_1\n7:    aload_1\n8:    aload_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-492), (-2715));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((-998), 0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 688, (-998), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.typeOfSignature("FZu3mNV.jOJZkT");
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("K/5v)JY5", true);
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)51;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte) (-75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      byteArray0[2] = (byte)11;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iastore");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " methods:\n";
      stringArray0[1] = "long";
      stringArray0[2] = " methods:\n";
      stringArray0[3] = "long";
      Utility.methodTypeToSignature(" methods:\n", stringArray0);
      MockFile mockFile0 = new MockFile("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write((int) (byte)0);
      mockPrintWriter0.checkError();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('7');
      Utility.printArray(printStream0, (Object[]) stringArray0);
      Utility.methodSignatureToString("(Lmethods:;JLmethods:;J)Lmethods:;", "long", "OU`+wAa?<pke65", false);
      try { 
        Utility.methodSignatureArgumentTypes("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "%{s,\\DHT[\"OXUo";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4534, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "if_icmpgt";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("K7xv-q{AH<N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K7xv-q{AH<N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature(":");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)61;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(241, (byte)47);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$_Q$AQ$_$3d");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)61);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 520, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("invokevirtual");
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(158);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(158, (byte) (-80));
      ConstantFloat constantFloat0 = new ConstantFloat((-104.4747F));
      ConstantFloat constantFloat1 = new ConstantFloat((byte)110);
      Constant[] constantArray0 = new Constant[10];
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.accessToString(58, true);
      assertEquals("private static final", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("6e 00 00 00 00", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.compactClassName("}lw0E$Z7wXL9]P|UxQ3", "}lw0E$Z7wXL9]P|UxQ3", true);
      Utility.clearBit(192, 175);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2004, 969);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(969);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString(2992, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("}lw0E$Z7wXL9]P|UxQ3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }lw0E$Z7wXL9]P|UxQ3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[2] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "long";
      String[] stringArray0 = new String[4];
      stringArray0[0] = " methods:\n";
      stringArray0[1] = "long";
      stringArray0[2] = " methods:\n";
      stringArray0[3] = "long";
      Utility.methodTypeToSignature(" methods:\n", stringArray0);
      MockFile mockFile0 = new MockFile("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.checkError();
      Object object0 = new Object();
      Utility.compactClassName("?X\"r", true);
      try { 
        Utility.methodSignatureReturnType("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "}lw0E$Z7wXL9]P|UxQ3";
      Utility.compactClassName("}lw0E$Z7wXL9]P|UxQ3", "}lw0E$Z7wXL9]P|UxQ3", true);
      Utility.clearBit(192, 175);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantClass constantClass0 = new ConstantClass(192);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit(192, 16384);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2593, (-2341), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("oia$?5.0K", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)48;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte)37;
      Utility.typeOfSignature("J");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (-491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[2] = (byte)16;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)16;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "[c~KcYQ+Y3] )?i<sU";
      // Undeclared exception!
      try { 
        Utility.getSignature("[c~KcYQ+Y3] )?i<sU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [c~KcYQ+Y3] )?i<sU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.getSignature("Vw#?5");
      Utility.typeOfSignature("Vw#?5");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      Utility.getSignature("`CADR5OwL,O1");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(204, 2195);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 47, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "M";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-492), 65);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit(3750, (-793));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2205);
      ConstantClass constantClass1 = new ConstantClass(54);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-111);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), 2205, true);
      try { 
        Utility.methodSignatureReturnType("HUs@jh1Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HUs@jh1Jn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      boolean boolean0 = true;
      Utility.format(0, 0, true, '6');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byte byte0 = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XCPLx", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XCPLx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.decode("oia@$I5.0K", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.replace("VW vU/&Dpec0tZst", "VW vU/&Dpec0tZst", "(");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = Utility.decode("(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("VW vU/&Dpec0tZst");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hxF}+");
      Utility.fillup("SourceFile", 171, true, 'V');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "hxF}+";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "SourceFileVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "SourceFileVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.compactClassName("}lw0E$Z7wXL9]P|UxQ3", "}lw0E$Z7wXL9]P|UxQ3", true);
      Utility.clearBit(192, 175);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[7] = (byte)101;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.read();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Illegal type: ";
      stringArray0[2] = "Illegal type: ";
      byte[] byteArray1 = Utility.decode(", handler_pc = ", false);
      assertEquals(15, byteArray1.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lushr", string0);
      
      String string1 = Utility.convertString("\t\t<");
      assertEquals("\t\t<", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.getSignature("lookupswitch");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)95;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(196, 196);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.clearBit(162, 67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 665, (-140), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.compactClassName("}lw0E$Z7wXL9]P|UxQ3", "}lw0E$Z7wXL9]P|UxQ3", true);
      Utility.clearBit(192, 175);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[7] = (byte)101;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.clearBit((-891), (byte)121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 175, (int) (byte)107, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%{s,DHT[\"OXUo";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.compactClassName("}lw0E$Z7wXL9]P|UxQ3", "}lw0E$Z7wXL9]P|UxQ3", true);
      Utility.clearBit(192, 175);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, 135, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      String string0 = Utility.format(0, 0, true, '6');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.getSignature("M");
      Utility.signatureToString("LM;", true);
      String string0 = "org.apache.bcel.classfile.AnnotationElementValue";
      Utility.replace("org.apache.bcel.classfile.AnnotationElementValue", "M", "M");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.getSignature("Vw#?5");
      Utility.typeOfSignature("Vw#?5");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-511), (int) (byte) (-119), false);
      assertEquals("0:    fstore_0\n1:    fstore_0\n2:    l2f\n3:    fstore_0\n4:    fstore_0\n5:    l2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("S8slzeH", false);
      String string0 = "\t\t<";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifle\t\t#16", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[4] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("w+N@{20Y5Cc&L#)0", "invokestatic", ">$z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w+N@{20Y5Cc&L#)0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.getSignature("FZu3mNV.jOJZkT");
      assertEquals("LFZu3mNV/jOJZkT;", string0);
      
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1445421684), (int) (byte)95, true);
      Utility.toHexString(byteArray0);
      String string1 = Utility.methodSignatureReturnType("LFZu3mNV/jOJZkT;");
      assertEquals("FZu3mNV.jOJZkT", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%{s,DHT[\"OXUo";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ireturn", string0);
      
      Utility.accessToString(2320, false);
      String string1 = Utility.accessToString((int) (byte) (-84), false);
      assertEquals("protected static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantClass constantClass0 = new ConstantClass(2198);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(158);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("baload", string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short short0 = Utility.searchOpcode("Illegal type: ");
      assertEquals((short) (-1), short0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("lreturn", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte) (-61);
      byteArray1[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("frem", string0);
      
      String string1 = Utility.accessToString(521, true);
      assertEquals("public static", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-119);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)67, 193, (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("\"", "\"", "CC$89CC$89", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      ConstantClass constantClass0 = new ConstantClass((byte) (-96));
      ConstantClass constantClass1 = new ConstantClass((byte) (-72));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lneg", string0);
      
      String string1 = Utility.replace("l|@(i,U", ";L", "'JAux1aNU/_");
      assertEquals("l|@(i,U", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-880), (int) (byte)117, false);
      assertEquals("0:    lneg\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S8slzeH", false);
      assertEquals("short", string0);
      
      String string1 = Utility.methodTypeToSignature("\t\t<", (String[]) null);
      assertEquals("()L<;", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)120;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string2);
      
      boolean boolean0 = Utility.isSet((byte)120, (byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)8;
      boolean boolean0 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J";
      stringArray0[1] = "J";
      stringArray0[2] = "J";
      stringArray0[3] = "J";
      Utility.methodTypeToSignature("J", stringArray0);
      Utility.typeOfSignature("J");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("\t\t<", (String[]) null);
      assertEquals("()L<;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)13, 60);
      ConstantFloat constantFloat0 = new ConstantFloat(1940.8685F);
      ConstantFloat constantFloat1 = new ConstantFloat(5208.0F);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)13, 645);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantNameAndType0;
      String string2 = Utility.accessToString((-2444), true);
      assertEquals("protected final volatile abstract synthetic annotation enum", string2);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), 3168, true);
      assertEquals("0:    dcmpg\n1:    fconst_2\n2:    monitorexit\n3:    monitorexit\n", string3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.replace("if_icmpgt", "JgRh-'65*p,;EEq!/(` ", "3k!S\"Y");
      assertEquals("if_icmpgt", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "3k!S\"Y";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dload\t\t%24", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.replace("if_icmpgt", "JgRh-'65*p,;EEq!/(` ", "3k!S\"Y");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte) (-72);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)13, 60);
      ConstantFloat constantFloat0 = new ConstantFloat(1940.8685F);
      ConstantFloat constantFloat1 = new ConstantFloat(5208.0F);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)13, 645);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat1;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      String string0 = Utility.getSignature(":");
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)61;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.setBit(241, (byte)47);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$_QQQ$_$3d");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.encode(byteArray0, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-117), false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()L<;", "monitorenter", "PUqyPkf`#P{3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", false);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (-2955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      String string0 = Utility.getSignature(":");
      assertEquals("L:;", string0);
      
      Locale locale0 = Locale.CHINA;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)61;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.setBit(241, (byte)47);
      assertEquals(33009, int0);
      
      String string1 = Utility.encode(byteArray0, false);
      String string2 = Utility.compactClassName("$_QQQ$_$3d");
      assertTrue(string2.equals((Object)string1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("laload", string3);
      
      Utility.compactClassName("\t\t<", false);
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(158, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)43;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.compactClassName("N'Vn)", "N'Vn)", false);
      assertEquals("N'Vn)", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iaload", string1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.signatureToString("Illegall ne)d brackets:", false);
      Utility.getSignature("int");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 255, 2068);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("N'Vn)", "N'Vn)", true);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 2746, 192, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantClass constantClass0 = new ConstantClass(2205);
      ConstantClass constantClass1 = new ConstantClass(228);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, 176, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      Utility.getSignature(":");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 506, 506, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-883));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-54);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-54), (-2399));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    fload_1\n1:    breakpoint\n", "class");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // class
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr");
      String string0 = "\t\t";
      String string1 = "zIU";
      byte[] byteArray0 = Utility.decode("zIU", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, (-2198));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.compactClassName("N'Vn)", "N'Vn)", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), 4447, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    <illegal opcode>
         // 2:    fconst_2
         // 3:    ifne\t\t#-27611
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[8] = (byte) (-9);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmple\t\t#82", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegally nested brackets:", false);
      assertEquals("int", string0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.convertString("Illegally nested brackets:");
      byte[] byteArray0 = Utility.decode("Illegally nested brackets:", false);
      ConstantPool constantPool0 = null;
      ConstantPool constantPool1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("9:N`[SSUS", 2, true, 'C');
      assertEquals("9:N`[SSUS", string0);
      
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((short)255);
      byte[] byteArray0 = Utility.decode("lreturn", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("idiv", string1);
      assertArrayEquals(new byte[] {(byte)108, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)110;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)11;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte)11;
      byteArray1[5] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2010, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.compactClassName("N'Vn)", "N'Vn)", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), 4447, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    <illegal opcode>
         // 2:    fconst_2
         // 3:    frem
         // 4:    lcmp
         // 5:    fload_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)58;
      Utility.encode(byteArray0, false);
      Utility.getSignature("double");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1916), (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iadd
         // 1:    lstore_2
         // 2:    baload
         // 3:    lreturn
         // 4:    arraylength
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      String string0 = "Invalid signature: ";
      String[] stringArray0 = null;
      String[] stringArray1 = null;
      Utility.methodTypeToSignature("Invalid signature: ", (String[]) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)40;
      byteArray1[7] = (byte)78;
      byteArray1[8] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)78, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S8slzeH", false);
      assertEquals("short", string0);
      
      String string1 = Utility.methodTypeToSignature("\t\t<", (String[]) null);
      assertEquals("()L<;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string2);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.typeOfSignature("FZu3mNV.jOJZkT");
      Utility.methodSignatureReturnType("K/5v)JY5", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace(";L", "'JAux1aNU/_", "2|");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16384, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[2] = (byte)11;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 14);
      OutputStream outputStream0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 912, 144);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 91;
      Integer integer0 = new Integer(91);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)95;
      Utility.encode(byteArray0, true);
      String string0 = "Invalid signature: ";
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("Invalid signature: ", (String[]) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.replace("if_icmpgt", "JgRh-'65*p,;EEq!/(` ", "3k!S\"Y");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "3k!S\"Y";
      stringArray0[3] = "if_icmpgt";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 185, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      ConstantClass constantClass0 = new ConstantClass((byte) (-96));
      ConstantClass constantClass1 = new ConstantClass((byte) (-72));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("(P[R");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantClass0.accept(descendingVisitor0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)67;
      byteArray1[4] = (byte) (-50);
      byteArray1[5] = (byte)117;
      byteArray1[6] = (byte) (-72);
      byteArray1[7] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (-2894), (int) (byte) (-50), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lneg
         // 1:    <illegal opcode>
         // 2:    lneg
         // 3:    fstore_0
         // 4:    <illegal opcode>
         // 5:    lneg
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[IujbBsbcKAC`E' ";
      stringArray0[1] = "[IujbBsbcKAC`E' ";
      stringArray0[2] = "[IujbBsbcKAC`E' ";
      stringArray0[3] = "[IujbBsbcKAC`E' ";
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-34);
      ConstantClass constantClass0 = new ConstantClass(44);
      ConstantClass constantClass1 = new ConstantClass((byte) (-72));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass1;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 30, 30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 52958. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.accessToString(0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[26];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)37;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (-109), false);
      try { 
        Utility.methodSignatureReturnType("0:    faload\n1:    fload_3\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    faload
         // 1:    fload_3
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.convertString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[2];
      Utility.decode("Illegally nested brackets:", false);
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("if_acmpne");
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      Utility.isSet((-2068), 152);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Utility.compactClassName("void", "void", false);
      assertEquals("void", string0);
      
      String string1 = Utility.replace("TMU0K$~+uT?", "void", "long");
      assertEquals("TMU0K$~+uT?", string1);
      
      Utility.signatureToString("FaK$/D(05 FeR&\"TkxS", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) "FaK$/D(05 FeR&\"TkxS";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "long";
      objectArray0[6] = (Object) "void";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("void, float, FaK$/D(05 FeR&\"TkxS, void, void, long, void", string2);
      
      String string3 = Utility.methodSignatureReturnType("FaK$/D(05 FeR&\"TkxS", false);
      assertEquals("float", string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string4 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("istore_1", string4);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%{s,DHT[\"OXUo");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      String string0 = Utility.getSignature(":");
      assertEquals("L:;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)46;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), 1480);
      assertEquals("0:    lor\n1:    lor\n2:    iaload\n", string1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.getSignature("lookupswitch");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",-*v");
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[4] = (byte)54;
      byteArray0[4] = (byte)84;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 65, false);
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)58;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("iA3$ad$be$3a", string0);
      
      String string1 = Utility.getSignature("double");
      assertEquals("D", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("lmul", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1916), (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    lstore_2
         // 2:    baload
         // 3:    lreturn
         // 4:    arraylength
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(158);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)43;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-14);
      String string0 = "H3M:";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H3M:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H3M:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Visiting non-standard PMGClass object", "byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.forLanguageTag("H(e83Cwk");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayCountry(locale1);
      Locale locale2 = Locale.TAIWAN;
      mockPrintStream0.printf(locale2, "new", (Object[]) null);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.fillup("", 83, false, 'S');
      Utility.searchOpcode("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), (int) (short) (-1));
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N^'nk@toM'VNtvb");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-23));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("Bb 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Bb 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.compactClassName("void", "void", false);
      assertEquals("void", string0);
      
      String string1 = Utility.replace("TMU0K$~+uT?", "void", "long");
      assertEquals("TMU0K$~+uT?", string1);
      
      Utility.signatureToString("FaK$/D(05 FeR&\"TkxS", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) "FaK$/D(05 FeR&\"TkxS";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "long";
      objectArray0[6] = (Object) "void";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"void\", \"float\", \"FaK$/D(05 FeR&\"TkxS\", \"void\", \"void\", \"long\", \"void\"", string2);
      
      Utility.methodSignatureReturnType("FaK$/D(05 FeR&\"TkxS", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)87;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(70);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-3189), (int) (byte)81, true);
      assertEquals("0:    istore_1\n1:    dload_3\n2:    fload\t\t%84\n4:    fastore\n5:    dup_x2\n6:    pop\n", string3);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.compactClassName("char", "void", false);
      boolean boolean0 = false;
      Utility.compactClassName("void");
      // Undeclared exception!
      try { 
        Utility.decode("A$fS`>>r@:0ta", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("void", true);
      Utility.classOrInterface((-1615));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "^0:YZtT{Pkh\"1rg7k";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(voir", "(voir", "(voir");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `voir'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("", "\\", "ifnull");
      // Undeclared exception!
      try { 
        Utility.signatureToString("P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = Utility.format(2610, 2610, false, 'w');
      Utility.accessToString(246);
      Utility.format(247, 215, true, 'w');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) "247wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) "247wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[5] = (Object) "247wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[6] = (Object) "private protected final synchronized volatile transient";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("private protected final synchronized volatile transient");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 215, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Utility.compactClassName("void", "void", true);
      assertEquals("", string0);
      
      String string1 = Utility.replace("TMU0K$~+uT?", "void", "long");
      assertEquals("TMU0K$~+uT?", string1);
      
      String string2 = Utility.signatureToString("FaK$/D(05 FeR&\"TkxS", false);
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("::/0U%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ::/0U%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.clearBit((-4577), (-4577));
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("9<buLV#]`%qP'MAJSy", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9<buLV#]`%qP'MAJSy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.replace("if_icmpgt", "JgRh-'65*p,;EEq!/(` ", "3k!S\"Y");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      stringArray0[2] = "3k!S\"Y";
      stringArray0[3] = "if_icmpgt";
      stringArray0[4] = "3k!S\"Y";
      stringArray0[5] = "3k!S\"Y";
      Utility.methodTypeToSignature("3k!S\"Y", stringArray0);
      try { 
        Utility.typeOfSignature("3k!S\"Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3k!S\"Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("char", false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)58;
      byteArray0[0] = (byte)58;
      byte byte1 = (byte)89;
      byteArray0[1] = (byte)89;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool1.accept(descendingVisitor0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)58, (-1679));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(158);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)43;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (-134));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.isSet(0, 0);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dm[:>HQqd]j");
      Utility.replace("Ajc;[#V2[dmVh", "dm[:>HQqd]j", "Ajc;[#V2[dmVh");
      Utility.searchOpcode("W*Fnz");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "dm[:>HQqd]j";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Ajc;[#V2[dmVh", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[#V2[dmVh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "$PUwq't]].UQU =,U";
      try { 
        Utility.typeOfSignature("$PUwq't]].UQU =,U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $PUwq't]].UQU =,U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.getSignature("T*4");
      Utility.getSignature("LT*4;");
      Utility.getSignature("LLT*4;;");
      char char0 = 'O';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-91);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(75, (byte) (-84));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2543), (byte) (-91));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), 0, false);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = Utility.clearBit(170, 170);
      assertEquals(170, int0);
      
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      String string0 = Utility.classOrInterface(170);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("&FWs0}p%Bd", "etn", false);
      assertEquals("&FWs0}p%Bd", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)122;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$S$C$RKll$M$Iz", string2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)16;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("F$B4$O90a$L$Q", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(91, 1101);
      assertEquals(8283, int0);
      
      byte byte0 = Utility.typeOfSignature("FZu3mNV.jOJZkT");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.typeOfSignature("Illegal ty#pe: ");
      Utility.typeOfSignature("Illegal ty#pe: ");
      Utility.compactClassName("Illegal ty#pe: ", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Utility.clearBit(170, 170);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      Utility.classOrInterface(170);
      Utility.compactClassName("&FWs0}p%Bd", "return", false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      Utility.getSignature("if_acmpne");
      byte[] byteArray0 = Utility.decode("int", false);
      Utility.isSet((-98), 152);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1039, 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.compactClassName("T*4", false);
      Utility.getSignature("T*4");
      // Undeclared exception!
      try { 
        Utility.getSignature("*!kmK}''[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.convertString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[2];
      Utility.decode("Illegally nested brackets:", false);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("int");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Utility.getSignature("Illegal type: ");
      Utility.typeOfSignature("LIllegal;");
      Utility.convertString("LIllegal;");
      Utility.accessToString((int) (byte)14);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dm[:>HQqd]j");
      Utility.getSignature("dm[:>HQqd]j");
      try { 
        Utility.typeOfMethodSignature("[Ldm;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [Ldm;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      int int0 = Utility.setBit(49, 49);
      assertEquals(131121, int0);
      
      String string0 = Utility.fillup("", (-3368), true, 'U');
      assertEquals("", string0);
      
      Utility.isJavaIdentifierPart('U');
      boolean boolean1 = Utility.isJavaIdentifierPart('U');
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = Utility.clearBit(170, 170);
      assertEquals(170, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "iconst_m1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iconst_m1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.signatureToString("QLQn(Mfd3Q_0Ipa", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QLQn(Mfd3Q_0Ipa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.convertString("dm[:>HQqd]j");
      try { 
        Utility.typeOfSignature(";dk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;dk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U(YQu(.ff(@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U(YQu(.ff(@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.classOrInterface((-3589));
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-127);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 144, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kk3/KW_.q*2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kk3/KW_.q*2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('N');
      Utility.setBit(91, 1101);
      Utility.fillup("dm[:>HQqd]j", 61, true, 'N');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.getSignature("faloa*d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nm'%uhs9[B,x");
      Utility.convertString("QJ:FAo");
      try { 
        Utility.typeOfSignature("QJ:FAo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QJ:FAo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BootstrapMethods(");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.accessToString((int) (byte)8, true);
      assertEquals("static", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[ZO@o'vTg>--");
      String string0 = Utility.signatureToString("[ZO@o'vTg>--", true);
      assertEquals("boolean[]", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=nrw ?N=pm)O%G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =nrw ?N=pm)O%G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[:x");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("TO");
      try { 
        Utility.typeOfSignature("%|lgs}[cN>{sJ|x9>v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %|lgs}[cN>{sJ|x9>v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "M";
      // Undeclared exception!
      try { 
        Utility.signatureToString("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Utility.searchOpcode("Ou.Z3(FVcB4V!");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Utility.classOrInterface((-3685));
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "$I2oANdpm}8>y1f";
      objectArray0[2] = (Object) locale0;
      objectArray0[6] = (Object) null;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(60, 46);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("(");
      try { 
        Utility.methodSignatureToString("(", "(", "(", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.fillup("org.apache.bcel.classfile.Utility$JavaWriter", 1735, false, 'Z');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)102;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$e5$d6$N$e9$acf$S1f", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.format((-2030), 50, false, 'Z');
      Utility.compactClassName("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ-2030");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 101
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "[]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("D", "D", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.isSet(4025, 60);
      Utility.isSet(0, 59);
      Utility.accessToString((-209), false);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.replace("L9<VI~Q=F@dv!'", "L9<VI~Q=F@dv!'", "L9<VI~Q=F@dv!'");
      Utility.accessToString((-650));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L9<VI~Q=F@dv!'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9<VI~Q=F@dv!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("VW vU/&Dpec0tZst");
      Integer integer0 = new Integer((byte)12);
      Utility.replace("impdep1", "VW vU/&Dpec0tZst", (String) null);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[IujbBsbcKAC`E' ";
      stringArray0[1] = "[IujbBsbcKAC`E' ";
      stringArray0[2] = "[IujbBsbcKAC`E' ";
      stringArray0[3] = "[IujbBsbcKAC`E' ";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpne\t\t#184", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.isSet(3043, 3043);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)95;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Invalid signature: ";
      stringArray0[1] = "$Lq_";
      stringArray0[2] = "Invalid signature: ";
      Utility.methodTypeToSignature("Invalid signature: ", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.classOrInterface((-3589));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-127);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 144, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.classOrInterface((-3587));
      Utility.decode("", false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "L4", ", class=<unknown>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("putfield", "u{nQHlr@_}XS-,j=YU", false);
      LocalVariableTable localVariableTable0 = null;
      String string0 = "Ofo0l";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokedynamic", "Ofo0l", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), 3094);
      assertEquals("0:    if_icmple\t\t#-2222\n3:    ior\n4:    ifeq\t\t#20181\n7:    dstore_3\n8:    dload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "4Y?a%p6+w_qVrNL$B";
      try { 
        Utility.typeOfSignature("4Y?a%p6+w_qVrNL$B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Y?a%p6+w_qVrNL$B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "(";
      Utility.convertString("(");
      String string1 = "&n";
      try { 
        Utility.typeOfSignature("&n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("/", "/", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.getSignature("lookupswitch");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, 65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "\":1L=I";
      try { 
        Utility.typeOfSignature("EaSj.JJg|K*-C2R;s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EaSj.JJg|K*-C2R;s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("/c'qPAMY+4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /c'qPAMY+4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("VW vU/&Dpec0tZst", "VW vU/&Dpec0tZst", "(");
      assertEquals("(", string0);
      
      Utility.signatureToString("VW vU/&Dpec0tZst", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-1);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$3a$86P$ff", string1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".. (truncated)");
      Utility.replace("java.lang.VEU~3ok'TtyDa7f", "X-P]s9lLj<J4jc$n", ";/3x5\"");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("D", "D", true);
      assertEquals("", string0);
      
      Integer integer0 = new Integer((-1237));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "D";
      stringArray0[2] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;LD;L;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.signatureToString("ZOtAR=S<BiSM6");
      String string0 = Utility.convertString("u(cDELo#0HQk8*0w'A<");
      assertEquals("u(cDELo#0HQk8*0w\\'A<", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.clearBit(113, 3);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "Ajc;[#V2[dmVh", "Ajc;[#V2[dmVh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("M;zFS1@>[A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M;zFS1@>[A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "P,}X0z^G{";
      try { 
        Utility.typeOfSignature("P,}X0z^G{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P,}X0z^G{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "(";
      Utility.convertString("(");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = "System";
      Utility.typeOfSignature("System");
      String string1 = "6j";
      try { 
        Utility.typeOfSignature("6j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("9<buLV#]`%qP'MAJSy");
      try { 
        Utility.typeOfSignature("9<buLV#]`%qP'MAJSy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9<buLV#]`%qP'MAJSy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "RuntimeVisibleAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Utility.fillup("l[N9s_2Yj*hT^", 4425, true, '0');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(12);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.replace("Invalid type: ", "char", "!YS:a7YXOr;n");
      try { 
        Utility.typeOfSignature("!YS:a7YXOr;n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YS:a7YXOr;n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-W&&<GC2Ywb}tkC{lg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -W&&<GC2Ywb}tkC{lg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Locale.getISOLanguages();
      try { 
        Utility.methodSignatureReturnType("H~2RBN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H~2RBN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString(".\"B");
      assertEquals(".\\\"B", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("VW vU/&Dpec0tZst");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.classOrInterface((-3589));
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("VW vU/&Dpec0tZst");
      assertEquals("VW vU.&Dpec0tZst", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", false);
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("System");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.compactClassName("java.lang....");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "java.lang....";
      objectArray0[2] = (Object) "java.lang....";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@3e382bd6, java.lang...., java.lang....}", "java.lang....", "{java.lang.Object@3e382bd6, java.lang...., java.lang....}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@3e382bd6, java.lang...., java.lang....}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[v0627&GrgLRe,#8");
      // Undeclared exception!
      try { 
        Utility.signatureToString("X8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = ")A+)%5#.";
      try { 
        Utility.typeOfSignature(")A+)%5#.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )A+)%5#.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Qs@uom|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qs@uom|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "A)$vI)_Wyt)*8/<V";
      try { 
        Utility.typeOfSignature("A)$vI)_Wyt)*8/<V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A)$vI)_Wyt)*8/<V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_Class");
      try { 
        Utility.typeOfSignature("5~)9QdyA7e}mq?{y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5~)9QdyA7e}mq?{y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "'VW vU/&Dpec0tZst", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("O0[)$N_l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O0[)$N_l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      try { 
        Utility.typeOfSignature("07[vgMU(D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 07[vgMU(D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.typeOfSignature("Invalid method signature: ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Invalid method signature: ";
      stringArray0[1] = "Invalid method signature: ";
      stringArray0[2] = "Invalid method signature: ";
      stringArray0[3] = "Invalid method signature: ";
      stringArray0[4] = "Invalid method signature: ";
      stringArray0[5] = "Invalid method signature: ";
      Utility.methodTypeToSignature("Invalid method signature: ", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid method signature: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.replace(".. (truncated)", ".. (truncated)", ".. (truncated)");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)36;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte)89;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ConstantFieldref", "r9Z 4%5ow", "org.apache.bcel.classfile.ConstantFieldref", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantFieldref
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<Unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-35);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Bn//16t.:%}9)$# t)d");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = Utility.signatureToString("DD", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("XufCeJ!=d(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XufCeJ!=d(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Utility.isSet(3043, 3043);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)95;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Invalid signature: ";
      stringArray0[1] = "$faY_";
      stringArray0[2] = "Invalid signature: ";
      Utility.methodTypeToSignature("Invalid signature: ", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte) (-6));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("T%<NJb$J%(7|3BM5I+", "java.lang.XufCeJ!=d(]yXO", false);
      Utility.isSet(108, (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("T%<NJb$J%(7|3BM5I+", 108, false, '!');
      Utility.typeOfSignature("T%<NJb$J%(7|3BM5I+");
      Utility.compactClassName("T%<NJb$J%(7|3BM5I+", false);
      Utility.compactClassName("T%<NJb$J%(7|3BM5I+");
      Utility.classOrInterface((-1));
      Utility.searchOpcode("");
      try { 
        Utility.methodSignatureArgumentTypes("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("...");
      try { 
        Utility.methodSignatureReturnType("Lkr4eWG5,@9xo+|<;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lkr4eWG5,@9xo+|<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DD");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("7vP]3i! /Rmq`$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7vP]3i! /Rmq`$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1PlcD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1PlcD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("[");
      try { 
        Utility.typeOfSignature(">(*-Ea1},K]{v%[CC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >(*-Ea1},K]{v%[CC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("byte");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'VW vU/&Dpec0tZst";
      try { 
        Utility.typeOfMethodSignature("'VW vU/&Dpec0tZst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'VW vU/&Dpec0tZst
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("'VW vU/&Dpec0tZst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'VW vU/&Dpec0tZst
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("D", "D", true);
      assertEquals("", string0);
      
      String string1 = Utility.format((-1237), (-1237), false, '}');
      assertEquals("-1237", string1);
      
      String string2 = Utility.accessToString((-1237));
      assertEquals("public private static synchronized native interface strictfp synthetic annotation enum", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "-1237";
      stringArray0[2] = "-1237";
      stringArray0[3] = "";
      String string3 = Utility.methodTypeToSignature("public private static synchronized native interface strictfp synthetic annotation enum", stringArray0);
      assertEquals("(L;L-1237;L-1237;L;)Lpublic;", string3);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.classOrInterface(931);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("D", "D", true);
      assertEquals("", string0);
      
      String string1 = Utility.format((-1237), (-1237), false, '}');
      assertEquals("-1237", string1);
      
      int int0 = Utility.setBit((-1237), (-1237));
      assertEquals((-1237), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N2?SAHtFU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N2?SAHtFU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.replace(".. (truncated)", ".. (truncated)", ".. (truncated)");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y(YQU(.ff(|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y(YQU(.ff(|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)102;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("invokeinterface");
      assertEquals("Linvokeinterface;", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[2] = (byte)33;
      byteArray1[4] = (byte)55;
      byteArray1[5] = (byte)89;
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureReturnType("lookupswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lookupswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("|Hq", "...", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = Utility.getSignature("log");
      assertEquals("Llog;", string0);
      
      byte byte0 = Utility.typeOfSignature("Llog;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("T*4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T*4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = "... (truncated)";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "... (truncated)";
      stringArray0[1] = "log";
      stringArray0[2] = "... (truncated)";
      stringArray0[3] = "... (truncated)";
      stringArray0[4] = "... (truncated)";
      stringArray0[5] = "... (truncated)";
      stringArray0[6] = "log";
      stringArray0[7] = "log";
      Utility.methodTypeToSignature("log", stringArray0);
      try { 
        Utility.typeOfSignature(", name_and_type_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , name_and_type_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("Sfr8`QaI}", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ry)LQh8kGWk}7(o@_>+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ry)LQh8kGWk}7(o@_>+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Utility.methodTypeToSignature("log", (String[]) null);
      Utility.signatureToString("Lorg/apache/bcel/generic/BasicType;V", true);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.generic.BasicType", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.generic.BasicType'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.getSignature("@r=nwo(Bp^gt IFu");
      try { 
        Utility.typeOfSignature("@WJK'j_>.ts");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @WJK'j_>.ts
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("Illegal type: ", 0, true, 'l');
      Utility.methodSignatureReturnType("Illegal type: ", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("mKQj6T#xN_, 3AR7~BJ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "mKQj6T#xN_, 3AR7~BJ";
      objectArray0[1] = (Object) "KH`;@fHaX";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.getSignature("log");
      Utility.methodTypeToSignature("Llog;V", (String[]) null);
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("CkgbvI~E90>d:08p", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Deprecated");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.methodTypeToSignature(">\"Dk1`Q6n9UE%(", (String[]) null);
      Utility.typeOfMethodSignature("()L>\"Dk1`Q6n9UE%(;");
      // Undeclared exception!
      try { 
        Utility.signatureToString(">\"Dk1`Q6n9UE%(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\"Dk1`Q6n9UE%('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("", ",@t", false);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("JV", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N2?SAHtFU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N2?SAHtFU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("dr|yKG5NuE", false);
      int int0 = 2273;
      Utility.accessToString(2273, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      String string1 = "Linvokevirtual;V";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "dr|yKG5NuE", "Linvokevirtual;V", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.methodTypeToSignature("log", (String[]) null);
      try { 
        Utility.typeOfSignature("()Llog;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Llog;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("JV", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-35);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Bn//16t.:%&9)$# t)d", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      int int0 = new Integer(88);
      Utility.getSignature("... (truncated)");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-23);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Deprecated");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", true);
      String string0 = Utility.methodSignatureReturnType("CONSTANT_Class", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.convertString("");
      Utility.convertString("");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile("");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.compactClassName("S8slzeH");
      try { 
        Utility.methodSignatureReturnType("YFu\"#E|`,*N-x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YFu\"#E|`,*N-x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Deprecated", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Is?b+3;c", true);
      // Undeclared exception!
      Utility.format(948, 16384, true, 'I');
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.clearBit(88, 88);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = Utility.convertString("Pattern is missing");
      assertEquals("Pattern is missing", string0);
      
      byte[] byteArray0 = Utility.decode("Pattern is missing", false);
      assertEquals(18, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("void", false);
      assertArrayEquals(new byte[] {(byte)118, (byte)111, (byte)105, (byte)100}, byteArray1);
      
      int int0 = Utility.clearBit((-2023), (-2023));
      assertEquals((-33556455), int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", false);
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.compactClassName("S5<\"t)cl", "nARj,t*+W6", false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      int int0 = 88;
      Utility.clearBit(88, 88);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = Utility.compactClassName("S8slzeH", "L@g>0@(=bZp?Y>^", false);
      assertEquals("S8slzeH", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lmul", string1);
      
      String string2 = Utility.replace("~2o&0I:w) RZ*TaY.#", "S8slzeH", "bfm-SZHFt!>");
      assertEquals("~2o&0I:w) RZ*TaY.#", string2);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = "double";
      Utility.compactClassName("double", "double", true);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nm'%uhs9[B,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nm'%uhs9[B,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      try { 
        Utility.typeOfSignature("fB;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fB;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int int0 = 88;
      int int1 = new Integer(88);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.clearBit(88, 88);
      Utility.isJavaIdentifierPart('>');
      Utility.isSet(66, 88);
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-98);
      Utility.isJavaIdentifierPart('8');
      Utility.accessToString(177, true);
      Utility.accessToString(177);
      try { 
        Utility.methodSignatureArgumentTypes(">K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.isSet(3043, 3043);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)95;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Invalid signature: ";
      stringArray0[1] = "$LY_";
      stringArray0[2] = "Invalid signature: ";
      Utility.methodTypeToSignature("Invalid signature: ", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Ln]'VFz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ln]'VFz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S8slzeH", false);
      assertEquals("short", string0);
      
      byte[] byteArray0 = Utility.decode("6BK7g&J.qV_}x.nR", false);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "areturn";
      boolean boolean0 = true;
      Utility.compactClassName("[pU,D)V?yp)a", "areturn", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[pU,D)V?yp)a";
      objectArray0[1] = (Object) "[pU,D)V?yp)a";
      objectArray0[2] = (Object) "[pU,D)V?yp)a";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[pU,D)V?yp)a");
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "[pU,D)V?yp)a";
      Utility.printArray(objectArray0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("StackMapTable");
      mockPrintWriter0.print((-1358.706F));
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray1 = new byte[0];
      File file0 = MockFile.createTempFile("Type of ConstValue invalid: ", "The list of suffixes must not be null");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "invokeinterface");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"invokeinterface\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      int int0 = 88;
      Utility.clearBit(88, 88);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("[ve0#g", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ve0#g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.clearBit(88, 88);
      Utility.isJavaIdentifierPart('b');
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 88, false, 'b');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.convertString("S8slzeH");
      assertEquals("S8slzeH", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.methodSignatureReturnType("S8slzeH", false);
      Utility.methodTypeToSignature("\t\t<", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      int int0 = Utility.clearBit(88, 88);
      assertEquals(88, int0);
      
      String string0 = Utility.getSignature("... (truncated)");
      assertEquals("L///;", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Deprecated", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.clearBit(88, 88);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int int0 = Utility.clearBit((-3264), (-3264));
      assertEquals((-3264), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("S8slzeH", false);
      Utility.format((-3436), (-3436), false, 'O');
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Utility.clearBit(88, 88);
      try { 
        Utility.methodSignatureReturnType("!xfe)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = Utility.getSignature("double");
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"?eL-ZNX");
      int int0 = Utility.setBit(171, 952);
      assertEquals(16777387, int0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Q');
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = Utility.compactClassName("in", "in", false);
      assertEquals("in", string0);
      
      short short0 = Utility.searchOpcode("instanceof");
      assertEquals((short)193, short0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("byte");
      Utility.compactClassName("\"java.lang.Object@3d8b36f0\", \"java.lang.Object@f993f3\"", "3%{Pl", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.<", "org.apache.bcel.classfile.DescendingVisitor", " <>; L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('y');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" arg", (String) null, " arg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)87;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$r$b8$q$IW", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType(" ZB9xFWfSiT", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` ZB9xFWfSiT'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = Utility.compactClassName("invokevirtual", "invokestatic", true);
      assertEquals("invokevirtual", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "athrow");
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.isJavaIdentifierPart('}');
      try { 
        Utility.typeOfMethodSignature("'J-9P!t+q|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'J-9P!t+q|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.classOrInterface(20);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((-1533));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.setBit(0, 0);
      String[] stringArray0 = new String[4];
      Utility.printArray((Object[]) stringArray0, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null, null, null, null");
      Utility.fillup("!eKcNk}*a+}F'UVt^", 92, false, 'p');
      Utility.compactClassName("areturn", "", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ConstantMethodType", "!eKcNk}*a+}F'UVt^", "!eKcNk}*a+}F'UVt^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantMethodType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int int0 = Utility.setBit((-1442876693), 86);
      assertEquals((-1442876693), int0);
      
      String string0 = Utility.methodTypeToSignature("!eKcNk}*a+}F'UVt^", (String[]) null);
      assertEquals("()L!eKcNk}*a+}F'UVt^;", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", "dreturn", false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      Utility.compactClassName("fbtK9{l\"5IW^f1<", "fbtK9{l\"5IW^f1<", true);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("ldc_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("3u", (String[]) null);
      assertEquals("()L3u;", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "athrow");
      Utility.isJavaIdentifierPart('s');
      try { 
        Utility.methodSignatureReturnType("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "athrow";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.fillup("athrow", (-1036), false, '^');
      String string2 = Utility.compactClassName("athrow", "APPEND ", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-57);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)8;
      objectArray0[1] = (Object) (byte) (-57);
      objectArray0[2] = (Object) (byte)8;
      objectArray0[3] = (Object) (byte) (-78);
      objectArray0[4] = (Object) (byte)78;
      objectArray0[5] = (Object) (byte) (-78);
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("{8, -57, 8, -78, 78, -78}", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.replace("2slv", "H*SsdV0Q]", "{8, -57, 8, -78, 78, -78}");
      byte[] byteArray1 = Utility.decode("IAD7?Zf}n", false);
      assertArrayEquals(new byte[] {(byte)73, (byte)65, (byte)68, (byte)55, (byte)63, (byte)90, (byte)102, (byte)125, (byte)110}, byteArray1);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_NameAndType");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.clearBit(88, 88);
      String string0 = "PRlf0Gz8~^";
      String string1 = "/";
      String string2 = ", high = ";
      boolean boolean0 = false;
      int int0 = 18;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", high = ";
      String string0 = Utility.methodTypeToSignature("3u", stringArray0);
      assertEquals("(L,;)L3u;", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.setBit(0, 0);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "ZVJ(p@,ht=Obuxzm^";
      stringArray0[2] = "";
      stringArray0[3] = "ZVJ(p@,ht=Obuxzm^";
      stringArray0[4] = "{java.lang.Object@220845fc}";
      stringArray0[5] = "{java.lang.Object@220845fc}";
      stringArray0[6] = "";
      stringArray0[7] = "ZVJ(p@,ht=Obuxzm^";
      stringArray0[8] = "";
      Utility.methodTypeToSignature("ZVJ(p@,ht=Obuxzm^", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.replace("LocalVariable", "impdep1", "ifnonnull");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("goto", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = "0J$C&7iO5ic2]pd";
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("0J$C&7iO5ic2]pd", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-53);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.convertString("ENk 5;#");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      int int0 = 0;
      byteSequence0.mark(0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Utility.fillup(";c/q", (-337), true, '?');
      Utility.compactClassName("org.apache.bcel.classfile.ConstantValue", "goto_w", false);
      Utility.isSet((-337), 396);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("instanceof", ";c/q", "goto_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("dreturn", "dreturn", false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.Utility$JavaWriter", "org.apache.bcel.classfile.Utility$JavaWriter", (String) null);
      String string0 = "pop";
      // Undeclared exception!
      try { 
        Utility.compactClassName("pop", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("", false);
      Utility.format((byte)0, 1061, true, ' ');
      File file0 = MockFile.createTempFile("pA62d8AtmG$&>~TF", "Lr/V`n$1A");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("");
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "L;", "vdw)7#cW%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = "#,V*]Kn,[5";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_s", "#,V*]Kn,[5", "\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.accessToString(0, false);
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aM9?':BP.>qnrz", (String) null, "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aM9?':BP.>qnrz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.replace("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = Utility.format((-340), 119, false, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-340", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)3;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-340", stringArray0);
      assertEquals("()L\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\-340;", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string2);
      
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{}", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = "R.+W";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R.+W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R.+W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2), 170);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)39;
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$eaT$L$A$f6$t", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.accessToString(0, false);
      Utility.accessToString(967);
      Utility.searchOpcode("lWj,8p}J3F[@?3/");
      Utility.accessToString((int) (short) (-1), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", (String) null);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("<illegal type>", false);
      String string0 = "org.apache.commons.io.filefilter.CanReadFileFilter";
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.commons.io.filefilter.CanReadFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.CanReadFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.StackMap";
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.StackMap", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.StackMap'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-122);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("9e 00 10 da b0 00 95 cb 86", string0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, false);
      Utility.isSet(45, 45);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("{java.lang.Object@3b9f0104, java.lang.Object@407c9004, java.lang.Object@238678b9, java.lang.Object@39e3bc0e, java.lang.Object@7ab70d17}");
      Utility.compactClassName("{java.lang.Object@3b9f0104, java.lang.Object@407c9004, java.lang.Object@238678b9, java.lang.Object@39e3bc0e, java.lang.Object@7ab70d17}", true);
      try { 
        Utility.methodSignatureArgumentTypes("{java.lang.Object@3b9f0104, java.lang.Object@407c9004, java.lang.Object@238678b9, java.lang.Object@39e3bc0e, java.lang.Object@7ab70d17}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@3b9f0104, java.lang.Object@407c9004, java.lang.Object@238678b9, java.lang.Object@39e3bc0e, java.lang.Object@7ab70d17}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!eKcNk}*a+}F'UVt^";
      stringArray0[1] = ", high = ";
      stringArray0[2] = "!eKcNk}*a+}F'UVt^";
      stringArray0[3] = "!eKcNk}*a+}F'UVt^";
      String string0 = Utility.methodTypeToSignature("!eKcNk}*a+}F'UVt^", stringArray0);
      assertEquals("(L!eKcNk}*a+}F'UVt^;L,;L!eKcNk}*a+}F'UVt^;L!eKcNk}*a+}F'UVt^;)L!eKcNk}*a+}F'UVt^;", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      int int0 = 0;
      Utility.accessToString(0, false);
      String string0 = "";
      String string1 = "";
      boolean boolean0 = false;
      int int1 = 34;
      Attribute[] attributeArray0 = new Attribute[9];
      int int2 = (-4244);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      String string0 = " :0w7`j|,u+L/#ZD";
      try { 
        Utility.decode(" :0w7`j|,u+L/#ZD", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      stringArray0[3] = "class";
      stringArray0[4] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      boolean boolean0 = true;
      Utility.format(0, 0, true, '6');
      String string0 = null;
      LocalVariableTable localVariableTable0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "class", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = "YHy);=:^$p";
      try { 
        Utility.typeOfSignature("YHy);=:^$p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YHy);=:^$p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "T`$\\o#Xi6Y@Zg}Sm";
      try { 
        Utility.methodSignatureToString("T`$o#Xi6Y@Zg}Sm", "<7[]'QOh3EAX", "/U57+E", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T`$o#Xi6Y@Zg}Sm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.searchOpcode("{;Q?P[");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = Utility.format(91, 91, true, '7');
      assertEquals("9177777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "FP/NX}!.QG`Xp0&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.convertString("ENk 5;#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readBoolean();
      byteSequence0.mark(0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" h(0.Mlv");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " h(0.Mlv";
      objectArray0[1] = (Object) " h(0.Mlv";
      objectArray0[2] = (Object) " h(0.Mlv";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) " h(0.Mlv";
      objectArray0[5] = (Object) " h(0.Mlv";
      objectArray0[6] = (Object) " h(0.Mlv";
      objectArray0[7] = (Object) " h(0.Mlv";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "wide";
      try { 
        Utility.methodSignatureReturnType("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CIr;v!f\"$L", "CIr;v!f\"$L", "CIr;v!f\"$L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CIr;v!f\"$L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.setBit(0, 760);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[1] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[2] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[3] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[4] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[5] = ">P$No@PM:o\"L!EHD:Q";
      stringArray0[6] = "";
      stringArray0[7] = ">P$No@PM:o\"L!EHD:Q";
      Utility.methodTypeToSignature(">P$No@PM:o\"L!EHD:Q", stringArray0);
      try { 
        Utility.decode("}?j{gJASWL", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "aload_2";
      boolean boolean0 = true;
      Utility.compactClassName("aload_2", "aload_2", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("aload_2", "~(ohQ[<e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"~(ohQ[<e\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.compactClassName("oqX/7?0aOE5fjn|6f)Q");
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 1829;
      int int1 = 34;
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[6];
      int int2 = (-2703);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, (-2703));
      constantArray0[0] = (Constant) constantMethodHandle0;
      int int3 = 59;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 59);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic1 = null;
      try {
        constantInvokeDynamic1 = new ConstantInvokeDynamic(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
