/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:14:35 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getClassName();
      classReader0.readLong(137);
      Label[] labelArray0 = new Label[2];
      Label label0 = new Label();
      Label label1 = label0.successor;
      labelArray0[0] = null;
      Label label2 = label0.next;
      labelArray0[1] = null;
      // Undeclared exception!
      try { 
        classReader0.readLabel(137, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 137
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 271);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6144
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 4);
      // Undeclared exception!
      try { 
        classReader1.getSuperName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.getClassName();
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '_';
      classReader0.readConst(2, charArray0);
      classReader0.readShort(8);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(2);
      // Undeclared exception!
      try { 
        classReader1.accept((ClassVisitor) classWriter0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classReader0.getInterfaces();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      boolean boolean0 = ClassReader.WRITER;
      boolean boolean1 = ClassReader.WRITER;
      char[] charArray0 = new char[4];
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ClassReader.ANNOTATIONS;
      ClassWriter classWriter0 = new ClassWriter(1);
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      String string0 = classReader0.getSuperName();
      assertEquals(271, classReader0.header);
      assertEquals("java/lang/Object", string0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getInterfaces();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      ClassReader classReader2 = new ClassReader(classReader0.b);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      int int0 = classReader2.getItem(1);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(181);
      classWriter0.newUTF8("wheel.asm.Edge");
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 251658226);
      classReader0.readShort(181);
      Label label0 = new Label();
      Label label1 = label0.next;
      assertNull(label1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getInterfaces();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-122);
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      // Undeclared exception!
      try { 
        classReader1.accept((ClassVisitor) null, 157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(271, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(271);
      classReader0.copyPool(classWriter0);
      long long0 = classReader0.readLong(76);
      assertEquals(7955167841882829685L, long0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
      
      short short0 = classReader0.readShort(17);
      assertEquals((short)6151, short0);
      
      Label[] labelArray0 = new Label[12];
      Label label0 = classReader0.readLabel(2, labelArray0);
      assertNotNull(label0);
      
      labelArray0[0] = label0;
      Label label1 = label0.next;
      labelArray0[1] = null;
      Label label2 = classReader0.readLabel(2, labelArray0);
      assertSame(label2, label0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(181);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 251658240);
      classReader0.readShort(181);
      Label label0 = new Label();
      Label label1 = label0.next;
      assertNull(label1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 271);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classWriter0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 251658240);
      assertEquals(32, classReader0.getAccess());
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.next;
      assertNull(label1);
      
      String string0 = classReader0.getClassName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("wheel/asm/Edge", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals("java/lang/Object", string0);
      
      int int0 = 227;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 227, 208);
      assertEquals(32, classReader0.getAccess());
      assertEquals(183, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(32, classReader0.getAccess());
      assertEquals(183, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 198
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassReader.ANNOTATIONS;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = classReader0.getClassName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("wheel/asm/Edge", string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(8, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classWriter0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classAdapter0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      // Undeclared exception!
      try { 
        classReader0.readByte(2040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2040
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      ClassReader classReader1 = new ClassReader("java/lang/Throwable");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader1, 2);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classWriter1);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter1);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classAdapter2);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      
      classAdapter2.visitSource("java/lang/Throwable", "]Z\"vz})rgKQ,I9");
      assertEquals(33, classReader1.getAccess());
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classAdapter2, classAdapter1);
      assertNotSame(classAdapter2, classAdapter0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      
      ClassWriter classWriter2 = new ClassWriter(685);
      assertNotNull(classWriter2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      
      classReader0.accept((ClassVisitor) classWriter1, 156);
      assertEquals(32, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter1, classWriter2);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader2.getAccess());
      assertNotNull(classReader2);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(4463, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      
      // Undeclared exception!
      try { 
        classReader2.readInt((-198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -198
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "wheel.asm.Edge";
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(33, classReader1.getAccess());
      assertNotNull(stringArray0);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      // Undeclared exception!
      try { 
        classReader1.copyPool((ClassWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      
      String[] stringArray1 = classReader1.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertNotNull(stringArray1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      ClassWriter classWriter0 = new ClassWriter(464);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classReader0.readInt(464);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(2162691, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      classReader0.copyPool(classWriter0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassReader classReader2 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader2.getAccess());
      assertNotNull(classReader2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(464, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.FileFileFilter");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = ' ';
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(271, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 271);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classWriter0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classAdapter0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";d..8d1S");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader2 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader2.getAccess());
      assertNotNull(classReader2);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      
      ClassWriter classWriter1 = new ClassWriter(classReader2, 8);
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter1);
      ClassAdapter classAdapter2 = new ClassAdapter(classAdapter0);
      classAdapter2.visitSource(";d..8d1S", ";d..8d1S");
      ClassReader classReader3 = new ClassReader(classReader2.b);
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '0';
      charArray0[4] = '&';
      charArray0[5] = '8';
      classReader3.readConst((-3940), charArray0);
      int int0 = 21;
      classReader2.readInt(int0);
      ClassReader classReader4 = new ClassReader(classReader0.b);
      classReader4.readInt(classReader2.SKIP_CODE);
      classReader3.getInterfaces();
      int int1 = (-223);
      classReader0.readLong(int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(202);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classAdapter0.visitAnnotation("wheel.asm.Edge", false);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classAdapter0.visitSource("wheel.asm.Edge", "ibn");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 19);
      assertEquals(32, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Type.OBJECT;
      assertEquals(10, int0);
      
      int int1 = classReader0.readInt(11);
      assertEquals(32, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertFalse(int1 == int0);
      assertEquals(196631, int1);
      
      classReader0.accept((ClassVisitor) classWriter0, 11);
      assertEquals(32, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = classReader0.getAccess();
      assertEquals(32, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(32, int2);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals("java/lang/Object", string0);
      
      long long0 = classReader0.readLong(69);
      assertEquals(32, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals((-1095216371346L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals("java/lang/Object", string0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(9);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
      assertNotNull(classAdapter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      
      classAdapter0.visitSource("java/lang/Object", "LineNumberTable");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classAdapter0, classAdapter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter0.equals((Object)classAdapter1));
      
      ClassWriter classWriter2 = new ClassWriter(1384);
      assertNotNull(classWriter2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      
      classReader1.accept((ClassVisitor) classAdapter0, 2);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter2);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classAdapter0, classAdapter1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter0.equals((Object)classAdapter1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string1 = classReader1.getSuperName();
      assertEquals(33, classReader1.getAccess());
      assertNull(string1);
      assertEquals(927, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassVisitor classVisitor0 = null;
      // Undeclared exception!
      try { 
        classReader1.accept((ClassVisitor) null, 3290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals("java/lang/Object", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(56);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader1.accept((ClassVisitor) classWriter0, 271);
      assertEquals(33, classReader1.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String string2 = classReader0.getClassName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string2);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("wheel/asm/Edge", string2);
      
      ClassReader classReader2 = new ClassReader(classReader0.b);
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertNotNull(classReader2);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader2.header);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      
      String string3 = classReader2.getClassName();
      assertEquals(32, classReader0.getAccess());
      assertEquals(32, classReader2.getAccess());
      assertNotNull(string3);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader2.header);
      assertNotSame(classReader0, classReader2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("wheel/asm/Edge", string3);
      
      ClassReader classReader3 = new ClassReader(classReader1.b);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader3.getAccess());
      assertNotNull(classReader3);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(927, classReader3.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader1));
      
      int int0 = (-1695);
      int int1 = 1048575;
      ClassReader classReader4 = null;
      try {
        classReader4 = new ClassReader(classReader3.b, 1, 1048575);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46275
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(464, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(464, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter((-1860));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(464, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'e';
      charArray0[2] = 'A';
      charArray0[3] = 'o';
      charArray0[4] = '~';
      // Undeclared exception!
      try { 
        classReader0.readClass(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("java/lang/Object", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java/lang/Object");
      assertFalse(boolean0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("java/lang/Object", string1);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ClassWriter classWriter0 = new ClassWriter(50);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("toPBT@d+\"pV$'#j6g6", "toPBT@d+\"pV$'#j6g6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'toPBT@d+\"pV$'#j6g6.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals("java/lang/Object", string0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals("java/lang/Object", string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'N';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      // Undeclared exception!
      try { 
        classReader1.readConst(21, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("java/lang/Object", string0);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader1.equals((Object)classReader0));
      
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      String string1 = classWriter0.thisName;
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(33, classReader1.getAccess());
      assertNotNull(byteArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classAdapter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      classWriter1.visitInnerClass((String) null, "java/lang/Object", "java/lang/Object", (-2368));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      Item item0 = classWriter1.newClassItem("ON.");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader("oW8|0)U5nweL:Rc");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = classReader0.getClassName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string2);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("wheel/asm/Edge", string2);
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 2);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classAdapter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader1.equals((Object)classReader0));
      
      classReader0.copyPool(classWriter0);
      assertEquals(32, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Item item0 = classWriter0.newLong(4294967320L);
      assertEquals(33, classReader1.getAccess());
      assertNotNull(item0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = classWriter0.newField("Exceptions", "wheel/asm/Edge", "IL(nO");
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, int0);
      
      char[] charArray0 = null;
      classReader1.accept((ClassVisitor) classAdapter0, 1);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      int int1 = 54;
      // Undeclared exception!
      try { 
        classReader0.getItem(3418);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3418
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(464, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      String string0 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(464, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      
      ClassReader classReader1 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertEquals(1057, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(612, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertFalse(classReader1.equals((Object)classReader0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      ClassWriter classWriter0 = new ClassWriter(1097);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertEquals(1057, classReader1.getAccess());
      assertEquals(1057, classReader2.getAccess());
      assertNotNull(classReader2);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(612, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org/apache/commons/io/filefilter/AbstractFileFilter");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassReader.WRITER;
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = classReader1.getInterfaces();
      assertEquals(1057, classReader1.getAccess());
      assertNotNull(stringArray1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(612, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotSame(classReader1, classReader2);
      assertNotSame(classReader1, classReader0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(classReader1.equals((Object)classReader2));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      ClassReader classReader3 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader3.getAccess());
      assertNotNull(classReader3);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(464, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(464, classReader3.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader0));
      assertFalse(classReader3.equals((Object)classReader2));
      assertFalse(classReader3.equals((Object)classReader1));
      
      int int0 = 2416;
      // Undeclared exception!
      try { 
        classReader3.readUnsignedShort(2416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string0);
      
      String string1 = classReader0.getSuperName();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals("java/lang/Object", string1);
      
      ClassWriter classWriter0 = new ClassWriter(3598);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute[] attributeArray0 = new Attribute[0];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 1);
      assertEquals(32, classReader0.getAccess());
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader1.getAccess());
      assertNotNull(classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      
      boolean boolean2 = ClassReader.WRITER;
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertFalse(classReader0.equals((Object)classReader1));
      
      Attribute attribute0 = new Attribute("ConstantValue");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      classReader1.accept((ClassVisitor) classWriter0, attributeArray0, 3598);
      assertEquals(33, classReader1.getAccess());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(927, classReader1.header);
      assertNotSame(classReader1, classReader0);
      assertFalse(classReader1.equals((Object)classReader0));
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      boolean boolean1 = ClassReader.ANNOTATIONS;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Edge", "wheel.asm.Edge");
      assertNotNull(string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals("wheel.asm.Edge", string0);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classWriter1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[16];
      stringArray0[0] = " + +PyF&tZi6|ON";
      stringArray0[9] = "wheel.asm.Edge";
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.Edge");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      classReader0.accept((ClassVisitor) classWriter0, 203);
      assertEquals(32, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      String string1 = classWriter1.thisName;
      assertNull(string1);
      
      ClassWriter classWriter2 = new ClassWriter(1);
      assertNotNull(classWriter2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(byteArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classWriter1, classWriter0);
      assertNotSame(classWriter1, classWriter2);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter1);
      assertEquals(32, classReader0.getAccess());
      assertNotNull(classAdapter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertFalse(classWriter1.equals((Object)classWriter2));
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " + +PyF&tZi6|ON");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      char[] charArray0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray1 = classReader0.getInterfaces();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(stringArray1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = classReader0.getInterfaces();
      assertEquals(32, classReader0.getAccess());
      assertNotNull(stringArray2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string2 = "Signature";
      char[] charArray1 = new char[8];
      charArray1[0] = 'U';
      charArray1[1] = 'g';
      charArray1[2] = 'V';
      charArray1[3] = 'R';
      charArray1[4] = 'H';
      charArray1[5] = 'q';
      charArray1[6] = 'P';
      charArray1[7] = 'H';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
