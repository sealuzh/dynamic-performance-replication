/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 05:38:02 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("nop", false);
      Utility.format((-54), (byte)0, false, '3');
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteSequence1.readChar();
      ConstantUtf8.getInstance("-54");
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence3.available();
      Integer integer0 = new Integer('3');
      byteSequence3.readUnsignedByte();
      Utility.searchOpcode("g@H/BX9:22f u,y2");
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("6#F>YJJ3,ywQ5A$", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.setBit(1643, (byte) (-110));
      Utility.codeToString(byteSequence1, constantPool0);
      Utility.compactClassName("2<ZU(3.Gw[}v*{aA<Y", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Invalid signature: `";
      stringArray0[1] = "Invalid signature: `";
      stringArray0[2] = "Invalid signature: `";
      stringArray0[3] = "Invalid signature: `";
      stringArray0[4] = "Invalid signature: `";
      stringArray0[5] = "Invalid signature: `";
      String string0 = Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      assertEquals("(LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;)LInvalid;", string0);
      
      String string1 = Utility.methodSignatureToString("(LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;LInvalid;)LInvalid;", "newInvokeSpecial", "f", true);
      assertEquals("f Invalid newInvokeSpecial(Invalid arg1, Invalid arg2, Invalid arg3, Invalid arg4, Invalid arg5, Invalid arg6)", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      assertEquals("()LInvalid;", string0);
      
      Utility.methodSignatureToString("()LInvalid;", "Invalid signature: `", "impdep2", false);
      String string1 = Utility.printArray((Object[]) stringArray0, false, true);
      assertEquals("", string1);
      
      String string2 = Utility.methodSignatureToString("()LInvalid;", "^*FxBVv7IP!", "Warning: Padding byte != 0 in ");
      assertEquals("Warning: Padding byte != 0 in  Invalid ^*FxBVv7IP!()", string2);
      
      String string3 = Utility.fillup("3A*!%FLb~O.yt^FEZ", (-256), false, '`');
      assertEquals("3A*!%FLb~O.yt^FEZ", string3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence5 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      Utility.codeToString(byteSequence4, constantPool0, false);
      ByteSequence byteSequence6 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(57, 6);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence6, constantPool1, false);
      String string0 = "?%.Q9o";
      try { 
        constantPool1.constantToString((Constant) constantFieldref0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.typeOfSignature("The");
      boolean boolean0 = false;
      ConstantUtf8.getInstance("The");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("+WAUf{DY!h9C8I%ku!+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WAUf{DY!h9C8I%ku!+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ANSx");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "newarray");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)115);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte)115;
      byteArray1[5] = (byte)115;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read();
      Utility.encode(byteArray0, true);
      Utility.convertString("newarray");
      Utility.replace("lushr", "$l$8b$I$A$A$A$A$A$A$A", "lushr");
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      assertEquals("()LInvalid;", string0);
      
      String string1 = Utility.methodSignatureToString("()LInvalid;", "9\nAttribute(s):\n9\nAttribute(s):\n", "impdep2", false);
      assertEquals("impdep2 Invalid 9\nAttribute(s):\n9\nAttribute(s):\n()", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      byte byte0 = Utility.typeOfSignature("The");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$y$O$y$A", string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("int", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      int int0 = byteSequence4.read();
      assertEquals(105, int0);
      
      ByteSequence byteSequence5 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      String string2 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string2);
      
      Utility.signatureToString("S", true);
      String string3 = Utility.format((byte)14, 189, false, '3');
      assertEquals("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333314", string3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((byte)0);
      Utility.setBit((byte)0, (byte)0);
      String string0 = "P~!%.02MN%E^aE?";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P~!%.02MN%E^aE?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P~!%.02MN%E^aE?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      byte byte0 = Utility.typeOfSignature("The");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$h$O$h$A", string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("int", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      int int0 = byteSequence3.read();
      assertEquals(105, int0);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      String string2 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("", string2);
      
      Utility.signatureToString("S", true);
      String string3 = Utility.format((byte)14, 189, false, '3');
      assertEquals("333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333314", string3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)75;
      byteArray0[3] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.searchOpcode("RkwC/@r");
      byteSequence3.available();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.replace("\nAttributI(s):\n", "\nAttributI(s):\n", "short");
      String[] stringArray0 = new String[10];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      stringArray0[0] = "short";
      stringArray0[1] = "\nAttributI(s):\n";
      stringArray0[2] = "short";
      stringArray0[8] = "short";
      stringArray0[4] = "short";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray0, (int) (byte)0, (int) (byte)88);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.getSignature("$77~~");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = "Tce&x";
      Utility.searchOpcode("Tce&x");
      byteSequence1.available();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51379. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = Utility.decode("!$%%wFX -Id=", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("putstatic");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iconst_m1", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray0[5] = (byte) (-56);
      byteArray1[1] = (byte)92;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.compactClassName("nop");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(248, false);
      Utility.classOrInterface((byte) (-59));
      Utility.setBit(592, 195);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.compactClassName("StackMap(", "Double", false);
      String string0 = Utility.convertString("StackMap(");
      assertEquals("StackMap(", string0);
      
      byte[] byteArray1 = Utility.decode("`", false);
      String string1 = Utility.methodSignatureReturnType("StackMap(");
      assertEquals("short", string1);
      
      short short0 = Utility.searchOpcode("`");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-814), (-814));
      assertArrayEquals(new byte[] {(byte)96}, byteArray1);
      assertEquals("0:    iadd\n", string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "0:    iadd\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "`";
      objectArray0[3] = (Object) "~BF5z%,!#2M7!";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "t%5SQ";
      objectArray0[6] = (Object) "short";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "StackMap(";
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string3 = Utility.compactClassName("StackMap(", true);
      assertTrue(string3.equals((Object)string0));
      
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1258), (int) (short) (-1));
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string4 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iadd", string4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "short";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (int) (byte)30, false);
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.getSignature("$77~~");
      Utility.compactClassName("L$77~~;", "L$77~~;", false);
      byte[] byteArray0 = Utility.decode("QzXO03JH:e=rP$-md3L", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readChar();
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.classOrInterface((-1));
      Utility.setBit((-1), 753);
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)92;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      boolean boolean1 = false;
      boolean boolean2 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)59;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("$b2vv$b2v$b2$3b", false);
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      Utility.encode(byteArray1, false);
      Utility.accessToString(1941);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 118
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence0.close();
      byteSequence0.readByte();
      byteSequence1.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.fillup("nop", (-1197), false, 'w');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 393, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.getSignature("\nAttribute(s):\n");
      Utility.convertString("LAttribute(s):;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-100);
      constantPool2.setConstantPool(constantArray0);
      byteArray0[0] = (byte) (-100);
      byteArray0[2] = (byte)17;
      byteArray0[7] = (byte)87;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-54);
      Utility.fillup("LAttribute(s):;", (-1424), false, '?');
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 130, 130);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte) (-68);
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte) (-68);
      byteArray1[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      byteSequence0.readChar();
      byteSequence0.markSupported();
      byteSequence0.readBoolean();
      Utility.encode(byteArray1, false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$77~~");
      Utility.getSignature("$77~~");
      byte byte0 = (byte)122;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.close();
      byteSequence0.available();
      byte[] byteArray1 = Utility.decode("dreturn", false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence2);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence4, constantPool0, false);
      assertEquals("isub", string0);
      
      ByteSequence byteSequence5 = new ByteSequence(byteArray1);
      byteSequence4.available();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.compactClassName("cIqCi3 gaB", "dreturn", false);
      assertEquals("cIqCi3 gaB", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N]BcPDvEC=");
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      Utility.printArray((Object[]) localVariableArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N]BcPDvEC=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N]BcPDvEC='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)75;
      String string0 = "bZg,'q";
      byte[] byteArray1 = Utility.decode("bZg,'q", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence0.available();
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = "class";
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)15;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byte[] byteArray1 = Utility.decode("q$^j&L\"o~p|)", false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.available();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("if_icmpeq");
      String string1 = Utility.codeToString(byteSequence3, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)117;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("u$Au$A$A$fb$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-5), 68);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(90, 3123);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.fillup("caload", (byte) (-5), false, 'u');
      byte[] byteArray1 = Utility.decode("u$Au$A$A$fb$A$A$A$A", false);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte)117, (byte)0, (byte)0, (byte) (-5), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Utility.setBit(1143, 76);
      int int0 = Utility.setBit(1483, 1483);
      assertEquals(3531, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("dstore_2");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 218, (-3023), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.replace("\nAttribute(s):\n", "\nAttribute(s):\n", "\nAttribute(s):\n");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      ConstantPool constantPool1 = constantPool0.copy();
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      ConstantUtf8.getInstance("\nAttribute(s):\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string0 = "w:v1=+J???W";
      Utility.searchOpcode("w:v1=+J???W");
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "anewarray");
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.fillup("V", 159, true, 'K');
      // Undeclared exception!
      try { 
        Utility.decode("$1Uoi8Nf48", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-125);
      byteArray0[0] = (byte) (-125);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.close();
      byteSequence0.skipBytes((byte) (-125));
      try { 
        byteSequence0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#23460", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("LG;");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      Utility.signatureToString("LG;", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)54;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.compactClassName("LG;");
      try { 
        Utility.methodSignatureArgumentTypes("G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("The FileFilter must not be null", false);
      Utility.format((-54), (byte)0, false, '3');
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantUtf8.getInstance("}|\".2MC!]-WOKMa");
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence1.markSupported();
      byteSequence3.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.searchOpcode("g@H/BX9:22f u,y2");
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("}|\".2MC!]-WOKMa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }|\".2MC!]-WOKMa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skip(0L);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("K{/DGw`@G|A", false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "VAEo5e~:Dh<bbfW:q";
      Utility.compactClassName("p]ZVQ?*G.A~!X{y", "VAEo5e~:Dh<bbfW:q", true);
      Utility.searchOpcode("\r");
      Utility.compactClassName("p]ZVQ?*G.A~!X{y", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)39, (int) (byte)39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.replace("\nAttribute(s):\n", "\nAttribute(s):\n", "\nAttribute(s):\n");
      Utility.convertString("\nAttribute(s):\n");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-91);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 19, (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)23;
      ConstantClass constantClass0 = new ConstantClass(173);
      Constant[] constantArray0 = new Constant[15];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      constantClass0.setNameIndex((byte)50);
      ClassPath classPath1 = new ClassPath(classPath0, "ZNS,:2kEi");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Object> class0 = Object.class;
      classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.getClassPath();
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2s", "\"7Y#N~J;ky[Qjx", "i2s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("h$t$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1166L));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.fillup("org.apache.bcel.classfile.Constant$1", 92, false, 'u');
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuorg.apache.bcel.classfile.Constant$1", string1);
      
      byte[] byteArray1 = Utility.decode("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuorg.apache.bcel.classfile.Constant$1", false);
      assertEquals(90, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      Utility.fillup("bN~^V-rf~d", (byte)64, true, '^');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.fillup("getfield", (byte)63, true, 'o');
      Utility.accessToString((int) (byte)64);
      Utility.getSignature("volatile");
      LocalVariableTable localVariableTable0 = new LocalVariableTable(213, 82, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("[]", "q4p'~*}QwJZi-r", "EQI*'FS?", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Utility.typeOfSignature("L]L<Z;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.convertString("if_icmple");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)122;
      byteArray1[6] = (byte)122;
      byteArray1[7] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('p');
      Utility.format(88, 88, true, 'p');
      ConstantClass constantClass0 = new ConstantClass(92);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.available();
      byteSequence0.read(byteArray0, (int) (short)0, (int) (byte)0);
      constantClass0.setNameIndex(0);
      constantClass0.setNameIndex(125);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) constantClass0;
      objectArray0[1] = (Object) constantClass0;
      try { 
        Utility.typeOfSignature("88pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 88pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-85);
      int int0 = 161;
      Utility.setBit(161, (byte) (-85));
      ConstantClass constantClass0 = new ConstantClass((byte) (-85));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)23;
      ConstantClass constantClass0 = new ConstantClass(173);
      Constant[] constantArray0 = new Constant[15];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      constantClass0.setNameIndex((byte)50);
      ClassPath classPath1 = new ClassPath(classPath0, "ANSx:2kEi");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.getClassPath();
      ClassPathRepository classPathRepository0 = new ClassPathRepository((ClassPath) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2s", "\"7Y#N~J;ky[Qjx", "i2s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("C^{p%", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-104);
      Utility.accessToString((int) (byte)101);
      Utility.classOrInterface(2121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2653));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(84);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("A oAx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A oAx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.compactClassName("");
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-14);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 106, true);
      assertEquals("0:    nop\n1:    dstore_2\n2:    iload_1\n3:    d2i\n4:    lconst_1\n5:    <illegal opcode>\n6:    nop\n7:    nop\n8:    nop\n", string1);
      
      Utility.methodSignatureReturnType("L;", true);
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XJX<w,.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XJX<w,.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("irem");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "-N ", "C-DPo~GM^a3I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.getSignature("$77~~");
      assertEquals("L$77~~;", string0);
      
      Utility.compactClassName("L$77~~;", "L$77~~;", false);
      byte[] byteArray0 = Utility.decode("QzXO03JH:e=rP$-md3L", false);
      Utility.searchOpcode("*g|=^s");
      Utility.compactClassName("t#(", "\"", false);
      Utility.compactClassName("", "$77~~", false);
      String string1 = Utility.compactClassName("java.lang.", "t~]n=", false);
      assertEquals("java.lang.", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1), false);
      assertEquals("0:    fastore\n1:    ishr\n2:    pop2\n3:    iastore\n4:    faload\n5:    baload\n6:    dstore_3\n7:    dstore_1\n8:    astore\t\t%101\n10:   istore_2\n11:   frem\n12:   lastore\n13:   nop\n14:   ldiv\n15:   isub\n16:   baload\n17:   astore_1\n", string2);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-95);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence1.readFloat();
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.decode("!$%%wFX -Id=", false);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("!$%%wFX -Id=", false);
      assertEquals(11, byteArray1.length);
      
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("i2f", "i2f", true);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("p]ZVQ?*G.A~!X{y");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.compactClassName("new", true);
      assertEquals("new", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.getSignature("a*F*Ab.UuyW{");
      Utility.convertString("a*F*Ab.UuyW{");
      byte[] byteArray0 = Utility.decode("a*F*Ab.UuyW{", false);
      Utility.compactClassName("t%5SQ", false);
      Utility.searchOpcode("La*F*Ab/UuyW{;");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        byteSequence1.read(byteArray0, (int) (byte)102, (int) (byte)50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.getSignature("a*F*Ab.UuyW{");
      Utility.convertString("dconst_1");
      byte[] byteArray0 = Utility.decode("dconst_1", false);
      Utility.compactClassName("t%5SQ", false);
      Utility.searchOpcode("La*F*Ab/UuyW{;");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.getSignature("\nAttribute(s):\n");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[3] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.readInt();
      byteSequence0.mark((-637));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("\nAttribute(s):\n");
      Utility.searchOpcode("invokespecial");
      Utility.accessToString(1116, true);
      Utility.fillup("M,m1Eq", 1348, true, '9');
      try { 
        Utility.decode("hsAR", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b(4OwHZ,");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.searchOpcode("b(4OwHZ,");
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.convertString("\nAttibute(2]:\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\nAttibute(2]:\n";
      Utility.compactClassName("\nAtt\\ibute(2]:\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lb#'F3@CD/NQw|q,'");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("\nAttibute(2]:\n");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), 6, true);
      try { 
        Utility.methodSignatureReturnType("lb#'F3@CD/NQw|q,'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lb#'F3@CD/NQw|q,''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-91));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("if_acmpeq\t\t#-25856", false);
      assertEquals(18, byteArray1.length);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-101);
      byteArray2[1] = (byte)37;
      byteArray2[2] = (byte) (-91);
      byteArray2[3] = (byte) (-101);
      byteArray2[4] = (byte)8;
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("iflt\t\t#9637", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.convertString("\nAttibute(2]:\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\nAttibute(2]:\n";
      Utility.compactClassName("\nAtt\\ibute(2]:\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lb#'F3@CD/NQw|q,'");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("\nAttibute(2]:\n");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.signatureToString("C^{p%", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName("");
      Utility.getSignature("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 106, true);
      assertEquals("0:    nop\n1:    dup2\n2:    iload_1\n3:    d2i\n4:    lconst_1\n5:    nop\n", string0);
      
      String string1 = Utility.methodSignatureReturnType("L;", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)65;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[3] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-55);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-67);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-55));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), 211);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    wide\t(wide)\n4:    aload_0\n5:    nop\n6:    aload_0\n7:    lstore\t\t%48384\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.getSignature("\nAttribute(s):\n");
      Utility.convertString("LAttribute(s):;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      constantPool1.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.getSignature("\nAttribute(s):\n");
      Utility.convertString("LAttribute(s):;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Constant[] constantArray1 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-100), (byte) (-100));
      constantArray1[0] = (Constant) constantMethodref0;
      constantPool0.setConstantPool(constantArray1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-85);
      Utility.setBit(161, (byte) (-85));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-103);
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte) (-103);
      byteArray1[7] = (byte) (-103);
      byteArray1[8] = (byte) (-77);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(161, (byte) (-77), localVariableArray0, constantPool1);
      try { 
        Utility.methodSignatureToString("'6etYZQOv^", "'6etYZQOv^", "invokestatic", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '6etYZQOv^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.convertString("if_icmple");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)0;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-72), (byte)123, (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("if_icmple", (String) null, "if_icmple", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribute(s):\n");
      assertEquals("\\nAttribute(s):\\n", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\nAttribute(s):\n";
      String string1 = Utility.compactClassName("\nAttribute(s):\n");
      assertEquals("\nAttribute(s):\n", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("4e 46 c1 a2 5c 2e", string2);
      
      Utility.accessToString(80);
      String string3 = Utility.classOrInterface(77);
      assertEquals("class", string3);
      
      String string4 = Utility.accessToString(80);
      assertEquals("final volatile", string4);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("!$%%wFX -Id=", false);
      assertEquals(11, byteArray1.length);
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmplt\t\t#706", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("r8(h#.uW-8l/Zx", "r8(h#.uW-8l/Zx", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 200;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 185, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature("@<7~~y=;vE", (String[]) null);
      Integer integer0 = new Integer(57);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      
      byte byte0 = Utility.typeOfMethodSignature("()L@<7~~y=;vE;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-1514));
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.compactClassName("caload", true);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(139);
      // Undeclared exception!
      try { 
        Utility.signatureToString("caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `caload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("imul", ", npairs = ", ";^}2~");
      assertEquals("imul", string0);
      
      String string1 = Utility.compactClassName("!$%%wFX -Id=", "JX?@X", false);
      assertEquals("!$%%wFX -Id=", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.fillup(">@a1z", 157, false, 'c');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("*-5&%)iR8[OQmc-H", "YHY&GrL?We=n~,x", false);
      Utility.classOrInterface((byte)63);
      try { 
        Utility.typeOfSignature(">@a1z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >@a1z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = Utility.decode("!$%%wFX -Id=", false);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("G");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      constantPool0.setConstantPool(constantArray0);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)15;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.compactClassName("G");
      assertEquals("G", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = Utility.setBit(1374, 194);
      assertEquals(1374, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-32);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("2d e0 00 31 89 9e", string2);
      
      String string3 = Utility.classOrInterface((byte) (-98));
      assertEquals("interface", string3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.setBit((-1027), 14);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-63));
      byteSequence0.available();
      byteSequence0.available();
      byteSequence0.available();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-120);
      byteArray1[1] = (byte) (-120);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.methodTypeToSignature("l2i", (String[]) null);
      assertEquals("()Ll2i;", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes(99);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("<", false);
      Utility.classOrInterface((byte)76);
      String string0 = "5s>`+)ot0";
      // Undeclared exception!
      try { 
        Utility.signatureToString("5s>`+)ot0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5s>`+)ot0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-56);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E_,PGh+L1");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read(byteArray0);
      byteSequence0.markSupported();
      byteSequence1.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)100, 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      byteSequence0.markSupported();
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1722862397), (int) (byte)90, false);
      assertEquals("0:    i2b\n1:    ddiv\n2:    dup_x1\n3:    dup_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2112, 1475, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte) (-121);
      byteArray1[4] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skipBytes((-2055));
      Utility.compactClassName("# {ffEx[q&au#I", true);
      byteSequence0.available();
      Utility.printArray((Object[]) null, false, false);
      Utility.classOrInterface(105);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(954, 80, (LocalVariable[]) null, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("# {ffEx[q&au#I", (String) null, (String) null, true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      assertEquals("L<;", string0);
      
      int int0 = Utility.setBit(168, 91);
      assertEquals(134217896, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("63 00 00", string1);
      
      String string2 = Utility.classOrInterface(134217896);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("'", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 863, 230, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid constant pool reference: ");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      assertEquals("b(4OwHZ,", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("*K]ly>", true);
      assertEquals("*K]ly>", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byteSequence0.readUTF();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-74));
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((byte) (-107));
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("fcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fcmpl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "5?\\+!B@psh.'9xb`>m";
      try { 
        Utility.typeOfSignature("5?+!B@psh.'9xb`>m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5?+!B@psh.'9xb`>m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(66);
      Utility.codeToString(byteSequence1, constantPool0, false);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2858, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("zovdxrB+j%k}");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("java.lang.r';TgsLAgw^whRO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.r';TgsLAgw^whRO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)46;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-89), 10);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-16726", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lxor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lxor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("zovdxrB+j%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zovdxrB+j%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool2, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-54), 1405);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iushr
         // 1:    sipush\t\t5258
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      Utility.compactClassName("# {ffEx[q", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.compactClassName("r8(h#.uW-8~/Zx", "r8(h#.uW-8~/Zx", true);
      assertEquals("r8(h#.uW-8~.Zx", string0);
      
      String string1 = Utility.convertString(")zJJ*zV^6s]/B)]~1z");
      assertEquals(")zJJ*zV^6s]/B)]~1z", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string2 = Utility.fillup("|m-klpZNd", 171, true, ']');
      assertEquals("|m-klpZNd]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "*K]ly>";
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Utility.clearBit(67, 67);
      assertEquals(67, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%0\t0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("84 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "E_,PGh+L1";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-56);
      byteSequence0.read(byteArray1);
      byteArray1[2] = (byte)32;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read(byteArray1);
      byteSequence0.markSupported();
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("ifeq\t\t#-18618", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4;OwHZ,");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$c>s1C");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte) (-113);
      byteArray1[4] = (byte) (-113);
      byteArray1[5] = (byte) (-56);
      byteArray1[6] = (byte) (-113);
      byteArray1[7] = (byte) (-113);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.read(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.markSupported();
      byteSequence1.available();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.zovdxrB+j%k}", "En{%", "anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.zovdxrB+j%k}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("MXruOQb7!.gq", "impdep1", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence1.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence1.available();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("IZ^b,7{@e{)7v;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Utility.searchOpcode("am[AV[RHFc::4`l^N_^");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokedynamic", "org.apache.bcel.classfile.ConstantValue", "E\"|S`(hK^lv'WDf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[1];
      Utility.equals(byteArray1, byteArray1);
      int int0 = 1039;
      Utility.isSet(108, 1039);
      try { 
        Utility.methodSignatureToString("", "nop", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t<");
      Utility.setBit(168, 91);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-75);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)107;
      byteArray1[2] = (byte)107;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("java.lang.", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("if_icmple");
      Utility.searchOpcode("b(4OwHZ,");
      try { 
        Utility.typeOfSignature("X{+gfAurr~,J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X{+gfAurr~,J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      assertEquals("b(4OwHZ,", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ConstantPool constantPool3 = constantPool2.copy();
      Utility.codeToString(byteSequence0, constantPool3, true);
      boolean boolean0 = Utility.isSet(4031, (byte)41);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byte byte0 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)33;
      byte byte1 = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-81);
      Utility.encode(byteArray0, true);
      Utility.isSet((byte)0, 3690);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-81);
      objectArray0[1] = (Object) (byte)56;
      objectArray0[2] = (Object) (byte) (-66);
      objectArray0[3] = (Object) (byte)56;
      objectArray0[4] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte)57;
      objectArray0[7] = (Object) (byte)57;
      Utility.printArray(objectArray0);
      Utility.compactClassName(" extends ", true);
      try { 
        Utility.typeOfSignature("6<MgLmQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6<MgLmQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.replace("J0zE[`i9", "org.apache.commons.io.filefilter.FileFileFilter", "\b");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = (byte)16;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-78);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.accessToString((int) (byte) (-78), false);
      Utility.format(354, 11, true, ']');
      try { 
        byteSequence0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2524), (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup2
         // 1:    bastore
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("invokestatic", "invokestatic", "invokestatic");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)102;
      byteArray0[7] = (byte) (-1);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("INSENSITIVE");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("*K]ly>", "*K]ly>", "b(4OwHZ,");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "(D2Md`i,";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((-2119));
      byteSequence1.markSupported();
      byteSequence1.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("if_icmpne\t\t#24900");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)68;
      byteArray1[6] = (byte) (-96);
      byteArray1[7] = (byte) (-96);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_icmpne\t\t#24900", "ifnonnull", "if_icmpne\t\t#24900");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne\t\t#24900
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.replace("{<[JHrA[HG", "{<[JHrA[HG", "{<[JHrA[HG");
      assertEquals("{<[JHrA[HG", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#27814", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("invokestatic", "invokestatic", "invokestatic");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("nop");
      try { 
        Utility.typeOfSignature("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      Utility.compactClassName("G");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("'ER");
      assertEquals("'ER", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.convertString("if_icmple");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("if_icmple", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmple'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Object object0 = new Object();
      byte byte0 = (byte)4;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L]L<Z;";
      stringArray0[1] = "L]L<Z;";
      stringArray0[3] = "L]L<Z;";
      stringArray0[4] = "L]L<Z;";
      stringArray0[6] = "";
      stringArray0[7] = "L]L<Z;";
      stringArray0[8] = "L]L<Z;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-800));
      byteSequence0.markSupported();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("(l$:g7+MX{NCDq");
      assertEquals("(l$:g7+MX{NCDq", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.replace("ifle\t\t#9002", ", npairs = ", "org.apache.bcel.classfile.ExceptionTable");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName(", npairs = ", ", npairs = ", false);
      assertEquals(", npairs = ", string2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f+zeA$d?,ZxhZ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "f+zeA$d?,ZxhZ";
      objectArray0[1] = (Object) "-h)~vP0$a";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) "-h)~vP0$a";
      PrintWriter printWriter0 = mockPrintWriter0.format("-h)~vP0$a", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(printWriter0, objectArray1);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[0] = (byte)39;
      byteArray0[3] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = (byte) (-115);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      String string0 = "Invalid method signature: ";
      Utility.compactClassName("Invalid method signature: ", true);
      String string1 = "j9FL'^]> aL,)cme_E";
      Utility.getSignature("j9FL'^]> aL,)cme_E");
      Utility.convertString("class");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y1[K0l", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y1[K0l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.clearBit(67, 67);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-124);
      Utility.classOrInterface((-1537));
      Utility.compactClassName("", ">", false);
      try { 
        Utility.methodSignatureToString("", "935u-MLhFmquq_", ">", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.typeOfSignature("NTSF0^ozX<9>XCwM\"RC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NTSF0^ozX<9>XCwM\"RC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.compactClassName("~BF5z%,!#2M7!", "]L<Z", false);
      String string0 = Utility.convertString("]L<Z");
      assertEquals("]L<Z", string0);
      
      byte[] byteArray0 = Utility.decode("~BF5z%,!#2M7!", false);
      String string1 = Utility.compactClassName("t%5SQ", false);
      assertEquals("t%5SQ", string1);
      
      Utility.searchOpcode("~BF5z%,!#2M7!");
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
      assertEquals("0:    iand\n1:    lstore_3\n2:    fstore_3\n3:    saload\n4:    ishr\n5:    fload_3\n6:    aload_2\n7:    lload_3\n8:    fload_1\n9:    aaload\n10:   astore_2\n11:   lstore\t\t%33\n", string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "t%5SQ";
      objectArray0[1] = (Object) "]L<Z";
      objectArray0[2] = (Object) "t%5SQ";
      objectArray0[3] = (Object) "t%5SQ";
      objectArray0[4] = (Object) "~BF5z%,!#2M7!";
      objectArray0[5] = (Object) "0:    iand\n1:    lstore_3\n2:    fstore_3\n3:    saload\n4:    ishr\n5:    fload_3\n6:    aload_2\n7:    lload_3\n8:    fload_1\n9:    aaload\n10:   astore_2\n11:   lstore\t\t%33\n";
      objectArray0[6] = (Object) "]L<Z";
      objectArray0[7] = (Object) "~BF5z%,!#2M7!";
      objectArray0[8] = (Object) null;
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{t%5SQ, ]L<Z, t%5SQ, t%5SQ, ~BF5z%,!#2M7!, 0:    iand\n1:    lstore_3\n2:    fstore_3\n3:    saload\n4:    ishr\n5:    fload_3\n6:    aload_2\n7:    lload_3\n8:    fload_1\n9:    aaload\n10:   astore_2\n11:   lstore\t\t%33\n, ]L<Z, ~BF5z%,!#2M7!, null}", string3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      Utility.setBit(99, (-1370));
      Utility.classOrInterface(14);
      Utility.compactClassName("t8$bRpNyKztfX/", ">", false);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.getSignature("StackMap(");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.decode("java.ext.dirs", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.searchOpcode("athrow");
      Utility.compactClassName("6}J7]E", "6}J7]E", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)37;
      Utility.encode(byteArray0, false);
      Utility.replace("6}J7]E", "$cc$f0$7c$e3$a8$5d$r", "$cc$f0$7c$e3$a8$5d$r");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-29), 3);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.getSignature("]L<Z");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      String string0 = "arraylength";
      Utility.compactClassName("arraylength", "L]L<Z;", false);
      Utility.decode("QzXO03JH:e=rP$-md3L", false);
      try { 
        Utility.typeOfSignature("*g|=^s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g|=^s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("(p<%cmHYkg", "s<j&)$+^B", true);
      Utility.decode("s<j&)$+^B", false);
      try { 
        Utility.typeOfSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Yj`bnFL3D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yj`bnFL3D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.getSignature("eL<Z");
      Utility.setBit((-1926), 38);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)5;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.fillup("", (-510), true, 'w');
      Utility.compactClassName("", "", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "Ke@lhS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("org.apache.bcel.classfile.ParameterAnnotations", "t%5SQ", true);
      Utility.convertString("t%5SQ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)121;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Utility.typeOfSignature("L]L<Z;");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("L]L<Z;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L]L<Z;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.classOrInterface((-2057));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2057), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.getSignature("G");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("G");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LI,w`ph'BJe6@VU3T<;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LI,w`ph'BJe6@VU3T<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J):%");
      mockFile0.setWritable(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      String string0 = Utility.fillup("", 127, true, '+');
      assertEquals("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte) (-127);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("2f 01 59 56 66 ac 88 52 81", string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Utility.typeOfSignature("L]L<Z;");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)80;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byte byte1 = (byte)16;
      byteArray0[2] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (int) (byte)16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "[L<*cb&6-3RT<CjQT";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("[L<*cb&6-3RT<CjQT");
      byte[] byteArray0 = new byte[1];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.getSignature("]L<Z");
      Utility.typeOfSignature("L]L<Z;");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      try { 
        Utility.methodSignatureReturnType("L]L<Z;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L]L<Z;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-81);
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      int int0 = 81;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 765, 108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      String string1 = Utility.fillup("L;", 1, true, 's');
      String string2 = Utility.compactClassName("L;", "", false);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.signatureToString("L;", false);
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteSequence0, byteSequence0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte)43;
      byteArray1[5] = (byte) (-91);
      byteArray1[6] = (byte) (-91);
      byteArray1[7] = (byte)103;
      byteArray1[8] = (byte) (-91);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string4 = Utility.methodSignatureReturnType("L;");
      assertEquals("", string4);
      
      String string5 = Utility.convertString("");
      assertTrue(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.replace("G", "G", "G");
      assertEquals("G", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      int int0 = Utility.clearBit((byte) (-88), 159);
      assertEquals(2147483560, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "The filter must not be null";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_3
         // 1:    dastore
         // 2:    dload_2
         // 3:    istore\t\t%214
         // 5:    dsub
         // 6:    fcmpg
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      String string0 = "The filter must not be null";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("ZZ7xCg\"z*`", stringArray0);
      Integer integer0 = new Integer((-672));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      byte byte1 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte) (-43);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-43);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-6);
      Utility.encode(byteArray1, true);
      int int0 = 248;
      Utility.clearBit(248, (byte)0);
      String string1 = "dcmpg";
      String string2 = ":\"-ova91FO";
      int int1 = 2535;
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      int int2 = (-3211);
      MockFile mockFile0 = new MockFile("", "ZZ7xCg\"z*`");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ":\"-ova91FO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \":\"-ova91FO\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)57;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dstore\t\t%146", string1);
      
      String string2 = Utility.replace("\t\t<", "ifnull", "ifnull");
      assertEquals("\t\t<", string2);
      
      int int0 = Utility.clearBit((byte)57, 753);
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('G');
      Utility.format(45, 450, true, 'C');
      ConstantClass constantClass0 = new ConstantClass((-565));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readBoolean();
      Utility.compactClassName("istore_3");
      Utility.searchOpcode("");
      try { 
        Utility.methodSignatureArgumentTypes("s$TLv2F5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s$TLv2F5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (-755), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifle");
      assertEquals((short)158, short0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpge\t\t#26114", string0);
      
      String string1 = Utility.compactClassName("Bv");
      assertEquals("Bv", string1);
      
      short short1 = Utility.searchOpcode("Fsmh9WG%P}pGY>Us");
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = Utility.clearBit((-5483), (-5483));
      assertEquals((-2102635), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((-1843239404));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("*Z#&*q|od4", "void", "I%Ee7p[$39B'gGC\"B");
      assertEquals("*Z#&*q|od4", string0);
      
      String string1 = Utility.convertString("9");
      assertEquals("9", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1816, 1001, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      assertTrue(boolean0);
      
      String string0 = Utility.format(88, 88, true, 'C');
      assertEquals("88CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      
      ConstantClass constantClass0 = new ConstantClass(69);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("");
      short short0 = Utility.searchOpcode("\t(wide)");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)7;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)4;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      String string0 = Utility.accessToString((int) (byte)0);
      assertEquals("", string0);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "(", true);
      URI uRI0 = MockURI.aHttpURI;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", " fH N+$grU#(", "CONSTANT_NameAndType");
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.encode(byteArray0, true);
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.getSignature("");
      Utility.fillup("L;", 1, true, 's');
      Utility.format(75, (-1088), false, ',');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LVl(&;;V";
      stringArray0[1] = "LVl(&;;V";
      stringArray0[2] = "";
      stringArray0[3] = "75";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("short");
      byteSequence0.mark((byte)76);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-69);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-69));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantLong0.clone();
      constantArray0[2] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte) (-50);
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte) (-60);
      byteArray1[7] = (byte) (-50);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)90;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.getSignature("\nAttribute(s):\n");
      assertEquals("LAttribute(s):;", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\nAttribute(s):\n";
      objectArray0[1] = (Object) "\nAttribute(s):\n";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"\nAttribute(s):\n\", \"\nAttribute(s):\n\"", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.replace("<),n48", "<),n48", "C:0}%N5uTa");
      assertEquals("C:0}%N5uTa", string2);
      
      int int0 = Utility.clearBit((byte)0, (byte)2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("invokestatic", "invokestatic", "invokestatic");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("d2i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart(';');
      Utility.replace("Invalid method signature: ", "d8~Of;:MH@#GziZ(i", "-zh&OHIm<\"");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.getSignature("");
      Utility.fillup("L;", 1, true, 's');
      Utility.typeOfSignature("D[y+Spr3OIY+df");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstant((-338), (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -338. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("G");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("\n", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(159, 183);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 184, 166, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("k-mGDaC");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-75), (byte) (-99));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-75), (byte) (-75));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantString constantString0 = new ConstantString((byte) (-75));
      constantArray0[3] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((-2171));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
      
      int int0 = Utility.clearBit((byte)55, (-3356));
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (-755), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((-9L));
      String string0 = Utility.convertString("org.apache.bcel.Constants");
      assertEquals("org.apache.bcel.Constants", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantLong0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Long[5](bytes = -9)\", \"CONSTANT_Long[5](bytes = -9)\", \"CONSTANT_Long[5](bytes = -9)\"", string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "=&>;5Og";
      Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Utility.convertString("d2i");
      byte byte0 = (byte) (-69);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.convertString("\nAttribute(s):\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\nAttribute(s):\n";
      Utility.compactClassName("\nAttribute(s):\n");
      Utility.convertString("d2i");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(320, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("G");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-69);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-69));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantLong0.clone();
      constantArray0[2] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 6, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 6:    aload_0
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.clearBit((-648), (-648));
      Utility.isJavaIdentifierPart('K');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 634, 232, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      String string0 = "The filter must not be null";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byte byte1 = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.getSignature("\nAttribute(s):\n");
      Utility.convertString("LAttribute(s):;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("p-@2ux!IHBYoPdD?", "ifge\t\t#24337", "9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p-@2ux!IHBYoPdD?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.getSignature("");
      Utility.fillup("L;", 1, true, 's');
      Utility.format(75, (-1088), false, '^');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "LVl(&;;V";
      stringArray0[2] = "";
      stringArray0[3] = "75";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("c+3(4j");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-42);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 158, 158, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Integer integer0 = new Integer((-275));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-60);
      Utility.isJavaIdentifierPart('A');
      try { 
        Utility.typeOfSignature("H{Qk<3%q/;t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H{Qk<3%q/;t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Utility.convertString("d2i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart(';');
      String string1 = Utility.replace("Invalid method signature: ", "d8~Of;:MH@#GziZ(i", "-zh&OHIm<\"");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "ZZ7xCg\"z*`";
      boolean boolean0 = true;
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-50);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1405), 1, false);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((-9L));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-66);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-960), false);
      try { 
        Utility.methodSignatureArgumentTypes("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-69);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-69));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[2] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 6, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 7:    fastore
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-54);
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-69);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-69));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[2] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)42;
      byteArray0[6] = (byte) (-69);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore\t\t%0", string0);
      
      String string1 = Utility.replace("\"", ", ", "boolean");
      assertEquals("\"", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-54);
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      byteSequence0.mark(2642);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sipush\t\t-28114", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      String string0 = Utility.methodTypeToSignature("ZZ7xCg\"z*`", stringArray0);
      assertEquals("(LZZ7xCg\"z*`;ZZLThe;Z)LZZ7xCg\"z*`;", string0);
      
      Integer integer0 = new Integer((-672));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString(296, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(296, 29);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantInteger constantInteger0 = new ConstantInteger((-1454));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-54);
      byteArray0[1] = (byte)42;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)59;
      byteArray1[5] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.compactClassName("G");
      assertEquals("G", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dcmpl", string2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1020), (int) (byte) (-64), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      try { 
        Utility.typeOfSignature("-)\"S+-<!vV[j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -)\"S+-<!vV[j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("\tdefault = ");
      assertEquals("\tdefault = ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%254", string1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("G");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)126;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-105), (int) (byte) (-56), true);
      String string0 = "java.lang.Long";
      Utility.compactClassName("($l$8b$I$A$A$A$A$A$A$A", false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(296, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      String string0 = "";
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte) (-4);
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte)102;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2245, (int) (byte) (-4), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(320, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature("##2F=d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ##2F=d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('`');
      Utility.format(73, 73, true, 'C');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-685), (int) (byte) (-96), false);
      try { 
        Utility.methodSignatureArgumentTypes("Rup*ETJ3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rup*ETJ3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-110));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence0.readInt();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.setBit(0, 3505);
      try { 
        Utility.typeOfMethodSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)4;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)0);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "(", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8BmoLVzW9", "$l$8b$I$A$A$A$A$A$A$A", "'V3e5)U#63s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8BmoLVzW9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-54);
      byteArray0[1] = (byte)47;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = "\tdefault = ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\tdefault = ");
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(181, 184);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.clone();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-12), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.replace("\nAttribute(s):\n", "\nAttribute(s):\n", "iSvokestatic");
      assertEquals("iSvokestatic", string0);
      
      Utility.replace("D", "\nAttribute(s):\n", "\nAttribute(s):\n");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("iSvokestatic");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)46, (byte)52);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)26);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$$$w$w4$w$w$g$w$w", string1);
      
      ConstantClass constantClass0 = new ConstantClass((byte)42);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iaload", string2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = Utility.clearBit((-648), (-648));
      assertEquals((-16777864), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Utility.accessToString(2126, false);
      int int0 = 87;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 60, 87, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-31);
      Utility.encode(byteArray0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -58
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("CiinWc");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.getSignature("");
      String string1 = Utility.fillup("L;", 1, true, 's');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format(75, (-1088), false, '^');
      assertEquals("75", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "LVl(&;;V";
      stringArray0[2] = "";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fmul", string3);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("Zai^4NWb&zT");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Zai^4NWb&zT";
      stringArray0[1] = "Zai^4NWb&zT";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)4, false, '!');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)47;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.accessToString((int) (byte)47);
      assertEquals("public private protected static synchronized", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray1, constantPool0, 3, (-1956), true);
      assertEquals("3:    i2c\n4:    iaload\n5:    iaload\n", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.clearBit(67, 67);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)55;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.clearBit((-648), (-648));
      Utility.isJavaIdentifierPart('g');
      Utility.accessToString((-648), true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((-655L));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, (int) (byte) (-24), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.getSignature("]L<Z");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("L]L<Z;");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('`');
      Utility.fillup(",{XCbY", 876, false, '`');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("=&>;5Og", "=&>;5Og", "invokestatic");
      Utility.convertString("d2i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)60, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)47, 1740);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)47;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("iE$_", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit(773, (byte)105);
      assertEquals(773, int0);
      
      String string2 = Utility.compactClassName("lmul", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byte byte0 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)48;
      byte byte1 = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      int int0 = 91;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(76, 91);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((byte)91, 1611);
      constantArray0[1] = (Constant) constantInvokeDynamic2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(81, (byte)91);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1840. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(296, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(296, 29);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantInteger constantInteger0 = new ConstantInteger((-1454));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isSet((byte)42, (byte)42);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.getSignature("]L<Z");
      boolean boolean0 = true;
      Utility.fillup("E", 1, true, '7');
      Utility.compactClassName("%tg[Z|~x", "E", false);
      Utility.typeOfSignature("CONSTANT_Double");
      int int0 = 153;
      int int1 = 179;
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(76, 91);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      byteSequence0.readBoolean();
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((byte)91, 1611);
      constantArray0[1] = (Constant) constantInvokeDynamic2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(81, (byte)91);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass((byte) (-71));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (-1278), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1840. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(181);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (-1825), false);
      assertEquals("0:    ifgt\t\t#-30700\n3:    if_icmpeq\t\t#10666\n6:    lshr\n", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.getSignature("");
      Utility.fillup("L;", 1, true, 's');
      Utility.format(75, (-1088), false, '^');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "LVl(&;;V";
      stringArray0[2] = "";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-96);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantLong constantLong0 = new ConstantLong((-9L));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-66);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 448, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("ifle", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifle'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7[L<*cbkQ6-3RT<CjQT");
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Invalid type: ");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(173);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(173, 173);
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-33);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-3782), (int) (byte) (-33));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.getSignature("G");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.signatureToString("ZZ7xCg\"z*`", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZZ7xCg\"z*`";
      stringArray0[1] = "boolean";
      stringArray0[2] = "boolean";
      stringArray0[3] = "The filter must not be null";
      stringArray0[4] = "boolean";
      String string0 = Utility.methodTypeToSignature("ZZ7xCg\"z*`", stringArray0);
      assertEquals("(LZZ7xCg\"z*`;ZZLThe;Z)LZZ7xCg\"z*`;", string0);
      
      int int0 = Utility.setBit((-654), (-672));
      assertEquals((-653), int0);
      
      String string1 = Utility.compactClassName("boolean", true);
      assertEquals("boolean", string1);
      
      String string2 = Utility.fillup("", 64, true, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string2);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-54);
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-54));
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.setBit((byte)47, (byte) (-54));
      try { 
        Utility.typeOfMethodSignature("t0EMGF4)~m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: t0EMGF4)~m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(76, 91);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((byte)91, 1611);
      constantArray0[1] = (Constant) constantInvokeDynamic2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(81, (byte)91);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload\t\t%91", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("!0", "", "Gg", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = Utility.accessToString(320, false);
      assertEquals("volatile native", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = Utility.clearBit((-648), (-648));
      assertEquals((-16777864), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-38);
      byteArray0[8] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)58;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.replace("invokestatic", "invokestatic", "=&>;5Og");
      Utility.classOrInterface((byte)58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("astore\t\t%62", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Bz(~pux4GEwZWU=");
      assertEquals((byte)8, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)8, 58);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)8);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1344), 58);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (-2360), false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = Utility.getSignature("");
      String string1 = Utility.fillup("L;", 1, true, 's');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format(75, (-1088), false, '^');
      assertEquals("75", string2);
      
      String string3 = Utility.signatureToString("L;");
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3535, 3535);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2928, 2499);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 505, 3535, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.accessToString(82, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "private final volatile";
      stringArray0[2] = "interface";
      stringArray0[3] = "interface";
      stringArray0[4] = "interface";
      Utility.methodTypeToSignature("interface", stringArray0);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 52, 85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(40);
      constantMethodType0.clone();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantMethodType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format((-109), (-348), false, '_');
      assertEquals("-109", string0);
      
      String string1 = Utility.accessToString(4413, false);
      assertEquals("public protected static final synchronized native synthetic", string1);
      
      String string2 = Utility.accessToString(3097);
      assertEquals("public static final abstract strictfp", string2);
      
      ConstantClass constantClass0 = new ConstantClass(69);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)105;
      String string3 = Utility.codeToString(byteArray0, constantPool0, (-348), (int) (byte) (-26), true);
      assertEquals("0:    dreturn\n1:    lmul\n2:    lmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    impdep2\n6:    lmul\n", string3);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.getSignature("");
      Utility.fillup("L;", 1, true, 's');
      Utility.format(75, (-1088), false, '^');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "LVl(&;;V";
      stringArray0[2] = "";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, 60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.getSignature("G");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      Utility.convertString("\tdefault = ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), 2271);
      File file0 = MockFile.createTempFile("goto", "\tdefault = ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "return");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // return
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)23;
      ConstantClass constantClass0 = new ConstantClass(173);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)14;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[0A+#J&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0A+#J&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4);
      constantMethodType0.clone();
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass((byte)58);
      constantArray0[4] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte) (-89));
      constantArray0[5] = (Constant) constantClass1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("atRx%!4/NP>&t(y");
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1391, 1391);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      Utility.accessToString(82, false);
      try { 
        Utility.typeOfSignature("7[L<*cbkQ6-3RT<CjQT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7[L<*cbkQ6-3RT<CjQT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("ZZ7.Cg\" *`");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2c", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Utf8[1](\"ZZ7.Cg\" *`\")}", string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      Utility.compactClassName("W*@'<huc]7ew", "java.lang.ireturn", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("GvU-9oLee86|yjSWU\nAttribute(s):\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GvU-9oLee86|yjSWU
         // Attribute(s):
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("CONSTANT_Double", "CONSTANT_Double", true);
      Utility.methodSignatureReturnType("Lireturn;V");
      Utility.convertString("");
      String string0 = "GvU-9oLee86|yjSWU";
      String string1 = "SzizH2Bh^n'two";
      String string2 = "rls=";
      boolean boolean0 = true;
      int int0 = 216;
      int int1 = 220;
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[8];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("i2f", "Lireturn;V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Lireturn;V\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("GvU-9oLee86|yjSWU\nAttribute(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GvU-9oLee86|yjSWU
         // Attribute(s):
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = Utility.compactClassName("ZZ7xCg\"z*`", "ZZ7xCg\"z*`", false);
      assertEquals("ZZ7xCg\"z*`", string0);
      
      String string1 = Utility.methodSignatureReturnType("ZZ7xCg\"z*`");
      assertEquals("boolean", string1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("org.apache.bcel.classfile.SignatureF[N\"V4MlK$Mbu.'yF[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[N\"V4MlK$Mbu.'yF[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("\nAttribute(s):\n", "\nAttribute(s):\n", true);
      Utility.replace("&Z$E0#NjDv'Ngv(", "&Z$E0#NjDv'Ngv(", "char");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(D2Mkd`i,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2Mkd`i,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1721115489), (-1721115489));
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-1370), true);
      assertEquals("private protected transient strictfp synthetic annotation enum", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "int";
      stringArray0[1] = "private protected transient strictfp synthetic annotation enum";
      stringArray0[2] = "private protected transient strictfp synthetic annotation enum";
      stringArray0[3] = "private protected transient strictfp synthetic annotation enum";
      stringArray0[4] = "private protected transient strictfp synthetic annotation enum";
      stringArray0[5] = "private protected transient strictfp synthetic annotation enum";
      stringArray0[6] = "? super ";
      String string1 = Utility.methodTypeToSignature("int", stringArray0);
      assertEquals("(ILprivate;Lprivate;Lprivate;Lprivate;Lprivate;L?;)I", string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.replace("\nAttributI(s):\n", "\nAttributI(s):\n", "\nAttributI(s):\n");
      assertEquals("\nAttributI(s):\n", string0);
      
      String string1 = Utility.methodTypeToSignature("nZ6G'XZ=l~)G", (String[]) null);
      assertEquals("()LnZ6G'XZ=l~)G;", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.replace("5", "5", "5");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)62;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8");
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)19;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("8", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Object[] objectArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Integer integer0 = new Integer((-275));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-495), (int) (byte)9, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PX#S:nhP<Q$>c)LB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PX#S:nhP<Q$>c)LB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)61;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      try { 
        Utility.typeOfSignature("/;*Foh`~(-5:x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /;*Foh`~(-5:x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = Utility.format((-949), 1792, false, ';');
      Utility.compactClassName("v", string0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("BootstrapMethods(", stringArray0);
      Utility.accessToString((-1195));
      Utility.clearBit((-1195), (-1195));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.replace("", "float", "float");
      Utility.compactClassName("float", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(52);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "float";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "float";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "float";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "float";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byte byte0 = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)114;
      byte byte1 = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      int int0 = (-650);
      int int1 = 3;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 55
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "Zai^4NWb&zT";
      String string1 = "Yd{5^\"R)+\".rYP_d!1";
      try { 
        Utility.typeOfSignature("Yd{5^\"R)+\".rYP_d!1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yd{5^\"R)+\".rYP_d!1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalVariableTable localVariableTable0 = null;
      String string0 = "9?RAo1ViBG.n";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("9?RAo1ViBG.n", "9?RAo1ViBG.n", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.compactClassName("\nAttribute(s):\n", "\nAttribute(s):\n", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "R>`X=rUUpl~k]S*%", ";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte) (-69);
      byteArray1[5] = (byte) (-106);
      byteArray1[6] = (byte) (-106);
      byteArray1[7] = (byte) (-69);
      byteArray1[8] = (byte) (-69);
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("<illegal opcode>", true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)58;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4);
      constantMethodType0.clone();
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.compactClassName("\nAttribute(s):\n", "multianewarray", true);
      assertEquals("\nAttribute(s):\n", string0);
      
      String string1 = Utility.getSignature("\nAttribute(s):\n");
      assertEquals("LAttribute(s):;", string1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("\nAttribute(s):\n", "\nAttribute(s):\n", "\nAttribute(s):\n", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Attribute(s):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "\nAttribute(s):\n";
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]x`^xJb5iMet't8");
      MockPrintStream mockPrintStream0 = new MockPrintStream("3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = ')';
      PrintStream printStream0 = mockPrintStream0.append(')');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printStream0, objectArray0);
      boolean boolean0 = true;
      try { 
        Utility.decode("Visiting non-standard PMGClass object", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "9kQj< rbxpw'vOZ,T";
      try { 
        Utility.typeOfSignature("9kQj< rbxpw'vOZ,T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9kQj< rbxpw'vOZ,T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("@OxLTQ22P|hUh%]u%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @OxLTQ22P|hUh%]u%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$1";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 195, (int) (byte)127, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dloId");
      MockFile mockFile1 = new MockFile(mockFile0, "dloId");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)80, 2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(34);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("f@_'IH-y~NCQ</FRH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f@_'IH-y~NCQ</FRH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.getSignature("G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format((-1314), (-762), true, 'a');
      Utility.accessToString(3097, false);
      Utility.accessToString(763);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-26);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-81));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 252, 464, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("L^D:jJ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)6;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("double");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1294), 22);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble((-217.79220552531));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(95, (byte)6);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.typeOfSignature("F01FJ'XPNgOBo`");
      try { 
        Utility.decode("{", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(D2Mkd`i,", "(D2Mkd`i,", "iinc", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2Mkd`i,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "$oa!#+d6/'T2";
      try { 
        Utility.typeOfSignature("$oa!#+d6/'T2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $oa!#+d6/'T2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.searchOpcode("M");
      Utility.clearBit((short) (-1), (short) (-1));
      try { 
        Utility.methodSignatureArgumentTypes("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)98;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)90);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), 1506, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      String string1 = Utility.replace("v!K>", "ifgt", "org.apache.bcel.classfile.Utility$1");
      assertEquals("v!K>", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)16;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("de 04 06 10", string2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("new");
      Utility.compactClassName("<illegal opcode>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<illegal opcode>");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "<illegal opcode>";
      objectArray0[2] = (Object) "new";
      objectArray0[3] = (Object) "<illegal opcode>";
      objectArray0[4] = (Object) "new";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "<illegal opcode>";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: ", (String) null, "<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = "22gicZ-F~1s)zIMd=[P";
      try { 
        Utility.typeOfSignature("22gicZ-F~1s)zIMd=[P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 22gicZ-F~1s)zIMd=[P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("z%5^{|ahR}H[<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[<e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#-30700", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|i@>J*v");
      String string1 = Utility.replace("checkcast", "checkcast", "checkcast");
      assertEquals("checkcast", string1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)2;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 318, 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      // Undeclared exception!
      try { 
        Utility.replace("a2/Zu=", (String) null, "void");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-2);
      Utility.encode(byteArray0, false);
      String string0 = "PA?^V__1;x<zM2\\ ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("PA?^V__1;x<zM2 ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PA?^V__1;x<zM2 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("<illegal opcode>");
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "G3_0*|xUB:JJ8";
      try { 
        Utility.typeOfSignature("G3_0*|xUB:JJ8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G3_0*|xUB:JJ8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6F01FJ'XPN(gOBd o`C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6F01FJ'XPN(gOBd o`C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "W*@'<huFc]7ewo";
      try { 
        Utility.typeOfSignature("W*@'<huFc]7ewo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W*@'<huFc]7ewo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = Utility.signatureToString("C>Es\"nZq;jtkihF`", true);
      assertEquals("char", string0);
      
      int int0 = Utility.setBit(512, 16384);
      assertEquals(513, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.methodSignatureToString("iload_2", "mTdAJ", "CONSTANT_Class", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("[x^?A/Ila6@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [x^?A/Ila6@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      byte byte0 = Utility.typeOfSignature("Zai^4NWb&zT");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      Utility.compactClassName("class");
      Utility.signatureToString("Invalid type: ", true);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, 2563, 2563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ehe array ofvnam&s must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ehe array ofvnam&s must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"+~p*>rfH5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"+~p*>rfH5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("LV;V", true);
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The array of names must not be null");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("C");
      assertEquals((byte)5, byte1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = ";{}M:>Q#@:Y,fG$3p";
      try { 
        Utility.typeOfSignature(";{}M:>Q#@:Y,fG$3p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;{}M:>Q#@:Y,fG$3p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.convertString("RBfzAh\"");
      assertEquals("RBfzAh\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "=MoH;JhLb8mxpOg5m+ ";
      try { 
        Utility.typeOfSignature("=MoH;JhLb8mxpOg5m+ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =MoH;JhLb8mxpOg5m+ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!pzectef!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pzectef!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "U:%";
      try { 
        Utility.typeOfSignature("U:%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U:%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cwb@G4JwK,>");
      try { 
        Utility.typeOfSignature("'|N^=)7$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '|N^=)7$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E\"l\"~EJ44", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E\"l\"~EJ44'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      // Undeclared exception!
      try { 
        Utility.compactClassName("void", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "!r%p6>vz@h4EO";
      try { 
        Utility.methodSignatureArgumentTypes("!r%p6>vz@h4EO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !r%p6>vz@h4EO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("1n#FR3.GST)?@|d");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "1n#FR3.GST)?@|d";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) "1n#FR3.GST)?@|d";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = Utility.replace("dadd", "1n#FR3.GST)?@|d", "dadd");
      assertEquals("dadd", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("sastore", string1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Fk.b.O4mTU5";
      stringArray0[1] = "Fk.b.O4mTU5";
      stringArray0[2] = "~[zeL=qm(C=)$";
      stringArray0[3] = "~[zeL=qm(C=)$";
      stringArray0[4] = "Fk.b.O4mTU5";
      stringArray0[5] = "Fk.b.O4mTU5";
      stringArray0[6] = "double";
      stringArray0[7] = "~[zeL=qm(C=)$";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Fk.b.O4mTU5", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[zeL=qm(C=)$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.replace("invokespecial", "java.lang.", "{3y");
      Utility.format(15, (-2443), false, 'P');
      try { 
        Utility.typeOfSignature("15");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 15
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.typeOfSignature("The array of names must not be null");
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of names must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q:!,SW:beA;rbX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:!,SW:beA;rbX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "fneg";
      Utility.clearBit((-19), (-19));
      String string1 = "X9S3p\"w'wfdl.";
      try { 
        Utility.methodSignatureReturnType("X9S3p\"w'wfdl.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X9S3p\"w'wfdl.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = ".d";
      try { 
        Utility.typeOfSignature(".d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      try { 
        Utility.methodSignatureArgumentTypes("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M]Xu$T ]_BXo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M]Xu$T ]_BXo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      Utility.compactClassName("invokespecial");
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      Utility.compactClassName("invokespecial");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "q";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = Utility.convertString("\\");
      assertEquals("\\\\", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(84);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = Utility.getSignature("9X>Sv6LmKdjCS410J");
      assertEquals("L9X>Sv6LmKdjCS410J;", string0);
      
      String string1 = Utility.methodSignatureReturnType("L9X>Sv6LmKdjCS410J;", false);
      assertEquals("9X>Sv6LmKdjCS410J", string1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      int int0 = Utility.setBit(3429, 3429);
      assertEquals(3429, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)106;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifge\t\t#14906", string1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "4&4u?O{.=nc^'&";
      try { 
        Utility.typeOfSignature("4&4u?O{.=nc^'&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4&4u?O{.=nc^'&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.typeOfSignature("L0");
      // Undeclared exception!
      try { 
        Utility.signatureToString("&s{FZv<1.H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&s{FZv<1.H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)69;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(1682, true);
      assertEquals("private final transient abstract", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\t<";
      try { 
        Utility.typeOfMethodSignature("\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "W?jb:S4", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Fieldref");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      Utility.signatureToString("Byte code error: ", true);
      String string0 = Utility.signatureToString("Byte code error: ", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = Utility.signatureToString("FRa;$u=#9", false);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "H2t[Qz:?";
      try { 
        Utility.typeOfSignature("H2t[Qz:?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H2t[Qz:?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.methodSignatureReturnType("SenitZRive");
      String string0 = Utility.methodSignatureReturnType("Byte code error: ", true);
      assertEquals("byte", string0);
      
      String string1 = Utility.compactClassName("Unreachable default case reached!", "4OOsMN*l&", true);
      assertEquals("Unreachable default case reached!", string1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&19");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &19
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I2l(}ds6_t", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "<", "int");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.signatureToString("SensitZRive");
      // Undeclared exception!
      try { 
        Utility.signatureToString("NWLB{:d{b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NWLB{:d{b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Utility.typeOfSignature("SensitZRive");
      try { 
        Utility.methodSignatureReturnType("H k6V)AmO_e-j.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AmO_e-j.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.format((-1052), (-1052), false, '9');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O%");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      Utility.equals(byteArray0, byteArray0);
      Utility.replace(">", "org.apache.bcel.classfile.ConstantClass", (String) null);
      Constant[] constantArray0 = new Constant[8];
      int int0 = 4;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "daload");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"daload\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = "LocalVariable";
      try { 
        Utility.methodSignatureReturnType("LocalVariable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-78);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (-1481));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    breakpoint
         // 1:    laload
         // 2:    i2c
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ken)itive", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ken)itive'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      int int0 = Utility.setBit((-1751), (-1751));
      assertEquals((-1239), int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)89;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 3f 2a 24 4b 49 59", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte)89;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte)75;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "(*)M;";
      try { 
        Utility.typeOfSignature("(*)M;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (*)M;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J>wr;P;^");
      String string0 = Utility.signatureToString("J>wr;P;^", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("LR@-TIvI;V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[p\"|<?7W1fNus");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p\"|<?7W1fNus'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Sensitive", "", "!MBdK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Sensitive
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("W*@'<huFc]7ewo");
      byte[] byteArray0 = Utility.decode("W*@'<huFc]7ewo", false);
      Utility.toHexString(byteArray0);
      String string1 = Utility.fillup("W*@'<huFc]7ewo", 3616, true, 'v');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.dcmpl");
      try { 
        Utility.typeOfSignature("O*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.signatureToString("VWecaliHi@D:", true);
      try { 
        Utility.typeOfMethodSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.ExceptionTable";
      try { 
        Utility.typeOfSignature(":xQhj?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :xQhj?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = 302;
      Utility.classOrInterface(302);
      Utility.accessToString(302, true);
      String string0 = "z-KxU8^1Ax";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z-KxU8^1Ax";
      stringArray0[1] = "R@-TIvI";
      stringArray0[2] = "z-KxU8^1Ax";
      Utility.methodTypeToSignature("z-KxU8^1Ax", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R@-TIvI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.replace("D}Z]6HKQ>qRLIJ", "D}Z]6HKQ>qRLIJ", "D}Z]6HKQ>qRLIJ");
      String string0 = "~,1L.t_Ps:?";
      try { 
        Utility.typeOfSignature("~,1L.t_Ps:?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~,1L.t_Ps:?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = " ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("Q`G0cqHJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q`G0cqHJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = true;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      MockFile mockFile0 = new MockFile(")\t");
      mockFile0.toURL();
      mockFile0.setReadable(false, true);
      mockFile0.setLastModified(0L);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Byte code error: ", "Byte code error: ", "Byte code error: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J>wr;P;^");
      Utility.typeOfSignature("J>wr;P;^");
      try { 
        Utility.methodSignatureReturnType("!|qgHh/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!|qgHh/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.compactClassName("lookupswitch");
      Utility.getSignature("java.lang.R@-TIvI");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lookupswitch";
      stringArray0[1] = "lookupswitch";
      stringArray0[2] = "lookupswitch";
      stringArray0[3] = null;
      stringArray0[4] = "lookupswitch";
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.typeOfSignature("Sensitive");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("M]In6$b5A[5<)Qaoh<", "Sensitive", "sqaO", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M]In6$b5A[5<)Qaoh<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VZ&K9>");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.methodSignatureReturnType("VZ&K9>");
      assertEquals("void", string0);
      
      Utility.format((byte)12, (byte)12, false, 'A');
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "? extends ";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = ",{VSS}U";
      try { 
        Utility.typeOfSignature(",{VSS}U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,{VSS}U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "void", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.fillup("", 3352, true, 'w');
      Utility.compactClassName("", "", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "Ke@lhS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W*@'<huFc]7ewo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W*@'<huFc]7ewo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.getSignature("");
      try { 
        Utility.methodSignatureReturnType("compiled from\t\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `compiled from\t\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = Utility.getSignature(", low = ");
      assertEquals("L,;", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.format(657, 657, true, '[');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintStream0.append((CharSequence
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      //  // Unstable assertion: assertEquals(2243, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      MockFile mockFile0 = new MockFile("J):%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      Utility.printArray(printStream0, objectArray0);
      assertEquals(9L, mockFile0.length());
      
      String string0 = Utility.fillup("", 127, true, '+');
      assertEquals("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "R@-TIvI";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "R@-TIvI";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null, \"R@-TIvI\", null, null, null, \"R@-TIvI\"}", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("R@-TIvI", false);
      try { 
        Utility.typeOfSignature("MLFn>z@E2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MLFn>z@E2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@63e7f643, java.lang.Object@3d21b428, java.lang.Object@564800cd", (-1746), true, 'x');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3298), (-1355));
      assertEquals("0:    fload_1\n1:    pop2\n2:    istore_3\n3:    dstore\t\t%212\n5:    iconst_1\n6:    dup2\n7:    fload_1\n", string0);
      
      String string1 = Utility.compactClassName("java.lang.Character", false);
      assertEquals("java.lang.Character", string1);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Invalid class name ", false);
      assertEquals("int", string0);
      
      String string1 = Utility.fillup("i#0GY'gh?PH", (-1454), true, '7');
      assertEquals("i#0GY'gh?PH", string1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = "java.lang.i#0GY'gh?P>H";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.i#0GY'gh?P>H");
      String string1 = "RR@-TIvI";
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.typeOfSignature("VZ&K9>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("D}Z]6HKQ>qRLIJ", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.getSignature("i#0GY'gh?PH");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("20 08 aa 05 47 5c 06 72 c4", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)108;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4f 6c", string0);
      
      String string1 = Utility.compactClassName("8`U}@%A~ldRVkpJ");
      assertEquals("8`U}@%A~ldRVkpJ", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "HM'fvoZeipJI#jXU";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("HM'fvoZeipJI#jXU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HM'fvoZeipJI#jXU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)52;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)61;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("39 4e 39 a6 7a 61 df 3d", string1);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R@-TIvI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R@-TIvI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      Utility.getSignature("class");
      byte[] byteArray0 = Utility.decode("class", false);
      Utility.isJavaIdentifierPart('/');
      Utility.accessToString((-2134));
      boolean boolean0 = false;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "<$thg_ tR![", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = Utility.decode("char", false);
      assertArrayEquals(new byte[] {(byte)99, (byte)104, (byte)97, (byte)114}, byteArray0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString((-1669));
      String string1 = Utility.compactClassName("public private static final synchronized volatile native strictfp synthetic annotation enum", false);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit((-1669), 1488);
      assertEquals((-1669), int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)108;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6c 4f 6c 6c 4f 6c 6c", string0);
      
      String string1 = Utility.format(1144, 14, true, '6');
      assertEquals("11446666666666", string1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)108;
      byteArray0[1] = (byte)108;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("00 6c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `00 6c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      int int0 = 0;
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      Utility.getSignature("class");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = Utility.convertString("%@sY@@[hQoQQTmY");
      assertEquals("%@sY@@[hQoQQTmY", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)0;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Uya+<XToB/!),", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uya+<XToB/!),'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.signatureToString("Sensitive", false);
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      Utility.getSignature("class");
      Utility.decode("ereturn", false);
      Utility.isJavaIdentifierPart('%');
      Utility.accessToString(206);
      Utility.decode("\t", false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Utility.format(68, 201, false, '\\');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-128);
      byteArray0[4] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -128
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.decode("JI#+:rP\"v<u9", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.decode("R@-TIvI", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)84;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-121);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Sensitive", false);
      int int0 = 0;
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Utility.convertString("7&<StsQxf<");
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      int int0 = Utility.clearBit((-648), (-648));
      assertEquals((-16777864), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-648), true);
      assertEquals("static final volatile native abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      int int0 = 1533;
      Utility.setBit(1533, 490);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.convertString("%@sY@@[hQoQQTmY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = objectArray0[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("%@sY@@[hQoQQTmY", "L)B", "%@sY@@[hQoQQTmY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %@sY@@[hQoQQTmY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Utility.compactClassName(">'i1*\"G\"Ph$4Lcj");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", "return", "putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$ee$D$84$b8$H$H$A5", string2);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      int int0 = 0;
      String string0 = "(";
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{}", "{}", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "\t\t<";
      Utility.decode("\t\t<", false);
      try { 
        Utility.typeOfSignature("\t\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(2, 0);
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.accessToString((-1138), true);
      Utility.isSet((-1138), (-657));
      Object[] objectArray0 = null;
      Utility.isJavaIdentifierPart('9');
      String string0 = "V_TH%9vz&yPZs}";
      Utility.compactClassName("V_TH%9vz&yPZs}", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Utility.classOrInterface((-1138));
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "interface", (-1138), 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(">'i1*\"G\"Ph$4Lcj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'i1*\"G\"Ph$4Lcj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-1138), true);
      Utility.isSet((-1138), (-659));
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.replace("|9BF*3| Xw`2cl'4", "-q?<TMy6q;%", "|9BF*3| Xw`2cl'4");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[1] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[2] = (Object) "-q?<TMy6q;%";
      objectArray0[3] = (Object) "|9BF*3| Xw`2cl'4";
      objectArray0[4] = (Object) "-q?<TMy6q;%";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("Sensitive", false);
      int int0 = 0;
      Utility.classOrInterface(0);
      Utility.decode("class", false);
      Utility.getSignature("class");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = "\t";
      Utility.getSignature("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)44;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("YImBxTzVm~?h|[jv");
      try { 
        Utility.methodSignatureArgumentTypes("s/^ER|3/Nd-&[tc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s/^ER|3/Nd-&[tc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.getSignature("");
      Utility.printArray((Object[]) null);
      int int0 = 0;
      Utility.accessToString(0, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[9];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      DataInput dataInput0 = null;
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.format(0, 75, true, 'u');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[1] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[2] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[3] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[4] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[7] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      objectArray0[8] = (Object) "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";
      Utility.printArray(objectArray0);
      Utility.isSet((-5183), 75);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[7];
      ClassPath classPath0 = new ClassPath("{0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, java.lang.Object@780eb671, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu, 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu}");
      try { 
        classPath0.getInputStream("0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: 0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu0uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.convertString("%@sY@@[hQoQQTmY");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "%@sY@@[hQoQQTmY";
      objectArray0[1] = (Object) "%@sY@@[hQoQQTmY";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4+T(OIPgGN|}fc<4$", "L)B", "%@sY@@[hQoQQTmY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4+T(OIPgGN|}fc<4$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.format(0, 0, false, 'u');
      String string0 = "j\"cA}0DZ))oGEx`";
      String string1 = "]i.xt)Lv";
      String string2 = "";
      boolean boolean0 = true;
      int int0 = 1782;
      int int1 = 29;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -87
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Utility.compactClassName("", "*", false);
      try { 
        Utility.methodSignatureArgumentTypes("UDo.}-9DaK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UDo.}-9DaK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = "R@-TIvI";
      boolean boolean0 = false;
      Utility.decode("R@-TIvI", false);
      try { 
        Utility.typeOfSignature("R@-TIvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R@-TIvI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = "7fAto-";
      Utility.fillup("7fAto-", 0, false, 'i');
      String string1 = "dxR5)";
      try { 
        Utility.typeOfMethodSignature("dxR5)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dxR5)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(200, false);
      Utility.fillup("static volatile transient", 200, false, 'I');
      Utility.typeOfSignature("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      Utility.printArray((Object[]) null, false, false);
      Utility.convertString("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIstatic volatile transient");
      int int0 = 490;
      int int1 = 340;
      Utility.setBit(490, 340);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.classOrInterface(102);
      String string0 = "";
      boolean boolean0 = true;
      Utility.compactClassName("", "class", true);
      Utility.searchOpcode("class");
      Utility.getSignature("?dZrv|M*-W");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (short) (-1), (int) (short) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      MockFile mockFile0 = new MockFile("dload");
      MockFile mockFile1 = new MockFile(mockFile0, "dload");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = "qTK!'jaM1D";
      String string1 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("qTK!'jaM1D", (String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qTK!'jaM1D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = "M`Fm%[t@ZT";
      Utility.compactClassName("M`Fm%[t@ZT", "M`Fm%[t@ZT", false);
      String string1 = "Invalid type: ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("M`Fm%[t@ZT", "M`Fm%[t@ZT", "Invalid type: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M`Fm%[t@ZT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.fillup("", 3352, true, '^');
      Utility.compactClassName("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "Ke@lhS");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(1693, false);
      try { 
        Utility.typeOfMethodSignature("public protected static final transient interface abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static final transient interface abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("java.io.Serializable", "", false);
      Utility.isJavaIdentifierPart('9');
      String string0 = "V_TH%9vz&yPZs}";
      Utility.compactClassName("V_TH%9vz&yPZs}", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "V_TH%9vz&yPZs}", 48, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, false);
      String string1 = Utility.fillup("java.lang.Object@67eb7470, java.lang.Object@54dfc10c, java.lang.Object@7c169e7d", (-1746), true, 'x');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(4375);
      try { 
        Utility.methodSignatureReturnType("public private protected final native synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected final native synthetic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.clearBit(171, 171);
      String string0 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      String string0 = "";
      String string1 = "%H2j";
      String string2 = "aAj{a/O%Q+z:4~)wZEI";
      boolean boolean0 = false;
      int int0 = 3610;
      int int1 = 831;
      int int2 = 2937;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)127;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)0;
      CodeException[] codeExceptionArray0 = new CodeException[5];
      MockFile mockFile0 = new MockFile((File) null, "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "aAj{a/O%Q+z:4~)wZEI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"aAj{a/O%Q+z:4~)wZEI\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = (-648);
      Utility.clearBit((-648), (-648));
      Utility.isJavaIdentifierPart('@');
      try { 
        Utility.methodSignatureReturnType("z^Y1[p3hN=(_ZwXz P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z^Y1[p3hN=(_ZwXz P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*V@8EvZK97F'W", "*V@8EvZK97F'W", "*V@8EvZK97F'W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *V@8EvZK97F'W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode(":", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.clearBit(418, 418);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }
}
