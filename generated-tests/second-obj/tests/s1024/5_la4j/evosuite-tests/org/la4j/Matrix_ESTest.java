/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:33:56 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.manhattanNorm();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(10, 372.798517504);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 8;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(4686, 4686, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4686
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(826);
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toString();
      basic2DMatrix0.hashCode();
      basic2DMatrix0.trace();
      basic2DMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix0 = new CRSMatrix(996, 996, 996);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, (-2050), (-2050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2050x-2050
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.min();
      NumberFormat.getInstance();
      basic2DMatrix0.subtract(300.3347);
      // Undeclared exception!
      try { 
        Vector.zero((-34));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      cCSMatrix0.getRow(7);
      int int0 = 0;
      denseMatrix0.get(0, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom((-2127L));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        Matrix.zero(7, (-2393));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.hashCode();
      int int0 = (-2050);
      // Undeclared exception!
      try { 
        Matrix.unit(996, (-2050));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      Integer integer0 = new Integer(0);
      matrix0.sum();
      matrix0.updateColumn(0, vectorFunction0);
      Double double0 = new Double(0.0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("vm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.fromCSV("        ");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.infinityNorm();
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      Matrix matrix0 = Matrix.unit(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      matrix0.sum();
      matrix0.toSparseMatrix();
      matrix0.updateColumn(0, vectorFunction0);
      matrix0.max();
      DecimalFormat decimalFormat0 = new DecimalFormat("qtMlS");
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("u_?G}&1;RP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 745;
      doubleArray0[2] = (double) 745;
      doubleArray0[3] = 103.80537820855;
      doubleArray0[4] = (double) 745;
      doubleArray0[5] = (double) 745;
      doubleArray0[6] = (double) 745;
      int[] intArray0 = new int[3];
      intArray0[1] = 745;
      CRSMatrix cRSMatrix0 = new CRSMatrix(745, 745, 745, doubleArray0, intArray0, intArray0);
      cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(2400, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2400' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1053L);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1474), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 1022;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1022);
      boolean boolean0 = false;
      int int1 = 24;
      DenseMatrix.identity(24);
      // Undeclared exception!
      denseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1906;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn((-1937));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(7);
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(10, 372.798517504);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 1765;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1765);
      // Undeclared exception!
      try { 
        cCSMatrix0.hadamardProduct(rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1765x1765 does not equal to 10x10.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2339.45).when(matrixAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, (-1301.294455));
      columnMajorSparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-184);
      // Undeclared exception!
      try { 
        Matrix.zero((-184), (-184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -184x-184
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfRows((-954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -954x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1906;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1906, doubleArray0);
      columnMajorSparseMatrix0.toColumnVector();
      columnMajorSparseMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      SparseMatrix.zero(2745, 0);
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 4686;
      int int1 = 8;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix0.diagonalProduct();
      cRSMatrix0.copyOfRows(4686);
      Matrix matrix0 = Matrix.fromCSV("%%MatrixMarket");
      double double0 = 1.0;
      matrix0.add(double0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(int0);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      denseMatrix0.minInRow(int0);
      String string0 = "=);$yPsLZ^";
      Matrix.fromCSV(string0);
      int int2 = (-205);
      denseMatrix0.iteratorOfColumn(int2);
      MatrixOperation<String> matrixOperation0 = null;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(int1, int0);
      basic2DMatrix0.apply(matrixOperation0);
      sparseMatrix0.sum();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInColumn(int0, vectorProcedure0);
      String string1 = "This will be supported in 0.6.0.";
      Matrix.fromMatrixMarket(string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = null;
      int[] intArray0 = new int[0];
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      Double double0 = new Double(6);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow((-1659144684));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1659144684' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer((-2407));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      cCSMatrix0.determinant();
      cCSMatrix0.columns();
      cCSMatrix0.rowMajorIterator();
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      float float0 = new Integer(1074);
      Matrix matrix0 = Matrix.random(1074, 4, mockRandom0);
      double double0 = new Integer(4);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      DenseMatrix.from1DArray(4, 1074, doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      // Undeclared exception!
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      ColumnMajorSparseMatrix.diagonal(1785, 10);
      columnMajorSparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 7;
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat("vm");
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(4);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat1 = new DecimalFormat("Cannot have negative rows or columns: ", decimalFormatSymbols0);
      decimalFormat1.getPositiveSuffix();
      matrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("O<2+x:6Wf+01");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 27;
      doubleArray0[1] = (double) (-1149);
      doubleArray0[2] = (double) (-1149);
      doubleArray0[3] = (double) (-1149);
      doubleArray0[4] = (double) (-1149);
      doubleArray0[5] = (double) 27;
      doubleArray0[6] = (double) (-1149);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1149), 27, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1149x27
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(17);
      basic2DMatrix0.toString();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((int) integer0, (double) 17, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 289.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.identity(0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      Integer integer0 = new Integer((-2393));
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn("%%MatrixMarket").when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      sparseVector0.apply(vectorOperation0);
      sparseVector0.nonZeroAt((-2393));
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.norm();
      int int0 = (-1599);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn((-1599), vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1599' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(55);
      MockRandom mockRandom1 = new MockRandom();
      Integer integer1 = new Integer(55);
      Integer integer2 = new Integer((-10));
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.hashCode();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1599), (double)(-1599), 1570.10488371, (double)(-1599), 4.968050235017627E-10).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.constant((-644), (-644), 2.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1022);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      denseMatrix0.non(advancedMatrixPredicate0);
      int int0 = (-293);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.eachInColumn((-1716), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1890);
      cCSMatrix0.toColumnVector();
      cCSMatrix0.toColumnVector();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(32, mockRandom0);
      denseMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(5, 5);
      Integer integer0 = new Integer(5);
      matrix0.sum();
      MockRandom mockRandom0 = new MockRandom((-1891L));
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(775, (double) (-23), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -13814375.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 6;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      cCSMatrix0.toRowMajorSparseMatrix();
      int int1 = 1;
      // Undeclared exception!
      Vector.unit(1073741824);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
          MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
          DecimalFormat decimalFormat0 = new DecimalFormat();
          CCSMatrix cCSMatrix0 = new CCSMatrix();
          Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
          cCSMatrix0.forEach(consumer0);
          int int0 = 1192;
          cCSMatrix0.minInRow((-1431655764));
          // Undeclared exception!
          try { 
            cCSMatrix0.set((-1431655764), (-1431655764), 799.1150867554702);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // Row '-1431655764' is invalid.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      Integer integer0 = new Integer(7);
      NumberFormat.getInstance();
      cCSMatrix0.infinityNorm();
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.rank();
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.kroneckerProduct(cCSMatrix1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix1.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      int int0 = 6;
      denseMatrix0.slice(6, 5, 6, 6);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MockRandom mockRandom1 = new MockRandom(6);
      // Undeclared exception!
      try { 
        Matrix.fromCSV("94bzoebV:FG?:y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toBinary();
      Integer integer0 = new Integer(29);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.determinant();
      Integer integer1 = new Integer(29);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int int0 = (-2845);
      // Undeclared exception!
      try { 
        Basic2DMatrix.diagonal((-2845), 100.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      int int0 = 2445;
      denseMatrix0.multiplyByItsTranspose();
      DenseMatrix.constant(2445, 9, (-28.168258376033222));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(9);
      basic2DMatrix0.add((double) 0);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(0, 0);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      sparseMatrix0.equals((Matrix) basic2DMatrix1, 741.723);
      basic2DMatrix1.minInRow((-3809));
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[] doubleArray0 = new double[4];
      decimalFormat0.setNegativeSuffix("x");
      doubleArray0[0] = (double) (-2393);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2393);
      doubleArray0[3] = (double) 0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow(1, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4. Should be: 7.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.eachInColumn(1626, vectorProcedure0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      int int1 = 9;
      Matrix matrix0 = denseMatrix0.multiplyByItsTranspose();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        matrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2406.7078);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 132.348151464;
      doubleArray1[3] = 1603.6294566537;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3615.3539807;
      doubleArray1[6] = 1915.0;
      doubleArray1[7] = 63.302538181401;
      double double0 = 2423.6611097439745;
      doubleArray1[8] = 2423.6611097439745;
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      int int0 = 116;
      int int1 = (-1103);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn((-1103));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1103' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      mockRandom0.nextFloat();
      denseMatrix0.diagonalProduct();
      denseMatrix0.copyOfRows(1019);
      denseMatrix0.setColumn(1019, 1.0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      DecimalFormat decimalFormat0 = new DecimalFormat("x");
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      Matrix matrix0 = vector0.outerProduct(sparseVector0);
      matrix0.blankOfColumns(7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          mockRandom0.nextFloat();
          Matrix matrix0 = Matrix.random(1074, 4, mockRandom0);
          // Undeclared exception!
          try { 
            matrix0.trace();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.sliceBottomRight((-2804), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-2804..0][10..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2e~zbF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(7);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.toColumnMajorSparseMatrix();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.transformRow(1, vectorFunction0);
      cCSMatrix0.norm();
      CCSMatrix cCSMatrix2 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix2.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      DecimalFormat decimalFormat0 = new DecimalFormat("vm");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat1 = new DecimalFormat("Cannot have negative rows or columns: ", decimalFormatSymbols0);
      decimalFormat1.setParseIntegerOnly(false);
      decimalFormat1.getPositiveSuffix();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 7);
      // Undeclared exception!
      try { 
        cCSMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int int1 = 7;
      MockRandom mockRandom0 = new MockRandom(7);
      mockRandom0.nextInt(10);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(281, 281);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(991, 991, 991);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) cRSMatrix0, 1023, 4, (-1824), 103, 870, (-1988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 870x-1988
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 7;
      MockRandom mockRandom0 = new MockRandom(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 0);
      Integer integer0 = new Integer((-2393));
      String string0 = "x";
      DecimalFormat decimalFormat0 = new DecimalFormat("x");
      Matrix matrix0 = cCSMatrix0.blankOfRows(7);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.ensureDimensionsAreCorrect((-2393), (-2393));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2393x-2393
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(4);
      columnMajorSparseMatrix0.insert(matrix0);
      columnMajorSparseMatrix0.equals((Object) vectorOperation0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 7x7 does not equal to 4x7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.rank();
      CRSMatrix cRSMatrix1 = null;
      try {
        cRSMatrix1 = new CRSMatrix(0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      columnMajorSparseMatrix0.equals((Object) cCSMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(5, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(1.0);
      // Undeclared exception!
      try { 
        matrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.multiply((double) 0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("94bz(ebV:FG?:y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(0);
      DecimalFormat decimalFormat0 = new DecimalFormat("x");
      DecimalFormat decimalFormat1 = new DecimalFormat();
      decimalFormat1.format((long) 0);
      decimalFormat1.getNegativePrefix();
      NumberFormat.getInstance();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.determinant();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.columns();
      cCSMatrix0.swapRows(0, (-2491));
      cCSMatrix0.manhattanNorm();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cCSMatrix1.is(advancedMatrixPredicate0);
      cCSMatrix0.updateRow(9, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.get(16, (-1005));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          MockRandom mockRandom1 = new MockRandom(769L);
          MockRandom mockRandom2 = new MockRandom();
          DecimalFormat decimalFormat0 = new DecimalFormat("x0");
          NumberFormat.getInstance();
          Matrix matrix0 = Matrix.unit(6, 989);
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            matrix0.updateRow(976, vectorFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      int int0 = 996;
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceBottomRight(52, (-1696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [52..44][-1696..44].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.toCSV();
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformRow(44, vectorFunction1);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      mockRandom0.doubles();
      mockRandom0.nextBoolean();
      cCSMatrix0.mkString("94bz(ebV:FG?:y", "(axwI11VVm99q~!(h");
      cCSMatrix0.copyOfShape(1, 1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer((-2407));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom((-1875L));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) (-1875L), (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 7);
      // Undeclared exception!
      try { 
        cCSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat("x");
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      DecimalFormat decimalFormat1 = new DecimalFormat();
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat1);
      decimalFormat0.clone();
      columnMajorSparseMatrix0.determinant();
      NumberFormat.getInstance();
      columnMajorSparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      columnMajorSparseMatrix0.min();
      columnMajorSparseMatrix0.swapColumns((-293), (-293));
      Matrix matrix0 = columnMajorSparseMatrix0.removeFirstColumn();
      matrix0.rank();
      columnMajorSparseMatrix0.copyOfRows(7);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("    ");
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.infinityNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow((-123), vectorFunction0);
      cCSMatrix1.maxInRow((-123));
      // Undeclared exception!
      try { 
        cCSMatrix1.sliceTopLeft((-123), 2502);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-123][0..2502].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      columnMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = NumberFormat.FRACTION_FIELD;
      CCSMatrix.identity(0);
      basic2DMatrix0.toString();
      CCSMatrix.diagonal(0, (-3058.2695));
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.zero(1, 1);
      basic2DMatrix1.toString();
      basic2DMatrix0.spliterator();
      CRSMatrix.fromCSV("0.000\n");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix2 = new Basic2DMatrix(1, 1);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      Matrix matrix0 = cCSMatrix0.removeFirstRow();
      matrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("Hf=wd!XxDoHg,`4#'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = (-2407);
      Integer integer0 = new Integer((-2407));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      columnMajorSparseMatrix0.columns();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.swapRows(7, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextInt();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columns();
      cCSMatrix0.swapRows(3, (-2332));
      columnMajorSparseMatrix0.manhattanNorm();
      // Undeclared exception!
      try { 
        cCSMatrix0.get(5, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 1533;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(2346, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-2805));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.nextInt();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).eachNonZero(matrixProcedure0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columns();
      int int1 = 3;
      int int2 = (-2332);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) columnMajorSparseMatrix0, (-2332), (-3819), (-3819), (-2332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -3819x-2332
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat("x");
      columnMajorSparseMatrix0.rowMajorIterator();
      SparseVector sparseVector0 = SparseVector.zero(2696);
      Vector vector0 = sparseVector0.multiply((double) (-1308));
      Vector vector1 = vector0.copyOfLength(210);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(1261, vector1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
      String string0 = "%%MatrixMarket vector array real\n";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric(Integer.MAX_VALUE, (double) 0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Integer integer0 = new Integer(0);
      mockRandom0.longs();
      Matrix matrix0 = columnMajorSparseMatrix0.add(3931.47);
      Matrix matrix1 = columnMajorSparseMatrix0.add(matrix0);
      matrix1.add((double) 0);
      // Undeclared exception!
      try { 
        matrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = "%%MatrixMarket ector array real\n";
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      cCSMatrix0.equals((Object) "%%MatrixMarket ector array real\n");
      int int0 = 1218;
      CCSMatrix cCSMatrix1 = new CCSMatrix(1192, 1218);
      // Undeclared exception!
      try { 
        cCSMatrix1.minInRow((-1431655764));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1431655764' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toBinary();
      Integer integer0 = new Integer(29);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[5];
      intArray1[0] = 996;
      intArray1[1] = 29;
      intArray1[2] = 4;
      intArray1[3] = 37;
      intArray1[4] = 996;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.diagonal((-644), (-642.9525639626));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 4;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      // Undeclared exception!
      try { 
        Matrix.block(basic2DMatrix0, basic2DMatrix0, basic2DMatrix0, basic2DMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-2481.94));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(rowMajorSparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      rowMajorSparseMatrix0.nonZeroIterator();
      Matrix matrix0 = rowMajorSparseMatrix0.to(matrixFactory0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      matrix0.sliceTopLeft(1, 1);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 2, 2, 8, (-855), 1, 282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 8, -855
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.equals((Object) matrix0);
      matrix0.blank();
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 5;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      int int1 = 5;
      sparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns(5, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(31, 31);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(31, 7, (-1918.0578671));
      MockRandom mockRandom0 = new MockRandom(0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      denseMatrix0.rowMajorIterator();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply((double) 0);
      Vector vector1 = vector0.copyOfLength(7);
      denseMatrix0.minInColumn(0);
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)16).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(7, vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer((-2407));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.setRow(2445, 1.0);
      Matrix matrix0 = basic2DMatrix0.multiply(2259.329);
      int int0 = (-3809);
      int int1 = 2396;
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert(matrix0, (-3809), (-3809), 2396, (-3809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2396x-3809
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      DenseMatrix.constant(2445, 9, 0.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (-568.1434232195649), (Random) mockRandom0);
      String string0 = "aN2ebF}v[f";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2ebF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) denseMatrix0, (-223), 145, 0, 0, 16, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 0, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columns();
      cCSMatrix0.divide(2425);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(68, 374);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      DenseMatrix.constant(2445, 9, (-11.096243780847688));
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2445, 9);
      String string0 = "aN2ebF}v[f";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2ebF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) denseMatrix0, (-223), 128, 0, 0, 16, (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 16x-31
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Integer integer0 = new Integer(0);
      ColumnMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = columnMajorSparseMatrix0.add(3931.47);
      int[] intArray0 = new int[1];
      columnMajorSparseMatrix0.mkString("Illegal row number, must be 0..", "Illegal row number, must be 0..");
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer((-2224));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(9, (double) 0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.doubles((long) 0);
      int int0 = Double.MAX_EXPONENT;
      int int1 = Double.MAX_EXPONENT;
      Double double0 = new Double(0.0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      int int2 = 32;
      SparseVector sparseVector0 = SparseVector.zero(32, (-378));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow((-2224), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 7.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Integer integer0 = new Integer(37);
      Matrix matrix0 = cCSMatrix0.transpose();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      cCSMatrix0.euclideanNorm();
      int int1 = (-425);
      cCSMatrix0.blankOfRows(6);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, (-425), 29, 3752, 255, 1758, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3752, 255
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(7);
      CRSMatrix cRSMatrix0 = new CRSMatrix(58, 374);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(58, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(7, 31);
      MockRandom mockRandom0 = new MockRandom(0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2e~zbF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      basic2DMatrix0.rowMajorIterator();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply(0.0);
      Vector vector1 = vector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 17);
      cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 17);
      int int0 = 5;
      Vector.zero(6);
      CCSMatrix.diagonal(17, 4.9E-324);
      vector1.copy();
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = (-2393);
      Integer integer0 = new Integer((-2393));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom(7);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      columnMajorSparseMatrix0.foldRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("w)&y9lk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 44;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      matrix0.divide(44);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.updateColumn((-327), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(17);
      SparseMatrix sparseMatrix0 = denseMatrix0.toSparseMatrix();
      denseMatrix0.removeFirstRow();
      sparseMatrix0.swapColumns(9, 1);
      sparseMatrix0.blank();
      Matrix matrix0 = denseMatrix0.slice(6, 5, 6, 6);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      denseMatrix0.transformColumn(13, vectorFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2ebF}v[f", decimalFormatSymbols0);
      DecimalFormatSymbols decimalFormatSymbols1 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      sparseMatrix0.rowMajorIterator();
      SparseVector sparseVector0 = SparseVector.zero(6);
      sparseVector0.multiply(631.67561566616);
      sparseVector0.copyOfLength(956);
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 9);
      matrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1000, 1000, 520);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformColumn(3, vectorFunction0);
      matrix0.toString();
      cCSMatrix0.columns();
      String string0 = "jR~";
      Matrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 7, (-1918.0578671));
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (-568.1434232195649), (Random) mockRandom0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2ebF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      columnMajorSparseMatrix0.rowMajorIterator();
      denseMatrix0.rowMajorIterator();
      SparseVector.fromCSV("");
      columnMajorSparseMatrix0.columns();
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      columnMajorSparseMatrix0.swapRows(0, 0);
      Double double0 = new Double(0.0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      columnMajorSparseMatrix0.non(advancedMatrixPredicate0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = 7307;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(7307, 7307, 4093.77);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(7307, 7307);
      cCSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn((-1543));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      double double0 = 2339.45;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2339.45).when(matrixAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      columnMajorSparseMatrix0.add(3931.47);
      Basic2DMatrix basic2DMatrix1 = Basic2DMatrix.fromCSV("");
      basic2DMatrix1.toSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix1.updateAt(144, (-1994208314), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2e~zbF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      int int1 = 1318;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(1318, (-1534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..1318][0..-1534].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      denseMatrix0.slice(6, 5, 6, 6);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MockRandom mockRandom1 = new MockRandom(6);
      // Undeclared exception!
      try { 
        denseMatrix0.removeRow(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 0);
      DenseMatrix.constant(0, 7, (-1918.0578671));
      basic2DMatrix0.min();
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (-568.1434232195649), (Random) mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 7 rows and 0 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      columnMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = NumberFormat.FRACTION_FIELD;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      basic2DMatrix0.toString();
      basic2DMatrix0.spliterator();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(10, 0.0, (Random) mockRandom0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = cCSMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = basic2DMatrix0.rotate();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      columnMajorSparseMatrix1.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0);
      columnMajorSparseMatrix0.equals((Object) matrix0);
      Matrix matrix1 = matrix0.blank();
      Integer integer0 = new Integer(0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(0);
      columnMajorSparseMatrix0.rank();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix1, matrix0, matrix0, matrix1);
      columnMajorSparseMatrix0.determinant();
      columnMajorSparseMatrix0.power(60);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 6);
      MockRandom mockRandom1 = new MockRandom();
      int int0 = NumberFormat.FRACTION_FIELD;
      CCSMatrix.diagonal(729, (-1835.86712));
      basic2DMatrix0.toString();
      basic2DMatrix0.spliterator();
      CRSMatrix.randomSymmetric(0, (double) 1, (Random) mockRandom1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transform(matrixFunction0);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      basic2DMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3411.6, 3411.6, 1.0, 1.0, 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(17);
      denseMatrix0.removeFirstRow();
      denseMatrix0.transpose();
      int int0 = 6;
      Matrix matrix0 = denseMatrix0.slice(6, 5, 6, 6);
      denseMatrix0.minInRow(5);
      denseMatrix0.transformColumn(13, vectorFunction0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SparseVector.zero(6);
      // Undeclared exception!
      try { 
        matrix0.swapRows(13, (-706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 44;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.select(intArray0, intArray0);
      MatrixVectorOperation<Object> matrixVectorOperation0 = (MatrixVectorOperation<Object>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(matrixVectorOperation0).partiallyApply(any(org.la4j.matrix.DenseMatrix.class));
      // Undeclared exception!
      try { 
        matrix0.apply(matrixVectorOperation0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Matrix matrix0 = cCSMatrix0.transpose();
      matrix0.rank();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = new Integer(4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositivePrefix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply(0.0);
      vector0.copyOfLength(7);
      int int0 = 0;
      int int1 = 4658;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4658);
      Double double0 = new Double(7);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(0);
      // Undeclared exception!
      try { 
        cCSMatrix1.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = 144;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2211, 144);
      int int1 = 782;
      int int2 = 32;
      int int3 = 1073741824;
      // Undeclared exception!
      cCSMatrix0.power(32);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.nonZeroIterator();
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4);
      int int1 = (-556);
      cCSMatrix0.power(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(0, (-556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-556
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2339.45).when(matrixAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZero(matrixAccumulator0);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      columnMajorSparseMatrix0.add(3931.47);
      Basic2DMatrix.fromCSV("");
      int int0 = 32;
      columnMajorSparseMatrix0.power(32);
      int int1 = 16384;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(32, (-1), 16384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, (-29.6));
      MockRandom mockRandom0 = new MockRandom(16);
      CRSMatrix.random(9, 16, 7.771561172376096E-14, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.blank();
      Integer integer0 = new Integer(0);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      int int0 = (-2084);
      Integer integer1 = new Integer((-2084));
      columnMajorSparseMatrix0.rank();
      CRSMatrix.block(columnMajorSparseMatrix0, matrix0, matrix0, columnMajorSparseMatrix0);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.power((-1683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1683.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
          Integer integer0 = new Integer(7);
          NumberFormat.getInstance();
          cCSMatrix0.min();
          Matrix matrix0 = cCSMatrix0.removeFirstColumn();
          matrix0.rank();
          MockRandom mockRandom0 = new MockRandom();
          mockRandom0.ints(0L);
          int int0 = Double.SIZE;
          matrix0.equals((Matrix) cCSMatrix0, (-1856.35133));
          // Undeclared exception!
          try { 
            cCSMatrix0.updateColumn(13, vectorFunction0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 13
             //
             verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 7;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply((double) 7);
      vector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      DecimalFormat decimalFormat1 = new DecimalFormat("");
      decimalFormat1.setPositiveSuffix("");
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.getRow((-1659144684));
      decimalFormatSymbols0.getInternationalCurrencySymbol();
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(0, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 7.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(2346, 1533, 32);
      cCSMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(2346, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = (-2407);
      Integer integer0 = new Integer((-2407));
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      int int2 = 9;
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(9, (double) 0, (Random) mockRandom0);
      mockRandom0.nextGaussian();
      mockRandom0.doubles((long) 0);
      int int3 = NumberFormat.FRACTION_FIELD;
      String string0 = "-BocQv";
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      DenseMatrix denseMatrix0 = basic2DMatrix0.toDenseMatrix();
      Vector vector0 = columnMajorSparseMatrix0.getRow((-2407));
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-2407), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 7;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      sparseVector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      decimalFormat0.setPositiveSuffix("");
      cCSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(7, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      NumberFormat.getInstance();
      cCSMatrix0.infinityNorm();
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      matrix0.rank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      int int0 = 36;
      int int1 = 1;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 0, 36, 7, 7, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      NumberFormat.getInstance();
      cCSMatrix0.infinityNorm();
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeFirstColumn();
      cCSMatrix1.rank();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix1.non(matrixPredicate0);
      int int0 = (-1);
      int int1 = 37;
      // Undeclared exception!
      try { 
        cCSMatrix1.insert((Matrix) cCSMatrix0, (-1), 37, (-1), (-731), 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1, -731
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 26;
      int int1 = (-1004);
      Integer integer0 = new Integer((-1004));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(26, 26);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = basic2DMatrix0.toString();
      Basic2DMatrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        Vector.zero((-2867));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      NumberFormat.getInstance();
      cCSMatrix0.infinityNorm();
      cCSMatrix0.min();
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      int int0 = Double.MAX_EXPONENT;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, true, true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 1023, 36, 7, 7, 1023, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1023, 36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("aN2e~zbF}v[f", decimalFormatSymbols0);
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.multiply(0.0);
      Vector vector1 = vector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7);
      CCSMatrix.identity(7);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      MatrixFactory<RowMajorSparseMatrix> matrixFactory0 = (MatrixFactory<RowMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.equals((Object) vector1);
      CCSMatrix.identity(0);
      cCSMatrix0.insertRow(1, vector1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      sparseVector0.copyOfLength(7);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      Vector vector0 = cCSMatrix0.getRow(7);
      int int0 = 0;
      denseMatrix0.insertColumn(0, vector0);
      int int1 = 1155;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Basic2DMatrix.randomSymmetric(1155, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getPositiveSuffix();
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      Vector vector0 = sparseVector0.copyOfLength(25);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(25);
      decimalFormat0.setPositiveSuffix("");
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.insertColumn(4, vector0);
      MockRandom mockRandom0 = new MockRandom((-376L));
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(7, mockRandom0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.get(7, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(996);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(44);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.select(intArray0, intArray0);
      matrix0.setAll(44);
      matrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VectorOperation<String> vectorOperation0 = (VectorOperation<String>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(7, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = columnMajorSparseMatrix0.blankOfRows(4);
      Matrix matrix1 = columnMajorSparseMatrix0.insert(matrix0);
      matrix1.equals((Object) null);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 7x7 does not equal to 4x7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.nonZeroIterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double double0 = new Integer(4);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom();
      basic2DMatrix0.toString();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      cRSMatrix0.rank();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      Integer integer0 = new Integer(1);
      cRSMatrix1.rank();
      cCSMatrix0.determinant();
      Vector.zero(4);
      cCSMatrix0.euclideanNorm();
      int int1 = 715;
      CCSMatrix.zero(2685, 2685);
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
