/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:46:02 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      classWriter0.version = 16777215;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-35), "\"8", "\"8", (String) null, "C2MllZ<");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1204));
      classWriter0.index = (-1204);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1204), "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1146));
      classWriter0.version = (-854);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-854), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1204));
      classWriter0.index = (-1204);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1204), "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter", "org.apache.commons.io.filefilter.TrueFieFilter");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-13), "^;s6o", "", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeInvisibleAnnotations", "N$)nvO=F+o9O%[\"", "RuntimeInvisibleAnnotations", "N$)nvO=F+o9O%[\"");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1297));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-678), "java/lang/String", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 0, "x17)xb_O)Cjs", "", "x17)xb_O)Cjs", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-942), "3HS:n~+DN'axw|P^^", "A=7oElVUK q;NEB!~", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3077, "Y=we_9*D/S'", "Y=we_9*D/S'", "", "Y=we_9*D/S'");
      ByteVector byteVector0 = new ByteVector(1);
      Attribute attribute0 = new Attribute("+WyME]{{@,b:w");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3077, "Y=we_9*D/S'", "Y=we_9*D/S'", "", "Y=we_9*D/S'");
      ByteVector byteVector0 = new ByteVector(131072);
      fieldWriter0.visitAnnotation("Y=we_9*D/S'", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2969), "", "/Y% qzhK9%}$U", "@d=</", (Object) null);
      ByteVector byteVector0 = new ByteVector(10);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "The suffix must not be null", "org.apache.commons.io.filefilter.SuffixFileFilter", (String) null, "The suffix must not be null");
      Attribute attribute0 = new Attribute("The suffix must not be null");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777265);
      classWriter0.version = 16777265;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-35), "", "", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(101, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 220, "rU61", "", "rU61", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1297));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-678), "java/lang/String", "", "", "");
      fieldWriter0.visitAnnotation("Synthetic", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(178, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3077, "Y=we_9*D/S'", "Y=we_9*D/S'", "", "Y=we_9*D/S'");
      fieldWriter0.visitAnnotation("Y=we_9*D/S'", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeInvisibleAnnotations", "N$)nvO=F+o9O%[\"", "RuntimeInvisibleAnnotations", "N$)nvO=F+o9O%[\"");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 220, "rU61", "", "rU61", (Object) null);
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(133);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 133, "N$)nvO=F+o9O%[\"", "9DtKtZHO0Tht;{k?", "9DtKtZHO0Tht;{k?", "9DtKtZHO0Tht;{k?");
      fieldWriter0.visitEnd();
  }
}
