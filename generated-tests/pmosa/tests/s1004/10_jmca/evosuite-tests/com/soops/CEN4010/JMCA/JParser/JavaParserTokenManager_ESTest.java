/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 00:08:24 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (byte) (-125), (byte) (-125), 47);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-9);
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, (-1727), (byte) (-9));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("le5", token0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(21);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 21. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-27);
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.tokenBegin = (int) (byte)53;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[0];
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2150), 29, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2150, column 31.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[0] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[1];
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-29), (byte) (-29), 349);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      byteArrayInputStream0.mark(28);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -29, column -28.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2977, 0, (byte) (-27));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 5;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 887, 73);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("w", token0.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)53;
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      byteArrayInputStream0.read();
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.curChar = 'P';
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-27);
      byteArrayInputStream0.read(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)70;
      byteArray0[1] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1151));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1151. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(66, token0.kind);
      assertEquals("3", token0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream1.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2956, 0, (byte) (-27));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 5;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)2);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream1.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2956, 0, (byte) (-27));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 5;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream1.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2956, 0, (byte) (-27));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 5;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, 5, 67, (byte)72);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5, column 69.  Encountered: <EOF> after : \"\\'s\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.markSupported();
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 38, 2134, 67);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 38, column 2136.  Encountered: <EOF> after : \"\\'W\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte) (-45));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2325);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2325. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2325);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2325. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[0] = '\'';
      charArray0[2] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 476, 111, (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(113, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[0] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 476, 111, (byte)72);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(113, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)49, (byte)124, (byte)49, (byte)49, (byte)49, (byte)49}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)49, (byte)124, (byte)49, (byte)49, (byte)49, (byte)49}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)124;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte)49;
      byteArray1[6] = (byte)124;
      byteArray1[7] = (byte)124;
      byteArray1[8] = (byte)49;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(9, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("||", token0.toString());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(97, token0.kind);
      assertEquals(2, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)49, (byte)124, (byte)49, (byte)124, (byte)124, (byte)49}, byteArray1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(106, token1.kind);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("=GA1^qJ", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertNotNull(printStream0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = 's';
      charArray0[3] = '1';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', 's', '1', '\'', '\'', '\'', '\''}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\'', '\'', 's', '1', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, (-1), 476, 3179);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'\'', '\'', 's', '1', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', '\'', 's', '1', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 477.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("TT", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("\"T\"", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(73, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 39. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1184);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream1));
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream2);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertFalse(dataInputStream0.equals((Object)dataInputStream1));
      assertFalse(dataInputStream0.equals((Object)dataInputStream2));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = '\'';
      charArray0[5] = 's';
      charArray0[6] = 's';
      charArray0[7] = 's';
      charArray0[8] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0, (-1), 1184, 67);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1187, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(1184, javaCharStream1.getBeginColumn());
      assertEquals(1187, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("ssss", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1184, token0.beginColumn);
      assertEquals(1187, token0.endColumn);
      assertEquals((-1), token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'s', 's', 's', 's', '\'', 's', 's', 's', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1187, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(1184, javaCharStream1.getBeginColumn());
      assertEquals(1187, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)45);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)45, (byte)45}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("--", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, 71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 71. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)49, (-2509), 67);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals("WWW", token0.toString());
      assertEquals((-2507), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-2507), javaCharStream0.getEndColumn());
      assertEquals((-2509), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, token0.beginLine);
      assertEquals((-2509), token0.beginColumn);
      assertEquals(49, token0.endLine);
      assertEquals((-2507), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals((-2507), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-2507), javaCharStream0.getEndColumn());
      assertEquals((-2509), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)34;
      PipedInputStream pipedInputStream0 = new PipedInputStream(21);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("pgS");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0, 1181);
      assertNotNull(bufferedReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, (byte)34, (byte)84, 4075);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream1.getBeginLine());
      assertEquals(86, javaCharStream1.getEndColumn());
      assertEquals(34, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(34, javaCharStream1.getEndLine());
      assertEquals(86, javaCharStream1.getColumn());
      assertEquals("pgS", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.beginColumn);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endLine);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream1.getBeginLine());
      assertEquals(86, javaCharStream1.getEndColumn());
      assertEquals(34, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(34, javaCharStream1.getEndLine());
      assertEquals(86, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)34, (byte)84, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)84, (byte)84, 67);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals("2", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.endColumn);
      assertEquals(84, token0.beginLine);
      assertEquals(84, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(66, token0.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)49;
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '?';
      charArray0[2] = 'F';
      charArray0[3] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '?', 'F', '{'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1429), (-3595), 126);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'S', '?', 'F', '{'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'S', '?', 'F', '{'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'S', '?', 'F', '{'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'S', '?', 'F', '{'}, charArray0);
      assertEquals("S", token0.toString());
      assertEquals((-1429), javaCharStream0.getLine());
      assertEquals((-1429), javaCharStream0.getEndLine());
      assertEquals((-3595), javaCharStream0.getColumn());
      assertEquals((-3595), javaCharStream0.getBeginColumn());
      assertEquals((-3595), javaCharStream0.getEndColumn());
      assertEquals((-1429), javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1429), token0.beginLine);
      assertEquals((-1429), token0.endLine);
      assertEquals((-3595), token0.endColumn);
      assertEquals((-3595), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 126);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 126. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)34, (byte)52, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)34, (byte)52, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'I';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 'G';
      charArray0[5] = ' ';
      charArray0[6] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'I', '4', '4', 'G', ' ', 'c'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)34, 18, (byte)34);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'%', 'I', '4', '4', 'G', ' ', 'c'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', 'I', '4', '4', 'G', ' ', 'c'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)34, (byte)52, (byte)34, (byte)34}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', 'I', '4', '4', 'G', ' ', 'c'}, charArray0);
      assertEquals(18, javaCharStream1.getEndColumn());
      assertEquals(34, javaCharStream1.getLine());
      assertEquals(18, javaCharStream1.getBeginColumn());
      assertEquals(34, javaCharStream1.getEndLine());
      assertEquals(34, javaCharStream1.getBeginLine());
      assertEquals(18, javaCharStream1.getColumn());
      assertEquals("%", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endLine);
      assertEquals(18, token0.endColumn);
      assertEquals(18, token0.beginColumn);
      assertEquals(108, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (int) (byte)52);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 52. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)84;
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = ' ';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = ' ';
      charArray0[6] = 'c';
      charArray0[7] = 'I';
      charArray0[8] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'I', 'I', ' ', 'I', 'I', ' ', 'c', 'I', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 18, 92, 18);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'I', 'I', ' ', 'I', 'I', ' ', 'c', 'I', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'I', 'I', ' ', 'I', 'I', ' ', 'c', 'I', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'I', 'I', ' ', 'I', 'I', ' ', 'c', 'I', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'I', 'I', ' ', 'I', 'I', ' ', 'c', 'I', 'c'}, charArray0);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals("II", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token0.endColumn);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(92, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (int) (byte)84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xd{7B;l.Y2 )zo[r=p");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = ',';
      charArray0[2] = '*';
      charArray0[3] = ')';
      charArray0[4] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1316), (byte)34, (byte)52);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals((-1316), javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals((-1316), javaCharStream0.getBeginLine());
      assertEquals((-1316), javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals("j", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1316), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      assertEquals((-1316), token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals((-1316), javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals((-1316), javaCharStream0.getBeginLine());
      assertEquals((-1316), javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals("", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals((-1316), javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals((-1316), javaCharStream0.getBeginLine());
      assertEquals((-1316), javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1316), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1316), token1.endLine);
      assertEquals(34, token1.endColumn);
      assertEquals(34, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'j', ',', '*', ')', ':'}, charArray0);
      assertEquals("", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals((-1316), javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals((-1316), javaCharStream0.getBeginLine());
      assertEquals((-1316), javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1316), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1316), token1.endLine);
      assertEquals(34, token1.endColumn);
      assertEquals(34, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)124, (byte)84}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)124, (byte)84}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)84, (byte)124, (byte)84}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)84, (byte)124, (byte)84}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)84, (byte)124, (byte)84}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(106, token1.kind);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("T");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("44", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '+';
      charArray0[2] = '^';
      charArray0[3] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '+', '^', 's'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)52);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'t', '+', '^', 's'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 1066, 1, 18);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'t', '+', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'t', '+', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'t', '+', '^', 's'}, charArray0);
      assertEquals("t", token1.toString());
      assertEquals(1066, javaCharStream1.getLine());
      assertEquals(1066, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1066, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(74, token1.kind);
      assertEquals(1066, token1.beginLine);
      assertEquals(1066, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream1, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = '+';
      charArray0[2] = 's';
      charArray0[3] = '+';
      charArray0[4] = 's';
      charArray0[5] = '^';
      charArray0[6] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)104);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-32), (byte)84, 42);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'s', '+', 's', '+', 's', '^', '^'}, charArray0);
      assertEquals((-32), javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals((-32), javaCharStream0.getLine());
      assertEquals((-32), javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals("s", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.beginColumn);
      assertEquals((-32), token0.beginLine);
      assertEquals((-32), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (-32));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -32. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'X';
      charArray0[2] = '3';
      charArray0[3] = 'M';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 84, (-5158), 1827);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-5158), javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals((-5158), javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals((-5158), javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.kind);
      assertEquals((-5158), token0.endColumn);
      assertEquals(84, token0.beginLine);
      assertEquals((-5158), token0.beginColumn);
      assertEquals(84, token0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-5158), javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals((-5158), javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals((-5158), javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.kind);
      assertEquals((-5158), token0.endColumn);
      assertEquals(84, token0.beginLine);
      assertEquals((-5158), token0.beginColumn);
      assertEquals(84, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '9';
      charArray0[2] = '!';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = '\\';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      lineNumberReader0.mark(19);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)45, (-1630), 139);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-1630), javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-1630), javaCharStream0.getBeginColumn());
      assertEquals((-1630), javaCharStream0.getEndColumn());
      assertEquals(">", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1630), token0.beginColumn);
      assertEquals((-1630), token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(45, token0.endLine);
      assertEquals(45, token0.beginLine);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'>', '9', '!', 'j', 'j', '\\', 'm'}, charArray0);
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-1630), javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-1630), javaCharStream0.getBeginColumn());
      assertEquals((-1630), javaCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1630), token1.endColumn);
      assertEquals((-1630), token1.beginColumn);
      assertEquals(45, token1.endLine);
      assertEquals(45, token1.beginLine);
      assertEquals(124, token1.kind);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', 's', 's', 's', 's', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 44, 108, 84);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', 's', 's', 's', 's', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', 's', 's', 's', 's', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'n', 's', 's', 's', 's', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', 's', 's', 's', 's', 't'}, charArray0);
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals("nsssst", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(113, token0.endColumn);
      assertEquals(44, token0.endLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(44, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2252);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2252. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)124;
      byteArray1[5] = (byte) (-95);
      byteArray1[6] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = 79;
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 79, (byte)14, (byte)101);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)84, (-3177), (byte)84);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals("heT", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-3175), javaCharStream2.getEndColumn());
      assertEquals(84, javaCharStream2.getEndLine());
      assertEquals((-3175), javaCharStream2.getColumn());
      assertEquals(84, javaCharStream2.getLine());
      assertEquals(84, javaCharStream2.getBeginLine());
      assertEquals((-3177), javaCharStream2.getBeginColumn());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertEquals(74, token0.kind);
      assertEquals((-3177), token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginLine);
      assertEquals((-3175), token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream2.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)104, (byte)101, (byte)84, (byte)0, (byte)124, (byte) (-95), (byte)14}, byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-3175), javaCharStream2.getEndColumn());
      assertEquals(84, javaCharStream2.getEndLine());
      assertEquals((-3175), javaCharStream2.getColumn());
      assertEquals(84, javaCharStream2.getLine());
      assertEquals(84, javaCharStream2.getBeginLine());
      assertEquals((-3177), javaCharStream2.getBeginColumn());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream2.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column -3174.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream1);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '\'';
      charArray0[2] = 's';
      charArray0[4] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '\'', 's', '\u0000', 's'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-472), (-1), 108);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'s', '\'', 's', '\u0000', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'s', '\'', 's', '\u0000', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'s', '\'', 's', '\u0000', 's'}, charArray0);
      assertEquals((-472), javaCharStream1.getLine());
      assertEquals((-472), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals((-472), javaCharStream1.getEndLine());
      assertEquals("s", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals((-472), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-472), token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new char[] {'s', '\'', 's', '\u0000', 's'}, charArray0);
      assertEquals((-472), javaCharStream1.getLine());
      assertEquals((-472), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals((-472), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -472, column 2.  Encountered: \"\" (0), after : \"\\'s\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)70, (byte)108, (byte)70, (byte)108, (byte)108, (byte)70}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)70, (byte)108, (byte)70, (byte)108, (byte)108, (byte)70}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)108, (byte)70, (byte)108, (byte)70, (byte)108, (byte)108, (byte)70}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)108, (byte)70, (byte)108, (byte)70, (byte)108, (byte)108, (byte)70}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("lFlFllF", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'X';
      charArray0[2] = '3';
      charArray0[3] = 'M';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 84, (-5158), 1827);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals((-5158), javaCharStream0.getBeginColumn());
      assertEquals((-5158), javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals((-5158), javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-5158), token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(84, token0.beginLine);
      assertEquals((-5158), token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals((-5155), javaCharStream0.getColumn());
      assertEquals((-5157), javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals((-5155), javaCharStream0.getEndColumn());
      assertEquals("X3M", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(84, token1.beginLine);
      assertEquals((-5157), token1.beginColumn);
      assertEquals((-5155), token1.endColumn);
      assertEquals(84, token1.endLine);
      assertEquals(74, token1.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'|', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals((-5155), javaCharStream0.getColumn());
      assertEquals((-5157), javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals((-5155), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-29);
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, int0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.tokenBegin = (int) (byte)0;
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0v", token0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 84, 85, 67);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(85, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginLine);
      
      javaParserTokenManager0.defaultLexState = 2563;
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, 102, 18);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals("c", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(102, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.endColumn);
      assertEquals(0, token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 124);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 124. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '8';
      charArray0[2] = 'c';
      charArray0[3] = 'I';
      charArray0[4] = ' ';
      charArray0[5] = 'I';
      charArray0[6] = ')';
      charArray0[7] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', '8', 'c', 'I', ' ', 'I', ')', 'v'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 92, 13, 13);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', '8', 'c', 'I', ' ', 'I', ')', 'v'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', '8', 'c', 'I', ' ', 'I', ')', 'v'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', '8', 'c', 'I', ' ', 'I', ')', 'v'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', '8', 'c', 'I', ' ', 'I', ')', 'v'}, charArray0);
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(92, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getBeginLine());
      assertEquals("w8cI", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(16, token0.endColumn);
      assertEquals(92, token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(92, token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (int) (byte)34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 34. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)45}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 84, 85, 67);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.debugStream = javaParserTokenManager0.debugStream;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.jjimageLen = 100;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(85, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(85, token0.endColumn);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1079), 1605, 84);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager3);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', 'B'}, charArray0);
      assertEquals("B", token1.toString());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(86, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(86, token1.endColumn);
      assertEquals(84, token1.endLine);
      assertEquals(84, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager4 = null;
      try {
        javaParserTokenManager4 = new JavaParserTokenManager(javaCharStream0, 90);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 90. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0086';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0086', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0086', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0086', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0086', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0086\" (134), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0086';
      charArray0[1] = 'X';
      charArray0[2] = '3';
      charArray0[3] = 'M';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0086', 'X', '3', 'M', '['}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\u0086', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 84, (-5158), 1842);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0086', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0086', 'X', '3', 'M', '['}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column -5158.  Encountered: \"\\u0086\" (134), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'M';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'p';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)34, 82, (byte)34);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals("XM", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.endColumn);
      assertEquals(82, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'X', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals("[", token1.toString());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertEquals(84, token1.endColumn);
      assertEquals(84, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(34, token1.endLine);
      assertEquals(34, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)67;
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'T';
      charArray0[2] = 'P';
      charArray0[3] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'T', 'P', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)124, (byte)67, 43);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'T', 'P', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'T', 'P', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'i', 'T', 'P', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'T', 'P', 'i'}, charArray0);
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals("iTPi", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(70, token0.endColumn);
      assertEquals(124, token0.endLine);
      assertEquals(124, token0.beginLine);
      assertEquals(67, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 117. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)70;
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("mm", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'m', 'm'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'M';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'p';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'3', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)34, 82, (byte)34);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'3', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (byte)84);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, 4, 99, (-1537));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(fileDescriptor0.valid());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(fileDescriptor0.valid());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'3', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'3', 'M', '[', '[', 'p', 'M', 'M'}, charArray0);
      assertEquals("3M", token0.toString());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endLine);
      assertEquals(82, token0.beginColumn);
      assertEquals(34, token0.beginLine);
      assertEquals(83, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream1, (-2692));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2692. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'X';
      charArray0[3] = 'M';
      charArray0[4] = 'X';
      charArray0[5] = 'M';
      charArray0[6] = 'R';
      charArray0[7] = 'X';
      charArray0[8] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, (byte)84);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)84, 113);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'M', 'M', 'X', 'M', 'X', 'M', 'R', 'X', 'X'}, charArray0);
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals("MMXMXMRXX", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(121, token0.endColumn);
      assertEquals(113, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', '\u0000', 'S', 'N', 'H'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'b', '\u0000', 'S', 'N', 'H'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (byte)0, (byte)49);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', '\u0000', 'S', 'N', 'H'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', '\u0000', 'S', 'N', 'H'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', '\u0000', 'S', 'N', 'H'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals("b", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(49, token0.endColumn);
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 868, 21, 28);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 122, 1583, (byte)124);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals("GG", token0.toString());
      assertEquals(122, javaCharStream1.getBeginLine());
      assertEquals(1587, javaCharStream1.getEndColumn());
      assertEquals(1587, javaCharStream1.getColumn());
      assertEquals(122, javaCharStream1.getEndLine());
      assertEquals(122, javaCharStream1.getLine());
      assertEquals(1586, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1586, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1587, token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals("", token1.toString());
      assertEquals(122, javaCharStream1.getBeginLine());
      assertEquals(1587, javaCharStream1.getEndColumn());
      assertEquals(1587, javaCharStream1.getColumn());
      assertEquals(122, javaCharStream1.getEndLine());
      assertEquals(122, javaCharStream1.getLine());
      assertEquals(1587, javaCharStream1.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, token1.kind);
      assertEquals(1587, token1.beginColumn);
      assertEquals(122, token1.endLine);
      assertEquals(1587, token1.endColumn);
      assertEquals(122, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'G', 'G'}, charArray0);
      assertEquals("", token2.toString());
      assertEquals(122, javaCharStream1.getBeginLine());
      assertEquals(1587, javaCharStream1.getEndColumn());
      assertEquals(1587, javaCharStream1.getColumn());
      assertEquals(122, javaCharStream1.getEndLine());
      assertEquals(122, javaCharStream1.getLine());
      assertEquals(1587, javaCharStream1.getBeginColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(122, token2.endLine);
      assertEquals(122, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1587, token2.endColumn);
      assertEquals(1587, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '0';
      charArray0[2] = '{';
      charArray0[3] = '\\';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = 'F';
      charArray0[7] = '{';
      charArray0[8] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', '0', '{', '\\', '{', '{', 'F', '{', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)48, (byte)124, (byte)124);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'{', '0', '{', '\\', '{', '{', 'F', '{', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'{', '0', '{', '\\', '{', '{', 'F', '{', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'{', '0', '{', '\\', '{', '{', 'F', '{', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'{', '0', '{', '\\', '{', '{', 'F', '{', 'S'}, charArray0);
      assertEquals("{", token0.toString());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(79, token0.kind);
      assertEquals(48, token0.endLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(48, token0.beginLine);
      assertEquals(124, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 48. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<<", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(109, token0.kind);
      assertEquals(1, token0.beginLine);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)49, (byte)124, (byte)49, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '6';
      charArray0[2] = 'b';
      charArray0[3] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', '6', 'b', 'Q'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1104, (byte)49, (byte)49);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', '6', 'b', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', '6', 'b', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'=', '6', 'b', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', '6', 'b', 'Q'}, charArray0);
      assertEquals("=", token0.toString());
      assertEquals(1104, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(1104, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(1104, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1104, token0.endLine);
      assertEquals(49, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(1104, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 82. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)46, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)46, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)46, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)46, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)46, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)34;
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 562);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 41, (-1901), 41);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      assertEquals((-1901), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1899), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1899), javaCharStream0.getColumn());
      assertEquals("iii", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(41, token0.endLine);
      assertEquals((-1901), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals((-1899), token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("44", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '2';
      charArray0[2] = '^';
      charArray0[3] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '2', '^', 's'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)52);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'t', '2', '^', 's'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 268, 1, 18);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'t', '2', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'t', '2', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'t', '2', '^', 's'}, charArray0);
      assertEquals("t2", token1.toString());
      assertEquals(268, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(268, javaCharStream1.getLine());
      assertEquals(268, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(268, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(268, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream1, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)101;
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'F';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = 'S';
      charArray0[6] = '{';
      charArray0[7] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2, (byte)101, (byte)101);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'8', 'F', '{', '{', '{', 'S', '{', 'S'}, charArray0);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals("8F", token0.toString());
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token0.endLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals(102, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'D';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'D', '9', (byte)44);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'9', 'D'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("9D", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', 's', 's', '\''}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 3326, (-1904), 89);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'\'', 's', 's', '\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', 's', 's', '\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'\'', 's', 's', '\''}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3326, column -1902.  Encountered: \"s\" (115), after : \"\\'s\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '\\';
      charArray0[2] = '1';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'(', '\\', '1', '\\', '\\'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)44, (byte)44, (byte)44);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'(', '\\', '1', '\\', '\\'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'(', '\\', '1', '\\', '\\'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'(', '\\', '1', '\\', '\\'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'(', '\\', '1', '\\', '\\'}, charArray0);
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(44, javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getLine());
      assertEquals("(", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.kind);
      assertEquals(44, token0.beginLine);
      assertEquals(44, token0.endColumn);
      assertEquals(44, token0.beginColumn);
      assertEquals(44, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 37. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = '8';
      charArray0[2] = 'c';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[1] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'c', 'c', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'c', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("ccc", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)67;
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '<';
      charArray0[3] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'`', '`', '<', 'i'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)124, (byte)67, 43);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'`', '`', '<', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'`', '`', '<', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'`', '`', '<', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 124, column 67.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = ')';
      charArray0[2] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("8", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(78, token1.kind);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'8', ')', 'w'}, charArray0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1382), (byte)104, 10);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals((-1382), javaCharStream0.getLine());
      assertEquals((-1382), javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals((-1382), token0.endLine);
      assertEquals((-1382), token0.beginLine);
      assertEquals(104, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals((-1382), javaCharStream0.getLine());
      assertEquals((-1382), javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(104, javaCharStream0.getEndColumn());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals((-1382), javaCharStream0.getLine());
      assertEquals((-1382), javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals((-1382), token1.endLine);
      assertEquals((-1382), token1.beginLine);
      assertEquals(104, token1.beginColumn);
      assertEquals(104, token1.endColumn);
      
      Token token2 = Token.newToken((-541));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-1382));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1382. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)118, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3478, (byte)48, 742);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(3478, javaCharStream0.getBeginLine());
      assertEquals(55, javaCharStream0.getEndColumn());
      assertEquals(3478, javaCharStream0.getLine());
      assertEquals(3478, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getColumn());
      assertEquals("JJJJJJJJ", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(3478, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(55, token0.endColumn);
      assertEquals(48, token0.beginColumn);
      assertEquals(3478, token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 55);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 55. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'D';
      charArray0[2] = ' ';
      charArray0[3] = 'D';
      charArray0[4] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 24);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 76, 26, 1066);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals("wD", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(27, token0.endColumn);
      assertEquals(76, token0.beginLine);
      assertEquals(26, token0.beginColumn);
      assertEquals(76, token0.endLine);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'w', 'D', ' ', 'D', ' '}, charArray0);
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'W', 'W', 'W'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)72, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 124, (byte)124);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)72, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)72, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)72, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(125, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(125, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals("||", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(124, token0.endLine);
      assertEquals(97, token0.kind);
      assertEquals(125, token0.endColumn);
      assertEquals(124, token0.beginColumn);
      assertEquals(124, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)124, (byte)124, (byte)124, (byte)72, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(106, token1.kind);
      assertEquals(124, token1.endLine);
      assertEquals(126, token1.beginColumn);
      assertEquals(126, token1.endColumn);
      assertEquals(124, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 1143);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1143. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-3443), (byte)124, 1336);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ExpandBuff(false);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.inputStream = (Reader) charArrayReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals((-3443), javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals((-3443), javaCharStream0.getEndLine());
      assertEquals((-3443), javaCharStream0.getBeginLine());
      assertEquals("L", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(124, token0.beginColumn);
      assertEquals((-3443), token0.beginLine);
      assertEquals(124, token0.endColumn);
      assertEquals((-3443), token0.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'L', '.'}, charArray0);
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals((-3443), javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals((-3443), javaCharStream0.getEndLine());
      assertEquals((-3443), javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)84;
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'M';
      charArray0[2] = 'e';
      charArray0[3] = 'z';
      charArray0[4] = 'c';
      charArray0[5] = 'L';
      charArray0[6] = '.';
      charArray0[7] = 'F';
      charArray0[8] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)101, (byte)104, (byte)84);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals("dMezcL", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(109, token1.endColumn);
      assertEquals(101, token1.endLine);
      assertEquals(104, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(101, token1.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', 'c'}, charArray0);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(".", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(101, token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals(101, token2.beginLine);
      assertEquals(110, token2.beginColumn);
      assertEquals(110, token2.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 104. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte byte0 = (byte)101;
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'j';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '\\';
      charArray0[5] = 'j';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'9', 'j', '>', '>', '\\', 'j', '>'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'9', 'j', '>', '>', '\\', 'j', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'9', 'j', '>', '>', '\\', 'j', '>'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'9', 'j', '>', '>', '\\', 'j', '>'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("9j", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1274));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1274. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-29);
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, int0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.tokenBegin = (int) (byte)0;
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("00", token0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-29);
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, int0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.tokenBegin = (int) (byte)0;
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("00", token0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("pppp", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'!', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("pppp", token2.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'c';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 24);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 76, 26, 1066);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("wwc", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(28, token0.endColumn);
      assertEquals(76, token0.beginLine);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(76, token0.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'w', 'w', 'c', ' ', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)104;
      byteArray0[1] = (byte)101;
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'F';
      charArray0[2] = '{';
      charArray0[3] = 'F';
      charArray0[4] = '{';
      charArray0[5] = 'S';
      charArray0[6] = '{';
      charArray0[7] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', 'F', '{', 'F', '{', 'S', '{', 'S'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'8', 'F', '{', 'F', '{', 'S', '{', 'S'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'8', 'F', '{', 'F', '{', 'S', '{', 'S'}, charArray0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("com", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'S';
      charArray0[3] = 'F';
      charArray0[4] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', 'S', '\u0000', 'F', '{'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'8', 'S', '\u0000', 'F', '{'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'8', 'S', '\u0000', 'F', '{'}, charArray0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("com", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)2;
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = ',';
      charArray0[2] = 'W';
      charArray0[3] = 'R';
      charArray0[5] = ')';
      charArray0[6] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      
      int int0 = 89;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)2, 6190, (byte)101);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      assertEquals(6190, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(6190, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(6190, javaCharStream0.getColumn());
      assertEquals("z", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginLine);
      assertEquals(6190, token0.beginColumn);
      assertEquals(2, token0.endLine);
      assertEquals(6190, token0.endColumn);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'z', ',', 'W', 'R', '\u0000', ')', 'r'}, charArray0);
      assertEquals(6190, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(6190, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(6190, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream0, 52);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 52. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&&", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 100);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2608, 2608, 24);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2608, javaCharStream0.getEndLine());
      assertEquals(2609, javaCharStream0.getEndColumn());
      assertEquals(2609, javaCharStream0.getColumn());
      assertEquals(2608, javaCharStream0.getBeginColumn());
      assertEquals(2608, javaCharStream0.getBeginLine());
      assertEquals(2608, javaCharStream0.getLine());
      assertEquals("&&", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(98, token0.kind);
      assertEquals(2608, token0.beginColumn);
      assertEquals(2609, token0.endColumn);
      assertEquals(2608, token0.endLine);
      assertEquals(2608, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1097);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1097. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("44", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = '2';
      charArray0[2] = '^';
      charArray0[3] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'q', '2', '^', 's'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, (byte)52);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'q', '2', '^', 's'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 268, 1, 18);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'q', '2', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'q', '2', '^', 's'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'q', '2', '^', 's'}, charArray0);
      assertEquals("q2", token1.toString());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(268, javaCharStream1.getEndLine());
      assertEquals(268, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(268, javaCharStream1.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(268, token1.beginLine);
      assertEquals(268, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.ReInit(javaCharStream1, 18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'X';
      charArray0[2] = '3';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\\\"\\ufffd\\u0015&\\u0002v\\u001d\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0086';
      charArray0[1] = 'X';
      charArray0[2] = '3';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)116}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)116}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-73), (byte)21, (byte)38, (byte)2, (byte)118, (byte)29, (byte)0, (byte)116}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\\\"\\ufffd\\u0015&\\u0002v\\u001dt\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '[';
      charArray0[2] = ']';
      charArray0[3] = '\"';
      charArray0[4] = '\\';
      charArray0[5] = 'm';
      charArray0[6] = '[';
      charArray0[7] = ',';
      charArray0[8] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '[', ']', '\"', '\\', 'm', '[', ',', 'p'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'>', '[', ']', '\"', '\\', 'm', '[', ',', 'p'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-273), (-1257));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '[', ']', '\"', '\\', 'm', '[', ',', 'p'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '[', ']', '\"', '\\', 'm', '[', ',', 'p'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '[', ']', '\"', '\\', 'm', '[', ',', 'p'}, charArray0);
      assertEquals(">", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals((-1257), javaCharStream0.getEndColumn());
      assertEquals((-273), javaCharStream0.getBeginLine());
      assertEquals((-1257), javaCharStream0.getBeginColumn());
      assertEquals((-1257), javaCharStream0.getColumn());
      assertEquals((-273), javaCharStream0.getLine());
      assertEquals((-273), javaCharStream0.getEndLine());
      assertEquals((-273), token0.beginLine);
      assertEquals((-273), token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals((-1257), token0.endColumn);
      assertEquals((-1257), token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)101, (byte)2}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)101, (byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)101, (byte)2}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)101, (byte)2}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)101, (byte)2}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("e", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)2, 12, 108);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertEquals(2, javaCharStream1.getLine());
      assertEquals(12, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(12, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals(12, javaCharStream1.getBeginColumn());
      assertEquals("r", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(12, token1.beginColumn);
      assertEquals(12, token1.endColumn);
      assertEquals(2, token1.endLine);
      assertEquals(2, token1.beginLine);
      assertEquals(74, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)84);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("V");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 29);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 38, 4075, (byte)34);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(4075, javaCharStream1.getBeginColumn());
      assertEquals(4075, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(4075, javaCharStream1.getColumn());
      assertEquals("V", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(38, token0.endLine);
      assertEquals(38, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4075, token0.endColumn);
      assertEquals(4075, token0.beginColumn);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(4075, javaCharStream1.getBeginColumn());
      assertEquals(4075, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(4075, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaParserTokenManager1.jjimageLen = 0;
      assertEquals(4075, javaCharStream1.getBeginColumn());
      assertEquals(4075, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(4075, javaCharStream1.getColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(4075, javaCharStream1.getBeginColumn());
      assertEquals(4075, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(4075, javaCharStream1.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(38, token2.endLine);
      assertEquals(38, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(4075, token2.endColumn);
      assertEquals(4075, token2.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream1, (-1270));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1270. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'C';
      charArray0[4] = '(';
      charArray0[5] = 'B';
      charArray0[6] = '6';
      charArray0[7] = 't';
      charArray0[8] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("6OuC", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.beginLine);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'6', 'O', 'u', 'C', '(', 'B', '6', 't', 'l'}, charArray0);
      assertEquals("(", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(5, token2.endColumn);
      assertEquals(77, token2.kind);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)108, (byte)108, (byte)108, (byte)108}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("llllll", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 8, 8, (byte)0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(8, javaCharStream1.getLine());
      assertEquals(8, javaCharStream1.getEndLine());
      assertEquals(8, javaCharStream1.getEndColumn());
      assertEquals(8, javaCharStream1.getColumn());
      assertEquals(8, javaCharStream1.getBeginColumn());
      assertEquals(8, javaCharStream1.getBeginLine());
      assertEquals("e", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(8, token0.endLine);
      assertEquals(8, token0.endColumn);
      assertEquals(8, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(8, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 8. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)84;
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'b';
      charArray0[5] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 55, 55);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals("rrrrbr", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(55, token0.beginColumn);
      assertEquals(55, token0.endLine);
      assertEquals(60, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(55, token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'b', 'r'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-29);
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)48, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, int0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '^';
      charArray0[2] = ';';
      charArray0[3] = 'S';
      charArray0[4] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 14, 1274);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'y', '^', ';', 'S', '-'}, charArray0);
      assertEquals(1274, javaCharStream0.getEndColumn());
      assertEquals(1274, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(1274, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1274, token0.beginColumn);
      assertEquals(14, token0.endLine);
      assertEquals(14, token0.beginLine);
      assertEquals(1274, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)84;
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'M';
      charArray0[2] = 'e';
      charArray0[3] = 'z';
      charArray0[4] = 'c';
      charArray0[5] = 'L';
      charArray0[6] = '.';
      charArray0[7] = 'F';
      charArray0[8] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)104, (byte)104, (byte)84);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals("dMezcL", token1.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token1.beginLine);
      assertEquals(104, token1.beginColumn);
      assertEquals(104, token1.endLine);
      assertEquals(109, token1.endColumn);
      assertEquals(74, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager1.curLexState = 24;
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'d', 'M', 'e', 'z', 'c', 'L', '.', 'F', '.'}, charArray0);
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(110, token2.endColumn);
      assertEquals(110, token2.beginColumn);
      assertEquals(104, token2.endLine);
      assertEquals(104, token2.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 104. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = ')';
      charArray0[2] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("w", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals("w", token2.toString());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token3);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals("w", token3.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(1, token3.endColumn);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("w", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token4 = javaParserTokenManager1.jjFillToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token4);
      assertArrayEquals(new char[] {'w', ')', 'w'}, charArray0);
      assertEquals("w", token4.toString());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token4.endColumn);
      assertEquals(1, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[1] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'V'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'V'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'V'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'V'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("eV", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'e', 'V'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        charArrayReader0.read(charArray0, 0, 74);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '7';
      charArray0[2] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("w7w", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals("", token2.toString());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token3);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals("w7w", token3.toString());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("w7w", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      Token token4 = javaParserTokenManager1.jjFillToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token4);
      assertArrayEquals(new char[] {'w', '7', 'w'}, charArray0);
      assertEquals("w7w", token4.toString());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(3, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'K';
      charArray0[2] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6', 'K', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'6', 'K', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'6', 'K', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'6', 'K', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'6', 'K', 'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("6Ku", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'F';
      charArray0[7] = 'v';
      charArray0[8] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 101, (byte)108, (byte)108);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertEquals("-", token1.toString());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(102, token1.kind);
      assertEquals(101, token1.beginLine);
      assertEquals(101, token1.endLine);
      assertEquals(108, token1.endColumn);
      assertEquals(108, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'-', '.', '.', '.', 'c', 'c', 'F', 'v', 'F'}, charArray0);
      assertEquals("...", token2.toString());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertEquals(121, token2.kind);
      assertEquals(101, token2.beginLine);
      assertEquals(111, token2.endColumn);
      assertEquals(101, token2.endLine);
      assertEquals(109, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 8, (byte)0, (byte)48);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("e", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'e', ']'}, charArray0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("]", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("_", token0.toString());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)95, (byte)37, (byte)82, (byte)31, (byte)94, (byte)14}, byteArray0);
      assertEquals("%", token1.toString());
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(108, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = '6';
      charArray0[4] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 't', 't', '6', '6'}, charArray0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'B';
      charArray1[2] = 't';
      charArray1[3] = 'B';
      charArray1[4] = 't';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'(', 'B', 't', 'B', 't'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'l', 't', 't', '6', '6'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', 't', 't', '6', '6'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'l', 't', 't', '6', '6'}, charArray0);
      assertEquals("ltt66", token0.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'l', 't', 't', '6', '6'}, charArray0);
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotSame(charArray0, charArray1);
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2444);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2444. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      charArray0[2] = 'c';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(".", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("zc", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, 2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("zc", token1.toString());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'.', 'z', 'c', '.', '.', 'c'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("zc", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)108;
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '\"';
      charArray0[2] = 'K';
      charArray0[3] = ' ';
      charArray0[4] = 'j';
      charArray0[5] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\"', 'K', ' ', 'j', 'H'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', '\"', 'K', ' ', 'j', 'H'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '\"', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '\"', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '\"', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals("/", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\\\"K jH\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)108;
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '\u0013';
      charArray0[2] = 'K';
      charArray0[3] = ' ';
      charArray0[4] = 'j';
      charArray0[5] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '\u0013', 'K', ' ', 'j', 'H'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', '\u0013', 'K', ' ', 'j', 'H'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '\u0013', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '\u0013', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '\u0013', 'K', ' ', 'j', 'H'}, charArray0);
      assertEquals("/", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u0013\" (19), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'N';
      charArray0[2] = 'u';
      charArray0[3] = '`';
      charArray0[4] = '|';
      charArray0[5] = 'n';
      charArray0[6] = 'v';
      charArray0[7] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      assertEquals("%", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(108, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertArrayEquals(new char[] {'%', 'N', 'u', '`', '|', 'n', 'v', 'P'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)52, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = '\\';
      charArray0[3] = 'p';
      charArray0[4] = '\\';
      charArray0[5] = '[';
      charArray0[6] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 32, (byte)0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals("[", token0.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(33, token0.endLine);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(33, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'[', 'p', '\\', 'p', '\\', '[', 'm'}, charArray0);
      assertEquals("p", token1.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertEquals(33, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(33, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 3.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'C';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'C'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 18, (-1593), 52);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'C'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'C'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'C'}, charArray1);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-1593), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1592), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals((-1592), javaCharStream0.getColumn());
      assertEquals("OO", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(18, token0.beginLine);
      assertEquals((-1592), token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1593), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'C'}, charArray1);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-1589), javaCharStream0.getColumn());
      assertEquals((-1589), javaCharStream0.getBeginColumn());
      assertEquals((-1589), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals("C", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1589), token1.beginColumn);
      assertEquals((-1589), token1.endColumn);
      assertEquals(18, token1.beginLine);
      assertEquals(18, token1.endLine);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '?';
      charArray0[2] = 'h';
      charArray0[3] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, (-1016), 48);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals("s", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1016), token0.endLine);
      assertEquals(48, token0.endColumn);
      assertEquals(48, token0.beginColumn);
      assertEquals((-1016), token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new char[] {'s', '?', 'h', '4'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals("s", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1016), token0.endLine);
      assertEquals(48, token0.endColumn);
      assertEquals(48, token0.beginColumn);
      assertEquals((-1016), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)108;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)108, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)108, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)108, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)108, (byte)87, (byte)108, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("lWl", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(".", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (byte)42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 42. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)78;
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '*';
      charArray0[2] = '+';
      charArray0[3] = '>';
      charArray0[4] = '{';
      charArray0[5] = 'H';
      charArray0[6] = '7';
      charArray0[7] = '|';
      charArray0[8] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '*', '+', '>', '{', 'H', '7', '|', '0'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'>', '*', '+', '>', '{', 'H', '7', '|', '0'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '*', '+', '>', '{', 'H', '7', '|', '0'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '*', '+', '>', '{', 'H', '7', '|', '0'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '*', '+', '>', '{', 'H', '7', '|', '0'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(">", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)0, (byte)65, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '^';
      charArray0[2] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token0.toString());
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'=', '^', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token1.toString());
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(107, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 87. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '-';
      charArray0[2] = 'f';
      charArray0[3] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("}", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(80, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(102, token1.kind);
      assertEquals(2, token1.beginColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("}", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(80, token0.kind);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'}', '-', 'f', ';'}, charArray0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token2.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(102, token2.kind);
      assertEquals(2, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '4';
      charArray0[2] = 't';
      charArray0[3] = '{';
      charArray0[4] = 'Z';
      charArray0[5] = '#';
      charArray0[6] = '(';
      charArray0[7] = 'C';
      charArray0[8] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(">", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals("4t", token1.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'>', '4', 't', '{', 'Z', '#', '(', 'C', 'y'}, charArray0);
      assertEquals("4t", token2.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token2, token1);
      assertEquals(3, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)31, (byte)95, (byte)14, (byte)82, (byte)82, (byte)37, (byte)82}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)82, (byte)31, (byte)95, (byte)14, (byte)82, (byte)82, (byte)37, (byte)82}, byteArray0);
      assertEquals(8, byteArrayInputStream1.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)82, (byte)31, (byte)95, (byte)14, (byte)82, (byte)82, (byte)37, (byte)82}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)82, (byte)31, (byte)95, (byte)14, (byte)82, (byte)82, (byte)37, (byte)82}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)82, (byte)31, (byte)95, (byte)14, (byte)82, (byte)82, (byte)37, (byte)82}, byteArray0);
      assertEquals("R", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u001f\" (31), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'h';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = '?';
      charArray0[7] = '?';
      charArray0[8] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1016), 48);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertEquals("?", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1016), token0.endLine);
      assertEquals(48, token0.endColumn);
      assertEquals(91, token0.kind);
      assertEquals((-1016), token0.beginLine);
      assertEquals(48, token0.beginColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new char[] {'?', 'h', '4', '4', 'h', 'h', '?', '?', 'U'}, charArray0);
      assertEquals((-1016), javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals((-1016), javaCharStream0.getEndLine());
      assertEquals((-1016), javaCharStream0.getLine());
      assertEquals("?", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1016), token0.endLine);
      assertEquals(48, token0.endColumn);
      assertEquals(91, token0.kind);
      assertEquals((-1016), token0.beginLine);
      assertEquals(48, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-56), (byte)6, (byte)90, (byte)72}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-56), (byte)6, (byte)90, (byte)72}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-56), (byte)6, (byte)90, (byte)72}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.curLexState = 1;
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TYe}<");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'P';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      charArray0[4] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', 'P', 'z', 'e', 'd'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'P', 'z', 'e', 'd'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'e', 'P', 'z', 'e', 'd'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'e', 'P', 'z', 'e', 'd'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("ePzed", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      
      int int0 = (-5260);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-5260));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -5260. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)35;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)35;
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 'G';
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'P', '4', '4', 'G', ' ', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)35, 18, (byte)35);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', 'P', '4', '4', 'G', ' ', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', 'P', '4', '4', 'G', ' ', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', 'P', '4', '4', 'G', ' ', '\u0000'}, charArray0);
      assertEquals("%", token0.toString());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(35, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(18, token0.endColumn);
      assertEquals(35, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'%', 'P', '4', '4', 'G', ' ', '\u0000'}, charArray0);
      assertEquals("P44G", token1.toString());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertEquals(74, token1.kind);
      assertEquals(22, token1.endColumn);
      assertEquals(35, token1.endLine);
      assertEquals(35, token1.beginLine);
      assertEquals(19, token1.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)108;
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'e';
      charArray0[2] = '(';
      charArray0[3] = '~';
      charArray0[4] = '}';
      charArray0[5] = 'W';
      charArray0[6] = 'P';
      charArray0[7] = 'T';
      charArray0[8] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'e', '(', '~', '}', 'W', 'P', 'T', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', 'e', '(', '~', '}', 'W', 'P', 'T', '/'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'/', 'e', '(', '~', '}', 'W', 'P', 'T', '/'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', 'e', '(', '~', '}', 'W', 'P', 'T', '/'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', 'e', '(', '~', '}', 'W', 'P', 'T', '/'}, charArray0);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("/", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)108;
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '>';
      charArray0[2] = 'c';
      charArray0[3] = 'C';
      charArray0[4] = '>';
      charArray0[5] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      assertEquals("@", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      boolean boolean0 = charArrayReader0.ready();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'@', '>', 'c', 'C', '>', 'J'}, charArray0);
      assertFalse(boolean0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 818);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 818. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-56);
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      charArray0[2] = '6';
      charArray0[3] = '%';
      charArray0[4] = 'b';
      charArray0[5] = 'o';
      charArray0[6] = '1';
      charArray0[7] = 'o';
      charArray0[8] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("kz6", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'k', 'z', '6', '%', 'b', 'o', '1', 'o', 'z'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'm'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1051, (-96), 1051);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', 'm'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', 'm'}, charArray0);
      assertEquals(1051, javaCharStream0.getLine());
      assertEquals(1051, javaCharStream0.getEndLine());
      assertEquals((-96), javaCharStream0.getColumn());
      assertEquals((-96), javaCharStream0.getBeginColumn());
      assertEquals((-96), javaCharStream0.getEndColumn());
      assertEquals(1051, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1051, token0.endLine);
      assertEquals((-96), token0.endColumn);
      assertEquals((-96), token0.beginColumn);
      assertEquals(1051, token0.beginLine);
      assertEquals(124, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new char[] {'>', 'm'}, charArray0);
      assertEquals(1051, javaCharStream0.getLine());
      assertEquals(1051, javaCharStream0.getEndLine());
      assertEquals((-95), javaCharStream0.getBeginColumn());
      assertEquals((-95), javaCharStream0.getEndColumn());
      assertEquals((-95), javaCharStream0.getColumn());
      assertEquals(1051, javaCharStream0.getBeginLine());
      assertEquals("m", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-95), token1.endColumn);
      assertEquals((-95), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1051, token1.endLine);
      assertEquals(1051, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'B';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("$", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 946);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 946. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)36, (byte)25, (byte)15, (byte) (-7), (byte) (-83), (byte)42, (byte)48, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("$", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 946);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 946. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(16, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Z", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u0006\" (6), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = ':';
      charArray0[2] = '(';
      charArray0[3] = '=';
      charArray0[4] = 'F';
      charArray0[5] = 'P';
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      charArray0[6] = '|';
      charArray0[7] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals("X", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjimageLen = 645;
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(":", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(":", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(":", token2.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(92, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'X', ':', '(', '=', 'F', 'P', '|', 'S'}, charArray0);
      assertEquals(":", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'A';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = ' ';
      charArray1[3] = ' ';
      charArray1[4] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'A'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2385), (-1593), 52);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'A'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'A'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'A'}, charArray1);
      assertEquals((-2385), javaCharStream0.getBeginLine());
      assertEquals((-1593), javaCharStream0.getBeginColumn());
      assertEquals((-2385), javaCharStream0.getLine());
      assertEquals((-1592), javaCharStream0.getColumn());
      assertEquals((-1592), javaCharStream0.getEndColumn());
      assertEquals((-2385), javaCharStream0.getEndLine());
      assertEquals("OO", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2385), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1592), token0.endColumn);
      assertEquals((-1593), token0.beginColumn);
      assertEquals((-2385), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'O', 'O', ' ', ' ', 'A'}, charArray1);
      assertEquals((-2385), javaCharStream0.getBeginLine());
      assertEquals((-2385), javaCharStream0.getLine());
      assertEquals((-1589), javaCharStream0.getColumn());
      assertEquals((-1589), javaCharStream0.getBeginColumn());
      assertEquals((-1589), javaCharStream0.getEndColumn());
      assertEquals((-2385), javaCharStream0.getEndLine());
      assertEquals("A", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-2385), token1.endLine);
      assertEquals((-2385), token1.beginLine);
      assertEquals((-1589), token1.endColumn);
      assertEquals((-1589), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'i';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1217), (byte)44);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals((-1217), javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals((-1217), javaCharStream0.getLine());
      assertEquals((-1217), javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals("ui", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(45, token0.endColumn);
      assertEquals((-1217), token0.beginLine);
      assertEquals(44, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1217), token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'u', 'i'}, charArray0);
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals((-1217), javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals((-1217), javaCharStream0.getLine());
      assertEquals((-1217), javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream1.available());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '#';
      charArray0[3] = '+';
      charArray0[4] = 'c';
      charArray0[6] = 'o';
      charArray0[7] = '1';
      charArray0[8] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'*', '*', '#', '+', 'c', '\u0000', 'o', '1', 'V'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'%', '&', '&', '&', '^'}, charArray0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[12];
      charArray0[0] = 'D';
      charArray0[1] = '(';
      charArray0[2] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 13, 108, 72);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("D", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(13, token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(108, token0.endColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)0, (byte)65, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'j';
      charArray0[2] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token0.toString());
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(87, token0.kind);
      
      javaCharStream0.maxNextCharInd = 1;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("j", token1.toString());
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(string0);
      assertArrayEquals(new char[] {'=', 'j', 't'}, charArray0);
      assertEquals("j", string0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 87);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 87. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[9];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public");
      assertFalse(boolean0);
      
      charArray0[0] = '>';
      charArray0[1] = '>';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '>';
      charArray1[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 657);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(">>", token0.toString());
      assertNotSame(charArray1, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token1.toString());
      assertNotSame(charArray1, charArray0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(124, token1.kind);
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(charArray1, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = Token.newToken(1);
      assertNotNull(token2);
      assertNull(token2.toString());
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertNull(token2.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(charArray1, charArray0);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token3);
      assertArrayEquals(new char[] {'>', '>'}, charArray1);
      assertEquals(">", token3.toString());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(124, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">>", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(124, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'>', '>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2105);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("pL}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-230), 17, 1927);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(18, javaCharStream1.getEndColumn());
      assertEquals(18, javaCharStream1.getColumn());
      assertEquals(17, javaCharStream1.getBeginColumn());
      assertEquals((-230), javaCharStream1.getBeginLine());
      assertEquals((-230), javaCharStream1.getLine());
      assertEquals((-230), javaCharStream1.getEndLine());
      assertEquals("pL", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.endColumn);
      assertEquals((-230), token0.endLine);
      assertEquals(17, token0.beginColumn);
      assertEquals((-230), token0.beginLine);
      assertEquals(74, token0.kind);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(19, javaCharStream1.getEndColumn());
      assertEquals(19, javaCharStream1.getColumn());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals((-230), javaCharStream1.getBeginLine());
      assertEquals((-230), javaCharStream1.getLine());
      assertEquals((-230), javaCharStream1.getEndLine());
      assertEquals("}", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token2.kind);
      assertEquals((-230), token2.beginLine);
      assertEquals(19, token2.endColumn);
      assertEquals((-230), token2.endLine);
      assertEquals(19, token2.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringReader stringReader0 = new StringReader("2s;_U\"g/6D'|JP77(kI");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("2s", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.beginLine);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      javaParserTokenManager1.jjround = 38;
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token3 = javaParserTokenManager1.jjFillToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {}, charArray0);
      
      StringReader stringReader0 = new StringReader("2s;_U\"g/6D'|JP77(kI");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("2s", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)77, (byte)115, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)43, (byte)77, (byte)115, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)43, (byte)77, (byte)115, (byte)97}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)43, (byte)77, (byte)115, (byte)97}, byteArray0);
      assertEquals("+", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertEquals(1, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }
}
