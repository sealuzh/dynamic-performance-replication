/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:02:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1697, (-1616203845));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1245;
      Utility.isSet(1245, 1245);
      String string0 = "X<'qVv\"";
      try { 
        Utility.typeOfSignature("X<'qVv\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X<'qVv\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "java.lang.0:    dstore\t\t%81\n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.0:    dstore\t\t%81\n");
      try { 
        Utility.decode("pZ=`$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)115;
      ConstantPool constantPool0 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.getSignature("r@#@i:");
      Utility.methodSignatureReturnType("Lr@#@i:;");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r@#@i:");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-85);
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('5');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)52, (byte) (-85));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantFieldref0.clone();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      ConstantPool constantPool2 = constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 47, 219, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B/vAXclMEqxHjN#FE");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "= #QM%";
      try { 
        Utility.typeOfSignature("= #QM%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: = #QM%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("L&HS:c`o:d&m6k(q;V", "2g_P", true);
      Utility.searchOpcode("p+70n-;fl?E5Zh}");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte)87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "W*ax0lvX,~(+8ZB1a";
      try { 
        Utility.typeOfSignature("W*ax0lvX,~(+8ZB1a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W*ax0lvX,~(+8ZB1a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-73);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 187, (int) (byte) (-69), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "!.El-YX94[*<3RuWV";
      try { 
        Utility.typeOfSignature("!.El-YX94[*<3RuWV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .El-YX94[*<3RuWV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("2+*%S/BH_oh#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2+*%S/BH_oh#/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-73);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)16;
      objectArray0[3] = (Object) "73 0b a7 b7 9f 8f 10";
      objectArray0[4] = (Object) (byte)115;
      objectArray0[5] = (Object) (byte) (-97);
      objectArray0[6] = (Object) "73 0b a7 b7 9f 8f 10";
      objectArray0[7] = (Object) (byte) (-89);
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 184, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    drem
         // 1:    fconst_0
         // 2:    goto\t\t#-18527
         // 5:    d2l
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "8<.=hM3/oXtX";
      try { 
        Utility.typeOfSignature("8<.=hM3/oXtX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8<.=hM3/oXtX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)95;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(1024);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 60, (-846));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[1] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[2] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[3] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[4] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[5] = "Z;kPA2n>i*N!E:2hc2";
      stringArray0[6] = "Z;kPA2n>i*N!E:2hc2";
      Utility.methodTypeToSignature("Z;kPA2n>i*N!E:2hc2", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)67;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 115, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.compactClassName("invokedynamic", "invokedynamic", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)72;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(45, 41);
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantMethodHandle0.setReferenceIndex((byte)79);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), (int) (byte)79);
      assertEquals("0:    iastore\n1:    f2l\n2:    dstore_1\n", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte) (-116);
      byteArray1[3] = (byte) (-116);
      byteArray1[4] = (byte)72;
      byteArray1[5] = (byte)79;
      byteArray1[6] = (byte)79;
      byteArray1[7] = (byte)79;
      byteArray1[8] = (byte)72;
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("$8c$8c$8c$8cHOOOH", string1);
      
      String string2 = Utility.getSignature("org.apache.bcel.classfile.StackMap");
      assertEquals("Lorg/apache/bcel/classfile/StackMap;", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string3 = Utility.format((byte) (-116), 243, true, '3');
      assertEquals("-11633333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("ii!%wi>+w", true);
      String[] stringArray0 = new String[3];
      String string0 = "Eye*gPxexV49t%";
      stringArray0[0] = "Eye*gPxexV49t%";
      stringArray0[1] = "ii!%wi>+w";
      stringArray0[2] = "ii!%wi>+w";
      Utility.methodTypeToSignature("sbQ^RvRCe2", stringArray0);
      String string1 = "ll[]";
      Utility.getSignature("ll[]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("ll[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ll[]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)84;
      byteArray0[1] = (byte)55;
      byte byte1 = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte) (-72);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (int) (byte) (-123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1024, (int) (byte)37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("LyS_%i");
      Utility.fillup("\"*H P20<", (-239), false, '[');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, 777);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, '[');
      byteSequence0.skipBytes((byte)5);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1490, 246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1280. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("{java.lang.Object@3a18d455, java.lang.Object@6d7a173d, java.lang.Object@2cd6f162, java.lang.Object@74eb480}", 16, true, '4');
      Utility.compactClassName("{java.lang.Object@3a18d455, java.lang.Object@6d7a173d, java.lang.Object@2cd6f162, java.lang.Object@74eb480}", "{java.lang.Object@3a18d455, java.lang.Object@6d7a173d, java.lang.Object@2cd6f162, java.lang.Object@74eb480}", false);
      Utility.typeOfSignature("J8Y6YIbb&;Y");
      Utility.accessToString((-973));
      try { 
        Utility.typeOfSignature("{java.lang.Object@3a18d455, java.lang.Object@6d7a173d, java.lang.Object@2cd6f162, java.lang.Object@74eb480}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@3a18d455, java.lang.Object@6d7a173d, java.lang.Object@2cd6f162, java.lang.Object@74eb480}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = Utility.decode("{java.lang.Object@33868687, java.lang.Object@1d6f3a88, java.lang.Object@1afd67bf, java.lang.Object@4edcc697, java.lang.Object@4969d375, java.lang.Object@2d360baa, java.lang.Object@5c07512c, java.lang.Object@74c7dc45}", false);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(360, 360);
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[0] = constant0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(360, 360);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(360);
      constantArray0[2] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1499, 8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)102;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)18, 280);
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, 144, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 102. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1697, (-1616203845));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-80);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-95), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)81;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3362, 752, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)79;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantString0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.read(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (int) (byte)42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.compactClassName(", low = ", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)45;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)45, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "?";
      try { 
        Utility.typeOfSignature("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1334), (-3959));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lsub
         // 1:    fconst_0
         // 2:    fconst_2
         // 3:    <illegal opcode>
         // 4:    daload
         // 5:    dstore_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("1F867'u}\"].W3n?8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1F867'u}\"].W3n?8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.isSet(546, 546);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (-2629));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y).LM}g**B_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y).LM}g**B_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.convertString(">;");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)3;
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(10, (byte)3);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger(102);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(67, (byte) (-105));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)115, (-1380));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("ldN^FMX9{RqeX2C_");
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)95;
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)18);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)95, 101);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(194, (byte) (-5));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(111, 1213);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantFloat1.getConstantValue(constantPool0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 107, 11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 246. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "32qgE=#.f|z;ZU`doz";
      try { 
        Utility.typeOfSignature("32qgE=#.f|z;ZU`doz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 32qgE=#.f|z;ZU`doz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet((-2128), 98);
      Utility.accessToString(98, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "private synchronized volatile");
      Utility.printArray((Object[]) null);
      Utility.classOrInterface(16);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "private synchronized volatile";
      objectArray0[1] = (Object) "private synchronized volatile";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "private synchronized volatile";
      Utility.printArray(objectArray0);
      Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "(692-$+Vv", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = ", npairs = ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", npairs = ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)61;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)86;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)2, (byte) (-79));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(")BXX0oX40>f(E7W");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload\t\t%168", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5_NNE#`7HaKhP-[O9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5_NNE#`7HaKhP-[O9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "GO4;k}RQ/\\B&1";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GO4;k}RQ/B&1";
      Utility.methodTypeToSignature("GO4;k}RQ/B&1", stringArray0);
      try { 
        Utility.typeOfSignature("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "double";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "P%0^9;";
      MockFile mockFile0 = new MockFile("P%0^9;");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      mockPrintStream0.println((Object) bufferedInputStream0);
      int int0 = 200;
      mockPrintStream0.print(200);
      Object[] objectArray0 = null;
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      try { 
        Utility.typeOfSignature("P%0^9;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P%0^9;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-13250", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.clearBit((-5538), (-5538));
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(":~*hwPi/0*)A4!c", (String[]) null);
      boolean boolean0 = false;
      Utility.compactClassName("()L:~*hwPi/0*)A4!c;", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-3);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (-5538), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-3);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-56), (-6579));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_3
         // 1:    iload_3
         // 2:    pop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.generic.BasicType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-38);
      byteArray0[5] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit((byte)113, 218);
      Utility.getSignature("m(;HB8n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(5062);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-38));
      constantArray0[1] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("f(X=E9bu");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1865, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Exception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":s-zrP,RnAh";
      stringArray0[1] = ":s-zrP,RnAh";
      Utility.methodTypeToSignature(":s-zrP,RnAh", stringArray0);
      Utility.searchOpcode(":s-zrP,RnAh");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-82);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-15), 66);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, 5016);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "M?qg?~5^l&";
      try { 
        Utility.typeOfSignature("M?qg?~5^l&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M?qg?~5^l&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?6VR:";
      stringArray0[1] = "?6VR:";
      stringArray0[2] = "?6VR:";
      stringArray0[3] = "?6VR:";
      stringArray0[4] = "?6VR:";
      stringArray0[5] = "?6VR:";
      stringArray0[6] = "?6VR:";
      Utility.methodTypeToSignature("?6VR:", stringArray0);
      Utility.clearBit(45, 45);
      Utility.typeOfMethodSignature("(L?6VR:;L?6VR:;L?6VR:;L?6VR:;L?6VR:;L?6VR:;L?6VR:;)L?6VR:;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S", "?6VR:", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = ">p=z/GZ/W1V]";
      try { 
        Utility.typeOfSignature(">p=z/GZ/W1V]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >p=z/GZ/W1V]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      mockPrintStream0.println();
      PrintStream printStream0 = mockPrintStream0.format("I!;!sd", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      byte[] byteArray0 = Utility.decode("<", false);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(59, 59);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(83, 3);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      constantArray0[1] = (Constant) constantNameAndType2;
      ConstantClass constantClass0 = new ConstantClass(59);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-85);
      byteArray0[0] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("Z>dxBL_Je8-", (String[]) null);
      String string0 = "Linterface;V";
      Utility.methodSignatureToString("()LZ>dxBL_Je8-;", "Linterface;V", "Linterface;V");
      try { 
        Utility.methodSignatureReturnType("HH,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HH,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, (-1157));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "V";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "r@CN.T{M,9]JhSt,QJ?";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r@CN.T{M,9]JhSt,QJ?");
      Utility.typeOfSignature("V");
      Utility.convertString("V");
      Utility.isSet((byte)12, (-1164));
      String string2 = "ifeq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifeq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v%S=o1.";
      stringArray0[1] = "v%S=o1.";
      stringArray0[2] = "v%S=o1.";
      stringArray0[3] = "v%S=o1.";
      stringArray0[4] = "v%S=o1.";
      stringArray0[5] = "v%S=o1.";
      stringArray0[6] = "v%S=o1.";
      stringArray0[7] = "v%S=o1.";
      stringArray0[8] = "v%S=o1.";
      String string0 = Utility.methodTypeToSignature("v%S=o1.", stringArray0);
      assertEquals("(Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;)Lv%S=o1/;", string0);
      
      String string1 = Utility.classOrInterface(198);
      assertEquals("class", string1);
      
      int int0 = Utility.setBit((-651), 198);
      assertEquals((-651), int0);
      
      Utility.methodSignatureArgumentTypes("(Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;Lv%S=o1/;)Lv%S=o1/;");
      String string2 = Utility.fillup("v%S=o1.", (-2387), false, 'Z');
      assertEquals("v%S=o1.", string2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("eQ2:XxNA!hWT");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref((byte)67, (byte) (-89));
      ConstantMethodref constantMethodref3 = new ConstantMethodref(constantMethodref2);
      constantArray0[2] = (Constant) constantMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("goto\t\t#-9811", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1130, 2843, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "arraylength";
      stringArray0[1] = "arraylength";
      stringArray0[2] = "0.l";
      stringArray0[3] = "arraylength";
      stringArray0[4] = "arraylength";
      stringArray0[5] = "arraylength";
      stringArray0[6] = "arraylength";
      stringArray0[7] = "arraylength";
      stringArray0[8] = "arraylength";
      Utility.methodTypeToSignature("arraylength", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 934, 3269, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), (int) (byte)101, false);
      assertEquals("0:    <illegal opcode>\n1:    lsub\n2:    dneg\n3:    saload\n4:    d2i\n5:    <illegal opcode>\n6:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Q&;\\D\\\\\"Z:";
      try { 
        Utility.typeOfSignature("Q&;D\\\"Z:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q&;D\\\"Z:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.typeOfSignature("T0p=]U");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("goUWvh[,hyl}t*1SlT^", "i;5Ptl%F[cwdj-1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U.F");
      Utility.fillup("d*", 100, false, 'o');
      String string0 = "... (truncated)";
      Utility.compactClassName("... (truncated)");
      String string1 = "F[";
      Utility.methodSignatureReturnType("F[", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("y-/:F0", "interface", "d*");
      Utility.convertString("F[");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)18;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[8] = (byte)35;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)116);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.fillup("if_icmplt", 40, false, '\'');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-66), (-1204));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (-3702), true);
      assertEquals("0:    bipush\t\t123\n2:    dload_2\n3:    dup_x2\n4:    f2d\n5:    lstore_2\n6:    fsub\n7:    astore_2\n8:    astore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("H/Z::{c!P,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H/Z::{c!P,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)65;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1981, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      String string0 = "&5b#\"!";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5b#\"!");
      byte byte1 = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byte byte2 = (byte)16;
      byteArray0[2] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.accessToString(166);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9djzW4cDEwvt3|O^_d";
      try { 
        Utility.typeOfSignature("9djzW4cDEwvt3|O^_d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9djzW4cDEwvt3|O^_d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.fillup("C6@8", 1103, true, 'w');
      boolean boolean0 = Utility.isSet(1103, 1103);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-125);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("02 b6 a0 59 4f af 75 0e 83", string0);
      
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-74));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((-29.160969F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lxor", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byte byte1 = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)52;
      byte byte2 = (byte)26;
      byteArray0[3] = (byte)26;
      byte byte3 = (byte)47;
      byteArray0[4] = (byte)47;
      byte byte4 = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)20;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, (int) (byte)61, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("<illegal opcode>");
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte)61, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("v)gD<K%Om");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)6);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)0, (byte)6);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)6, 2603);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-237), (byte)64);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 3403, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)54, (byte)54);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (int) (byte)54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 41;
      Utility.isSet(41, 3057);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lookupswitch";
      stringArray0[1] = "lookupswitch";
      stringArray0[2] = "lookupswitch";
      Utility.methodTypeToSignature("lookupswitch", stringArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte1 = (byte)57;
      byteArray0[1] = (byte)57;
      byte byte2 = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byte byte3 = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      int int1 = 4272;
      int int2 = 74;
      Utility.setBit(4272, 74);
      Utility.searchOpcode("lookupswitch");
      Utility.methodSignatureToString("(Llookupswitch;Llookupswitch;Llookupswitch;)Llookupswitch;", "lookupswitch", "\t\t%");
      Utility.printArray((Object[]) stringArray0);
      Utility.isJavaIdentifierPart('#');
      String string0 = "' at index ";
      int int3 = (-3740);
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int4 = (-1479);
      int int5 = 125;
      int int6 = 181;
      Constant[] constantArray0 = new Constant[8];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(74, (-1433508295));
      constantArray0[0] = (Constant) constantNameAndType0;
      int int7 = 11;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("7e 39 a4 9a 00", "h @9[$[_ph=t:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"h @9[$[_ph=t:\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#=,k1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #=,k1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "N9";
      try { 
        Utility.typeOfSignature("N9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Ru";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ru");
      try { 
        Utility.typeOfSignature("Ru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ru
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("^J", "^J", false);
      Utility.fillup("^J", 642, false, 'r');
      Utility.compactClassName("^J");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 81, 1540);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "D:'<@qm^:";
      Utility.signatureToString("D:'<@qm^:", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D:'<@qm^:");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A&hhPS$i<d|}*m ";
      objectArray0[1] = (Object) "D:'<@qm^:";
      PrintStream printStream0 = mockPrintStream0.format("A&hhPS$i<d|}*m ", objectArray0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(printStream0, false, "double");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // double
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ConstantPool constantPool0 = null;
      int int0 = 184;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte) (-60), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.format(91, 200, true, '`');
      Utility.format(200, 91, false, '6');
      Utility.clearBit((-4930), (-4930));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "91``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````";
      objectArray0[1] = (Object) "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666200";
      objectArray0[2] = (Object) "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666200";
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte)16;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-25), (-838));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42768. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      String string0 = "`XU{[vKV}W7$1H028h5";
      // Undeclared exception!
      try { 
        Utility.decode("`XU{[vKV}W7$1H028h5", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.getSignature("Linvokestatic;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 461, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit((-1390), 179);
      String string0 = "*4#r:~_0nL";
      try { 
        Utility.typeOfSignature("*4#r:~_0nL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4#r:~_0nL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Utility.clearBit(3589, 3589);
      assertEquals(3589, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, (-80), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("&JBs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &JBs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T'*E8pTP6L\".z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T'*E8pTP6L\".z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-111);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), (-3), true);
      Utility.compactClassName("0:    <illegal opcode>\n1:    ifle\t\t#26258\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    <illegal opcode>\n1:    ifle\t\t#26258\n";
      stringArray0[1] = "ASXi+7U";
      String string0 = ", max_locals = ";
      stringArray0[2] = ", max_locals = ";
      stringArray0[3] = "ASXi+7U";
      stringArray0[4] = "0:    <illegal opcode>\n1:    ifle\t\t#26258\n";
      stringArray0[5] = "0:    <illegal opcode>\n1:    ifle\t\t#26258\n";
      stringArray0[6] = "0:    <illegal opcode>\n1:    ifle\t\t#26258\n";
      stringArray0[7] = "0:    <illegal opcode>\n1:    ifle\t\t#26258\n";
      Utility.methodTypeToSignature("ASXi+7U", stringArray0);
      try { 
        Utility.methodSignatureReturnType("!]WZ#.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!]WZ#.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.accessToString(16384, false);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("f*I{tc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f*I{tc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1697, (-1616203845));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(anonymous)";
      Utility.methodTypeToSignature("(anonymous)", stringArray0);
      Utility.methodTypeToSignature("(L(anonymous);)L(anonymous);", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.generic.BasicType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Utility.clearBit((byte)113, 218);
      assertEquals(113, int0);
      
      String string0 = Utility.getSignature("m(;HB8n");
      assertEquals("Lm(;HB8n;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(5062);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-38));
      constantArray0[1] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ior", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("67 08 5a da 80 71", string2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)78;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-71), (byte)78);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 244, 185, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.accessToString((-1365));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private static synchronized transient interface strictfp synthetic annotation enum";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0, true);
      Utility.isJavaIdentifierPart('@');
      byte[] byteArray0 = Utility.decode(", low = ", false);
      Utility.isSet((-1365), 125);
      Utility.getSignature("float");
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)32;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, 4494, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "6Z";
      try { 
        Utility.typeOfSignature("6Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "double";
      Utility.compactClassName("double");
      Utility.setBit(156, 65);
      Utility.replace("double", "checkcast", "checkcast");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-124);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-124);
      byteArray1[1] = (byte)22;
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("HP");
      // Undeclared exception!
      try { 
        Utility.signatureToString("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)118;
      byte byte1 = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (-956));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 5;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 5);
      Utility.compactClassName("0:    dload_2\n1:    lcmp\n");
      String string0 = " entries\n";
      try { 
        Utility.methodSignatureReturnType(" entries\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` entries
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("Z2%&TQ,s(", 164, false, 'm');
      Utility.typeOfSignature("Z2%&TQ,s(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_acmpeq", "Z2%&TQ,s(", "The wildcard array must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "G^F,p\\9";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("G^F,p9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G^F,p9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 248;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(248, 248, false, '{');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)84;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = 347;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, 347, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-123);
      byte byte1 = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte) (-3);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (int) (byte) (-123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.compactClassName("static", "FB\"\";o", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "static";
      objectArray0[1] = (Object) "FB\"\";o";
      objectArray0[2] = (Object) "static";
      Utility.printArray(objectArray0);
      Utility.fillup("org.apache.bcel.classfile.ConstantPool", 188, true, 'U');
      Utility.clearBit(164, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmple\t\t#4010", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-497), 1853, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(3624, 3624);
      assertEquals(3880, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-22);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)87;
      Utility.encode(byteArray0, false);
      Utility.decode("$u$c3$eaU$cck$CW", false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte) (-22);
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte)107;
      Constant[] constantArray0 = new Constant[4];
      // Undeclared exception!
      try { 
        ConstantUtf8.getInstance((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "[QU]^p8}_m+N07mY\\N";
      try { 
        Utility.methodSignatureReturnType("[QU]^p8}_m+N07mYN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QU]^p8}_m+N07mYN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.classOrInterface(1772);
      assertEquals("interface", string0);
      
      String string1 = Utility.replace("jMG", "interface", "jMG");
      assertEquals("jMG", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-3308), 169, false);
      assertEquals("0:    monitorexit\n1:    impdep2\n2:    aload\t\t%44\n4:    lconst_1\n", string2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)66;
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 831, (int) (byte)77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "_wQR*gz";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_wQR*gz");
      Utility.isJavaIdentifierPart('W');
      Utility.format(90, 5, true, 'W');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)81;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2086), (int) (byte)81);
      Utility.compactClassName("0:    dstore\t\t%81\n", true);
      String string1 = "byte";
      try { 
        Utility.methodSignatureReturnType("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-40);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)83);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-5558), (-5558), false);
      assertEquals("0:    aastore\n1:    iconst_0\n2:    dup_x1\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.isSet(49, 2513);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-86);
      Utility.toHexString(byteArray0);
      String string0 = Utility.fillup("short", 2389, false, 'Y');
      Utility.setBit((byte) (-86), (byte)85);
      Utility.isJavaIdentifierPart('Y');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)65;
      objectArray0[1] = (Object) "short";
      objectArray0[2] = (Object) (byte)85;
      objectArray0[3] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)4;
      objectArray0[5] = (Object) (byte) (-86);
      objectArray0[6] = (Object) (byte)85;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) string0;
      String string1 = Utility.printArray(objectArray0, false);
      Utility.compactClassName("04 41 55 aa", string1, false);
      Utility.signatureToString("SAME_LOCALS_1_STACK_EXTENDED", true);
      MockFile mockFile0 = new MockFile("if_acmpeq", "i2s");
      File file0 = MockFile.createTempFile("04 41 55 aa", "ireturn", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "h:+5Kx/8VBJa-<Yda/^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // h:+5Kx/8VBJa-<Yda/^
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R!ck?~zzw;--5OCShp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R!ck?~zzw;--5OCShp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "Bogus";
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("Bogus", false);
      int int0 = 23;
      char char0 = 'G';
      Utility.fillup("Bogus", 23, false, 'G');
      Utility.clearBit(61, (-2281));
      String string1 = "(";
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.format(1724, 125, false, 'j');
      Utility.signatureToString("Tg*[jTL3)k;>3THf/", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("fsub", false);
      String string0 = "Only element values of type annotation can be built with this ctor - type specified: ";
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)68;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(384, (-3445));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(" arg");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3445), (int) (byte)68);
      assertEquals("0:    ifnonnull\t\t#11699\n3:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = Utility.clearBit(127, 148);
      assertEquals(127, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-38);
      String string0 = Utility.encode(byteArray0, true);
      boolean boolean0 = Utility.isSet((byte) (-83), (byte) (-83));
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("FK%} |Z");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)86;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (-762), false);
      Utility.clearBit((-1328), (-1080));
      Utility.setBit((byte)86, (-547));
      try { 
        Utility.typeOfSignature("0:    dcmpg\n1:    sastore\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dcmpg
         // 1:    sastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.format((-529), (-529), false, 'C');
      assertEquals("-529", string0);
      
      String string1 = Utility.replace("if_icmpgt", "/", "axn-bh|#mG");
      assertEquals("if_icmpgt", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(";CQ'r=J");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("l2d", string2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.classOrInterface(2588);
      MockFile mockFile0 = new MockFile("Byte code error: ");
      File file0 = MockFile.createTempFile("interface", "qwblvm4G;", (File) mockFile0);
      mockFile0.getAbsolutePath();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockFile0.setReadable(true, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "Byte code error: ";
      mockFile0.setWritable(false);
      objectArray0[2] = (Object) "qwblvm4G;";
      objectArray0[3] = (Object) file0;
      mockPrintStream0.format("interface", objectArray0);
      objectArray0[4] = (Object) file0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = "!Ylj;Ru#5kt&7orr";
      Utility.getSignature("!Ylj;Ru#5kt&7orr");
      String string1 = "org.apache.bcel.classfile.PMGClass";
      Utility.decode("org.apache.bcel.classfile.PMGClass", false);
      Utility.searchOpcode("dreturn");
      String string2 = "UNKNOWN (";
      try { 
        Utility.typeOfSignature("UNKNOWN (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UNKNOWN (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-41);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1130, (byte) (-41));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (-3731), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    i2s
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "Gk$6Dx?tabuXu.T";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Gk$6Dx?tabuXu.T");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Gk$6Dx?tabuXu.T");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      mockPrintStream0.println((Object) null);
      mockPrintStream0.println(object0);
      objectArray0[1] = (Object) "Gk$6Dx?tabuXu.T";
      objectArray0[2] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      Utility.getSignature("Gk$6Dx?tabuXu.T");
      char char0 = 'H';
      Utility.format((-1005), (-1005), true, 'H');
      int int0 = 50;
      Utility.clearBit(50, 228);
      Utility.compactClassName("Gk$6Dx?tabuXu.T");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gk$6Dx?tabuXu.T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gk$6Dx?tabuXu.T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.getSignature("r@#@i:");
      Utility.methodSignatureReturnType("Lr@#@i:;");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r@#@i:");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-85);
      String string0 = Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('5');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)52, (byte) (-85));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "Sn )";
      Utility.typeOfSignature("Sn )");
      Utility.format((byte)9, (byte)9, false, 'M');
      String string1 = "*s2E1i/d/#g0Y>U";
      try { 
        Utility.typeOfSignature("*s2E1i/d/#g0Y>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s2E1i/d/#g0Y>U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-80));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantFloat constantFloat1 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("areturn", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Float[4](bytes = -2.0587347E-6), CONSTANT_Integer[3](bytes = -80), CONSTANT_Float[4](bytes = 5.8449423E-10)}", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$b6$K$u$cb0$m$aa$m$b0", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "72LIGIO1_>z@4iwZYW0";
      try { 
        Utility.typeOfSignature("72LIGIO1_>z@4iwZYW0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 72LIGIO1_>z@4iwZYW0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-121);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-81));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)8);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-121), 2502);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantDouble constantDouble1 = new ConstantDouble(2502);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), (int) (byte) (-121), false);
      Utility.searchOpcode("0:    dreturn\n1:    iconst_5\n2:    i2d\n");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)4;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      String string0 = "X}h@;';a";
      Utility.searchOpcode("X}h@;';a");
      try { 
        Utility.methodSignatureReturnType("X}h@;';a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X}h@;';a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = (-2679);
      Utility.classOrInterface((-2679));
      // Undeclared exception!
      try { 
        Utility.signatureToString("N*~:#eY;4tH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N*~:#eY;4tH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.clearBit(2048, 51);
      boolean boolean0 = false;
      String string0 = Utility.fillup("fL", 4794, false, '[');
      Utility.typeOfSignature(string0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = "d>";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "d>", "{eGR5qH.Esl2p>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.compactClassName("ii!%wi>+w", true);
      String[] stringArray0 = new String[3];
      String string0 = "Eye*gPxexV49t%";
      stringArray0[0] = "Eye*gPxexV49t%";
      stringArray0[1] = "ii!%wi>+w";
      stringArray0[2] = "ii!%wi>+w";
      Utility.methodTypeToSignature("sbQ^RvRCe2", stringArray0);
      String string1 = "[]";
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "P(vDDgi";
      try { 
        Utility.methodSignatureReturnType("P(vDDgi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P(vDDgi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Caf[C 0JqJ[@j%(N)F");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Caf[C 0JqJ[@j%(N)F";
      objectArray0[2] = (Object) "Caf[C 0JqJ[@j%(N)F";
      objectArray0[3] = (Object) "Caf[C 0JqJ[@j%(N)F";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Caf[C 0JqJ[@j%(N)F";
      stringArray0[1] = "Caf[C 0JqJ[@j%(N)F";
      stringArray0[2] = "char";
      stringArray0[3] = "Caf[C 0JqJ[@j%(N)F";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Caf[C 0JqJ[@j%(N)F", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[C 0JqJ[@j%(N)F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UFl");
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)9;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-86);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "%x";
      try { 
        Utility.typeOfSignature("%x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.getSignature("org.apache.bcel.classfile.Utility");
      String string0 = "Invalid signature: `";
      Utility.typeOfSignature("Invalid signature: `");
      String string1 = "pr94\"EhBH4g)kkK";
      try { 
        Utility.typeOfMethodSignature("pr94\"EhBH4g)kkK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pr94\"EhBH4g)kkK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.methodSignatureReturnType("Ck;AE'jr{*g-wztr9");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-91);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-91);
      Utility.encode(byteArray0, true);
      Utility.typeOfSignature("Ck;AE'jr{*g-wztr9");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ck;AE'jr{*g-wztr9", "double", "z'C@^z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ck;AE'jr{*g-wztr9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(1, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-95);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3698, (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("H3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.replace("(type=", "(type=", "e-sk12^&OE[]3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4565, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21690. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "wide";
      Utility.searchOpcode("wide");
      // Undeclared exception!
      try { 
        Utility.signatureToString("UHEN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UHEN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)118;
      byte byte1 = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (-956));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "multianewarray";
      boolean boolean0 = true;
      Utility.fillup("multianewarray", 4581, true, ')');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " methods:\n";
      stringArray0[1] = " methods:\n";
      stringArray0[2] = " methods:\n";
      stringArray0[3] = " methods:\n";
      stringArray0[4] = " methods:\n";
      stringArray0[5] = " methods:\n";
      stringArray0[6] = " methods:\n";
      Utility.methodTypeToSignature(" methods:\n", stringArray0);
      Utility.clearBit(2648, 122);
      Utility.clearBit(2662, 2662);
      try { 
        Utility.methodSignatureReturnType(" methods:\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` methods:
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("istore_2", 2598, true, 'D');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 19, 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 167, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("jsr_w\t\t#2116684034", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-99);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      String string0 = "D7y:%VVLqPz~";
      Utility.typeOfSignature("D7y:%VVLqPz~");
      Utility.format(43, (byte) (-71), true, 'a');
      try { 
        Utility.typeOfMethodSignature("D7y:%VVLqPz~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D7y:%VVLqPz~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.fillup("anewarray", 9, true, 'a');
      Utility.replace("anewarray", "anewarray", ":");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), 42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(816, 7);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2153);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.getSignature("jsr_w");
      Utility.format((-933), (-933), true, '7');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<";
      stringArray0[1] = "-933";
      stringArray0[2] = "Ljsr_w;";
      stringArray0[3] = "int";
      stringArray0[4] = ")Sw7Y])Ii[VVE";
      stringArray0[5] = "N7";
      stringArray0[6] = "ifnonnull";
      stringArray0[7] = "Ljsr_w;";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("<", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[VVE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      String string0 = "wide";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wide");
      byteArray0[1] = (byte) (-70);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.clearBit(128, (-892));
      String string0 = ")\n";
      try { 
        Utility.typeOfSignature(")\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-2156));
      int int0 = 4528;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4528);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.print((Object) byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      Locale locale0 = Locale.US;
      mockPrintWriter0.printf(locale0, "protected final transient native interface abstract synthetic annotation enum", objectArray0);
      mockPrintWriter0.println('0');
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "protected final transient native interface abstract synthetic annotation enum";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.methodSignatureReturnType("V", false);
      Utility.fillup("vn\"!dyuz", (-2156), false, ':');
      Utility.classOrInterface((-890));
      try { 
        Utility.typeOfSignature("if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O'EucAQLagb;8q_#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'EucAQLagb;8q_#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.compactClassName("The offset cannot be negative", "The offset cannot be negative", false);
      Utility.getSignature("The offset cannot be negative");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("|eh", false);
      Utility.printArray((Object[]) null, false, false);
      Utility.signatureToString("LThe;");
      Utility.getSignature("LThe;");
      int int0 = 59;
      Utility.fillup("fsub", 59, true, 'q');
      Constant[] constantArray0 = new Constant[9];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("LThe;", "\"=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\"=\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)104;
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)104;
      byteArray1[6] = (byte) (-41);
      byteArray1[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 6101, 774);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "`5 [%qYGfh|nS(b]O@";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`5 [%qYGfh|nS(b]O@");
      Utility.classOrInterface(5141);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)4;
      byte byte0 = (byte) (-24);
      byteArray0[6] = (byte) (-24);
      byte byte1 = (byte)100;
      byteArray0[7] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Fieldref", false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)50;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 212, (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.accessToString(765, false);
      Utility.fillup("w!Pg}", 91, false, 'j');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "w!Pg}";
      objectArray0[1] = (Object) "w!Pg}";
      objectArray0[2] = (Object) "jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}";
      objectArray0[3] = (Object) "public protected static final synchronized volatile transient interface";
      objectArray0[4] = (Object) "jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "public protected static final synchronized volatile transient interface";
      Utility.printArray(objectArray0, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DC>GY0{i&ybie>5[";
      stringArray0[1] = "w!Pg}, w!Pg}, jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}, public protected static final synchronized volatile transient interface, jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}, java.lang.Object@1a775a5f, public protected static final synchronized volatile transient interface";
      stringArray0[2] = "w!Pg}";
      stringArray0[3] = "w!Pg}, w!Pg}, jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}, public protected static final synchronized volatile transient interface, jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjw!Pg}, java.lang.Object@1a775a5f, public protected static final synchronized volatile transient interface";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("DC>GY0{i&ybie>5[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.isJavaIdentifierPart('p');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.decode("java.lang.Object@67dcbcb0, java.lang.Object@639d85fa, java.lang.Object@3c6cd9fa, java.lang.Object@1752260f, java.lang.Object@15692169, java.lang.Object@1a54c46b", false);
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface(191);
      Utility.printArray(objectArray0);
      Utility.accessToString((-2343));
      Utility.compactClassName("java.lang.Object@67dcbcb0, java.lang.Object@639d85fa, java.lang.Object@3c6cd9fa, java.lang.Object@1752260f, java.lang.Object@15692169, java.lang.Object@1a54c46b");
      Utility.getSignature("{java.lang.Object@67dcbcb0, java.lang.Object@639d85fa, java.lang.Object@3c6cd9fa, java.lang.Object@1752260f, java.lang.Object@15692169, java.lang.Object@1a54c46b}");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "(+Z\"(mbB";
      try { 
        Utility.typeOfSignature("(+Z\"(mbB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (+Z\"(mbB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaWriter");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (-1896), false);
      try { 
        Utility.typeOfMethodSignature("kZH|Lr y6Gv.\"@y2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kZH|Lr y6Gv.\"@y2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ydrk$ ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ydrk$ '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Z$]|QB";
      boolean boolean0 = false;
      Utility.signatureToString("Z$]|QB", false);
      Utility.accessToString(57, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&5b#\"!");
      byteArray0[1] = (byte) (-44);
      byte byte1 = (byte)16;
      byteArray0[2] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("I");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.methodSignatureReturnType("JOLoy,*'%%d~{r");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JOLoy,*'%%d~{r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('.');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "putstatic", "JOLoy,*'%%d~{r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.fillup("anewarray", 9, true, 'a');
      Utility.replace("anewarray", "anewarray", ":");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), 42, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)90;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tdefault = ");
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Utility.setBit(90, (byte)67);
      assertEquals(90, int0);
      
      String string0 = Utility.accessToString((int) (byte)0, false);
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "M?qg?~5^l&";
      stringArray0[1] = "\tdefault = ";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "\tdefault = ";
      stringArray0[7] = "";
      String string1 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(LM?qg?~5^l&;Ldefault;SSL;L;Ldefault;L;)S", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "z@'?kycE3=";
      Utility.compactClassName("z@'?kycE3=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "E3abr'RX4+w_lDlh}w~";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E3abr'RX4+w_lDlh}w~");
      boolean boolean0 = false;
      Utility.compactClassName("L(U4Ai *4C", false);
      Utility.decode("S{*&$ojx,xH|%", false);
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes("L(U4Ai *4C", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L(U4Ai *4C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4196, (-1533));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.accessToString(78, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("bipush\t\t104", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.fillup("double", 81, false, 'A');
      Utility.convertString(".");
      Utility.setBit(36, 36);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-102);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$86$ba$Q$cft$7b$c2$9a", string0);
      
      int int0 = Utility.setBit((byte) (-102), 960);
      assertEquals((-101), int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)123);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass(195);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1118791631), (byte)116);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2f", string1);
      
      String string2 = Utility.replace("compiler version\t", "fH@>U6", "i2f");
      assertEquals("compiler version\t", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("~Q\"Q$a#%P");
      Utility.convertString("~Q\"Q$a#%P");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("~Q\"Q$a#%P");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.searchOpcode("double");
      Utility.convertString("vW_8'_");
      Utility.compactClassName("double");
      Utility.accessToString((-1253), true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "double";
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) "double";
      objectArray0[3] = (Object) "vW_8'_";
      objectArray0[4] = (Object) "double";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid StackMap frame_type");
      assertEquals("int", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^cvr =#}'";
      stringArray0[1] = "int";
      stringArray0[2] = "drem";
      stringArray0[3] = "^cvr =#}'";
      stringArray0[4] = "^cvr =#}'";
      stringArray0[5] = "Invalid StackMap frame_type";
      String string1 = Utility.methodTypeToSignature("^cvr =#}'", stringArray0);
      assertEquals("(L^cvr;ILdrem;L^cvr;L^cvr;LInvalid;)L^cvr;", string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.compactClassName("breakpoint", "breakpoint", true);
      Utility.format(2203, 57, true, '8');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)59;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte) (-128));
      // Undeclared exception!
      try { 
        Utility.signatureToString("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = Utility.accessToString(595, true);
      String string1 = Utility.compactClassName("public private final volatile", false);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.clearBit(595, 595);
      assertEquals(595, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public private final volatile";
      objectArray0[1] = (Object) "public private final volatile";
      objectArray0[2] = (Object) "public private final volatile";
      objectArray0[3] = (Object) "public private final volatile";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{public private final volatile, public private final volatile, public private final volatile, public private final volatile}", string2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("'@\"r$x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '@\"r$x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Wk07}";
      stringArray0[1] = "Wk07}";
      stringArray0[2] = "Wk07}";
      stringArray0[3] = "Wk07}";
      stringArray0[4] = "Wk07}";
      stringArray0[5] = "Wk07}";
      stringArray0[6] = "Wk07}";
      stringArray0[7] = "Wk07}";
      String string0 = "void";
      stringArray0[8] = "void";
      try { 
        Utility.methodTypeToSignature("Wk07}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "'f";
      stringArray0[1] = "'f";
      stringArray0[2] = "'f";
      stringArray0[3] = " (";
      stringArray0[4] = "'f";
      Utility.methodTypeToSignature("'f", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M3au7i=eM8_s+ gd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M3au7i=eM8_s+ gd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "-";
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ":3=#FN}";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.decode(":3=#FN}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1130, 2843, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-77);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.fillup("d8 55 44 5b 1c cb b3", (byte) (-53), true, ' ');
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte)28;
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("U$d8$5b$5b$i", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.clearBit(4594, 4594);
      Utility.clearBit((-978), 4594);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-68);
      byte byte0 = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-105);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("class", "C0CJax");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"C0CJax\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Clone Not ");
      PrintStream printStream0 = mockPrintStream0.append(']');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Clone Not ", "Clone Not ", "_7'eMTmV0.DQ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Clone Not 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.replace(" arg", " arg", "invokevirtual");
      try { 
        Utility.methodSignatureReturnType("getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `getstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.accessToString((-1034));
      Utility.isSet((-1324), (-843));
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "areturn");
      boolean boolean0 = true;
      Utility.accessToString(60, true);
      try { 
        Utility.methodSignatureReturnType(":", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)43;
      Utility.encode(byteArray0, false);
      String string0 = Utility.format(74, 2359, false, '{');
      Utility.accessToString((int) (byte)67, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J$b0C$b6Cd$x";
      Utility.methodTypeToSignature(string0, stringArray0);
      Utility.isSet((byte)43, 83);
      Utility.methodTypeToSignature("J$b0C$b6Cd$x", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-61), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.searchOpcode("instanceof");
      Utility.clearBit(2776, 76);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "instanceof";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "instanceof";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("invokeVirtual", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeVirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = (-1153260530);
      Utility.accessToString((-1153260530));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected static abstract annotation", "'", "private protected static abstract annotation");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static abstract annotation
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("LyS_%i");
      Utility.fillup("\"*H P20<", (-239), false, '[');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)0, 777);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref((ConstantInterfaceMethodref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInterfaceMethodref", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Utility.classOrInterface(53);
          Utility.clearBit(74, 53);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor123.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "@/fqIegz@";
      Utility.convertString("@/fqIegz@");
      try { 
        Utility.typeOfSignature("@/fqIegz@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @/fqIegz@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EAsU1uLNfRr_");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("EAsU1uLNfRr_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EAsU1uLNfRr_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName("\t\t<");
      String string0 = "\"?uAYlL\"r8IF";
      try { 
        Utility.typeOfMethodSignature("\"?uAYlL\"r8IF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"?uAYlL\"r8IF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-67);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-81));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)8);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-67), 2502);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantDouble constantDouble1 = new ConstantDouble(2502);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-81), (int) (byte) (-67), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    iconst_5
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.decode("Ar`yZ;ScCA", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ar`yZ;ScCA");
      Utility.classOrInterface((-2433));
      Utility.isSet((-4481), 0);
      try { 
        Utility.typeOfSignature("Ar`yZ;ScCA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ar`yZ;ScCA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(236);
      Utility.setBit(236, 10);
      String string0 = "Li3k*eV<]%Y";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Li3k*eV<]%Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Li3k*eV<]%Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byte byte1 = (byte)69;
      byteArray0[1] = (byte)69;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.replace("Invalid byte tag in constant pool: ", "2p4m-Y8@E a5z=I,ev", "]X:e4sjuW");
      assertEquals("Invalid byte tag in constant pool: ", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("2p4m-Y8@E a5z=I,ev", "org.apache.bcel.classfile.Utility$JavaWriter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      Locale locale1 = Locale.GERMANY;
      locale0.getDisplayCountry(locale1);
      objectArray0[0] = (Object) "]X:e4sjuW";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Invalid byte tag in constant pool: ";
      objectArray0[3] = (Object) "Invalid byte tag in constant pool: ";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Invalid byte tag in constant pool: ";
      objectArray0[6] = (Object) "]X:e4sjuW";
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) "org.apache.bcel.classfile.Utility$JavaWriter";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "Invalid byte tag in constant pool: ", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[1] = "Invalid byte tag in constant pool: ";
      String string1 = Utility.methodTypeToSignature("M?qg?~5^l&", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/Utility$JavaWriter;LInvalid;)LM?qg?~5^l&;", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-66);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "W*wHoo";
      try { 
        Utility.methodSignatureReturnType("W*wHoo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W*wHoo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K,D(),&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K,D(),&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "(#qE-\\&42f$%$4B%";
      String string1 = "+zj=]6NHi";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(#qE-&42f$%$4B%", "+zj=]6NHi", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#qE-&42f$%$4B%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface(467);
      Utility.format(467, 467, false, 'h');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", low = ", ", low = ", "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh467", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-2);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("6Y$98$d2$fe", string0);
      
      Utility.compactClassName("6Y$98$d2$fe");
      String string1 = Utility.accessToString((-2954), false);
      assertEquals("private protected final synchronized volatile abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.compactClassName("xvZ/DQSgkIkC%)\"", false);
      try { 
        Utility.typeOfSignature("xvZ/DQSgkIkC%)\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xvZ/DQSgkIkC%)\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ConstantPool constantPool0 = null;
      int int0 = (-3039);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-310), (-3039));
      Utility.replace("invokespecial", "P @'mc&", "P @'mc&");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("0:    iload_2\n1:    impdep2\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iload_2
         // 1:    impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byte byte0 = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)97;
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-117);
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), (-1), false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("0:    lushr\n1:    idiv\n2:    lconst_0\n3:    lastore\n4:    ladd\n5:    nop\n6:    <illegal opcode>\n7:    f2i\n");
      Utility.searchOpcode("0:    lushr\n1:    idiv\n2:    lconst_0\n3:    lastore\n4:    ladd\n5:    nop\n6:    <illegal opcode>\n7:    f2i\n");
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "6r-<cv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-123);
      byteArray0[6] = (byte)97;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "[;50.Zj?wE'E?";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("[;50.Zj?wE'E?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;50.Zj?wE'E?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int int0 = Utility.setBit((-6159), (-6159));
      assertEquals((-6159), int0);
      
      byte[] byteArray0 = Utility.decode("Exceptions", false);
      String string0 = Utility.methodSignatureReturnType("Ft5s<[Zp@-Au");
      assertEquals("float", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(101);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-6159), 101);
      assertEquals("0:    fstore_2\n1:    ishl\n2:    dadd\n3:    lsub\n4:    irem\n5:    ineg\n6:    lmul\n7:    ddiv\n8:    fdiv\n9:    drem\n", string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.decode("getstatic", false);
      Utility.searchOpcode("protected");
      Utility.setBit((short) (-1), 95);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected";
      objectArray0[1] = (Object) "protected";
      objectArray0[2] = (Object) "getstatic";
      objectArray0[3] = (Object) "protected";
      objectArray0[4] = (Object) "protected";
      objectArray0[5] = (Object) "protected";
      objectArray0[6] = (Object) "getstatic";
      objectArray0[7] = (Object) "protected";
      Utility.printArray(objectArray0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, false);
      Utility.getSignature("~T61I(Q^#ve");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('V');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-2910));
      assertEquals("private synchronized transient abstract synthetic annotation enum", string0);
  }
}
