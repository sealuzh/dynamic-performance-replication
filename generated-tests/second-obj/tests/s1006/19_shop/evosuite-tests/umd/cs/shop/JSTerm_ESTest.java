/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:02:34 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("!e9`yvd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 797;
      jSTerm0.stream();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.stream();
      jSTerm0.makeFunction();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate1);
      jSTerm0.makeVariable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(");
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.stream();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      jSTerm0.addElement(stream0);
      Integer integer0 = new Integer((-1577));
      Predicate.isEqual((Object) stream0);
      jSTerm0.print();
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("?J?OY!)VCE0} .L1\u0000#");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(streamTokenizer0);
      jSTerm0.makeEval(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.commentChar((-4));
      jSTerm1.parallelStream();
      streamTokenizer0.nval = (double) 3352;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      StringReader stringReader0 = new StringReader("?J?OY!)VCE0} .L1\u0000#");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      jSTerm0.addElement(charArray0);
      streamTokenizer0.whitespaceChars(41, (-1493));
      jSTerm0.toStr();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.makeEval(false);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.makeVariable();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) predicate0);
      JSJshopVars.plus = (-2264);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // $java.util.function.Predicate$$EnhancerByMockitoWithCGLIB$$bf6f1dc cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      Predicate.isEqual((Object) jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSJshopVars.semicolon = 959;
      System.setCurrentTimeMillis((-18L));
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("qTS2s6aAjh&z");
      jSTerm0.containsAll(linkedList0);
      jSTerm0.isConstant();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.leftPar = (-2);
      boolean boolean0 = jSTerm1.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.makeVariable();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) predicate0);
      JSJshopVars.plus = (-2264);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.print();
      jSTerm1.makeFunction();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) pipedInputStream0);
      Predicate.isEqual((Object) stream0);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader(",#=[~^60[n");
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("?J?OY!)VCE0} .L1\u0000#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(40, 40);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      int int0 = (-1239);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.makeFunction();
      Predicate.isEqual((Object) jSTerm0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.print();
      jSTerm1.makeFunction();
      Predicate<Integer> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) pipedInputStream0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) stream0);
      predicate2.negate();
      predicate1.and(predicate2);
      predicate0.or(predicate2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      predicate0.negate();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("?J?OY!)VCE0} .L1\u0000#");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement("?J?OY!)VCE0} .L1\u0000#");
      jSTerm0.print();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[1] = '*';
      StringReader stringReader0 = new StringReader("D LAx4]`f7z4]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      Stream stream0 = jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      streamTokenizer0.whitespaceChars(278, 3041);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(stream0);
      streamTokenizer0.whitespaceChars(1369, (-2));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.stream.ReferencePipeline$Head cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 959;
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTerm0.stream();
      jSTerm0.makeFunction();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      predicate0.or(predicate3);
      predicate0.or(predicate3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(");
      predicate0.negate();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 34;
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) jSTerm1;
      objectArray0[5] = (Object) jSTerm1;
      objectArray0[6] = (Object) jSTerm1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      jSTerm1.toArray(objectArray0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringReader stringReader0 = new StringReader("2e9`yAd");
      jSTerm0.setSize(62);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '*';
      StringReader stringReader0 = new StringReader("D LAx4]`f7z4]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      Object object0 = new Object();
      streamTokenizer0.whitespaceChars(278, 3041);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(278);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSJshopVars.dot = (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringReader stringReader0 = new StringReader("2e9`yAd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.parallelStream();
      JSTerm jSTerm3 = jSTerm2.call();
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertEquals(1, jSTerm3.size());
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("D LAx4]`f7z4]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.stream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSTerm0.addElement("D LAx4]`f7z4]!");
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?J?OY)VCE0} .L1\u0000#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader(";YM346'?kW8$~|YYT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(";YM346'?kW8$~|YYT");
      stringReader1.read();
      stringReader1.reset();
      JSJshopVars.whiteSpace = (-4);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.stream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%vp%%");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[6] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read(charArray0, 0, 2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      streamTokenizer0.nextToken();
      jSTerm0.setSize(42);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = new JSTerm();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.removeAll(jSTerm3);
      Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm3);
      predicate0.or(predicate0);
      jSTerm0.setSize(959);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.isGround();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Expecting variable name in term");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected ) while reading Predicate");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2e9`yAd");
      StringReader stringReader0 = new StringReader("2e9`yAd");
      jSTerm0.setSize(62);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("(+nFHw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      stringReader0.read();
      stringReader1.reset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSTerm0.stream();
      streamTokenizer0.commentChar(37);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      StringReader stringReader0 = new StringReader("?J?OY!)VCE0} .L1\u0000#");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      PipedReader pipedReader0 = new PipedReader();
      jSTerm0.makeEval(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.cloneT();
      JSJshopVars.coma = 41;
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.call();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.equals(jSTerm6);
      jSTerm0.parseList(streamTokenizer0);
      assertEquals(2, jSTerm0.size());
      
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm7.isEval());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      jSTerm0.addElement(stream0);
      jSTerm0.stream();
      Object object0 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      jSTerm0.addElement(jSTerm1);
      PipedReader pipedReader0 = new PipedReader();
      jSTerm0.isGround();
      PipedReader pipedReader1 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("?J?OY)VCE0} .L1\u0000#");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("?J?OY)VCE0} .L1\u0000#");
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTerm jSTerm2 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      PipedReader pipedReader0 = new PipedReader();
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer1);
      jSTerm3.print();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("?J?OY)VCE0} .L1\u0000#");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSTerm jSTerm2 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      PipedReader pipedReader0 = new PipedReader();
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer1);
      jSTerm3.print();
      Object object1 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer2);
      jSTerm1.isGround();
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      jSTerm6.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
