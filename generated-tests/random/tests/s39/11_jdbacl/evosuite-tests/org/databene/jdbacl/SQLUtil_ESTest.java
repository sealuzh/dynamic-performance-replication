/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:47:29 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.h2.engine.SessionRemote;
import org.h2.value.ValueLob;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = new String[6];
      String string0 = SQLUtil.innerJoin(" join ", stringArray1, "truncate{p;-agbx}t[", "][<S\"sJn$W3f39x(SF", stringArray0);
      assertEquals("truncate{p;-agbx}t[ as ][<S\"sJn$W3f39x(SF on  join .null = ][<S\"sJn$W3f39x(SF.null and  join .null = ][<S\"sJn$W3f39x(SF.null and  join .null = ][<S\"sJn$W3f39x(SF.null and  join .null = ][<S\"sJn$W3f39x(SF.null and  join .null = ][<S\"sJn$W3f39x(SF.null and  join .null = ][<S\"sJn$W3f39x(SF.null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("SECONDARY");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Tt w(C3`SHg'", "[ha<`a07", (Object) null);
      assertEquals("Tt w(C3`SHg'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("2~}H<H 4d37m7Z", (String) null, "SELECT * FROM 2~}H<H 4d37m7Z WHERE 2~}H<H 4d37m7Z = '2~}H<H 4d37m7Z' AND {p;-AgbX}T[ = '{p;-AgbX}T[' AND 2~}H<H 4d37m7Z = '2~}H<H 4d37m7Z' AND 2~}H<H 4d37m7Z = '2~}H<H 4d37m7Z' AND { p ; - AgbX } T [ = '{ p ; - AgbX } T [' AND { p ; - AgbX } T [ = '{ p ; - AgbX } T ['");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[2] = object0;
      String string0 = SQLUtil.renderValue(objectArray0[2]);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("$5d", stringArray0, "$5d", (String) null, stringArray0);
      assertEquals("left join $5d as null on $5d.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin(" ADD ", stringArray0, "ISO8859_15_FDIS", "deletepqfw+\"4t,o", stringArray0);
      assertEquals("left join ISO8859_15_FDIS as deletepqfw+\"4t,o on  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null and  ADD .null = deletepqfw+\"4t,o.null", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "into", stringArray0);
      assertEquals("left join  as into on .null = into.null and .null = into.null and .null = into.null and .null = into.null and .null = into.null and .null = into.null and .null = into.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join((String) null, "inner", stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals("null as null on inner.null = null.null and inner.null = null.null and inner.null = null.null and inner.null = null.null and inner.null = null.null and inner.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin("getSQLAllowed", stringArray0, "", "getSQLAllowed", stringArray0);
      assertEquals(" as getSQLAllowed on getSQLAllowed.null = getSQLAllowed.null and getSQLAllowed.null = getSQLAllowed.null and getSQLAllowed.null = getSQLAllowed.null and getSQLAllowed.null = getSQLAllowed.null and getSQLAllowed.null = getSQLAllowed.null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "_i + w_ ~ } Dq [ u @ NT * s", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("schema ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("FQ'3S", "getNCXarvc5erS/ream(int)", stringArray0, "inner", "FQ'3S", stringArray0);
      assertEquals("FQ'3S join inner as FQ'3S on getNCXarvc5erS/ream(int).null = FQ'3S.null and getNCXarvc5erS/ream(int).null = FQ'3S.null and getNCXarvc5erS/ream(int).null = FQ'3S.null and getNCXarvc5erS/ream(int).null = FQ'3S.null and getNCXarvc5erS/ream(int).null = FQ'3S.null", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("ld\"~_o%N@rR[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create tablesecondary");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("XCkm8}EMDqIQQg#c as XCkm8}EMDqIQQg#c on ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("SECONDARY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.renderValue(" ADD ");
      assertEquals("' ADD '", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view", dBSchema0);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "getString(String)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!oX526");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName("BLOB", stringArray0);
      assertEquals("BLOB.null, BLOB.null, BLOB.null, BLOB.null, BLOB.null, BLOB.null, BLOB.null", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("delete");
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLob valueLob0 = ValueLob.createClob(stringReader0, 4611686018427387906L, sessionRemote0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1331);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-862.04);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 862.04", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("c&zw\"%Idh--C(tgC", false);
      assertEquals("c & zw \"%Idh--C(tgC\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("_i+w_~}Dq[u@NT*s", false);
      assertEquals("_i + w_ ~ } Dq [ u @ NT * s", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter table-- error [", false);
      assertEquals("alter table -- error [", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("/>p'Px3 YNZc", false);
      assertEquals("/ > p 'Px3 YNZc'", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("43X24.U", false);
      assertEquals("43X24.U", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("=iX3C0s(]M", true);
      assertEquals("= iX3C0s (] M", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop tableb]<55k@kza)>l,$", false);
      assertEquals("drop tableb ] < 55k @ kza) > l, $", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.removeComments("q2gn=6jHCn$0sm(`dy");
      assertEquals("q2gn=6jHCn$0sm(`dy", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence((String) null, "49YMl(),", "alter session");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence null", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "into", "exec");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$ZrIk{?mnU6&D$>");
      DBDataType dBDataType0 = DBDataType.getInstance(3437, "`;d%.T5`[");
      Integer integer0 = new Integer((-58351823));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertNotNull(string0);
      assertEquals("column C", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SECONDARY");
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SECONDARY", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT SECONDARY ", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "into", "exec");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XCkm8}EMDqIQQg#c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT XCkm8}EMDqIQQg#c CONSTRAINT XCkm8}EMDqIQQg#c ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FQ'3S");
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "FQ'3S", true, stringArray0);
      dBPrimaryKeyConstraint0.setName(stringArray0[4]);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view", dBSchema0);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "getString(String)", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("alter materialized view.getString(String)", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", (DBTable) null, 3172, "alter tablealter table");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals(" ADD ", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XCkm8}EMDqIQQg#c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("XCkm8}EMDqIQQg#c", stringBuilder0);
      assertEquals("CONSTRAINT XCkm8}EMDqIQQg#c  or XCkm8}EMDqIQQg#c", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ", (DBSchema) null);
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" join ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("a[$i\"'DdU-hl5& /=", stringBuilder0);
      assertEquals("a[$i\"'DdU-hl5& /=", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "drop sequence ");
      SQLUtil.addRequiredCondition("drop sequence ", stringBuilder0);
      assertEquals("drop sequence  and drop sequence ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1722);
      SQLUtil.addRequiredCondition("ZW)Y", stringBuilder0);
      assertEquals("ZW)Y", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "create unique index", stringArray0, "Lsd7-o#", "alter session", stringArray0);
      assertEquals("Lsd7-o# as alter session on create unique index.null = alter session.null", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("9aF_zsK54r|=", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9aF_zsK54r|=", dBSchema0);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("9aF_zsK54r|=", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 9aF_zsK54r|= FOREIGN KEY () REFERENCES 9aF_zsK54r|=()", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XCkm8}EMDqIQQg#c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT XCkm8}EMDqIQQg#c PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("( /* ");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec(dufb]7eir,6/");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'e'", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("\u0003_&;#V3eG)*Pc8");
      DBSchema dBSchema0 = new DBSchema("Zo+45w", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1888), "43X24.U");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableclob", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter tableclob 43X24.U(0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("'Vi&7z{&DN");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BLOB", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getSQLAllowed", defaultDBTable0, 37, "CD|");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select into", true, "getSQLAllowed");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("getSQLAllowed CD| NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", (DBTable) null, 3172, "alter tablealter table");
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals(" ADD ", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create tablesecondary", (DBTable) null, (-2241), "create tablesecondary");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create tablesecondary, create tablesecondary, create tablesecondary, create tablesecondary, create tablesecondary, create tablesecondary, create tablesecondary", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("XCkm8}EMDqIQQg#c as XCkm8}EMDqIQQg#c on ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(110, charArrayWriter0.size());
      assertEquals("create table null (,\n\tCONSTRAINT \"XCkm8}EMDqIQQg#c as XCkm8}EMDqIQQg#c on \" FOREIGN KEY () REFERENCES null()\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$ZrIk{?mnU6&D$>");
      DBDataType dBDataType0 = DBDataType.getInstance(3437, "`;d%.T5`[");
      Integer integer0 = new Integer((-58351823));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C", defaultDBTable0, dBDataType0, integer0, integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter index(m:`y)z(b+g@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"m:`y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 63, "(2%}X2O, 2%}X2O, 2%}X2O, , , , , , , , , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2%}X2O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("{peB-jALsmyK*7(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: {peB-jALsmyK*7(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("fkg", true, "fkg", "SQRT");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT fkg CHECK SQRT", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XCkm8}EMDqIQQg#c", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(66, charArrayWriter0.size());
      assertEquals("create table null (,\n\tCONSTRAINT XCkm8}EMDqIQQg#c PRIMARY KEY ()\n)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("XCkm8}EMDqIQQg#c", stringArray0, "XCkm8}EMDqIQQg#c", "XCkm8}EMDqIQQg#c", stringArray0);
      assertEquals("XCkm8}EMDqIQQg#c as XCkm8}EMDqIQQg#c on ", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("org.postgresql.jdbc3.AbstractJdbc3Connection", stringArray0, stringArray0[4], "org.apache.derby.iapi.services.timer.TimerFactory", stringArray0);
      assertEquals("left join null as org.apache.derby.iapi.services.timer.TimerFactory on org.postgresql.jdbc3.AbstractJdbc3Connection.null = org.apache.derby.iapi.services.timer.TimerFactory.null and org.postgresql.jdbc3.AbstractJdbc3Connection.null = org.apache.derby.iapi.services.timer.TimerFactory.null and org.postgresql.jdbc3.AbstractJdbc3Connection.null = org.apache.derby.iapi.services.timer.TimerFactory.null and org.postgresql.jdbc3.AbstractJdbc3Connection.null = org.apache.derby.iapi.services.timer.TimerFactory.null and org.postgresql.jdbc3.AbstractJdbc3Connection.null = org.apache.derby.iapi.services.timer.TimerFactory.null", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("create materialized viewexec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1@f.trKJf|", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("1x)8>\u0001r.u/", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getSQLAllowed", defaultDBTable0, 37, "CD|");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select into", true, "getSQLAllowed");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("getSQLAllowed NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!oX526");
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM !oX526 WHERE null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Tf='BL}r1K(|v");
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "sequence &DY5+&", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-- head ");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
