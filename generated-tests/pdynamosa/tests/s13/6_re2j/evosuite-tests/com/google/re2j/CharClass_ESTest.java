/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:46:44 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 65370;
      intArray0[1] = 1448;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(65370, 65370);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(65370, 65370);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass1.appendFoldedRange(8488, 126);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {65370, 1448}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 65370;
      intArray0[1] = 65370;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(65370, 65370);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendFoldedRange(65370, 0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass1.appendFoldedRange(8453, 126);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass6.appendRange(1065, 1065);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {65370, 65370}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 66639;
      intArray0[1] = 859;
      intArray0[2] = 66595;
      CharClass charClass1 = charClass0.appendFoldedRange(66639, 3260);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[3] = 1445;
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {66639, 859, 66595, 1445}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendLiteral(26, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharGroup charGroup0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 691;
      intArray0[2] = (-144);
      intArray0[3] = 2123;
      intArray0[4] = 2116;
      intArray0[5] = 2108;
      intArray0[6] = 2107;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1, 691, (-144), 2123, 2116, 2108, 2107}, intArray0);
      assertEquals(7, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(4, (-144));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1, 691, (-144), 2123, 2116, 2108, 2107}, intArray0);
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1, 691, (-144), 2123, 2116, 2108, 2107}, intArray0);
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 691, (-144), 2123, 2116, 2108, 2107}, intArray0);
      assertEquals(7, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1632);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 610);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass4.appendLiteral(1962, 1632);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 638;
      int[] intArray1 = new int[5];
      intArray1[0] = 638;
      intArray1[1] = 638;
      intArray1[2] = 638;
      intArray1[3] = 638;
      intArray1[4] = 638;
      CharClass charClass2 = new CharClass(intArray1);
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertArrayEquals(new int[] {638, 638, 638, 638, 638}, intArray1);
      assertEquals(5, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1382;
      intArray0[4] = 5907;
      intArray0[5] = (-632);
      intArray0[6] = 93;
      int int1 = 1015;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1114111;
      intArray0[1] = 720;
      intArray0[2] = 65;
      intArray0[3] = 58;
      intArray0[4] = 0;
      intArray0[5] = (-4699);
      intArray0[7] = 969;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1114111, 720, 65, 58, 0, (-4699), 0, 969}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1114111, 720, 65, 58, 0, (-4699), 0, 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111, 0, (-4699), 65, 58, 1114111, 720}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendLiteral((-2816), 2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111, (-2816), (-2816), 65, 58, 1114111, 720}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 1114111, (-2816), (-2816), 65, 58, 1114111, 720}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3003);
      intArray0[1] = 336;
      intArray0[2] = 0;
      intArray0[3] = (-1159);
      intArray0[4] = 66639;
      intArray0[5] = (-5973);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-3003), 336, 0, (-1159), 66639, (-5973)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-3003), 336, 66639, (-5973), 66639, (-5973)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-3003), 1114111, 66639, (-5973), 66639, (-5973)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      CharClass charClass3 = charClass0.appendFoldedRange(983, (-5973));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-3003), 1114111, 66639, (-5973), 983, (-5973)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral(0, 1618);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-3003), 1114111, 66639, (-5973), 983, (-5973)}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral((-274), (-274));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral((-274), (-274));
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int0 = (-825);
      CharClass charClass3 = charClass2.appendFoldedRange((-825), (-274));
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      int int1 = 1930;
      CharClass charClass5 = charClass2.cleanClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass3.appendRange(1930, (-825));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      
      // Undeclared exception!
      try { 
        charClass6.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendFoldedRange(8453, 8578);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass2.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 4209;
      intArray0[0] = 4209;
      intArray0[1] = 0;
      intArray0[2] = (-3012);
      intArray0[3] = (-227);
      intArray0[4] = 1641;
      intArray0[5] = 3725;
      int int1 = 2;
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1798;
      int int1 = 66639;
      // Undeclared exception!
      charClass0.appendFoldedRange(1798, 66639);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66634, 3333);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      int int0 = 1795;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 1795);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = CharClass.charClassToString((int[]) null, (-128));
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][5];
      intArray0[0] = null;
      intArray0[1] = null;
      intArray0[2] = null;
      intArray0[3] = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1163);
      intArray0[2] = (-3318);
      intArray0[3] = (-5559);
      intArray0[4] = 1049;
      intArray0[5] = 0;
      intArray0[6] = 3593;
      intArray0[7] = 1212;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-1163), (-3318), (-5559), 1049, 0, 3593, 1212}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1632);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendRange((-1828), 0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2228);
      intArray0[1] = 2875;
      intArray0[2] = (-3296);
      intArray0[3] = (-2619);
      intArray0[4] = 672;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2228), 2875, (-3296), (-2619), 672}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(2875, (-2228));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2228), 2875, (-3296), (-2619), 672}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2228);
      intArray2[1] = (-2619);
      intArray2[2] = (-3296);
      intArray2[3] = (-2619);
      intArray2[4] = (-2228);
      intArray2[5] = (-1621);
      intArray2[6] = (-2228);
      intArray2[7] = 1104;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 2235;
      intArray0[0] = 2235;
      intArray0[1] = (-577);
      intArray0[2] = 1;
      intArray0[3] = (-4057);
      int int1 = 487;
      intArray0[4] = 487;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2235, (-577), 1, (-4057), 487}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(487, (-668));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {2235, (-577), 1, (-4057), 487}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-577);
      intArray2[1] = (-4057);
      intArray2[2] = 2235;
      intArray2[3] = (-4057);
      intArray2[4] = 2235;
      intArray2[5] = 2235;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {2235, (-577), 1, (-4057), 487}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 1898;
      intArray0[1] = 1898;
      intArray0[2] = 638;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 1898, 638}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[0] = 93;
      intArray0[1] = (-443);
      int int0 = 306;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1114111;
      intArray0[1] = 720;
      intArray0[2] = 65;
      intArray0[3] = 58;
      intArray0[4] = (-3);
      intArray0[5] = (-4674);
      intArray0[6] = 341;
      intArray0[7] = 969;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1114111, 720, 65, 58, (-3), (-4674), 341, 969}, intArray0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 1114110, (-4673), 340, 970, 1114111, 341, 969}, intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 341;
      intArray2[1] = (-3);
      intArray2[2] = 58;
      intArray2[3] = 341;
      intArray2[4] = 1114111;
      intArray2[5] = (-3);
      intArray2[6] = (-3);
      intArray1[2] = intArray2;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1558;
      intArray0[1] = (-2269);
      intArray0[2] = (-585);
      intArray0[3] = 3980;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1558, (-2269), (-585), 3980}, intArray0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1558, (-2269), (-2268), 1114111}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 64;
      intArray2[1] = (-1);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 3980;
      intArray3[1] = 64;
      intArray3[2] = 1558;
      intArray1[5] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-2269);
      intArray4[1] = (-585);
      intArray4[2] = (-2269);
      intArray1[6] = intArray4;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 5297);
      assertNotNull(charClass1);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-809);
      intArray0[1] = 1432;
      intArray0[2] = 2087;
      intArray0[3] = (-823);
      intArray0[4] = 0;
      intArray0[5] = 93;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 2087);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-809), 1432, 2087, (-823), 0, 93}, intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1432);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-809), 1432, 2087, (-823), 0, 93}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-809), 1432, 2087, (-823), 0, 93}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-809), 1432, 2087, (-823), 0, 93}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      // Undeclared exception!
      charClass4.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 387;
      intArray0[0] = 387;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {387}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2412;
      intArray0[1] = 65;
      intArray0[2] = (-1101);
      intArray0[3] = 0;
      intArray0[4] = 82;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 66640);
      assertNotNull(charClass2);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, (-129));
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass5.appendTableWithSign(intArray1, 12343);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass7.appendLiteral(1, 1);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66664, 3333);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = charClass1.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {66664, 66664}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-329);
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1250);
      intArray0[3] = 2;
      intArray0[4] = 651;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-329), 0, (-1250), 2, 651}, intArray0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-329), (-1250));
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-329), 0, (-1250), 2, 651}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = (-1663);
      intArray1[1] = (-100);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1663);
      intArray2[1] = (-1663);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-100);
      intArray3[1] = (-100);
      intArray3[2] = (-1663);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = (-1663);
      intArray4[1] = (-1663);
      intArray4[2] = (-100);
      intArray4[3] = (-100);
      intArray4[4] = (-1663);
      intArray4[5] = (-100);
      intArray4[6] = (-100);
      intArray4[7] = (-1663);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-1663);
      intArray5[1] = (-100);
      intArray5[2] = 122;
      intArray5[3] = (-1663);
      intArray5[4] = (-1663);
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int0 = 64;
      CharClass charClass3 = charClass2.appendRange(64, 64);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 64;
      CharClass charClass4 = charClass0.appendRange((-5477), (-2341));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      intArray0[1] = 64;
      intArray0[2] = 64;
      intArray0[3] = 64;
      intArray0[4] = 64;
      intArray0[5] = 64;
      CharClass charClass5 = charClass3.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][1];
      int[] intArray1 = new int[6];
      intArray1[0] = 2713;
      intArray1[1] = (-943);
      intArray1[2] = 126;
      intArray1[3] = (-2514);
      intArray1[4] = 13;
      intArray1[5] = (-81);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2713;
      intArray2[1] = 2713;
      intArray2[2] = 66640;
      intArray2[3] = 2713;
      intArray2[4] = 13;
      intArray2[5] = (-2514);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1364;
      intArray3[1] = 2713;
      intArray3[2] = 2713;
      intArray3[3] = (-2514);
      intArray3[4] = (-943);
      intArray3[5] = (-2514);
      intArray3[6] = 406;
      intArray3[7] = 2713;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 13;
      intArray4[1] = (-81);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 126;
      intArray5[1] = 66640;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-4097);
      intArray6[1] = (-81);
      intArray6[2] = 406;
      intArray6[3] = 126;
      intArray6[4] = 1364;
      intArray6[5] = 1364;
      intArray6[6] = (-676);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = 2713;
      intArray7[1] = (-81);
      intArray7[2] = 406;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int int0 = 64;
      CharClass charClass3 = charClass2.appendRange(64, 64);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 64;
      CharClass charClass4 = charClass0.appendRange((-5477), (-2341));
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      
      intArray0[1] = 64;
      intArray0[2] = 64;
      intArray0[3] = 64;
      intArray0[4] = 64;
      intArray0[5] = 64;
      CharClass charClass5 = charClass3.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      
      intArray0[6] = 64;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 176;
      intArray0[1] = 176;
      intArray0[2] = 176;
      intArray0[3] = 1244;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2760);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {176, 176, 176, 1244}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {176, 176, 176, 1244}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(2760, (-3627));
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {176, 176, 176, 1244}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2760;
      intArray2[1] = 2760;
      intArray2[2] = (-3627);
      intArray2[3] = 2760;
      intArray2[4] = (-3627);
      intArray2[5] = 1244;
      intArray2[6] = (-3627);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray2, 2760);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[3];
      intArray1[0] = (-497);
      intArray1[1] = (-930);
      intArray1[2] = 6132;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-497);
      intArray2[1] = 6132;
      intArray2[2] = 6132;
      intArray2[3] = (-930);
      intArray2[4] = (-497);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-930));
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 188;
      intArray0[1] = 0;
      intArray0[2] = 8617;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {188, 0, 8617, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {188, 0, 8617, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertArrayEquals(new int[] {188, 0, 8617, 0}, intArray0);
      assertEquals("[0xbc-0x0 0x21a9-0x0 0xbc-0x0 0x21a9-0x0]", string0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {188, 0, 8617, 0, 188, 0, 8617, 0}, intArray1);
      assertEquals(8, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass4 = charClass1.appendRange(705, 12295);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass3.appendFoldedRange(2710, 188);
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {188, 0, 8617, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 443);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-111);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-111)}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(0, 720894);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-111)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, (-111));
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, (-111)}, intArray0);
      assertEquals("[]", string0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-111)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3073;
      intArray0[2] = 0;
      intArray0[3] = 12771;
      intArray0[4] = 1018;
      intArray0[5] = (-761);
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 1018;
      intArray2[1] = (-761);
      intArray2[2] = 3073;
      intArray2[3] = 3073;
      intArray2[4] = 0;
      intArray2[5] = (-761);
      intArray2[6] = 0;
      intArray2[7] = 1018;
      intArray2[8] = (-149);
      intArray1[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 0;
      int int0 = 93;
      intArray3[2] = 93;
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][1];
      int int0 = 1250;
      int int1 = 351;
      charClass0.appendNegatedClass(intArray0);
      charClass0.appendRange(1250, 351);
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2062;
      intArray0[1] = 0;
      intArray0[2] = 2588;
      intArray0[3] = 239;
      intArray0[4] = 1114111;
      intArray0[5] = 0;
      intArray0[6] = 1723;
      intArray0[7] = (-4861);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.appendRange(1114111, 0);
      assertArrayEquals(new int[] {1723, (-4861), 2062, 0, 2588, 239, 1114111, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 2958;
      intArray0[1] = 586;
      intArray0[2] = 8329;
      intArray0[3] = 1885;
      intArray0[4] = 2416;
      intArray0[5] = 0;
      intArray0[6] = 922;
      intArray0[7] = 6753;
      intArray0[8] = (-287);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 65370;
      intArray0[1] = 1448;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(65370, 65370);
      CharClass charClass2 = charClass1.appendRange(65370, 65370);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      CharClass charClass5 = charClass4.cleanClass();
      charClass5.negateClass();
      // Undeclared exception!
      charClass2.appendFoldedRange(65370, 69814);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-601);
      intArray0[1] = 66639;
      intArray0[2] = 3780;
      intArray0[3] = 65;
      intArray0[4] = 65;
      intArray0[5] = 113;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      int[][] intArray1 = new int[0][6];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      charClass3.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendRange(113, 109);
      charClass0.appendTable(intArray1);
      CharClass charClass5 = charClass4.negateClass();
      CharClass charClass6 = charClass5.appendRange(113, 533);
      assertSame(charClass2, charClass6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = (-809);
      intArray0[1] = 1432;
      intArray0[2] = 2087;
      intArray0[3] = (-823);
      intArray0[4] = 0;
      intArray0[5] = 93;
      charClass0.appendClassWithSign(intArray0, 2087);
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange(0, 1432);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.cleanClass();
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2195);
      intArray0[1] = 1114111;
      intArray0[2] = (-676);
      int int0 = 2425;
      intArray0[3] = 2425;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      int int1 = (-1346);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-1346));
      // Undeclared exception!
      charClass4.appendFoldedRange(2724, 1114111);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int int0 = (-736);
      int int1 = 0;
      int int2 = 2230;
      CharClass charClass2 = charClass0.appendRange((-736), 2230);
      charClass2.toString();
      int int3 = 1550;
      charClass2.appendRange(0, 1550);
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3526;
      intArray0[1] = 0;
      intArray0[2] = 1075;
      intArray0[3] = 0;
      intArray0[4] = 8501;
      intArray0[5] = 93;
      intArray0[6] = 0;
      intArray0[7] = (-591);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][9];
      charClass0.appendNegatedTable(intArray1);
      int int0 = 0;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray2, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 2386;
      intArray0[0] = 2386;
      int int1 = (-2237);
      intArray0[1] = (-2237);
      intArray0[2] = 203;
      intArray0[3] = 2551;
      int int2 = 12991;
      intArray0[4] = 12991;
      int int3 = (-1284);
      CharClass.charClassToString(intArray0, (-1284));
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 66639;
      intArray0[1] = (-589);
      intArray0[2] = (-1255);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1114111;
      intArray0[1] = 720;
      intArray0[2] = 65;
      intArray0[3] = 58;
      intArray0[4] = 0;
      intArray0[5] = (-4674);
      intArray0[6] = 341;
      intArray0[7] = 969;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign((int[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
