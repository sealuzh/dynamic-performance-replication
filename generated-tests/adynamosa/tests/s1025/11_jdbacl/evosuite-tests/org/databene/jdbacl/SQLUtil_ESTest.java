/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 15:58:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLLongvarchar;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.DeleteConstantAction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.core.BaseConnection;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.jdbc4.Jdbc4SQLXML;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLUtil.removeComments("NCLOB");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "NCLOB";
      stringArray0[1] = "NCLOB";
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.join("NCLOB", "NCLOB", stringArray0, stringArray0[2], "create", stringArray0);
      SQLUtil.parseColumnTypeAndSize("NCLOB");
      Integer integer0 = Integer.getInteger("create", 39);
      Integer.remainderUnsigned(39, (-184));
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(39, "NCLOB");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[5], defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NCLOB", false, stringArray0);
      Integer.toUnsignedLong(749);
      SQLUtil.isDDL("9.(q%HWq");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT NCLOB UNIQUE (, NCLOB, , , , )", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("NCLOB", "Attempting to initilize native library.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Attempting to initilize native library.
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLUtil.normalize("drop iTdex", false);
      SQLUtil.mutatesDataOrStructure("drop iTdex");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[18];
      defaultDBTable0.getComponents();
      stringArray0[0] = "drop iTdex";
      SQLUtil.isQuery("drop iTdex");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments("drop iTdex");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.mutatesStructure("selectc");
      Boolean.valueOf(false);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.isDDL("UHA[?B7ibvZ)ipvOYM");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("VVnE", true, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.removeComments("NCLOB");
      Random.setNextRandom(421);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[1] = "NCLOB";
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.join("NCLOB", "NCLOB", stringArray0, stringArray0[2], "create", stringArray0);
      SQLUtil.parseColumnTypeAndSize("NCLOB");
      Integer integer0 = new Integer(421);
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(421, "NCLOB");
      dBDataType0.isNumber();
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[5], defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NCLOB", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("w8LFt", true, dBUniqueConstraint0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("NCLOB join null as create on NCLOB.null = create.null and NCLOB.NCLOB = create.NCLOB and NCLOB.null = create.null and NCLOB.NCLOB = create.NCLOB and NCLOB.null = create.null and NCLOB.null = create.null", defaultDBTable0, 11, "NCLOB join null as create on NCLOB.null = create.null and NCLOB.NCLOB = create.NCLOB and NCLOB.null = create.null and NCLOB.NCLOB = create.NCLOB and NCLOB.null = create.null and NCLOB.null = create.null");
      SQLUtil.isDDL("9.(q%HWq");
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.removeComments("TrAU5");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertFalse(defaultDBColumn0.isVersionColumn());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      Random.setNextRandom((-1248));
      jdbcClob jdbcClob0 = new jdbcClob("arg.h2.store.FilnStor8");
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "create unique index:21[,pvhpy96e");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(590, " -");
      Integer integer0 = RawTransaction.ABORT;
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(".", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index:21[,pvhpy96e", (DBSchema) null);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zED~]A", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select intocst of", defaultDBTable0, dBDataType0, integer2, integer0);
      defaultDBColumn1.getForeignKeyConstraint();
      SQLUtil.typeAndName(tableContainer0);
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "zED~]A");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(".", defaultDBTable0, 4096, "create unique index:21[,pvhpy96e");
      String string0 = SQLUtil.renderColumn(defaultDBColumn2);
      assertEquals(". CREATE UNIQUE INDEX:21[,PVHPY96E NULL", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("inr");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "inr";
      stringArray0[1] = "inr";
      SQLUtil.renderColumnListWithTableName("inr", stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-1156), "inr");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable1, dBDataType0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      Integer.remainderUnsigned((-1156), (-1156));
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, (String) null, false, stringArray0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      boolean boolean0 = SQLUtil.isProcedureCall("inr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" DEFAULT ");
      defaultDBTable0.getForeignKeyConstraints();
      defaultDBTable0.equals("call");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isProcedureCall("PCTINCREASE");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("PCTINCREASE");
      SQLUtil.renderColumnListWithTableName(" DEFAULT ", stringArray0);
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "PCTINCREASE", false, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.renderValue(defaultDBTable1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("", false);
      SQLUtil.mutatesDataOrStructure("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      slaveDatabase0.getId();
      // Undeclared exception!
      try { 
        dataDictionaryImpl1.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setDefaultAutoCommit(false);
      pGConnectionPoolDataSource0.getLogWriter();
      Object object0 = new Object();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Sl.BE]66YF", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName((String) null);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.parseColumnTypeAndSize(" = ");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      SQLUtil.normalize("Sl.BE]66YF", false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(402, "L@;u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 402
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setDefaultAutoCommit(false);
      pGConnectionPoolDataSource0.getLogWriter();
      Object object0 = new Object();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "87+";
      SQLUtil.join("execl^ravs.null, l^ravs.null, l^ravs.null", "87+", stringArray0, "selecgki%-hs", "r00/a1/>[M_&(`Z,2]I", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<z");
      defaultDBTable0.getReferrers();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " = ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("=bDO,rYzYlv:mti/", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      SQLUtil.join("alter session", (String) null, stringArray0, "r00/a1/>[M_&(`Z,2]I", "$ G)0@", stringArray0);
      SQLUtil.parseColumnTypeAndSize("A#D64&>N");
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("K2<if1.\u0003\"A;Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(",");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(",", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT , ", stringBuilder0.toString());
      
      SQLUtil.parseColumnTypeAndSize("TBz7Qdr");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("7Y+2]da]w");
      defaultDBTable0.getForeignKeyConstraint(stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT , FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = ",";
      SQLUtil.removeComments("select");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Random.setNextRandom((-2));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NCLOB";
      stringArray0[2] = "create";
      stringArray0[3] = "create";
      stringArray0[4] = "create";
      stringArray0[0] = "create";
      stringArray0[7] = "create";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create", defaultDBTable0, 2519, "XBCM4.S");
      defaultDBColumn0.isUnique();
      SQLUtil.mutatesStructure("alter table");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "DROP AGGREGATE IF EXISTS ", false, "create");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("create", stringBuilder0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLUtil.normalize("NCLOB", false);
      Random.setNextRandom(421);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create";
      stringArray0[2] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NCLOB", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.parseColumnTypeAndSize("NCLOB");
      stringBuilder0.append((Object) "NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create", defaultDBTable0, 2519, "NCLOB");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create");
      PrintWriter printWriter0 = mockPrintWriter0.append('\'');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Cotof cSng3meaQe ");
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "czll");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Cotof cSng3meaQe ", defaultDBTable0, dBDataType0);
      byte[] byteArray0 = new byte[9];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray1 = TimeZone.getAvailableIDs();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("czll", defaultDBTable0, (-852), "czll");
      SQLUtil.isDDL("deleteyjmcwqudiwo;q");
      SQLUtil.renderColumnNames(stringArray1);
      SQLUtil.isDDL("");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      StringReader stringReader0 = new StringReader("&c]+u7g*3");
      TableContainer tableContainer0 = new TableContainer("^");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&c]+u7gz3", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&c]+u7gz3";
      stringArray0[1] = "&c]+u7g*3";
      stringArray0[2] = "&c]+u7g*3";
      stringArray0[3] = "^";
      stringArray0[4] = "&c]+u7gz3";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&c]+u7g*3", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.parseColumnTypeAndSize("&c]+u7gz3");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Udk?", defaultDBTable0, 666, "truncate");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cst of");
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "czll");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cst of");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      SQLUtil.isDML("cst of");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String string0 = null;
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      dBDataType0.isAlpha();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Tdlz", stringBuilder0);
      SQLUtil.isQuery("L^R,vs:~h4hLR_|Z");
      SQLUtil.removeComments("L^R,vs:~h4hLR_|Z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Tdlz";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized viewupdatebyte(", false, stringArray0);
      SQLUtil.normalize("L^R,vs:~h4hLR_|Z", false);
      SQLUtil.mutatesDataOrStructure("gr#a9X876eA}A");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" = ", defaultDBTable0, (-1974675591), "org.h2.command.dml.SelectUnion");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")Z&N", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "drop materialized view");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("=M$/J_.=M$/J_");
      SQLUtil.isProcedureCall("create table8ix]l1vhtp");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "create table8ix]l1vhtp", false, stringArray0);
      SQLUtil.isDML("create table8ix]l1vhtp");
      SQLUtil.join("=M$/J_", "=M$/J_.=M$/J_", stringArray0, "6M6R", "ec=BZ<<vZPAu1", stringArray0);
      SQLUtil.removeComments("_8FGNyS2oih");
      SQLUtil.normalize("=M$/J_", false);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("=M$/J_.=M$/J_");
      SQLUtil.isProcedureCall("create table8ix]l1vhtp");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "create table8ix]l1vhtp", false, stringArray0);
      SQLUtil.isDML("create table8ix]l1vhtp");
      SQLUtil.join("=M$/J_", "=M$/J_.=M$/J_", stringArray0, "6M6R", "ec=BZ<<vZPAu1", stringArray0);
      SQLUtil.parseColumnTypeAndSize("=M$/J_");
      String string0 = SQLUtil.removeComments("_8FGNyS2oih");
      String string1 = SQLUtil.normalize("=M$/J_", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = SQLUtil.normalize("NCLOB", true);
      assertEquals("NCLOB", string0);
      
      Random.setNextRandom(421);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create";
      stringArray0[1] = "NCLOB";
      stringArray0[2] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = "NCLOB";
      String string1 = SQLUtil.join("NCLOB", "NCLOB", stringArray0, "NCLOB", "create", stringArray0);
      assertEquals("NCLOB join NCLOB as create on NCLOB.create = create.create and NCLOB.NCLOB = create.NCLOB and NCLOB.NCLOB = create.NCLOB and NCLOB.NCLOB = create.NCLOB and NCLOB.NCLOB = create.NCLOB and NCLOB.NCLOB = create.NCLOB", string1);
      
      SQLUtil.parseColumnTypeAndSize("NCLOB");
      Integer integer0 = new Integer(421);
      DBDataType dBDataType0 = DBDataType.getInstance(421, "NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("NCLOB NCLOB NULL", string2);
      
      String string3 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLUtil.normalize("NCLOB", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NCLOB";
      stringArray0[2] = "NCLOB";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = "NCLOB";
      String string0 = SQLUtil.join("NCLOB", "NCLOB", stringArray0, "NCLOB", "NCLOB", stringArray0);
      assertEquals("NCLOB join NCLOB as NCLOB on NCLOB.NCLOB = NCLOB.NCLOB and NCLOB.null = NCLOB.null and NCLOB.NCLOB = NCLOB.NCLOB and NCLOB.NCLOB = NCLOB.NCLOB and NCLOB.NCLOB = NCLOB.NCLOB and NCLOB.NCLOB = NCLOB.NCLOB", string0);
      
      SQLUtil.parseColumnTypeAndSize("NCLOB");
      Integer integer0 = new Integer(0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncateyxx![h?tl9%h.a7'te.");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string1 = SQLUtil.normalize("NCLOB", false);
      assertEquals("NCLOB", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&c]+u7gz3");
      jdbcClob jdbcClob0 = new jdbcClob("[a.nw]y{oy");
      jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "[a.nw]y{oy";
      streamTokenizer0.commentChar(32);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.mutatesStructure("select&c]+u7gz3");
      SQLUtil.mutatesDataOrStructure("select&c]+u7gz3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("UPDATE_RULE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.isQuery("Cotof cSng3meaQe ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cotof cSng3meaQe ";
      stringArray0[1] = "Cotof cSng3meaQe ";
      stringArray0[2] = "Cotof cSng3meaQe ";
      jdbcClob jdbcClob0 = new jdbcClob("Cotof cSng3meaQe ");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.commentChar((-878));
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.mutatesStructure("executeselect&c]+u7gz3");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("Cotof cSng3meaQe ", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" A>-[cfQ.es/=oA*6", (DBTable) null, (-878), "REFEREN");
      SQLUtil.renderColumn(defaultDBColumn0);
      dBCatalog0.getSchema(" A>-[cfQ.es/=oA*6 REFEREN NULL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" A>-[cfQ.es/=oA*6", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(" A>-[cfQ.es/=oA*6 REFEREN NULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' A>-[cfQ.es/=oA*6 REFEREN NULL' not found in table ' A>-[cfQ.es/=oA*6'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLUtil.mutatesStructure("M]:Y!^?#r1i");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M]:Y!^?#r1i");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M]:Y!^?#r1i";
      stringArray0[1] = "M]:Y!^?#r1i";
      stringArray0[2] = "M]:Y!^?#r1i";
      stringArray0[3] = "Fv2k4JrT[Z}7R";
      stringArray0[4] = "M]:Y!^?#r1i";
      stringArray0[5] = "M]:Y!^?#r1i";
      stringArray0[0] = "M]:Y!^?#r1i";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("M]:Y!^?#r1i", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.parseColumnTypeAndSize("M]:Y!^?#r1i");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.normalize("M]:Y!^?#r1i", false);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("Cost of conglomerate ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin((String) null, stringArray0, "drop table()", (String) null, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      DBSchema dBSchema0 = new DBSchema("drop table()");
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = SQLUtil.isQuery("Cost of conglomerate ");
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("Cost of conglomerate ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Boolean boolean1 = SQLUtil.mutatesStructure("()");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      defaultDBTable0.setName("drop index");
      DBDataType dBDataType0 = DBDataType.getInstance(3276, "~cN");
      Integer integer0 = new Integer(3276);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Pvzp<", defaultDBTable0, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      defaultDBColumn0.setDefaultValue("Pvzp<");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "F]z..pH ^c)3M";
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLUtil.mutatesStructure("M]:Y!^?#r1i");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M]:Y!^?#r1i");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "M]:Y!^?#r1i";
      stringArray0[1] = "M]:Y!^?#r1i";
      stringArray0[2] = "M]:Y!^?#r1i";
      stringArray0[3] = "Fv2k4JrT[Z}7R";
      stringArray0[4] = "M]:Y!^?#r1i";
      stringArray0[5] = "M]:Y!^?#r1i";
      stringArray0[6] = "M]:Y!^?#r1i";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("M]:Y!^?#r1i", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.parseColumnTypeAndSize("M]:Y!^?#r1i");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("M]:Y!^?#r1i", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view", 42);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PipedReader pipedReader0 = new PipedReader(42);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      Boolean boolean0 = new Boolean((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "- 0";
      stringArray0[3] = null;
      String[] stringArray1 = new String[8];
      stringArray1[0] = "mF>&[";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = "- 0";
      stringArray1[5] = null;
      stringArray1[6] = null;
      stringArray1[7] = null;
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, stringArray0[1], stringArray1);
      assertEquals("left join null as null on null.null = null.mF>&[ and null.null = null.null and null.- 0 = null.null and null.null = null.null", string1);
      
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray1);
      assertEquals("null = 'mF>&[' AND null = null AND - 0 = null AND null = null", string2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" cannot create instance, module ignored.");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringArray0[2]);
      StringBuilder stringBuilder4 = stringBuilder3.append(true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder5 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder4, nameSpec0);
      assertSame(stringBuilder5, stringBuilder3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("NCLOB", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.innerJoin("qx[b<Kw", stringArray0, "qx[b<Kw", "Cost of conglomerate ", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      TableContainer tableContainer0 = new TableContainer("qx[b<Kw");
      SQLUtil.join("Cost of conglomerate ", " DEFAULT ", stringArray0, "calltruncate", "qx[b<Kw", stringArray0);
      SQLUtil.parseColumnTypeAndSize("calltruncate");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "create table";
      SQLUtil.isDDL("create table");
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Random.setNextRandom(65547);
      SQLUtil.removeComments("org.apache.derby.impl.store.raw.data.UpdateFieldOperation");
      String string0 = SQLUtil.renderValue("'RETENTION'");
      assertEquals("''RETENTION''", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewalter");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.UpdateFieldOperation";
      stringArray0[1] = "alter materialized viewalter";
      stringArray0[2] = "''RETENTION''";
      stringArray0[3] = "[";
      stringArray0[4] = "org.apache.derby.impl.store.raw.data.UpdateFieldOperation";
      stringArray0[5] = "org.apache.derby.impl.store.raw.data.UpdateFieldOperation";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.store.raw.data.UpdateFieldOperation", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("''RETENTION''");
      Integer.getInteger("org.apache.derby.impl.store.raw.data.UpdateFieldOperation", 65547);
      DBDataType dBDataType0 = DBDataType.getInstance((-350), ":2");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.store.raw.data.UpdateFieldOperation", defaultDBTable0, dBDataType0, integer0);
      String string1 = "CfPad>/.KO.\\u5RLKm";
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1061);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "@bQi\"1");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 10, 65547, timeUnit0);
      SQLUtil.substituteMarkers("'", string1, scheduledFuture0);
      String string2 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(":2(2)", string2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("selecgkiw%-hs", stringBuilder1);
      assertEquals("selecgkiw%-hs", stringBuilder1.toString());
      
      SQLUtil.parseColumnTypeAndSize("yjmcwqudiwo;q");
      Integer integer0 = new Integer(3883);
      DBDataType dBDataType0 = DBDataType.getInstance(3883, "gkiw%-hs");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-49);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("create tableyjmcwqudiwo;q", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("gkiw%-hs", (DBSchema) null);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecgkiw%-hs", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create tableyjmcwqudiwo;q", defaultDBTable0, dBDataType0, integer2);
      SQLUtil.renderColumn(defaultDBColumn1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?8M}}]qR#+=3x:";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "^{~m3>jBE)u=";
      stringArray1[1] = "create tableyjmcwqudiwo;q GKIW%-HS(0) NULL";
      stringArray1[2] = "yjmcwqudiwo;q";
      stringArray1[3] = "create tableyjmcwqudiwo;q";
      stringArray1[4] = "^{~m3>jBE)u=";
      stringArray1[5] = "create tableyjmcwqudiwo;q GKIW%-HS(0) NULL";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^{~m3>jBE)u=", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ^{~m3>jBE)u= FOREIGN KEY (?8M}}]qR#+=3x:) REFERENCES gkiw%-hs(^{~m3>jBE)u=, create tableyjmcwqudiwo;q GKIW%-HS(0) NULL, yjmcwqudiwo;q, create tableyjmcwqudiwo;q, ^{~m3>jBE)u=, create tableyjmcwqudiwo;q GKIW%-HS(0) NULL)", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
      
      SQLUtil.removeComments(",");
      boolean boolean0 = SQLUtil.isQuery("selectdrop table");
      assertTrue(boolean0);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "(, , )";
      stringArray1[1] = "call";
      stringArray1[2] = "(, , )";
      String string1 = "z`*a\"|";
      SQLUtil.renderColumnNames(stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(, , )");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1096526460), "call");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("dn-~]Y72Z]5 h?[", true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, (-562), (-26));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      StringReader stringReader0 = new StringReader("&c]+u7gz3");
      DBDataType dBDataType0 = DBDataType.getInstance(894, "^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4}M~9&@*kc! Xe");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V:tu 90!}.vM", defaultDBTable0, dBDataType0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[V:tu 90!}.vM : ^]", vector0.toString());
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[0];
      SQLUtil.join("PRIMARY", (String) null, stringArray0, "&c]+u7gz3", "|OUg", stringArray0);
      SQLUtil.parseColumnTypeAndSize("4}M~9&@*kc! Xe");
      Integer integer0 = new Integer((-302330891));
      DBDataType dBDataType1 = DBDataType.getInstance((-302330891), "z`*a\"|");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("^", defaultDBTable0, dBDataType1, integer1);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("|OUg", defaultDBTable0, dBDataType1, integer1, integer2);
      String string0 = SQLUtil.renderColumn(defaultDBColumn2);
      assertEquals("|OUg Z`*A\"|(3,3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLUtil.normalize("NCLOB", true);
      Random.setNextRandom(421);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",'", defaultDBTable1, 421, "drop table");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "n}'v5}G'i]";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("]0D", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("#;H|:QVF^7f4=y39", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        stringBuilder2.append(charArray0, 421, 421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringReader stringReader0 = new StringReader("or9g.apa");
      jdbcClob jdbcClob0 = new jdbcClob("or9g.apa");
      jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(114);
      PipedReader pipedReader0 = new PipedReader(94);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.commentChar((-70));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.nval = (double) 94;
      String string0 = SQLUtil.renderNumber(streamTokenizer2);
      assertEquals("94", string0);
      
      String string1 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 65547;
      Random.setNextRandom(65547);
      SQLUtil.removeComments("eQNH1n:");
      SQLUtil.renderValue("'RETENTION'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewalter");
      String[] stringArray0 = new String[6];
      defaultDBTable0.getReferrers();
      stringArray0[0] = "eQNH1n:";
      stringArray0[1] = "alter materialized viewalter";
      stringArray0[2] = "''RETENTION''";
      stringArray0[3] = "[";
      stringArray0[4] = "eQNH1n:";
      stringArray0[5] = "eQNH1n:";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("eQNH1n:", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("''RETENTION''");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "eQNH1n:", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = ",";
      SQLUtil.removeComments(",");
      SQLUtil.isQuery("selectdrop table");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "(, , )";
      stringArray1[1] = "call";
      stringArray1[2] = "(, , )";
      String string1 = "z`*a\"|";
      stringArray1[3] = "z`*a\"|";
      SQLUtil.renderColumnNames(stringArray1);
      String string2 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("//");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1096526460), "z`*a\"|");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("n}'v5}G'i]", true, defaultDBTable1, stringArray1, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, (-26), (-26));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringReader stringReader0 = new StringReader("org.apa");
      jdbcClob jdbcClob0 = new jdbcClob("org.apa");
      jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(114);
      PipedReader pipedReader0 = new PipedReader(94);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.commentChar((-70));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer2.nval = (-1754.59);
      SQLUtil.renderNumber(streamTokenizer2);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("", stringBuilder1);
      SQLUtil.isQuery("gkiw%-hs");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.removeComments("'1q\"}");
      assertEquals("'1q\"}", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)13;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.isQuery("%Prh$");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Tdlz", stringBuilder0);
      assertEquals("Tdlz", stringBuilder0.toString());
      
      SQLUtil.isQuery("org.apache.derby.iapi.types.J2SEDataValueFactory");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.types.J2SEDataValueFactory", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xL>^cg~!>DhO62,ex", defaultDBTable0, (-498), "create tablerenamealter");
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("xL>^cg~!>DhO62,ex CREATE TABLERENAMEALTER NULL");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String string0 = SQLUtil.substituteMarkers("alter table", "", "create tablerenamealter");
      assertEquals("'create tablerenamealter'a'create tablerenamealter'l'create tablerenamealter't'create tablerenamealter'e'create tablerenamealter'r'create tablerenamealter' 'create tablerenamealter't'create tablerenamealter'a'create tablerenamealter'b'create tablerenamealter'l'create tablerenamealter'e'create tablerenamealter'", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.join("cZe[qE,a|w1%^i", "setCharacterStream(String, Reader, long)", (String[]) null, "1_rY+!Y-U$0", "1_rY+!Y-U$0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"U}$NhW!");
      String[] stringArray0 = new String[0];
      String string0 = "(";
      SQLUtil.isDML("Error converting to binary stream.");
      SQLUtil.parseColumnTypeAndSize("");
      String string1 = "s6'k?rsvae";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getObjectID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      DBSchema dBSchema1 = new DBSchema("update");
      DBPackage dBPackage0 = new DBPackage("update", dBSchema0);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      StringReader stringReader0 = new StringReader("&c]+u7gz3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("&c]+u7gz3");
      System.setCurrentTimeMillis(318L);
      DBSchema dBSchema0 = new DBSchema("- 0");
      DBPackage dBPackage0 = new DBPackage("3:L/", dBSchema0);
      SQLUtil.typeAndName(dBPackage0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("KudO v^N|", (String[]) null, "`c:1&&cALz&e!@@ 3", "`c:1&&cALz&e!@@ 3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8nO1]h";
      stringArray0[1] = "`X?(7>";
      stringArray0[2] = "PP6|o^fU[biWh]48";
      stringArray0[3] = "(*-]3M4Pd51";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[4] = "BRKqEvzbU`3\r";
      stringArray0[5] = "";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("0$w,:J");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.firebirdsql.gds.impl.wire.isc_tr_handle_impl", true);
      assertEquals("org.firebirdsql.gds.impl.wire.isc_tr_handle_impl", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "Tdlz", "org.firebirdsql.gds.impl.wire.isc_tr_handle_impl");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jdbcClob jdbcClob0 = new jdbcClob("'RETENTIONq");
      StringReader stringReader0 = new StringReader("'RETENTIONq");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "rename");
      SQLLongvarchar sQLLongvarchar0 = new SQLLongvarchar("'RETENTIONq");
      dBCheckConstraint0.equals(sQLLongvarchar0);
      SQLUtil.constraintName(dBCheckConstraint0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("'RETENTIONq");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "f";
      stringArray1[1] = "drop materialized view";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "el?GO{-}@kVfx#@}<3";
      stringArray1[5] = "drop materialized view";
      stringArray1[6] = "drop materialized view";
      SQLUtil.innerJoin("", stringArray0, "drop materialized view", "el?GO{-}@kVfx#@}<3", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.join(" (", "drop materialized view", stringArray1, "", "renamerenamealter", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      dBSchema0.getTable("CONSTRAINT_TYPE");
      DBDataType dBDataType0 = DBDataType.getInstance(3276, "~cN");
      Integer integer0 = new Integer(3276);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null ~CN(3276,3276) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("RANDOMUUID");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.removeComments("V|e1=-rHb6~d%U");
      SQLUtil.removeComments("renamealter");
      Boolean boolean1 = SQLUtil.mutatesStructure("renamealter");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      dBSchema0.getTable("CONSTRAINT_TYPE");
      DBDataType dBDataType0 = DBDataType.getInstance(3276, "~cN");
      Integer integer0 = new Integer(3276);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteblob", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("RANDOMUUID");
      assertFalse(boolean0);
      
      ErrorMessages errorMessages0 = new ErrorMessages();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RANDOMUUID";
      stringArray0[1] = "RANDOMUUID";
      stringArray0[2] = "RANDOMUUID";
      stringArray0[3] = "RANDOMUUID";
      stringArray0[4] = "RANDOMUUID";
      stringArray0[5] = "RANDOMUUID";
      stringArray0[6] = "org.databene.jdbacl.SQLUtil";
      stringArray0[7] = " NOT";
      String string0 = SQLUtil.leftJoin(" NOT", stringArray0, (String) null, "RANDOMUUID", stringArray0);
      assertEquals("left join null as RANDOMUUID on  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.RANDOMUUID = RANDOMUUID.RANDOMUUID and  NOT.org.databene.jdbacl.SQLUtil = RANDOMUUID.org.databene.jdbacl.SQLUtil and  NOT. NOT = RANDOMUUID. NOT", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLUtil.removeComments("");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("", true);
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("", stringArray0, "", "GE~ToM=R0LzVD]", stringArray0);
      String string1 = SQLUtil.removeComments("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("into", false);
      TableContainer tableContainer0 = new TableContainer("into");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~t2@", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "into";
      stringArray0[1] = "into";
      stringArray0[2] = "into";
      stringArray0[3] = "~t2@";
      stringArray0[4] = "into";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(3276, "~cN");
      Integer integer0 = new Integer(3276);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteblob", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("deleteblob");
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("//");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      DBDataType.getInstance((-1450), "toDegrees(double)");
      Integer integer0 = new Integer(1);
      Integer integer1 = RawTransaction.ABORT;
      Jdbc4SQLXML jdbc4SQLXML0 = new Jdbc4SQLXML((BaseConnection) null, "&c]+u7gz3");
      Reader reader0 = jdbc4SQLXML0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "select into";
      String string1 = SQLUtil.innerJoin("&c]+u7gz3", stringArray0, "select into", (String) null, stringArray0);
      assertEquals("select into as null on &c]+u7gz3.null = null.null and &c]+u7gz3.select into = null.select into", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLUtil.isProcedureCall("&c]+u7gz3");
      jdbcClob jdbcClob0 = new jdbcClob("gar#a98");
      jdbcClob0.getCharacterStream();
      DBSchema dBSchema0 = new DBSchema("gar#a98");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&c]+u7gz3", dBSchema0);
      defaultDBTable0.getCatalog();
      DBSchema dBSchema1 = new DBSchema("gar#a98", (DBCatalog) null);
      dBSchema0.getTable("&c]+u7gz3");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("&c]+u7gz3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("&c]+u7gz3", dBSchema1);
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("80000014-00d0-fd77-3ed8-000a0a0b1900");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      SQLUtil.isDDL("ALTER TABLE ");
      DBCatalog dBCatalog0 = new DBCatalog("ALTER TABLE ");
      DBSchema dBSchema0 = new DBSchema("select intoblob", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoblob", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      dBCatalog1.getTable(",", false);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "_C@\"A*eCAk", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Tdlz", stringBuilder0);
      SQLUtil.isQuery("L^R,vs:~h4hLR_|Z");
      SQLUtil.removeComments("L^R,vs:~h4hLR_|Z");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Tdlz";
      stringArray0[1] = "Tdlz";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "L^R,vs:~h4hLR_|Z";
      stringArray0[4] = "L^R,vs:~h4hLR_|Z";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "L^R,vs:~h4hLR_|Z", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("gAr#a9876:eA}A");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectorg.apache.derby.iapi.types.j2sedatavaluefactory");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = " join ";
      stringArray0[2] = "Tdlz";
      stringArray0[3] = null;
      stringArray0[4] = " join ";
      stringArray0[5] = "4'\"b";
      stringArray0[6] = "pEX";
      SQLUtil.join((String) null, (String) null, stringArray0, "Tdlz", "4'\"b", stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 41, "\"@^");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "SELECT * FROM null WHERE null = null AND  join  = ' join ' AND Tdlz = 'Tdlz' AND null = null AND  join  = ' join ' AND 4'\"b = '4'\"b' AND pEX = 'pEX'");
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("alter indexl^r,vs:~h4hlr_|z", stringBuilder0);
      SQLUtil.addOptionalCondition("d.I/$bq~;W", stringBuilder1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("alter indexl^r,vs:~h4hlr_|z\"@^", stringBuilder2.toString());
      assertEquals("alter indexl^r,vs:~h4hlr_|z\"@^", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.removeComments("&c]+u7gz3");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "l^r,vs:~h4";
      stringArray0[1] = "l^r,vs:~h4";
      jdbcClob jdbcClob0 = new jdbcClob("l^r,vs:~h4");
      SQLUtil.removeComments("l^r,vs:~h4");
      SQLUtil.isDML("l^r,vs:~h4");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "l^r,vs:~h4";
      jdbcClob jdbcClob0 = new jdbcClob("l^r,vs:~h4");
      jdbcClob0.getCharacterStream();
      boolean boolean0 = SQLUtil.isDML("updateselectselect");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      jdbcClob jdbcClob0 = new jdbcClob("alter session");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "lqU)J?RCviC|@";
      jdbcClob jdbcClob0 = new jdbcClob("lqU)J?RCviC|@");
      int int0 = 187;
      StringBuilder stringBuilder0 = new StringBuilder(187);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(187, 1.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 187
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLUtil.removeComments("Bs*\"b`kMOGi51<s");
      Random.setNextRandom(65547);
      SQLUtil.removeComments("[");
      SQLUtil.renderValue("Bs*\"b`kMOGi51<s");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Bs*\"b`kMOGi51<s");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'Bs*\"b`kMOGi51<s'";
      stringArray0[1] = "[";
      stringArray0[2] = "Bs*\"b`kMOGi51<s";
      stringArray0[3] = "yc)KEmh(]>r/Z9(ecRd";
      stringArray0[4] = "Bs*\"b`kMOGi51<s";
      stringArray0[5] = "[";
      stringArray0[6] = "[";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      boolean boolean0 = SQLUtil.isQuery("HWv0C.[<yvk");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("OHxsQX_?G-7cAT\"\\/z", false);
      assertEquals("OHxsQX_ ? G - 7cAT \"/z\"", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Mj@B1");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Mj@B1", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(false);
      SQLUtil.addRequiredCondition("Bs*\"bfkMOGi51<s", stringBuilder3);
      String string0 = " join ";
      SQLUtil.isQuery(" join ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(" join ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' join ' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = ")";
      boolean boolean0 = SQLUtil.isQuery("@07 ~M$+s/3-\"!J");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("L^R,vs:~h4hLR_|Z", true);
      assertEquals("L ^ R, vs :  ~ h4hLR_ | Z", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NjHVxz-e)", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CONSTRAINT_TYPE", true, (String[]) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "CONSTRAINT_TYPE");
      charArrayWriter1.write("Pvzp<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xa$ |ss&nXt+";
      stringArray0[1] = "NjHVxz-e)";
      stringArray0[2] = "xa$ |ss&nXt+";
      stringArray0[3] = "CONSTRAINT_TYPE";
      stringArray0[4] = "Pvzp<";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("NjHVxz-e)", true, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.equals("CONSTRAINT_TYPE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(146, charArrayWriter1.size());
      assertEquals("CONSTRAINT_TYPEPvzp<ALTER TABLE NjHVxz-e) ADD \n\tFOREIGN KEY () REFERENCES NjHVxz-e)(xa$ |ss&nXt+, NjHVxz-e), xa$ |ss&nXt+, CONSTRAINT_TYPE, Pvzp<)", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLUtil.removeComments("Bs*\"b`kMOGi51<s");
      jdbcClob jdbcClob0 = new jdbcClob("Bs*\"b`kMOGi51<s");
      SQLUtil.removeComments("Bs*\"b`kMOGi51<s");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "B[@q]4Zi_";
      stringArray0[3] = "nZj34MwFQw0'7mU";
      stringArray0[4] = "insert";
      stringArray0[5] = "Bs*\"b`kMOGi51<s";
      String string0 = SQLUtil.join("org.apache.derby.impl.sql.catalog.TabInfoImpl", "insert", stringArray0, "selectgkiwy%-hs", "t", stringArray0);
      assertEquals("org.apache.derby.impl.sql.catalog.TabInfoImpl join selectgkiwy%-hs as t on insert.insert = t.insert and insert.insert = t.insert and insert.B[@q]4Zi_ = t.B[@q]4Zi_ and insert.nZj34MwFQw0'7mU = t.nZj34MwFQw0'7mU and insert.insert = t.insert and insert.Bs*\"b`kMOGi51<s = t.Bs*\"b`kMOGi51<s", string0);
      
      System.setCurrentTimeMillis(859L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"U}$NhW!");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("\"U}$NhW!", stringArray0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", true, "(", "drop index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLUtil.substituteMarkers("lV", "lV", charArrayWriter0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('-');
      charArrayWriter2.write("lV");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, true);
      String string0 = ".yw>8@oR*Af>gkz";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".yw>8@oR*Af>gkz");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Pvzp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NjHVxz-e)", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CONSTRAINT_TYPE", true, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CONSTRAINT_TYPE ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.removeComments("call");
      Character character0 = Character.valueOf('~');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'~'", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLUtil.removeComments(">");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName(">");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      boolean boolean0 = SQLUtil.isQuery("Wb");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(">", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT > FOREIGN KEY () REFERENCES >()", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
      
      SQLUtil.removeComments("(, , )");
      boolean boolean0 = SQLUtil.isQuery("X?zuZsr#0+$!|:^e");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter table");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("(, , )", (Database) null);
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(, , )", dBSchema0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "(, , )";
      stringArray1[1] = "org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl";
      stringArray1[2] = "(, , )";
      stringArray1[3] = "(, , )";
      stringArray1[4] = "(, , )";
      stringArray1[5] = "(, , )";
      stringArray1[6] = "(, , )";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execrenameynv", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.close();
      charArrayWriter0.write("(, , , )");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      String string0 = "3wqJ 63";
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("3wqJ 63", "(, , , )", "gkiwy%-hs");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLUtil.removeComments(">");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLUtil.isDDL("gKIWy%-hS");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SQLUtil.normalize("gKIWy%-hS", true);
      VersionNumber versionNumber0 = VersionNumber.valueOf(")V:IRfP");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "\"1", versionNumber0);
      defaultDatabase0.getCatalog("Z-g=Kg gQD");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , )", string0);
      
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      Random.setNextRandom((-10));
      String string1 = SQLUtil.normalize(":($iOAes)r-rWV`G&", false);
      assertEquals(": ($ iOAes) r - rWV ` G &", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.lang.Object@7965d980");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("java.lang.Object@7965d980");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'java.lang.Object@7965d980' not found in table 'java.lang.Object@7965d980'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      stringArray0[6] = "org.apache.derby.impl.sql.compile.AccessPathImpl";
      SQLUtil.leftJoin("org.apache.derby.impl.sql.compile.AccessPathImpl", stringArray0, "org.apache.derby.impl.sql.compile.AccessPathImpl", "org.apache.derby.impl.sql.compile.AccessPathImpl", stringArray0);
      DBSchema dBSchema0 = new DBSchema("alter session");
      SQLUtil.ownerDotComponent(dBSchema0);
      SQLUtil.typeAndName(dBSchema0);
      int int0 = 4;
      Random.setNextRandom(4);
      System.setCurrentTimeMillis(20L);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^70dlFPQKNj", dBSchema0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      String string0 = SQLUtil.join("delete", "", stringArray0, "", "", stringArray0);
      assertEquals("delete join  as  on .null = .null and . = . and .null = .null", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string1);
      
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("?");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "@f8)o", versionNumber0);
      String string2 = "";
      defaultDatabase0.getTable("", false);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, (DBTable) null, "r$=BEI-z0_(d;.~~FRk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments(",");
      SQLUtil.isQuery("selectdrop table");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "alter materialized view";
      SQLUtil.leftJoin("create materialized viewdeete join as on .null = .null and . = . and .null = .null", stringArray1, "create materialized viewdeete join as on .null = .null and . = . and .null = .null", "create materialized viewdeete join as on .null = .null and . = . and .null = .null", stringArray0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "gKIWy%-hS";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Bs*\"bfkMOGi51<s", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("Bs*\"bfkMOGi51<s", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-2906), 187);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2906
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      SQLUtil.join((String) null, "d;v1,QJ", stringArray0, "deletecreate table", (String) null, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema("oq=W}7FBbR-pI:O", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletecreate table as null on d;v1,QJ.null = null.null and d;v1,QJ. = null. and d;v1,QJ.null = null.null", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null and . = . and .null = .null", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      SQLUtil.isQuery("qv");
      String string0 = "exec$n{6@\\*sr)az\\uv0h<";
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(string0, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executetruncate";
      SQLUtil.isDML("executetruncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isProcedureCall("h4)'@&0N2+g(>\"");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "%.e%4", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.%.e%4", string1);
      
      boolean boolean1 = SQLUtil.isDDL("~o( 7sqCN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      Random.setNextRandom(6024);
      String string1 = SQLUtil.normalize("()", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames((String[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "@\\C/A_e,BO]o";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@C/A_e,BO]o");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("CONSTRAINTNAME");
      System.setCurrentTimeMillis((-1325L));
      SQLUtil.renderColumnNames(stringArray0);
      DBTable dBTable0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executetruncate";
      SQLUtil.renderColumnListWithTableName("Hq*", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.join(" join ", "executetruncate", stringArray0, (String) null, "4'\"b", stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, 41, "%0_[.1e");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "%0_[.1e");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      SQLUtil.addOptionalCondition("executetruncate", stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("%0_[.1e and null or executetruncate%0_[.1E", stringBuilder1.toString());
      assertEquals("%0_[.1e and null or executetruncate%0_[.1E", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executetruncate";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.join(" join ", "executetruncate", stringArray0, (String) null, "4'\"b", stringArray0);
      SQLUtil.removeComments("insertexecutetruncate");
      SQLUtil.removeComments("insertexecutetruncate");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(1444);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "UmR\"NI]J8qIo: |l";
      SQLUtil.renderColumnNames(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, UmR\"NI]J8qIo: |l, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isProcedureCall("create table8ix]l1vhtp");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "create table8ix]l1vhtp", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("om", false, dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[18];
      boolean boolean0 = SQLUtil.isProcedureCall("executetruncate");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table8ix]l1vhtp", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("H-CZyPZ^O`xeY", true, dBPrimaryKeyConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("null.H-CZyPZ^O`xeY", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , )", string0);
      
      Random.setNextRandom((-10));
      String string1 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("=M$/J_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.leftJoin("=M$/J_", stringArray0, "=M$/J_", "d}U`b r:", stringArray0);
      SQLUtil.isProcedureCall("truncate");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Random.setNextRandom((-10));
      SQLUtil.normalize("org.apache.derby.impl.sql.compile.SubqueryList", true);
      Random.setNextRandom(99);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.normalize("8ix]l1", false);
      SQLUtil.normalize("<na*kLi/", true);
      SQLUtil.normalize(" PASSWORD ''", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("drop index8ix]l1vhtp", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executetruncate";
      SQLUtil.removeComments("e&Wju> .Va");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "call", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e&Wju> .Va", dBTable0, (-1091598173), "e&Wju> .Va");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "executetruncate");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("e&Wju> .Va", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("executetruncate", stringBuilder1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("executetruncate and e&Wju> .Va or executetruncateE&WJU> .VA", stringBuilder2.toString());
      assertEquals("executetruncate and e&Wju> .Va or executetruncateE&WJU> .VA", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "UNIQUE ";
      stringArray0[2] = " join ";
      stringArray0[3] = null;
      stringArray0[4] = null;
      SQLUtil.join((String) null, "callcreate table8ix]l1vhtp", stringArray0, "NVh(a%L>`}", "UNIQUE ", stringArray0);
      String string0 = SQLUtil.removeComments(" join ");
      assertEquals(" join ", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLUtil.substituteMarkers("Ud,o |\"(x,y|&", "org.databene.jdbacl.sql.parser.SQLParser$DFA2", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t2fbu!=ew$,0d");
      String string0 = "E|oaC tR?zD~C";
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "E|oaC tR?zD~C", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Ud,o |\"(x,y|&", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string1 = "'=";
      DBDataType dBDataType0 = DBDataType.getInstance(9, "'=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.databene.jdbacl.sql.parser.SQLParser$DFA2", dBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(9);
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-20680772);
      DBDataType.getInstance((int) (byte) (-26), "E|oaC tR?zD~C");
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 1568, (-20680772));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("=M$/J_ = '=M$/J_'", string0);
      
      SQLUtil.removeComments("=M$/J_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.leftJoin("=M$/J_", stringArray0, "=M$/J_", "d}U`b r:", stringArray0);
      assertEquals("left join =M$/J_ as d}U`b r: on =M$/J_.=M$/J_ = d}U`b r:.=M$/J_", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("truncate");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "truncate", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("om", false, dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "left join =M$/J_ as d}U`b r: on =M$/J_.=M$/J_ = d}U`b r:.=M$/J_", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (=M$/J_)", string2);
      
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      String string3 = SQLUtil.constraintName(dBUniqueConstraint1);
      assertEquals("CONSTRAINT \"left join =M$/J_ as d}U`b r: on =M$/J_.=M$/J_ = d}U`b r:.=M$/J_\" ", string3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "executetruncate";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.join("executetruncate", "executetruncate", stringArray0, ",O#", "", stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ",O#", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gKIWy%-hS");
      StringBuilder stringBuilder1 = new StringBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Bs*\"bfkMOGi51<s";
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.Bs*\"bfkMOGi51<s", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.join("FOREIGN KEY ", "un>]j8/q", stringArray0, "Gt38", "_vMK", stringArray0);
      assertEquals("FOREIGN KEY  join Gt38 as _vMK on un>]j8/q.Bs*\"bfkMOGi51<s = _vMK.Bs*\"bfkMOGi51<s", string1);
      
      SQLUtil.removeComments("left");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Gt38", true, "FOREIGN KEY  join Gt38 as _vMK on un>]j8/q.Bs*\"bfkMOGi51<s = _vMK.Bs*\"bfkMOGi51<s", "Gt38");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("gKIWy%-hS", stringBuilder2.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CONSTRAINT Gt38 CHECK Gt38", string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("qx[b<Kw", stringArray0, "s", "6Y&", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J,Q?JNhha#");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("`,rTvs9$8QB#]nxWa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "qx[b<Kw";
      String string1 = "=M$/J_";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "UN>]J8/q&4o: |bl";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[7];
      stringArray1[0] = ",O#";
      stringArray1[1] = "UN>]J8/q&4o: |bl";
      stringArray1[2] = "+c)Z<?a2r";
      stringArray1[3] = "execute=";
      stringArray1[4] = ">;*q]A(yT9";
      stringArray1[5] = ",O#";
      stringArray1[6] = "";
      SQLUtil.join("execute=", "(, UN>]J8/q&4o: |bl, )", stringArray0, (String) null, "+c)Z<?a2r", stringArray1);
      String string1 = SQLUtil.removeComments("execute=");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "UN>]J8/(&4+Jo: |bl";
      stringArray0[1] = "UN>]J8/(&4+Jo: |bl";
      SQLUtil.renderColumnNames(stringArray0);
      String string1 = "gJ@Ng(";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("gJ@Ng(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: gJ@Ng(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "qx[b<Kw";
      String[] stringArray0 = new String[0];
      String string1 = "Cost of conglomerate ";
      SQLUtil.innerJoin("qx[b<Kw", stringArray0, "qx[b<Kw", "Cost of conglomerate ", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String string2 = "calltruncate";
      TableContainer tableContainer0 = new TableContainer("qx[b<Kw");
      tableContainer0.getTable("qx[b<Kw");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("calltruncate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("=M$/J_ = '=M$/J_'", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      assertEquals("=M$/J_.=M$/J_", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("=M$/J_.=M$/J_");
      String string2 = SQLUtil.leftJoin("=M$/J_", stringArray0, "=M$/J_", "d}U`b r:", stringArray0);
      assertEquals("left join =M$/J_ as d}U`b r: on =M$/J_.=M$/J_ = d}U`b r:.=M$/J_", string2);
      
      boolean boolean0 = SQLUtil.isProcedureCall("create table8ix]l1vhtp");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "create table8ix]l1vhtp", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("om", false, dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "left join =M$/J_ as d}U`b r: on =M$/J_.=M$/J_ = d}U`b r:.=M$/J_", true, stringArray0);
      String string3 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string3);
      
      StringReader stringReader0 = new StringReader("ANU)d_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string4 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string4);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "=M$/J_";
      stringArray1[1] = "=M$/J_ = '=M$/J_'";
      stringArray1[2] = "=M$/J_";
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "UN>]J8/q&4o: |bl";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("UN>]J8/q&4o: |bl");
      SQLUtil.parseColumnTypeAndSize("drop materialized view8ix]l1vhtp");
      String string0 = "}hQ2Wd7oU`}T~fDfB0:";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}hQ2Wd7oU`}T~fDfB0:");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "gKIWy%-hS";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gKIWy%-hS");
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("Bs*\"bfkMOGi51<s", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-2906), 187);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2906
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "UN>]J8/q&4o: |bl";
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "drop index";
      stringArray1[1] = ">^@[l=Y{#{kJH";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("NH'/}Q&G\"`/wmb!s2x$", stringArray0, "drop index", "Ca==", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select8ix]l1vhtp6$|");
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("%|}};JcA`b_q|I", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unknow");
      boolean boolean0 = SQLUtil.isQuery("e*KJ,<D?\"D-(fMB~~TU");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "e*KJ,<D?\"D-(fMB~~TU";
      stringArray0[1] = "unknow";
      stringArray0[2] = "VSCpVm37dp:e+";
      stringArray0[3] = "unknow";
      stringArray0[4] = "e*KJ,<D?\"D-(fMB~~TU";
      stringArray0[5] = "%/a*'N~<ym";
      stringArray0[6] = "unknow";
      stringArray0[7] = "%/a*'N~<ym";
      String string0 = SQLUtil.join("%/a*'N~<ym", "e*KJ,<D?\"D-(fMB~~TU", stringArray0, "e*KJ,<D?\"D-(fMB~~TU", "unknow", stringArray0);
      assertEquals("%/a*'N~<ym join e*KJ,<D?\"D-(fMB~~TU as unknow on e*KJ,<D?\"D-(fMB~~TU.e*KJ,<D?\"D-(fMB~~TU = unknow.e*KJ,<D?\"D-(fMB~~TU and e*KJ,<D?\"D-(fMB~~TU.unknow = unknow.unknow and e*KJ,<D?\"D-(fMB~~TU.VSCpVm37dp:e+ = unknow.VSCpVm37dp:e+ and e*KJ,<D?\"D-(fMB~~TU.unknow = unknow.unknow and e*KJ,<D?\"D-(fMB~~TU.e*KJ,<D?\"D-(fMB~~TU = unknow.e*KJ,<D?\"D-(fMB~~TU and e*KJ,<D?\"D-(fMB~~TU.%/a*'N~<ym = unknow.%/a*'N~<ym and e*KJ,<D?\"D-(fMB~~TU.unknow = unknow.unknow and e*KJ,<D?\"D-(fMB~~TU.%/a*'N~<ym = unknow.%/a*'N~<ym", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "UN>]J8/q&4o: |bl";
      stringArray0[1] = "UN>]J8/q&4o: |bl";
      SQLUtil.renderColumnNames(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[0];
      SQLUtil.removeComments("");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (-1971771362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("=M$/J_", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=M$/J_.=M$/J_", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "=M$/J_";
      stringArray1[1] = "=M$/J_ = '=M$/J_'";
      stringArray1[2] = "";
      // Undeclared exception!
      try { 
        SQLUtil.join("=M$/J_", "getCharacterStream", stringArray1, "\tNumber!of extra first column predicaEes is : ", "~1`b", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("exec8ix]l1vhtp", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "SQLTABLES";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , SQLTABLES)", string0);
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = SQLUtil.mutatesStructure("8ix]l1vhtp");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-189521409), "truncate");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8ix]l1vhtp", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("TRUNCATE(0)", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}#_~";
      stringArray0[1] = "}#_~";
      String string0 = SQLUtil.innerJoin("}#_~", stringArray0, "y^X", "}#_~", stringArray0);
      assertEquals("y^X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y^X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cKH", defaultDBTable0, 18, "y^X");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "y^X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~";
      stringArray1[1] = "y^X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}#_~", true, stringArray1);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBColumn0.setNullable(true);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("cKH Y^X NULL", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("drop index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "cKH Y^X NULL";
      objectArray0[1] = (Object) "y^X";
      objectArray0[2] = (Object) locale0;
      defaultDBColumn0.equals(objectArray0[1]);
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) "}#_~";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "y^X", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.renderValue("drop index");
      String string2 = SQLUtil.renderValue("}#_~");
      assertEquals("'}#_~'", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string0 = "drop materialized view";
      TableContainer tableContainer0 = new TableContainer("drop materialized view");
      tableContainer0.getTable("DAY");
      String string1 = "9oq HW}!oG3fqd(+\">NV";
      String string2 = "^";
      DBDataType dBDataType0 = DBDataType.getInstance(459, "^");
      String string3 = "D";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D", (DBTable) null, dBDataType0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gKIWy%-hS");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Bs*\"bfkMOGi51<s", stringBuilder0);
      SQLUtil.addRequiredCondition("Bs*\"bfkMOGi51<s", stringBuilder1);
      assertEquals("gKIWy%-hS or Bs*\"bfkMOGi51<s and Bs*\"bfkMOGi51<s", stringBuilder1.toString());
      
      String[] stringArray0 = new String[22];
      stringArray0[0] = "Bs*\"bfkMOGi51<s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[6] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      SQLUtil.join("gKIWy%-hS", "call", stringArray0, "call", "", stringArray0);
      boolean boolean0 = SQLUtil.isDML("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("8tY,~R+gqr#{i@8");
      tableContainer0.getTable("hWYpNldk");
      String string0 = "9q HW}!oG3fqd(+\">NV";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}#_~";
      stringArray0[1] = "}#_~";
      String string0 = SQLUtil.innerJoin("}#_~", stringArray0, "y[X", "}#_~", stringArray0);
      assertEquals("y[X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cKH", defaultDBTable0, 18, "y[X");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "y[X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~";
      stringArray1[1] = "y[X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}#_~", true, stringArray1);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBColumn0.setNullable(true);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("cKH Y[X NULL", string1);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "left", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT left UNIQUE (y[X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~, y[X)", string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("=M$/J_ = '=M$/J_'", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      assertEquals("=M$/J_.=M$/J_", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "=M$/J_.=M$/J_";
      stringArray1[1] = "=M$/J_ = '=M$/J_'";
      stringArray1[2] = "";
      stringArray1[3] = "=M$/J_ = '=M$/J_'";
      stringArray1[4] = "=M$/J_ = '=M$/J_'";
      stringArray1[5] = "=M$/J_";
      DBDataType dBDataType0 = DBDataType.getInstance((-1301), "H~#{26)~wCWUdi");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CHECK ", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBColumn0.addUkConstraint((DBUniqueConstraint) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("CHECK , CHECK , CHECK , CHECK ", string2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "4Bj*N]'";
      stringArray0[1] = "4Bj*N]'";
      SQLUtil.join("4Bj*N]'", "4Bj*N]'", stringArray0, "", "", stringArray0);
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("0BfoQ\"\"<_6,e9]x{");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.NEVER;
      int int0 = 916;
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      deleteConstantAction0.getTargetProperties();
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("", 916, "", (String) null, (Properties) null, "4Bj*N]'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "aA!eT=|Fo=\"&Jia";
      stringArray0[5] = "aA!eT=|Fo=\"&Jia";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = SQLUtil.leftJoin("W^>F|-%g}At", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on W^>F|-%g}At. = . and W^>F|-%g}At. = . and W^>F|-%g}At. = . and W^>F|-%g}At.aA!eT=|Fo=\"&Jia = .aA!eT=|Fo=\"&Jia and W^>F|-%g}At.null = .null and W^>F|-%g}At.aA!eT=|Fo=\"&Jia = .aA!eT=|Fo=\"&Jia and W^>F|-%g}At. = . and W^>F|-%g}At. = .", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("I|vv7eWthQhF0tf`COb");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("pPeRP#", true, dBPrimaryKeyConstraint0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , aA!eT=|Fo=\"&Jia, , aA!eT=|Fo=\"&Jia, , )", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}#_~";
      stringArray0[1] = "}#_~";
      SQLUtil.innerJoin("}#_~", stringArray0, "y[X", "}#_~", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cKH", defaultDBTable0, 18, "y[X");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "y[X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~";
      stringArray1[1] = "y[X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}#_~", true, stringArray1);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBColumn0.setNullable(true);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("drop index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "cKH Y[X NULL";
      objectArray0[1] = (Object) "y[X";
      objectArray0[2] = (Object) locale0;
      defaultDBColumn0.equals(objectArray0[1]);
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) "}#_~";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "y[X", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("jE3aG|", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = SQLUtil.normalize("4Bj*N]'", true);
      assertEquals("4Bj * N ] ''", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "drop table";
      stringArray0[1] = "";
      stringArray0[2] = "4Bj*N]'";
      stringArray0[3] = "drop table";
      stringArray0[4] = "4Bj * N ] ''";
      stringArray0[5] = "";
      stringArray0[6] = "aA!eT=|Fo=\"&Jia";
      String string1 = SQLUtil.leftJoin("drop table", stringArray0, "4Bj * N ] ''", "", stringArray0);
      assertEquals("left join 4Bj * N ] '' as  on drop table.drop table = .drop table and drop table. = . and drop table.4Bj*N]' = .4Bj*N]' and drop table.drop table = .drop table and drop table.4Bj * N ] '' = .4Bj * N ] '' and drop table. = . and drop table.aA!eT=|Fo=\"&Jia = .aA!eT=|Fo=\"&Jia", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("aA!eT=|Fo=\"&Jia");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S(&p6EeO#7YUSLklxHL", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.addColumnName("4Bj*N]'");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "4>X$^rIXXLAJS4", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (drop table, , 4Bj*N]', drop table, 4Bj * N ] '', , aA!eT=|Fo=\"&Jia)", string2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLUtil.normalize("", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aA!eT=|Fo=\"&Jia";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "aA!eT=|Fo=\"&Jia";
      stringArray0[8] = "";
      String string0 = SQLUtil.leftJoin("aA!eT=|Fo=\"&Jia", stringArray0, "", "aA!eT=|Fo=\"&Jia", stringArray0);
      assertEquals("left join  as aA!eT=|Fo=\"&Jia on aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia = aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia = aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia.", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("left join  as aA!eT=|Fo=\"&Jia on aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia = aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia. and aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia = aA!eT=|Fo=\"&Jia.aA!eT=|Fo=\"&Jia and aA!eT=|Fo=\"&Jia. = aA!eT=|Fo=\"&Jia.");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "isc_info_sql_type ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (aA!eT=|Fo=\"&Jia, , , , , , , aA!eT=|Fo=\"&Jia, )", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "";
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("UNION");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "MQp|OBw*u";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "MQp|OBw*u", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("px(g_/`= Qy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLUtil.isProcedureCall(":u");
      String[] stringArray0 = new String[3];
      String string0 = "org.apache.derby.impl.store.access.btree.index.B2I";
      stringArray0[0] = "org.apache.derby.impl.store.access.btree.index.B2I";
      stringArray0[1] = ":u";
      stringArray0[2] = "";
      SQLUtil.leftJoin("", stringArray0, ":u", "NCLOB", stringArray0);
      SQLUtil.isQuery("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("left join :u as NCLOB on .org.apache.derby.impl.store.access.btree.index.B2I = NCLOB.org.apache.derby.impl.store.access.btree.index.B2I and .:u = NCLOB.:u and . = NCLOB.", " on ", (VersionNumber) null);
      String string1 = "";
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'left join :u as NCLOB on .org.apache.derby.impl.store.access.btree.index.B2I = NCLOB.org.apache.derby.impl.store.access.btree.index.B2I and .:u = NCLOB.:u and . = NCLOB.'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}#_~";
      stringArray0[1] = "}#_~";
      SQLUtil.innerJoin("}#_~", stringArray0, "y[X", "}#_~", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cKH", defaultDBTable0, 18, "y[X");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "y[X as }#_~ on }#_~.}#_~ = }#_~.}#_~ and }#_~.}#_~ = }#_~.}#_~";
      stringArray1[1] = "y[X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}#_~", true, stringArray1);
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      defaultDBColumn0.setNullable(true);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("drop index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "cKH Y[X NULL";
      objectArray0[1] = (Object) "y[X";
      objectArray0[2] = (Object) locale0;
      defaultDBColumn0.equals(objectArray0[1]);
      objectArray0[3] = (Object) defaultDBTable0;
      objectArray0[4] = (Object) "}#_~";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "y[X", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.renderValue("drop index");
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "M7H5xj@";
      stringArray0[3] = "t762,Lm6-H8";
      stringArray0[4] = "t762,Lm6-H8";
      stringArray0[5] = "t762,Lm6-H8";
      stringArray0[6] = "t762,Lm6-H8";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "t762,Lm6-H8", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , M7H5xj@, t762,Lm6-H8, t762,Lm6-H8, t762,Lm6-H8, t762,Lm6-H8, , )", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/*";
      stringArray0[3] = " PRECISION";
      stringArray0[4] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "/*", "", stringArray0);
      assertEquals("/* as  on . = . and . = . and ./* = ./* and . PRECISION = . PRECISION and . = .", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",|Tw:#mqz:[bq}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",|Tw:#mqz:[bq}";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      stringArray0[3] = "PRIMARY KEY ";
      stringArray0[4] = "U";
      stringArray0[5] = "U";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PRIMARY KEY ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("U", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U", dBTable0, dBDataType0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("U : ", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "gKIWy%-hS";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gKIWy%-hS");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("Bs*\"bfkMOGi51<s", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("Bs*\"bfkMOGi51<s", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-2906), 187);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2906
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~p8(4a@uZ=M>SZ_");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~p8(4a@uZ=M>SZ_";
      stringArray0[1] = "~p8(4a@uZ=M>SZ_";
      stringArray0[2] = "~p8(4a@uZ=M>SZ_";
      stringArray0[3] = "~p8(4a@uZ=M>SZ_";
      stringArray0[4] = "~p8(4a@uZ=M>SZ_";
      stringArray0[5] = "~p8(4a@uZ=M>SZ_";
      stringArray0[6] = "~p8(4a@uZ=M>SZ_";
      stringArray0[7] = "~p8(4a@uZ=M>SZ_";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM ~p8(4a@uZ=M>SZ_ WHERE ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_' AND ~p8(4a@uZ=M>SZ_ = '~p8(4a@uZ=M>SZ_'", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      stringArray0[2] = "COLUMNNAME";
      stringArray0[3] = "";
      stringArray0[4] = "constraint";
      stringArray0[5] = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("1cy&", (String[]) null, "C>-", "call", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLUtil.removeComments("yXx![h?TL9%h.a7'Te.");
      SQLUtil.mutatesDataOrStructure("YjmcWQUDIwO;q");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select8ix]l1vhtp6$|");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      String string0 = "";
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string1 = "DAY";
      tableContainer0.getTable("DAY");
      DBDataType dBDataType0 = DBDataType.getInstance(2727, "9q HW}!oG3fqd(+\">NV");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "&c]+u7gz3";
      jdbcClob jdbcClob0 = new jdbcClob("&c]+u7gz3");
      StringReader stringReader0 = new StringReader("&c]+u7gz3");
      DBDataType dBDataType0 = DBDataType.getInstance(894, "^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4}M~9&@*kc! Xe");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V:tu 90!}.vM", defaultDBTable0, dBDataType0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "D";
      String string1 = null;
      SQLUtil.join((String) null, "^", stringArray0, (String) null, "V:tu 90!}.vM, V:tu 90!}.vM, V:tu 90!}.vM", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UN>]J8/q&4o: |bl";
      stringArray0[1] = "";
      stringArray0[2] = "SQLTABLES";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(UN>]J8/q&4o: |bl, , SQLTABLES)", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "";
      int int0 = (-1059);
      DBDataType dBDataType0 = DBDataType.getInstance((-1059), ".D5}DNJcSctYp");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H:E^qm8i!_zp(I<N");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H:E^qm8i!_zp(I<N";
      stringArray0[1] = "";
      stringArray0[2] = "H:E^qm8i!_zp(I<N";
      stringArray0[3] = "H:E^qm8i!_zp(I<N";
      stringArray0[4] = "H:E^qm8i!_zp(I<N";
      stringArray0[5] = "H:E^qm8i!_zp(I<N";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "H:E^qm8i!_zp(I<N");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=M$/J_";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("=M$/J_", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "=M$/J_.=M$/J_";
      stringArray1[1] = "=M$/J_ = '=M$/J_'";
      stringArray1[2] = "";
      stringArray1[3] = "=M$/J_ = '=M$/J_'";
      stringArray1[4] = "=M$/J_ = '=M$/J_'";
      stringArray1[5] = "=M$/J_";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (=M$/J_.=M$/J_, =M$/J_ = '=M$/J_', , =M$/J_ = '=M$/J_', =M$/J_ = '=M$/J_', =M$/J_)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4Bj*N]'";
      stringArray0[1] = "4Bj*N]'";
      SQLUtil.join("4Bj*N]'", "4Bj*N]'", stringArray0, "", "", stringArray0);
      TableContainer tableContainer0 = new TableContainer("", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("0BfoQ\"\"<_6,e9]x{");
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.NEVER;
      int int0 = 916;
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      deleteConstantAction0.getTargetProperties();
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("", 916, "", (String) null, (Properties) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }
}
