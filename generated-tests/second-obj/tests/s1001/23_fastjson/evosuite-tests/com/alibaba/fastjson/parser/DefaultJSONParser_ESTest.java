/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:19:45 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.RenderingHints;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("C{<L)e0<5] OA|^wkCX", parserConfig0, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : C{<L)e0<5] OA|^wkCX
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parse();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException((-193));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".!");
      Locale locale0 = Locale.UK;
      defaultJSONParser0.setContext((Object) locale0, (Object) class0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      Boolean boolean0 = Boolean.valueOf(".!");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) list0, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., pos 1, json : .!
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$", parserConfig0, 16);
      JSON.setDefaultTypeKey("fastjson.parser.deny");
      ArrayList<HttpCookie> arrayList0 = new ArrayList<HttpCookie>();
      defaultJSONParser0.checkListResolve(arrayList0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("iD44XH7aEYK", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      parserConfig0.addAccept("..");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ITALY;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName java.text.DecimalFormatSymbols@10782
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW", 0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONReaderScanner0.indexOf('y', 23);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getObject("childContext");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormatSymbols.getInstance();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) decimalFormatSymbols0, (Object) "childContext");
      MockDate mockDate0 = new MockDate(0);
      defaultJSONParser0.setContext(parseContext0, (Object) jSONReaderScanner0, (Object) mockDate0);
      assertEquals(13, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.setDateFomrat((DateFormat) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - E, info : pos 1, json : }EMiyIUjUq'04vW
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<BufferCapabilities> vector0 = new Vector<BufferCapabilities>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RX");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(p<L_4G94AoFK{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.setResolveStatus(2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(2973);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(p<L_4G94AoFK{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.getExtraProcessors();
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("CKpX3O6y");
      defaultJSONParser0.handleResovleTask("CKpX3O6y");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gE$iyuIUj=q'ev/");
      List<DefaultJSONParser.ResolveTask> list0 = new LinkedList<DefaultJSONParser.ResolveTask>();
      Object object0 = new Object();
      defaultJSONParser0.handleResovleTask(object0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava/lang/Object;Ljava/lang/Object;I)V", parserConfig0);
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, false);
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(989, jSONLexer0.getFeatures());
      assertEquals(1, jSONLexer0.token());
      
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("listContext", parserConfig0);
      Stack<MockThaiBuddhistDate> stack0 = new Stack<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : listContext
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }EMiyIUjUq'04vW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("W");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) parameterizedTypeImpl0, (Collection) list0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : W
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis((-9007199254740991L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|ih1:m_ifE");
      defaultJSONParser0.getDateFormat();
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) dateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : |ih1:m_ifE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gEMiyIUj=q'04v/");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(16, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ,, actual }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setDateFormat("");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{", parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      TreeMap<JobAttributes, PageAttributes> treeMap0 = new TreeMap<JobAttributes, PageAttributes>();
      IdentityHashMap<JobAttributes, Object> identityHashMap0 = new IdentityHashMap<JobAttributes, Object>(treeMap0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 1, json : (p<L_4G9AoFK{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{", parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      defaultJSONParser0.setConfig(parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (p<L_4G9AoFK{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|;![xwE.");
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|;![xwE.");
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("writeEnum");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "|;![xwE.";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }EMiyIUjUq'04vW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW", parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }EMiyIUjUq'04vW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("error parse true", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      Hashtable<StringCharacterIterator, ImageCapabilities> hashtable0 = new Hashtable<StringCharacterIterator, ImageCapabilities>();
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ijw%qkhHjl.9Ecx.]?");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kotlin.ranges.CharRange", parserConfig0, 4);
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiISjUC'04vW");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Long> class0 = Long.TYPE;
      Feature feature0 = Feature.CustomMapDeserializer;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "}EMiISjUC'04vW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]");
      ParserConfig parserConfig0 = ParserConfig.global;
      Feature feature0 = Feature.OrderedField;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IdentityHashMap<String, String> identityHashMap0 = new IdentityHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ", pos ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      Hashtable<StringCharacterIterator, ImageCapabilities> hashtable0 = new Hashtable<StringCharacterIterator, ImageCapabilities>();
      Object object0 = defaultJSONParser0.parseObject((Map) hashtable0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("r[1yOirX0\"+&xzjI(^$");
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, defaultJSONParser0);
      defaultJSONParser0.setContext((Object) renderingHints0, (Object) renderingHints0);
      defaultJSONParser0.getInput();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : r[1yOirX0\"+&xzjI(^$
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Long> class0 = Long.TYPE;
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("not support type ");
      Locale locale0 = Locale.PRC;
      Class<Long> class1 = Long.TYPE;
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[J", parserConfig0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertEquals(1, gridBagConstraints0.gridwidth);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed", parserConfig1);
      ParserConfig parserConfig2 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, json : unclosed
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gE$iyuIUj=q'ev/");
      defaultJSONParser0.getResolveTaskList();
      Object object0 = new Object();
      defaultJSONParser0.handleResovleTask(object0);
      Locale locale0 = Locale.TAIWAN;
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      LinkedHashSet<MockMinguoDate> linkedHashSet1 = new LinkedHashSet<MockMinguoDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }gE$iyuIUj=q'ev/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0, 46);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      defaultJSONParser0.getFieldTypeResolver();
      IdentityHashMap<JobAttributes, Object> identityHashMap0 = new IdentityHashMap<JobAttributes, Object>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name ", parserConfig0, (-1914));
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      defaultJSONParser0.getInput();
      defaultJSONParser0.getContext();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate, property name
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      ParserConfig parserConfig1 = ParserConfig.global;
      defaultJSONParser1.setConfig(parserConfig0);
      defaultJSONParser1.getExtraTypeProviders();
      defaultJSONParser0.getInput();
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("java.lang.String@0000000005", parserConfig1);
      JSONLexer jSONLexer0 = defaultJSONParser2.getLexer();
      assertEquals(1, jSONLexer0.token());
      
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      defaultJSONParser2.accept(1);
      assertEquals(0, defaultJSONParser2.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("..");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '4';
      charArray0[3] = 'x';
      charArray0[4] = '7';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 6, parserConfig0, 0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      IdentityHashMap<String, String> identityHashMap0 = new IdentityHashMap<String, String>();
      defaultJSONParser0.setResolveStatus(0);
      defaultJSONParser0.getConfig();
      defaultJSONParser0.getInput();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("D{Qp");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      parserConfig1.clearDeserializers();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{Ns@BW]\"6", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.deny");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(mockMinguoDate0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - N, info : pos 1, json : {Ns@BW]\"6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3]B=]a2>5.bZjSDE", parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("e:`", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.acceptType("e:`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 853);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Class<TimeZone> class0 = TimeZone.class;
      IdentityHashMap<String, String> identityHashMap0 = new IdentityHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, identityHashMap0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      defaultJSONParser0.setConfig(parserConfig0);
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect [, actual ");
      Short.valueOf((short)19);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) "syntax error, expect [, actual ");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getFieldTypeResolver();
      Object object0 = defaultJSONParser0.getObject("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      String string0 = "3]B=]a2>5.bZjSDE";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3]B=]a2>5.bZjSDE", parserConfig0);
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.resolveStatus = 0;
      defaultJSONParser0.setDateFormat("@'``d");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.handleResovleTask(parserConfig0);
      Feature feature0 = Feature.IgnoreAutoType;
      defaultJSONParser1.config(feature0, false);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : 3]B=]a2>5.bZjSDE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)58;
      byteArray0[1] = (byte)30;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gEMiyIUj=q'04v/");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }gEMiyIUj=q'04v/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}EMiyIUjUq'04vW");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}EMiyIUjUq'04vW");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = new ParseContext((ParseContext) null, list0, "}EMiyIUjUq'04vW");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "}EMiyIUjUq'04vW");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 853);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      IdentityHashMap<String, String> identityHashMap0 = new IdentityHashMap<String, String>();
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      defaultJSONParser0.getLexer();
      DateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      defaultJSONParser0.parse((Object) classLoader1);
      Double double0 = new Double(853);
      defaultJSONParser0.resolveReference("!7<:Q50;");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IdentityHashMap<String, String> identityHashMap0 = new IdentityHashMap<String, String>();
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      javaBeanDeserializer0.smartMatch("fastjson.parser.autoTypeAccept");
      String string0 = javaBeanDeserializer0.beanInfo.typeKey;
      Properties properties0 = new Properties();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      LinkedHashSet<MockMinguoDate> linkedHashSet1 = new LinkedHashSet<MockMinguoDate>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";xRV$Z3J0q&_N4t");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;xRV$Z3J0q&_N4t
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",Q]GQ");
      defaultJSONParser0.getSymbolTable();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Insets> class0 = Insets.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("$.null", class0, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. $.null
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("kotlin.ranges.LongRange");
      Stack<BufferCapabilities> stack0 = new Stack<BufferCapabilities>();
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
      Locale locale0 = Locale.CHINA;
      defaultJSONParser0.getResolveTaskList();
      Locale.forLanguageTag("fastjson.parser.autoTypeAccept");
      locale0.getDisplayScript();
      JSON.defaultLocale = locale0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Td%%`d_*%{a4A4u$");
      Hashtable<GridBagConstraints, Dimension> hashtable0 = new Hashtable<GridBagConstraints, Dimension>();
      hashtable0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")XW.", parserConfig0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) ")XW.");
      parseContext0.toString();
      parseContext0.toString();
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes jobAttributes1 = new JobAttributes();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )XW.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("mDr`n~]vRF.S", parserConfig0, 14);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      defaultJSONParser0.config(feature0, false);
      LinkedHashMap<ThrowableDeserializer, com.alibaba.fastjson.util.ParameterizedTypeImpl> linkedHashMap0 = new LinkedHashMap<ThrowableDeserializer, com.alibaba.fastjson.util.ParameterizedTypeImpl>();
      defaultJSONParser0.checkMapResolve(linkedHashMap0, (Object) null);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{");
      String string0 = ParserConfig.DENY_PROPERTY;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(p<L_4G9AoFK{");
      defaultJSONParser0.setContext((Object) "T9G", (Object) "(p<L_4G9AoFK{");
      defaultJSONParser0.getObject("usp");
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getContext();
      ParserConfig parserConfig1 = new ParserConfig(false);
      Locale locale0 = Locale.JAPAN;
      Locale.getISOLanguages();
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.resolveReference("usp");
      defaultJSONParser0.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "}gEMi#IUj=q'04v/";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gEMi#IUj=q'04v/");
      HashSet<MockMinguoDate> hashSet0 = new HashSet<MockMinguoDate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      hashSet0.add(mockMinguoDate0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but }, pos 1, json : }gEMi#IUj=q'04v/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "s";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s");
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.accept(1, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : s
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getExtraTypeProviders();
      JSONArray jSONArray0 = new JSONArray();
      defaultJSONParser0.getExtraProcessors();
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      defaultJSONParser0.getExtraProcessors();
      Hashtable<BigInteger, Feature> hashtable0 = new Hashtable<BigInteger, Feature>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("l");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("l", parserConfig0, (-1));
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      jSONReaderScanner0.getLocale();
      defaultJSONParser0.popContext();
      TreeMap<GridBagConstraints, NumberFormat> treeMap0 = new TreeMap<GridBagConstraints, NumberFormat>();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "(p<L_4G9AoFK{";
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{");
      String string1 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TreeMap<JobAttributes, PageAttributes> treeMap0 = new TreeMap<JobAttributes, PageAttributes>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.JAPAN;
      DecimalFormatSymbols.getInstance(locale0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "(p<L_4G9AoFK{");
      defaultJSONParser_ResolveTask0.ownerContext = null;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser0.setDateFormat("(p<L_4G9AoFK{");
      Stack<InputStream> stack0 = new Stack<InputStream>();
      MockDate mockDate0 = new MockDate((-9007199254740991L));
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ");
      parserConfig0.symbolTable.addSymbol("fastjson.parser.autoTypeSupport", 0, 1, 1);
      TreeMap<JobAttributes, PageAttributes> treeMap0 = new TreeMap<JobAttributes, PageAttributes>();
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes jobAttributes1 = new JobAttributes();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JobAttributes.DestinationType jobAttributes_DestinationType0 = JobAttributes.DestinationType.PRINTER;
      jobAttributes1.setDestination(jobAttributes_DestinationType0);
      JobAttributes jobAttributes2 = new JobAttributes();
      treeMap0.lowerEntry(jobAttributes0);
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(p<L_4G9AoFK{", parserConfig0);
      ParserConfig parserConfig1 = ParserConfig.global;
      Object object0 = new Object();
      defaultJSONParser0.setResolveStatus((-2021479724));
      defaultJSONParser0.getExtraProcessors();
      JobAttributes jobAttributes0 = new JobAttributes();
      TreeMap<JobAttributes, PageAttributes> treeMap0 = new TreeMap<JobAttributes, PageAttributes>();
      treeMap0.lowerEntry(jobAttributes0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      defaultJSONParser0.getFieldTypeResolver();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getTimestamp("");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short)34);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "(p<L_4G9AoFK{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual (, pos 0, fieldName (p<L_4G9AoFK{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte byte0 = (byte)1;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}gEMi#yIUj=q'04v/");
      HashSet<MockMinguoDate> hashSet0 = new HashSet<MockMinguoDate>();
      defaultJSONParser0.getDateFomartPattern();
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, (String) null);
      defaultJSONParser0.setContext((Object) "$", (Object) hashSet0);
      defaultJSONParser0.getObject("a7wWqQ<sutE}rg?wt");
      ClassLoader.getSystemClassLoader();
      System.setCurrentTimeMillis(5807L);
      defaultJSONParser0.getContext();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Locale locale0 = Locale.JAPAN;
      Locale.getISOLanguages();
      DecimalFormatSymbols.getInstance(locale0);
      defaultJSONParser0.resolveReference("$");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("fastjson.parser.autoTypeAccept");
      Long long0 = new Long(1L);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.RBTableBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", name ");
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = new Boolean(", name ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", name ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName ");
      TreeMap<JobAttributes, PageAttributes> treeMap0 = new TreeMap<JobAttributes, PageAttributes>();
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.MultipleDocumentHandlingType jobAttributes_MultipleDocumentHandlingType0 = JobAttributes.MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      treeMap0.lowerEntry(jobAttributes0);
      ParserConfig.getGlobalInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      Short.valueOf((short)327);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      JSONObject jSONObject0 = new JSONObject(168);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      defaultJSONParser0.setContext((Object) decimalFormat0, (Object) null);
      defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", name ", 3392903);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", name ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
