/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:16:31 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFloat('H');
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('H');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ti");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ti", 0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[2] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      charArray0[3] = 't';
      SymbolTable symbolTable0 = new SymbolTable(1061);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '7');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2147);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : pos 0, json : 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.longValue();
      charArray0[0] = 'J';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'J';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanLong('\\');
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", (-1));
      jSONScanner0.isEnabled((-2), (-2));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("25Y=", 120);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner1.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 0);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(32);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uu");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("@type");
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Q%";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      JSONScanner jSONScanner0 = new JSONScanner("'o$?p;%\":ra9{mp+4!z");
      JSONScanner jSONScanner1 = new JSONScanner("Q%");
      jSONScanner1.isEnabled((-86836557), 4096);
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 'f';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-987), 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '3';
      charArray0[2] = 'r';
      charArray0[3] = '}';
      int int0 = (-2597);
      JSONScanner jSONScanner0 = new JSONScanner("y/t", 3293);
      JSONScanner jSONScanner1 = new JSONScanner("y/t", 'r');
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vVql{", 326);
      JSONScanner jSONScanner0 = new JSONScanner("vVql{", 326);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", (-2));
      jSONReaderScanner0.isRef();
      jSONScanner0.hasSpecial = false;
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      jSONScanner0.scanString('v');
      jSONReaderScanner0.stringDefaultValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('d');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDouble('g');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", (-2));
      jSONReaderScanner0.scanDate('l');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner2.scanDecimal('l');
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      char[] charArray1 = new char[4];
      charArray1[2] = 'J';
      charArray1[2] = 'J';
      charArray1[3] = 'J';
      JSONScanner jSONScanner1 = new JSONScanner(charArray1, 0);
      Class<Object> class0 = Object.class;
      jSONScanner1.newCollectionByType(class0);
      jSONScanner1.scanFloat('J');
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('-');
      jSONScanner0.bytesValue();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "unclosed string : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      int int0 = 97;
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 97);
      PipedReader pipedReader0 = new PipedReader(92);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1cN`vV@K;oYK8nE}-s", 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1cN`vV@K;oYK8nE}-s");
      JSONScanner jSONScanner1 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = '^';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 125);
      jSONReaderScanner1.scanIdent();
      JSONScanner jSONScanner2 = new JSONScanner("not");
      jSONReaderScanner2.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken(2);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.calendar = null;
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'W';
      charArray0[2] = 'H';
      charArray0[3] = '6';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "\":\"";
      objectArray0[3] = (Object) "\":\"";
      jSONScanner0.lexError("WriteClassName", objectArray0);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", (-2));
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanDate('^');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("6[-z=j'I\"ntzQO", 18);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDouble('e');
      jSONScanner0.scanString('M');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken((-461));
      jSONScanner0.scanLong('d');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7dc");
      jSONScanner0.putChar('|');
      Locale locale0 = Locale.PRC;
      jSONScanner0.locale = locale0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '\\';
      charArray0[2] = 'M';
      charArray0[3] = '[';
      charArray0[4] = '+';
      charArray0[5] = '^';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      Feature feature0 = Feature.UseBigDecimal;
      jSONScanner0.config(feature0, false);
      assertEquals(861, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      char char0 = JSONLexer.EOI;
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-381));
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}-t0//^A;xRD{'");
      jSONReaderScanner0.scanType("}-t0//^A;xRD{'");
      jSONReaderScanner0.scanType("toJSON error");
      JSONScanner jSONScanner0 = new JSONScanner("}-t0//^A;xRD{'", 0);
      jSONScanner0.scanBoolean('@');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(" - ", 78);
      jSONReaderScanner1.isBlankInput();
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '@';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[3] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      int int0 = JSONLexer.END;
      jSONScanner0.scanInt('\u0000');
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(',');
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.bytesValue();
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.charAt(4);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner("E{LywV|#");
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      assertEquals('{', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.scanBoolean('V');
      assertEquals(32, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 39);
      jSONReaderScanner0.scanType("0)13M8S5KvD_91f");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONReaderScanner0.scanBoolean(' ');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M", 43);
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '*';
      charArray0[3] = '$';
      charArray0[4] = '$';
      jSONReaderScanner0.sp = 2046;
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = JSONLexer.NOT_MATCH;
      JSONScanner jSONScanner0 = new JSONScanner("LAwTpIT8ycL#", 2046);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanDate('j');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('1');
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      boolean boolean1 = JSONLexerBase.isWhitespace('Z');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-570L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.nextToken(59);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      SymbolTable symbolTable0 = new SymbolTable(48);
      JSONScanner jSONScanner0 = new JSONScanner("tii", (-1642));
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '/';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '$';
      jSONReaderScanner0.scanDouble('T');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'X';
      charArray0[4] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1213);
      jSONReaderScanner0.scanDouble('*');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull", 0);
      jSONScanner1.skipWhitespace();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull", 1426);
      assertEquals(1426, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.subString(97, 4489);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      char[] charArray1 = new char[2];
      charArray1[0] = 'j';
      charArray1[1] = '^';
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char char0 = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("\"g0C");
      SymbolTable symbolTable0 = new SymbolTable(2929);
      String string0 = "is";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) symbolTable0;
      objectArray0[1] = (Object) symbolTable0;
      jSONScanner0.lexError("is", objectArray0);
      int int0 = 1696;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("java");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3968);
      jSONReaderScanner0.scanType("2gH`k5nLR{0hPsBuX");
      int int0 = JSONLexer.ARRAY;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java", 0);
      jSONReaderScanner1.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("pf", (-1));
      jSONReaderScanner1.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      jSONReaderScanner1.scanDate('/');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(3968, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tii");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = ']';
      charArray0[2] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.token = 36;
      jSONReaderScanner0.close();
      int int0 = JSONLexer.ARRAY;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate(']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "net.sf.json.JSONNull";
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONScanner jSONScanner1 = new JSONScanner("u");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner1.scanInt('x');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner1.nextIdent();
      assertEquals('+', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$s?K");
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2));
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner1.isEnabled(0, 0);
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char char0 = '+';
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = '+';
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      String string0 = "=u|,a7urLf;]~oUR";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=u|,a7urLf;]~oUR", 12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - =, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 39);
      jSONReaderScanner0.scanType("0)13M8S5KvD_91f");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDecimal('#');
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z~P_<j&$U-F)Iz*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-1));
      SymbolTable symbolTable0 = new SymbolTable(281);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner2.scanSymbolWithSeperator(symbolTable0, '(');
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(stringReader0, 96);
      jSONReaderScanner3.subString(26, 419);
      jSONReaderScanner0.scanIdent();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-721));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanFloat('c');
      JSONScanner jSONScanner1 = new JSONScanner("autoType is not support. ");
      jSONScanner1.isEnabled(70, (-2147483647));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("autoType is not support. ", (-1));
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9C,C:#&Ta>P1s", 138);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '2';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[2] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      charArray0[3] = 't';
      int int0 = 2087;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      JSONScanner jSONScanner0 = new JSONScanner("1-sqnU|D");
      char char0 = '3';
      jSONScanner0.scanUUID('3');
      jSONScanner0.scanFloat('N');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("uu");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1023, (-1));
      jSONReaderScanner2.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("uu");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong('-');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 97);
      PipedReader pipedReader0 = new PipedReader(92);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z", 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "~hDhY$8T:Z";
      objectArray0[1] = (Object) jSONScanner0;
      jSONScanner0.lexError("~hDhY$8T:Z", objectArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      jSONScanner0.scanFieldFloat(charArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.isEnabled(31, 0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '[';
      charArray0[2] = 'j';
      charArray0[3] = 'I';
      charArray0[4] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 127);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fIU,0>", 18);
      jSONScanner0.putChar('%');
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('x');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(18, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      JSONScanner.checkDate('3', '3', '3', '%', '3', '%', (-1), (-1));
      int int0 = 2729;
      JSONScanner jSONScanner0 = new JSONScanner("an+-", 2729);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanNumber();
      jSONScanner0.isEnabled(1549, (-1011));
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = ", json : ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      jSONReaderScanner0.scanLong('3');
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      int int0 = (-2083);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2083));
      jSONReaderScanner0.scanLong('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 803);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("25Y=", 0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner1.skipComment();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=");
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('T', 'a', 'T', 'T', 'x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "net.sf.json.JSONNull";
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.putChar('c');
      jSONScanner0.scanString('x');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      boolean boolean0 = JSONScanner.checkDate('>', 'q', '$', '1', 'i', '1', 40, 40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1-sqnU|D", 58);
      jSONScanner0.scanUUID('!');
      float float0 = jSONScanner0.scanFloat('!');
      assertEquals(1.0F, float0, 0.01F);
      
      jSONScanner0.indexOf('!', (-1331));
      jSONScanner0.next();
      assertEquals(58, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 110);
      SymbolTable symbolTable0 = new SymbolTable(96);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.scanSymbolWithSeperator(symbolTable0, 'M');
      jSONReaderScanner1.subString(110, 115);
      jSONReaderScanner0.scanIdent();
      SymbolTable symbolTable1 = new SymbolTable(115);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q5d%");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7U~W}^#<>A;>$-,YtH");
      jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      Feature feature0 = Feature.DisableFieldSmartMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('Y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jl9");
      jSONReaderScanner0.close();
      char char0 = ':';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(':');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNudl");
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNudl");
      jSONScanner0.intValue();
      jSONScanner1.scanNumber();
      assertEquals(2, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$sXgo`-NvHw");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk", 3450);
      jSONScanner0.info();
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("ii2jqYk");
      jSONScanner1.isEnabled(3450, 0);
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[3] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanInt('B');
      jSONScanner0.scanInt('\u0000');
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(',');
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull", 0);
      jSONScanner1.skipWhitespace();
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull", 1426);
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals(0L, long0);
      assertEquals(1426, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.eofPos = (-1291);
      jSONReaderScanner0.subString(97, 4489);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(4489);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-840));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      jSONReaderScanner0.nextToken();
      charArray0[1] = 'Y';
      char[] charArray1 = new char[7];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = '+';
      jSONScanner0.matchField2(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      charArray1[1] = '~';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[5] = '+';
      jSONScanner0.scanFieldStringArray(charArray0, 43, (SymbolTable) null);
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanString('\\');
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(62784969L, long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("net.sf.json.JSONNull", 1706);
      char char0 = 'm';
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('V');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, (-1611));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("not");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("not", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      jSONReaderScanner0.setToken(2881);
      jSONReaderScanner0.scanDecimal('1');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      boolean boolean0 = JSONScanner.checkDate('>', 'q', '$', '1', 'i', '1', 40, 40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      char[] charArray0 = new char[9];
      jSONScanner0.scanSymbol((SymbolTable) null);
      JSONScanner jSONScanner1 = new JSONScanner("java", 18);
      JSONScanner jSONScanner2 = new JSONScanner(", ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1485);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("F5c/wW@NuOJK7l3j+");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("parse number key error", 49);
      jSONReaderScanner0.pos = 0;
      jSONReaderScanner2.scanFloat('c');
      jSONReaderScanner0.nextToken(1513);
      jSONReaderScanner2.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      jSONScanner0.ch = '<';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - <, info : pos 1, json : 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '|';
      charArray0[2] = ']';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'Z';
      charArray0[2] = 'i';
      charArray0[3] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      char char0 = 'B';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("fIU,0>", 24180);
      jSONScanner1.putChar('c');
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONScanner1.scanFieldFloatArray(charArray0);
      jSONScanner1.scanString('x');
      jSONScanner1.scanFieldFloatArray2(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-379), 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z", 0);
      jSONReaderScanner0.nextToken((-2928));
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(105);
      JSONScanner jSONScanner0 = new JSONScanner("tii", (-57));
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanFalse();
      jSONScanner0.sp = 2161;
      jSONScanner0.next();
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('6');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '|';
      charArray0[3] = 'X';
      charArray0[4] = '?';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 117);
      jSONReaderScanner0.scanDecimal('G');
      jSONReaderScanner0.matchStat = 117;
      char[] charArray1 = new char[4];
      charArray1[0] = 'X';
      charArray1[1] = 'G';
      charArray1[2] = '|';
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanDecimal('X');
      jSONReaderScanner0.charArrayCompare(charArray0);
      Feature feature0 = Feature.OrderedField;
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      JSONScanner jSONScanner1 = new JSONScanner(", json : ");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      PipedReader pipedReader0 = new PipedReader();
      jSONScanner0.scanBoolean('$');
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}~7");
      jSONScanner0.stringDefaultValue = "writeclassname";
      char char0 = 'F';
      jSONScanner0.scanDecimal('F');
      // Undeclared exception!
      try { 
        jSONScanner0.subString(44, (-2178));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "/oa^NC-_{";
      objectArray0[2] = (Object) "/oa^NC-_{";
      objectArray0[3] = (Object) "unclosed single-quote string";
      objectArray0[4] = (Object) "/oa^NC-_{";
      objectArray0[5] = (Object) "/oa^NC-_{";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "/oa^NC-_{";
      objectArray0[8] = (Object) "/oa^NC-_{";
      jSONScanner0.lexError("/oa^NC-_{", objectArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 744);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-5009), (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull", 0);
      jSONScanner1.isBlankInput();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "net.sf.json.JSONNull", 0, 0, 3, 49, 125, 0, 0, 125, 83);
      jSONScanner1.setTimeZone(simpleTimeZone0);
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]\"m:\u0004xuk\u0006H_k", 119);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      jSONReaderScanner0.matchField(charArray0);
      Locale locale0 = new Locale("]\"m:\u0004xuk\u0006H_k", "]\"m:\u0004xuk\u0006H_k", "]\"m:\u0004xuk\u0006H_k");
      jSONReaderScanner0.ch = '0';
      jSONReaderScanner0.eofPos = 119;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.lexError("]\"m:\u0004xuk\u0006H_k", (Object[]) null);
      jSONReaderScanner0.scanDecimal('z');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.indexOf('z', 39);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("]\"m:\u0004xuk\u0006H_k", (-2));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('0', '0', '(', '0', 'f');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = ';';
      charArray0[2] = 'C';
      charArray0[3] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 352, 352);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 352);
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithJavaBean");
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner1.intValue();
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[1];
      charArray1[0] = 's';
      jSONReaderScanner0.scanFieldDate(charArray1);
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q%");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7U~W}^#<>A;>$-,YtH/");
      long long0 = jSONReaderScanner0.scanLong('R');
      assertEquals(7L, long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 't';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C");
      char char0 = 'm';
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner1.close();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner1.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char char0 = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("\"g0C");
      SymbolTable symbolTable0 = new SymbolTable(2929);
      String string0 = ".%c\"T_#";
      JSONScanner jSONScanner1 = new JSONScanner(".%c\"T_#", (-1171));
      SymbolTable symbolTable1 = new SymbolTable(377);
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 0, json : .%c\"T_#
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanString();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7U~W}^#<>A;>$-,YtH/");
      JSONScanner jSONScanner0 = new JSONScanner("trim");
      jSONScanner0.scanFloat('R');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      char char0 = '*';
      jSONScanner0.scanString('*');
      int int0 = (-1094547412);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trim", (-1094547412));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7U~W}^#<>A;>$-,YtH/");
      jSONReaderScanner0.scanLong('R');
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      JSONScanner jSONScanner0 = new JSONScanner("7U~W}^#<>A;>$-,YtH/", 4096);
      jSONScanner0.scanFloat('.');
      JSONScanner jSONScanner1 = new JSONScanner("fieldName");
      jSONScanner1.isEnabled((-2447), 91);
      jSONReaderScanner0.nextIdent();
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[2] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.scanDouble('n');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Hp]9", 17);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('{');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("lsq", 17);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.ch = '-';
      jSONScanner0.nextToken();
      assertEquals(':', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong(':');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9");
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner1 = new JSONScanner("9", 0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDecimal('');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '3';
      charArray0[2] = 'r';
      charArray0[3] = '}';
      charArray0[4] = '(';
      charArray0[5] = '2';
      charArray0[6] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken(2714);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(31);
      int int0 = 59;
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31, (-5325));
      jSONReaderScanner0.scanDate('a');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "fals_";
      JSONScanner jSONScanner0 = new JSONScanner("fals_");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 18);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = JSONLexer.ARRAY;
      jSONReaderScanner1.scanDate('\"');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 46);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 46);
      jSONReaderScanner0.scanLong('W');
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("uN}6'");
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      jSONReaderScanner0.nextToken();
      charArray0[0] = '#';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONLexerBase.readString(charArray0, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanDecimal('!');
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.subString(34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.charAt(337);
      JSONScanner jSONScanner1 = new JSONScanner("vofmwkOWwkN");
      char char0 = '-';
      jSONScanner1.scanUUID('-');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 26);
      StringReader stringReader0 = new StringReader("NotWriteDefaultValue");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 123);
      jSONReaderScanner1.scanFieldInt(charArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = JSONLexer.EOI;
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-381));
      jSONScanner0.matchField(charArray0);
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char char0 = '+';
      int int0 = 2284;
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[0] = '+';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = '+';
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      charArray1[1] = '~';
      char[] charArray2 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~7H$m'b($i&[\"`m");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('D');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.bytesValue();
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("92N+");
      Object object0 = new Object();
      jSONScanner0.scanDecimal('s');
      char[] charArray0 = new char[10];
      jSONScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("Jhdh");
      jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      char[] charArray1 = new char[2];
      charArray1[0] = 's';
      // Undeclared exception!
      try { 
        jSONScanner1.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[16];
      char char0 = 'T';
      charArray0[0] = 'T';
      JSONScanner jSONScanner0 = new JSONScanner("u%54CO9Ivwms44v");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      char[] charArray1 = new char[2];
      charArray1[0] = 'T';
      charArray1[1] = 'T';
      JSONScanner jSONScanner1 = new JSONScanner(charArray1, 0, (-2));
      jSONScanner0.scanBoolean('|');
      jSONScanner1.setTimeZone((TimeZone) null);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanInt('3');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = '~';
      charArray0[2] = 'u';
      charArray0[3] = '<';
      charArray0[4] = '6';
      charArray0[5] = 'S';
      charArray0[6] = '';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 115);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.scanLong('Y');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 240, 0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner2.lexError("", objectArray0);
      jSONReaderScanner2.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 693;
      JSONScanner jSONScanner0 = new JSONScanner("Y0&|", 693);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull");
      char[] charArray0 = new char[4];
      charArray0[2] = 's';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner2 = new JSONScanner("Y0&|");
      // Undeclared exception!
      try { 
        jSONScanner2.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      JSONScanner jSONScanner1 = new JSONScanner("+f*;RxR; \">R", 0);
      jSONScanner0.longValue();
      JSONScanner jSONScanner2 = new JSONScanner("+f*;RxR; \">R", 0);
      jSONScanner1.nextToken();
      jSONScanner1.indexOf('1', 0);
      assertEquals(2, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5108);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(117);
      jSONScanner0.scanLong('b');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanUUID('}');
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = ' ';
      charArray0[7] = '}';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.indexOf('$', (-1792948369));
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1615, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = '+';
      charArray0[5] = '+';
      jSONScanner0.scanFieldStringArray(charArray0, 43, (SymbolTable) null);
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanString('\\');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("uu");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'T';
      charArray1[1] = 'm';
      charArray1[2] = 'm';
      charArray1[3] = 'm';
      charArray1[4] = 'm';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONReaderScanner1.matchField(charArray1);
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("~hdh");
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T<($75");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("T<($75");
      jSONReaderScanner1.nextToken((-1705));
      assertEquals('<', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull");
      int int0 = 102;
      jSONScanner0.bp = 102;
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('H');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char char0 = 'Q';
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      jSONReaderScanner0.nextToken();
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      jSONReaderScanner0.scanLong('1');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, (-2227));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk", 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ii2jqYk";
      objectArray0[1] = (Object) jSONScanner0;
      jSONScanner0.lexError("~hDhY$8T:Z", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '\u001A';
      charArray0[2] = 'f';
      SymbolTable symbolTable0 = new SymbolTable(705);
      JSONScanner jSONScanner1 = new JSONScanner("ii2jqYk", (-347));
      jSONScanner1.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.getLocale();
      jSONScanner1.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.scanBoolean('4');
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.isEnabled(31);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(3215, 3215);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      int int0 = JSONLexer.NOT_MATCH_NAME;
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanInt('X');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.subString(18, 18);
      jSONReaderScanner0.scanIdent();
      boolean boolean0 = jSONReaderScanner0.scanBoolean('W');
      assertEquals(23, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.putChar('c');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('x');
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("n", 0);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2105);
      JSONScanner jSONScanner1 = new JSONScanner("n");
      jSONScanner1.scanFieldFloat(charArray0);
      jSONReaderScanner1.isEOF();
      jSONReaderScanner1.nextIdent();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(36L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.scanDouble('n');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 0, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      JSONScanner jSONScanner1 = new JSONScanner("true");
      jSONScanner1.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-2083));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true", (-542));
      jSONReaderScanner1.scanLong('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      JSONScanner jSONScanner0 = new JSONScanner("]Ea7)8/35x0< >v>", (-1494));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ], info : pos 0, json : ]Ea7)8/35x0< >v>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", (-624));
      jSONReaderScanner0.getFeatures();
      char[] charArray0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, (-624));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "U*t?),";
      JSONScanner jSONScanner0 = new JSONScanner("U*t?),");
      char char0 = 'c';
      int int0 = 3039;
      jSONScanner0.indexOf('c', 3039);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*!u\"6T?t$CVYV");
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.isBlankInput();
      JSONScanner jSONScanner1 = new JSONScanner("*!u\"6T?t$CVYV");
      int int0 = 93;
      jSONScanner1.charAt(0);
      Class<String> class0 = String.class;
      jSONScanner1.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner2 = new JSONScanner("vofmwkOWwkN");
      jSONScanner0.scanUUID('y');
      JSONScanner jSONScanner3 = null;
      try {
        jSONScanner3 = new JSONScanner(charArray0, 93);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3180);
      jSONReaderScanner0.nextToken(3180);
      assertEquals(20, jSONReaderScanner0.token());
      
      jSONScanner0.scanLong('4');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 18;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.scanUUID('_');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      Object object0 = new Object();
      jSONScanner0.nextToken();
      char char0 = ')';
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = JSONLexer.EOI;
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-381));
      jSONScanner0.matchField(charArray0);
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "/oa^NC-_{";
      objectArray0[2] = (Object) "/oa^NC-_{";
      objectArray0[3] = (Object) "unclosed single-quote string";
      objectArray0[4] = (Object) "/oa^NC-_{";
      objectArray0[5] = (Object) "/oa^NC-_{";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "/oa^NC-_{";
      objectArray0[8] = (Object) "/oa^NC-_{";
      jSONScanner0.lexError("/oa^NC-_{", objectArray0);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = '\'';
      charArray0[2] = 'h';
      charArray0[3] = 'V';
      charArray0[4] = '.';
      charArray0[5] = 'L';
      charArray0[6] = '1';
      charArray0[7] = '';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('m');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z", 0);
      jSONReaderScanner0.scanFloat('f');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("");
      Object object0 = new Object();
      SymbolTable symbolTable1 = new SymbolTable(31);
      jSONScanner0.scanSymbolWithSeperator(symbolTable1, 'Z');
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError((String) null, objectArray0);
      char char0 = '4';
      jSONScanner0.scanBoolean('4');
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.isEnabled(31);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1), (-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.matchStat = 18;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('b');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1382, 1382);
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 3678080);
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("b%h", 1382, 47, 59, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner1.scanInt('x');
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("IM0U'{WF4aDnBDH(~x", 1176);
      jSONScanner0.isEnabled(101, 5);
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7U~W}^#<>A;>$-,YtH/");
      jSONReaderScanner0.scanLong('R');
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      Class<Integer> class0 = Integer.class;
      JSONScanner jSONScanner0 = new JSONScanner("7U~W}^#<>A;>$-,YtH/", 4096);
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner1 = new JSONScanner("scan true error");
      jSONScanner1.isEnabled(4096, 53);
      jSONReaderScanner0.nextIdent();
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      char[] charArray1 = new char[4];
      charArray1[2] = 'J';
      charArray1[2] = 'J';
      charArray1[3] = 'J';
      JSONScanner jSONScanner1 = new JSONScanner(charArray1, 0);
      Class<Object> class0 = Object.class;
      jSONScanner1.newCollectionByType(class0);
      jSONScanner1.scanFloat('J');
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
      
      JSONScanner jSONScanner2 = new JSONScanner("TreeSet", 3158);
      jSONScanner2.bytesValue();
      assertEquals(3158, jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      char[] charArray1 = new char[8];
      charArray1[0] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("LlSq}?bNCiC", 0);
      jSONReaderScanner1.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-2606));
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner1.nextIdent();
      long long0 = jSONReaderScanner1.longValue();
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(340L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      JSONScanner jSONScanner0 = new JSONScanner("G$JA#X<?w.#pAr@@");
      jSONScanner0.isEnabled((-3174), (-987));
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 97, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "vVql{";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vVql{", 326);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '1';
      jSONReaderScanner0.sbuf = charArray0;
      char char0 = 'c';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'c');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2819);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*!u\"6T?t$CVYV");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("rror Zarse true");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      JSONScanner jSONScanner1 = new JSONScanner("rror Zarse true", 0);
      jSONScanner0.scanISO8601DateIfMatch();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("rror Zarse true", 132);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("77MY", (-50840217));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "77MY";
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "77MY";
      objectArray0[5] = (Object) jSONScanner0;
      jSONScanner0.lexError("true", objectArray0);
      jSONScanner0.nextToken();
      System.setCurrentTimeMillis((-50840217));
      jSONScanner0.scanString('N');
      assertEquals('M', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      jSONReaderScanner0.nextToken(1023);
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(1023);
      JSONScanner jSONScanner0 = new JSONScanner("is", (-715));
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'v';
      charArray0[2] = 'l';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      JSONScanner jSONScanner1 = new JSONScanner("is");
      jSONScanner1.isEnabled(2592, 26);
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.putChar('c');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ; - ,, info : pos 0, json : , json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.setToken((-303));
      JSONScanner jSONScanner1 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.scanBoolean('\u008D');
      jSONScanner0.scanLong('A');
      assertEquals((-303), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}-t0//^A;xRD{'");
      int int0 = 120;
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1791625326));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      charArray1[0] = 'J';
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray1[1] = 'P';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 0;
      int int1 = 2284;
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("jl9");
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = 36;
      JSONScanner jSONScanner0 = new JSONScanner("&-.>TAP_<%+=UA", 36);
      jSONScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(36);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : &pos 0, json : &-.>TAP_<%+=UA
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = ' ';
      charArray0[2] = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'Z');
      charArray0[3] = 't';
      charArray0[4] = '2';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[2] = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[3] = 't';
      jSONReaderScanner0.scanLong(' ');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextToken(12);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z", 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "~hDhY$8T:Z";
      objectArray0[1] = (Object) jSONScanner0;
      jSONScanner0.lexError("~hDhY$8T:Z", objectArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      jSONScanner0.scanFieldFloat(charArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.locale = locale0;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.isEnabled(31, 0);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.nextToken(9);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1696, "unclosed.str.lit", 1971, 0, 57344, 9, (-1094570429), 9, 813, (-622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month -1094570429
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[8];
      char char0 = ',';
      charArray0[0] = ',';
      char char1 = 'e';
      charArray0[1] = 'e';
      char char2 = 'Y';
      charArray0[2] = 'Y';
      char char3 = 'g';
      charArray0[3] = 'g';
      char char4 = 'y';
      charArray0[4] = 'y';
      char char5 = 'U';
      charArray0[5] = 'U';
      charArray0[6] = '#';
      charArray0[7] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 756, 38);
      jSONReaderScanner0.nextTokenWithChar(',');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char char0 = '_';
      JSONLexerBase.isWhitespace('_');
      char[] charArray0 = new char[8];
      char char1 = 'D';
      charArray0[0] = 'D';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = '_';
      charArray0[7] = '_';
      int int0 = (-652);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-652));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match q - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(1946);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(16, jSONScanner0.token());
      
      char[] charArray0 = new char[6];
      TimeZone timeZone0 = TimeZone.getTimeZone(", json : ");
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N");
      JSONScanner jSONScanner1 = new JSONScanner("N");
      jSONScanner1.nextToken();
      assertEquals('\u001A', jSONScanner1.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      PipedReader pipedReader0 = new PipedReader();
      jSONScanner0.scanBoolean('');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      jSONScanner0.nextToken(84);
      char[] charArray0 = new char[9];
      char char0 = '3';
      charArray0[0] = '3';
      int int0 = (-2083);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2083));
      jSONReaderScanner0.scanLong('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" - ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 36);
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'q';
      charArray0[2] = 'j';
      charArray0[3] = 'd';
      stringReader0.ready();
      charArray0[4] = '=';
      charArray0[5] = '#';
      charArray0[6] = '^';
      charArray0[7] = 'M';
      charArray0[8] = 's';
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-2));
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.isRef();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2083));
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('_');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse true", (-1387));
      jSONReaderScanner0.scanBoolean('C');
      assertEquals((-2083), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      charArray1[0] = ']';
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(32);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 32);
      JSONScanner jSONScanner0 = new JSONScanner(".4} A3&VavL&wA^0d,Z", (-59));
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = 3678080;
      char[] charArray0 = new char[3];
      char char0 = '7';
      int int1 = 229;
      int int2 = 999999;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999999);
      jSONReaderScanner0.scanDouble('7');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$s?K");
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONLexerBase.readString(charArray0, 0);
      int int0 = (-2083);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[", (-2));
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.scanLong(')');
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("true", 68);
      jSONReaderScanner2.nextToken(2995);
      jSONReaderScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'N';
      JSONScanner jSONScanner0 = new JSONScanner("t-aH=w'U@");
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t-aH=w'U@", 2873);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int0 = 107;
      SymbolTable symbolTable0 = new SymbolTable(83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(3678080, 3678080, 107, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      JSONScanner jSONScanner0 = new JSONScanner("u0=sk", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : pos 0, json : u0=sk
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanLong('\\');
      Class<Integer> class0 = Integer.class;
      JSONScanner jSONScanner0 = new JSONScanner("..-+", 121);
      JSONScanner jSONScanner1 = new JSONScanner("..-+", (-2597));
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      jSONReaderScanner0.scanType("]Ea7)8/35x0< >v>");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'W';
      charArray0[2] = 'H';
      jSONScanner0.isEnabled(59, 43);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(2103, 46, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      char char0 = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('V');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner1.nextToken();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1615, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner0.scanUUID('_');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanString('W');
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = 'W';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = 'W';
      charArray0[7] = 'O';
      charArray0[8] = 'W';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken((-1098282191));
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1098282191));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ");
      PipedReader pipedReader0 = new PipedReader();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z", 0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken(95);
      jSONReaderScanner0.scanNumber();
      char char0 = 'g';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1980));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('?');
      char char0 = JSONLexer.EOI;
      JSONScanner jSONScanner1 = new JSONScanner("null", (-1));
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '\u001A';
      charArray0[2] = 'H';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("null", 31);
      jSONScanner2.nextToken();
      assertTrue(jSONScanner2.isEOF());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "man+-";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("man+-");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Class<Integer> class0 = Integer.class;
      JSONScanner jSONScanner0 = new JSONScanner("", 1960);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[3] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      int int0 = JSONLexer.END;
      jSONScanner0.next();
      SymbolTable symbolTable0 = new SymbolTable(',');
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhYB8[:Z");
      jSONReaderScanner0.scanDate('f');
      char[] charArray0 = new char[2];
      charArray0[1] = 'g';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanLong('1');
      JSONScanner jSONScanner0 = new JSONScanner("new", 2328);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q%");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125);
      SymbolTable symbolTable0 = new SymbolTable(109);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'j');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z", 0);
      jSONReaderScanner0.eofPos = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = 'Q';
      charArray0[2] = 'L';
      charArray0[3] = 'A';
      charArray0[4] = 'n';
      charArray0[5] = '8';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1));
      jSONScanner0.np = 0;
      jSONScanner0.scanDate('}');
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = '$';
      char[] charArray1 = new char[1];
      charArray1[0] = 'Y';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 0, 43);
      jSONReaderScanner1.subString(117, 117);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(256);
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner1.scanInt('x');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("(+rceAy9z}zK'A", 'x');
      jSONReaderScanner1.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("(+rceAy9z}zK'A", (-2));
      jSONReaderScanner2.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner2.matchStat);
      
      SymbolTable symbolTable1 = new SymbolTable(1864);
      jSONScanner0.scanFieldStringArray(charArray0, 0, symbolTable1);
      assertEquals((-2), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char char0 = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("\"g0C");
      SymbolTable symbolTable0 = new SymbolTable(2929);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '3';
      charArray0[2] = 'r';
      JSONScanner jSONScanner0 = new JSONScanner("9QleeOMz");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4489);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(19);
      jSONScanner0.scanLong('u');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(4489);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'N');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 0);
      jSONReaderScanner0.scanInt('A');
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      JSONScanner jSONScanner0 = new JSONScanner("HD");
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, ':');
      JSONScanner jSONScanner1 = new JSONScanner("float overflow : ");
      Class<String> class0 = String.class;
      jSONScanner1.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'H';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vYPTX5++ qOx", 17);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('{');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1));
      int int0 = 43;
      jSONScanner0.np = 0;
      jSONScanner0.scanDate('}');
      char[] charArray0 = new char[4];
      char char0 = ';';
      charArray0[0] = ';';
      charArray0[1] = '$';
      charArray0[2] = '\'';
      char char1 = 'i';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[9] = '=';
      charArray0[4] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'i', 'i');
      jSONReaderScanner0.scanUUID('.');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false", (-1));
      boolean boolean0 = jSONReaderScanner1.scanBoolean('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      charArray0[0] = '1';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vVK;oK8nE}-s");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{ ~;} FnTj^M4kQ>L", 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanDecimal('\'');
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken(926);
      assertEquals(12, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      JSONScanner jSONScanner0 = new JSONScanner("not support type ", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanString('~');
      jSONScanner0.scanFieldString(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(6898L, long0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.sp = (-1548);
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanLong(':');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70);
      SymbolTable symbolTable0 = new SymbolTable(58);
      JSONScanner jSONScanner0 = new JSONScanner("\"Pmc&`/Ul+HgyE)V", 1252);
      jSONScanner0.scanFloat(':');
      JSONScanner jSONScanner1 = new JSONScanner("jl9");
      assertEquals(0, jSONScanner1.matchStat());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner0.scanDate('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('?');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c(|d8&q\"%3lh}JgYo", 18);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanString();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}-t0//^A;xRD{'");
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanDate('X');
      assertEquals('t', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'W';
      charArray0[2] = 'H';
      charArray0[3] = '6';
      jSONScanner0.scanString('Z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.scanLong('0');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 18);
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(18);
      jSONReaderScanner0.addSymbol(18, 46, 13, symbolTable0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner1.scanEnum(class0, symbolTable0, '3');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = ']';
      charArray0[2] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      int int0 = JSONLexer.ARRAY;
      jSONReaderScanner0.scanDate(']');
      assertEquals(4, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_");
      jSONReaderScanner0.longValue();
      int int0 = 1183;
      SymbolTable symbolTable0 = new SymbolTable(101);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      SymbolTable symbolTable0 = new SymbolTable(1946);
      JSONScanner jSONScanner1 = new JSONScanner("\"3N/I", 24);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(16, jSONScanner0.token());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'i';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      jSONScanner1.scanFieldSymbol(charArray0);
      assertEquals(24, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      JSONScanner jSONScanner0 = new JSONScanner("$:");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      char char0 = 'l';
      jSONReaderScanner0.scanStringArray(list0, 'l');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-910));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      
      JSONScanner.checkDate('g', 'q', 'l', 'C', 'e', 'e', (-2), (-2));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 65, 32);
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner1.bytesValue();
      assertEquals(32, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.nextToken(12);
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ghDh$$8T:Z";
      jSONScanner0.lexError("ghDh$$8T:Z", objectArray0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fIU,0>", 18);
      jSONScanner0.putChar('%');
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("\"+U<qO4UfaL vR");
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = '%';
      charArray0[8] = '%';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanBoolean('8');
      assertEquals(18, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(4.hT!");
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(4.hT!", 0);
      jSONReaderScanner0.scanLong('B');
      jSONReaderScanner0.skipWhitespace();
      assertEquals('(', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.intValue();
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.features = 2135;
      assertEquals((-1), jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.hasSpecial = true;
      boolean boolean0 = jSONReaderScanner0.isEnabled((-2981));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = (-3284);
      JSONScanner jSONScanner0 = new JSONScanner(", ", (-3284));
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'Z';
      charArray0[2] = 'i';
      charArray0[3] = '~';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      char char0 = 'B';
      jSONScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 803);
      jSONReaderScanner0.skipComment();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "\":\"";
      objectArray0[3] = (Object) "\":\"";
      jSONScanner0.ch = '-';
      jSONScanner0.lexError("WriteClassName", objectArray0);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2B5Y=");
      jSONReaderScanner0.scanType("2B5Y=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("2B5Y=", (-2));
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('^', 'T', 'x', 'T', '}', 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[9] = '=';
      charArray0[4] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*!u\"6T?t$CVYV");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trtu", (-1458));
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDouble('g');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '*';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.nextToken((-351));
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gh(/}G*r]g9");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = 'U';
      charArray0[2] = '-';
      charArray0[3] = '4';
      charArray0[4] = 'h';
      charArray0[5] = 'i';
      charArray0[6] = '=';
      charArray0[7] = ',';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner.checkDate('#', 'u', '=', 'D', '=', 'q', 65, (-2));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'Z');
      jSONReaderScanner0.scanDouble('A');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z~P_<j&$U-F)Iz*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-1));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3!(hDrY", (-2083));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("3!(hDrY");
      jSONReaderScanner1.scanLong('P');
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      charArray1[0] = 'J';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 20);
      jSONReaderScanner0.scanLong('J');
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '/';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '$';
      jSONReaderScanner0.scanDouble('T');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.putChar('c');
      char[] charArray0 = new char[0];
      jSONScanner0.isBlankInput();
      int int0 = 9;
      jSONScanner0.charAt(9);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('N');
      jSONScanner0.setToken((-504));
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[2] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner("9QleeOMz");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4489);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 4489);
      jSONReaderScanner0.nextToken(2167);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'Z';
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner(".%c\"T_#", (-31));
      StringReader stringReader0 = new StringReader(".%c\"T_#");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanString();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1124088139));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanInt('g');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed single-quote string", (-1));
      jSONReaderScanner0.scanDate('3');
      jSONReaderScanner0.scanDecimal('S');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((char[]) null, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$s", 1470);
      jSONScanner0.putChar('3');
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('3');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken(3440);
      jSONScanner0.charAt(32);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      jSONScanner0.isEnabled(5, 19);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldLong(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 19);
      jSONReaderScanner0.nextIdent();
      jSONScanner0.tokenName();
      jSONReaderScanner0.charAt(117);
      assertEquals(20, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("G2Nj%KW&b8S", 78);
      int int0 = jSONScanner1.matchStat();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1));
      jSONScanner0.np = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = '$';
      char[] charArray1 = new char[1];
      charArray1[0] = 'Y';
      jSONScanner0.scanFieldFloat(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.isEnabled(0, 53);
      jSONReaderScanner0.nextIdent();
      assertEquals(21, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.charAt(337);
      JSONScanner jSONScanner1 = new JSONScanner("vofmwkOWwkN");
      jSONScanner1.scanUUID('-');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("67,atJvND'@.ScU@");
      jSONReaderScanner0.scanDate('-');
      jSONReaderScanner0.stringVal();
      assertEquals(3, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.isEOF();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+f*;RxR; \">R", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      jSONReaderScanner0.nextToken();
      charArray0[1] = 'Y';
      jSONReaderScanner0.scanDecimal('_');
      char[] charArray1 = new char[3];
      charArray1[0] = '_';
      charArray1[1] = '_';
      charArray1[2] = '_';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 363);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      JSONScanner jSONScanner0 = new JSONScanner("U%Vh|}2<WU'U-1mWZ", 0);
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.nextToken();
      System.setCurrentTimeMillis(3763L);
      jSONScanner0.scanString('i');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 0);
      char[] charArray1 = new char[8];
      charArray1[0] = '.';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[3] = '.';
      charArray1[4] = '.';
      charArray1[5] = '.';
      charArray1[6] = '.';
      charArray1[7] = '.';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(+rceAy9z}zK'A", 31);
      jSONReaderScanner1.scanInt('x');
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "oA4mjn,1I+cCg5SAp7b");
      jSONReaderScanner1.setTimeZone(simpleTimeZone0);
      int int0 = 45380;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 45380);
      jSONReaderScanner2.isBlankInput();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 45380, 45380);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ii2jqYk";
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[2] = 'f';
      SymbolTable symbolTable0 = new SymbolTable(705);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk", (-347));
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.matchField2(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = 3678080;
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("lpA", 3678080);
      char char0 = '\'';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.putChar('c');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*!u\"6T?t$CVYV");
      jSONReaderScanner0.scanLong('R');
      char[] charArray1 = new char[1];
      charArray1[0] = 'F';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray1, (-648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 1654;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*gqn3^}z~bV", 1654);
      char char0 = 'z';
      jSONReaderScanner0.putChar('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONLexerBase.readString(charArray0, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('!');
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, (-364));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 993);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("g-lAsWtEh\".o[2n5");
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('G');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g-lAsWtEh\".o[2n5");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '4';
      charArray0[2] = '!';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1cN`vV@K;oYK8nE}-s", 17);
      jSONReaderScanner1.scanLong('!');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.scanNumber();
      jSONScanner0.isEnabled(496, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}_`Y_~/I0dIYX2");
      jSONReaderScanner0.nextIdent();
      assertEquals(13, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '/';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '$';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", 3366);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONReaderScanner0.scanDate('^');
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("new", (-220));
      JSONScanner jSONScanner1 = new JSONScanner(", ");
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      JSONScanner jSONScanner2 = new JSONScanner("asi");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[4] = 'M';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('\u0000');
      JSONScanner jSONScanner1 = new JSONScanner("~hDhY$8T:Z");
      JSONScanner jSONScanner2 = new JSONScanner("7>OUijKZt-ha'", (-3055));
      jSONScanner2.isEnabled(1825, 2609);
      jSONReaderScanner0.nextIdent();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanInt('X');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '1';
      charArray0[2] = 'X';
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[3] = 'X';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "vVql{";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vVql{", 326);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '1';
      jSONReaderScanner0.sbuf = charArray0;
      char char0 = 'c';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, '%');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      char[] charArray0 = new char[4];
      SymbolTable symbolTable0 = new SymbolTable(3636);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4966, 4966);
      jSONReaderScanner0.addSymbol(47, 47, 0, symbolTable0);
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.setLocale(locale0);
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-1613950836), 30, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "\":\"";
      objectArray0[3] = (Object) "\":\"";
      jSONScanner0.ch = '-';
      jSONScanner0.lexError("WriteClassName", objectArray0);
      int int0 = 1696;
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      JSONScanner jSONScanner1 = new JSONScanner("\":\"");
      jSONScanner1.charAt(93);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner2 = new JSONScanner("vofmwkOWwkN");
      jSONScanner2.scanUUID('K');
      jSONScanner2.scanFloat('l');
      // Undeclared exception!
      try { 
        jSONScanner2.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. v
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = 18;
      String string0 = "fIU,0>";
      JSONScanner jSONScanner0 = new JSONScanner("fIU,0>", 18);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "fIU,0>";
      objectArray0[1] = (Object) "fIU,0>";
      Object object0 = new Object();
      objectArray0[2] = object0;
      jSONScanner0.lexError("fIU,0>", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFloat('J');
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('g');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("an+-");
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = ' ';
      charArray0[2] = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'Z');
      charArray0[3] = 't';
      charArray0[4] = '2';
      int int0 = 1786;
      jSONReaderScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 2328);
      jSONScanner0.stringDefaultValue = "new";
      jSONScanner0.getTimeZone();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2328, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", (-2));
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('^', 'T', 'x', 'T', '}', 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lov=7K?Le0y:9LgvQ>B");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      char[] charArray1 = new char[2];
      charArray1[0] = ')';
      charArray1[1] = '&';
      jSONScanner0.scanFieldString(charArray1);
      charArray0[2] = '\"';
      jSONScanner0.scanUUID('A');
      charArray0[3] = 'n';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.bytesValue();
      assertEquals((-2), jSONScanner0.matchStat);
      
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      boolean boolean0 = jSONScanner0.isEnabled(53, 1532);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1OGFC&@RlJ^hFN~0Gr}", (-612));
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken((-4058));
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(17);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'O');
      assertEquals('G', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-461));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('c');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'c');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K$p");
      JSONScanner jSONScanner1 = new JSONScanner("K$p", 0);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("9QleeOMz", 58);
      jSONScanner2.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken((-3926));
      SymbolTable symbolTable0 = new SymbolTable(19);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("tii");
      boolean boolean0 = jSONScanner0.scanBoolean('z');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z~P_<j&$U-F)Iz*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", (-1));
      String string0 = "3!(hDrY";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3!(hDrY", (-2083));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("3!(hDrY");
      jSONReaderScanner1.scanLong('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "25Y=";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2972));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 2, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("lpA", 3678080);
      jSONScanner0.scanBoolean('8');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lpA", 58);
      char[] charArray1 = new char[4];
      charArray1[0] = '.';
      charArray1[1] = ';';
      charArray1[2] = '8';
      charArray1[3] = '}';
      jSONScanner0.scanFieldFloat(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - l, info : pos 0, json : lpA
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      char[] charArray1 = new char[8];
      charArray1[0] = '&';
      charArray1[1] = '&';
      charArray1[2] = '&';
      charArray1[3] = '&';
      charArray1[4] = '&';
      charArray1[5] = '&';
      charArray1[6] = '&';
      charArray1[7] = '&';
      JSONScanner jSONScanner1 = new JSONScanner("oracle.sql.", 2328);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 1, info : pos 0, json : 1cN`vV@K;oYK8nE}-s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":T@hT/Zb");
      Locale locale0 = Locale.CANADA_FRENCH;
      jSONScanner0.scanFloat('J');
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'z';
      charArray0[2] = 'Q';
      charArray0[3] = 'z';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('r');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":T@hT/Zb");
      jSONScanner0.isEnabled(3476);
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanLong('3');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("not match ");
      jSONScanner1.isEnabled(48, 43);
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "/oa^NC-_{";
      objectArray0[2] = (Object) "/oa^NC-_{";
      objectArray0[3] = (Object) "unclosed single-quote string";
      objectArray0[4] = (Object) "/oa^NC-_{";
      objectArray0[5] = (Object) "/oa^NC-_{";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "/oa^NC-_{";
      objectArray0[8] = (Object) "/oa^NC-_{";
      jSONScanner0.lexError("/oa^NC-_{", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      char[] charArray1 = new char[7];
      charArray1[0] = '\u001A';
      charArray1[1] = '\u001A';
      charArray1[2] = 'D';
      charArray1[3] = '\u001A';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(1696);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 9, json : unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vVql{", 326);
      JSONScanner jSONScanner0 = new JSONScanner("vVql{", 326);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      SymbolTable symbolTable0 = new SymbolTable(1825);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'M');
      jSONReaderScanner0.features = 1825;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1800), (-1800));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1800
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%F", 1251);
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = '';
      charArray0[2] = '8';
      charArray0[3] = 'D';
      charArray0[4] = '>';
      charArray0[5] = '1';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanDecimal('_');
      assertEquals(1251, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('?');
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = '?';
      charArray0[3] = 'y';
      charArray0[4] = '?';
      charArray0[5] = 'H';
      charArray0[6] = '?';
      charArray0[7] = 'H';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanString('?');
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U~");
      Locale locale0 = Locale.JAPAN;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M", 0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = '0';
      charArray0[4] = 's';
      charArray0[5] = 'Q';
      charArray0[6] = 'U';
      charArray0[7] = 'j';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '/';
      JSONScanner jSONScanner0 = new JSONScanner("}/QeX", 1905);
      jSONScanner0.nextToken();
      jSONScanner0.indexOf('/', 3188);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.stringDefaultValue = "unclosed string : ";
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '^';
      char char0 = 'l';
      charArray0[2] = 'l';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONLexerBase.readString(charArray0, 0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4HDU!", 28);
      jSONReaderScanner0.scanType("4HDU!");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      JSONScanner jSONScanner0 = new JSONScanner("$:");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.isEOF();
      assertEquals(3678080, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z");
      jSONReaderScanner0.nextIdent();
      assertEquals('h', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      int int0 = (-54);
      JSONScanner jSONScanner0 = new JSONScanner(".%c\"T_#", (-54));
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("utf8 decode error, ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{ ~;} FnTj^M4kQ>L", (-1067));
      jSONScanner0.scanDecimal('\'');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'w';
      jSONReaderScanner0.matchStat = (int) '\'';
      charArray0[5] = '\'';
      charArray0[6] = 'w';
      charArray0[7] = '\'';
      charArray0[8] = 'w';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.nextToken(2734);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C");
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner1.close();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner1.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      SymbolTable symbolTable0 = new SymbolTable(1825);
      jSONReaderScanner0.features = 1825;
      jSONReaderScanner0.subString(0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z", 1825);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : pos 0, json : 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '\'';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanFalse();
      jSONScanner0.sp = 2161;
      char char0 = ' ';
      char char1 = '(';
      jSONScanner0.next();
      jSONScanner0.info();
      char char2 = '\\';
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('6', 'b', ' ', 'z', '(', '\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "~hDhY$8T:Z";
      objectArray0[1] = (Object) "~hDhY$8T:Z";
      objectArray0[4] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) jSONScanner0;
      jSONScanner0.lexError("scan true error", objectArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(116);
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('j');
      jSONScanner0.setToken(1696);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      JSONScanner jSONScanner0 = new JSONScanner("scan true error");
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldString(charArray0);
      System.setCurrentTimeMillis((-62784910L));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanType("25Y=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner("25Y=", (-2));
      jSONScanner0.hasSpecial = false;
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('^', 'T', 'm', 'T', '}', 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 127);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("is");
      String string0 = "scan true error";
      Object object0 = new Object();
      jSONScanner0.scanDecimal('s');
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("is", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-169));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFloat('p');
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanString('g');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", (-1));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(":", (-1));
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(":");
      jSONReaderScanner0.scanString();
      assertEquals((-1), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 78);
      jSONReaderScanner0.scanType((String) null);
      jSONReaderScanner0.scanType("not match ");
      char char0 = '/';
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = 3678080;
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      SymbolTable symbolTable0 = new SymbolTable(3678080);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray1, 3678080, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner0.scanDate('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('?');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%F", 1251);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('_');
      assertEquals(1251, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      JSONScanner jSONScanner0 = new JSONScanner("wkZ");
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("]eu0]", 0);
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner1.scanFloat('C');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner1.isEOF();
      jSONReaderScanner1.nextIdent();
      assertEquals('e', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner1.scanInt('1');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      char char0 = 't';
      JSONScanner jSONScanner0 = new JSONScanner("Q%");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      jSONReaderScanner0.sp = 34;
      JSONScanner jSONScanner0 = new JSONScanner("@", (-369));
      jSONScanner0.scanDate('=');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vVql{", 326);
      char[] charArray0 = new char[2];
      char char0 = '%';
      charArray0[0] = '%';
      charArray0[1] = '1';
      JSONScanner jSONScanner0 = new JSONScanner("zahc5W!5P89-p.", 326);
      jSONScanner0.scanFieldString(charArray0);
      char char1 = '\"';
      char char2 = 'A';
      JSONScanner jSONScanner1 = new JSONScanner("illegal ref, ", 26);
      jSONScanner1.scanUUID('1');
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      charArray1[0] = 'J';
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray1[1] = 'P';
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("", 32);
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("Z", 32);
      jSONScanner0.scanFieldBigInteger(charArray0);
      int int0 = 3450;
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-2), 3450);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%F", 1251);
      char char0 = 'c';
      jSONReaderScanner0.scanInt('c');
      char char1 = '_';
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      int int0 = 20;
      int int1 = (-2473);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char char0 = '6';
      int int0 = 2161;
      jSONScanner0.sp = 2161;
      char char1 = ' ';
      char char2 = '(';
      jSONScanner0.next();
      jSONScanner0.info();
      char char3 = '\\';
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('6', 'b', ' ', 'z', '(', '\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      jSONScanner0.eofPos = 18;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      jSONScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(", json : ");
      jSONScanner0.scanString('2');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ", 36);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      jSONScanner0.features = (-36);
      jSONScanner0.scanStringArray(list0, 'L');
      jSONScanner0.eofPos = 18;
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fIU,0>", 18);
      jSONScanner0.putChar('%');
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('x');
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("<T\"#;!", 3678080);
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\"/ZjG", 84);
      SymbolTable symbolTable0 = new SymbolTable(268);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'I';
      charArray0[2] = 'j';
      charArray0[3] = 'E';
      charArray0[4] = 'G';
      charArray0[5] = '}';
      charArray0[6] = '>';
      charArray0[7] = '7';
      int int0 = 229;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 229);
      jSONReaderScanner0.scanDouble('j');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '4';
      charArray0[2] = '\u001A';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1cN`vV@K;oYK8nE}-s", (-2));
      jSONReaderScanner0.nextToken((-2));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 119);
      jSONReaderScanner1.nextToken(43);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, ']');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      jSONReaderScanner0.scanLong('1');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, 120, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("uu");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("@type");
      jSONReaderScanner0.scanType(")%7]5 n");
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("89<Rov7Y~X()C", 89);
      long long0 = jSONReaderScanner3.scanLong('!');
      assertEquals(89L, long0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("Q%", 667);
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-431), 667);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '4';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1cN`vV@K;oYK8nE}-s", 17);
      jSONReaderScanner1.scanLong('\u0000');
      jSONReaderScanner1.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lpA", (-1331));
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = JSONLexer.NOT_MATCH;
      JSONScanner jSONScanner0 = new JSONScanner("lpA", (-1331));
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, ']');
      assertEquals((-1331), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z", 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "~hDhY$8T:Z";
      objectArray0[1] = (Object) jSONScanner0;
      jSONScanner0.lexError("~hDhY$8T:Z", objectArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      jSONScanner0.scanFieldFloat(charArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jSONScanner0.locale = locale0;
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.isEnabled(0, 0);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals('h', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[8];
      jSONReaderScanner0.nextToken();
      char[] charArray1 = new char[3];
      charArray1[0] = '&';
      charArray1[1] = 'D';
      charArray1[2] = '&';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      jSONScanner0.scanFieldString(charArray1);
      jSONScanner0.scanUUID('&');
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.bytesValue();
      Class<String> class0 = String.class;
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 26);
      jSONScanner1.scanFieldStringArray(charArray1, class0);
      jSONScanner0.isEnabled(26, 1532);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      int int0 = 17;
      char char0 = 'f';
      jSONReaderScanner0.scanDate('f');
      SymbolTable symbolTable0 = new SymbolTable(4966);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-354), 0, 4966, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk", 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ii2jqYk";
      objectArray0[1] = (Object) jSONScanner0;
      jSONScanner0.lexError("~hDhY$8T:Z", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '\u001A';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      charArray0[6] = '\u001A';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner1 = new JSONScanner("^AF:{{%[yWzJ;(");
      jSONScanner1.scanFloat('\u001A');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&-.>TAP_<%+=UA", 36);
      jSONScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(36);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : &pos 0, json : &-.>TAP_<%+=UA
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tii");
      boolean boolean0 = jSONScanner0.scanBoolean('\u008D');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanType("illegal state, textLength is zero");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDh|dY$8T:Z", 0);
      int int1 = 1825;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q%");
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      SymbolTable symbolTable0 = new SymbolTable(48);
      jSONScanner0.scanSymbol(symbolTable0);
      charArray0[3] = 't';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('%', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 18);
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken(36);
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      JSONScanner jSONScanner0 = new JSONScanner("U3}c-", 0);
      jSONScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 114);
      jSONReaderScanner0.nextIdent();
      jSONScanner0.tokenName();
      jSONReaderScanner1.charAt(36);
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      char[] charArray0 = new char[1];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.config(feature0, true);
      charArray0[0] = '5';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = "89<Rov7Y~X()C";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 89);
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      char char0 = '!';
      JSONScanner jSONScanner0 = new JSONScanner("@type");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ti", 1777);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int0 = 2902;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(3678080, 2902);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      jSONScanner0.putChar('c');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('x');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.charAt(49);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$sXgo`-NvHw");
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$sXgo`-NvHw");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.charAt(0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$sXgo`-NvHw");
      jSONReaderScanner1.subString(0, 682);
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner("E{LywV|#");
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('J', 'g', 't', 'x', '-', 'g');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = 1544;
      JSONScanner jSONScanner0 = new JSONScanner("']d", 1544);
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'e';
      charArray0[2] = '\\';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      charArray0[5] = 'r';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      JSONScanner jSONScanner0 = new JSONScanner("25Y=");
      JSONScanner jSONScanner1 = new JSONScanner("net");
      jSONScanner0.scanString('i');
      jSONScanner1.scanFloat('H');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[2] = 'u';
      JSONScanner jSONScanner0 = new JSONScanner("9QleeOMz");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4489);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(19);
      SymbolTable symbolTable0 = new SymbolTable(4489);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = 36;
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[2] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36);
      jSONReaderScanner0.bp = 36;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDouble('n');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$s?K");
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.token();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[", (-2));
      jSONReaderScanner1.nextIdent();
      jSONReaderScanner1.scanLong(')');
      jSONReaderScanner1.charArrayCompare(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("u3r");
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner1.isEnabled(0, 66);
      jSONReaderScanner1.nextIdent();
      assertEquals(20, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      jSONReaderScanner0.subString(0, 97);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanBoolean('Q');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ghDh$$8T:Z", 0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" - ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 24);
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'q';
      charArray0[2] = 'j';
      charArray0[3] = 'd';
      stringReader0.ready();
      stringReader0.mark(24);
      charArray0[4] = '=';
      charArray0[5] = '#';
      charArray0[6] = '^';
      charArray0[7] = 'M';
      charArray0[8] = 's';
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-2));
      jSONScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 3678080);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = ';';
      charArray0[2] = 'C';
      charArray0[3] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 352, 352);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDecimal('s');
      assertEquals(24, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = '+';
      char[] charArray1 = new char[2];
      charArray1[0] = '+';
      charArray1[1] = '~';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[5] = '+';
      jSONScanner0.scanFieldStringArray(charArray0, 43, (SymbolTable) null);
      jSONScanner0.scanIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.scanString('\\');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"g0C");
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - \", info : pos 0, json : \"g0C
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", 39);
      jSONReaderScanner0.scanType("0)13M8S5KvD_91f");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 575);
      jSONReaderScanner0.nextToken(575);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(31);
      String string0 = "\"";
      StringReader stringReader0 = new StringReader("\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDouble('X');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      JSONScanner jSONScanner1 = new JSONScanner("true");
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dP/y*)yEAY_", 36);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      jSONScanner0.bytesValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanBoolean('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1));
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      jSONReaderScanner0.nextToken();
      charArray0[1] = '$';
      char[] charArray1 = new char[7];
      charArray1[0] = 'Y';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[2];
      charArray1[0] = ']';
      jSONReaderScanner0.scanFieldString(charArray0);
      char char0 = 'P';
      SymbolTable symbolTable0 = new SymbolTable(32);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      int int0 = jSONReaderScanner0.scanInt('m');
      assertEquals(89, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner0.scanDate('S');
      jSONReaderScanner1.scanDate('S');
      assertEquals(109, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-570L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      jSONReaderScanner0.nextToken(32);
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2726), (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) "\":\"";
      objectArray0[3] = (Object) "\":\"";
      jSONScanner0.ch = '-';
      jSONScanner0.lexError("WriteClassName", objectArray0);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong(':');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "/oa^NC-_{";
      objectArray0[2] = (Object) "/oa^NC-_{";
      objectArray0[3] = (Object) "unclosed single-quote string";
      objectArray0[4] = (Object) "/oa^NC-_{";
      objectArray0[5] = (Object) "/oa^NC-_{";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "/oa^NC-_{";
      objectArray0[8] = (Object) "/oa^NC-_{";
      jSONScanner0.lexError("/oa^NC-_{", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(1696);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFloat('m');
      int int0 = 923;
      jSONScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state.  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.sp = 2161;
      jSONScanner0.next();
      jSONScanner0.info();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2558));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2vM$|=-zOF/Wi", 18);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('B');
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.subString(97, 0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("unclosed string : ", objectArray0);
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.charAt(78);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner1 = new JSONScanner("unclosed string : ");
      jSONScanner1.scanUUID('\u001A');
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('1');
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 'W';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-2083));
      jSONReaderScanner0.scanLong('3');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner("_:LwRo %a6K},YHF;i", 3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) 'W';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[1] = (Object) jSONScanner0;
      JSONScanner jSONScanner1 = new JSONScanner("true");
      StringReader stringReader0 = new StringReader("_:LwRo %a6K},YHF;i");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextIdent();
      assertEquals(':', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lJc]k>f");
      jSONReaderScanner0.pos = 8;
      int int0 = (-3230);
      jSONReaderScanner0.isEnabled(5, (-3230));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("m?)j!!uP");
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('}');
      SymbolTable symbolTable0 = new SymbolTable(3253);
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 3253, 3253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3253
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 'm');
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner1.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      char char0 = JSONLexer.EOI;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("~hDh", 3);
      jSONReaderScanner0.scanLong('a');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 32);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '|';
      charArray0[2] = ']';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("89<Rov7Y~X()C", 89);
      assertEquals(89, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('m');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("uu");
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1023, (-1));
      jSONReaderScanner2.scanIdent();
      jSONReaderScanner1.nextIdent();
      long long0 = jSONReaderScanner1.longValue();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(759L, long0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q%");
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanLong('1');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, (-2227));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~hDhY$8T:Z", 0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, true);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("~hDhY$8T:Z", 667);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(667, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('\u0095');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Rj}t1?MsV[!");
      int int0 = jSONScanner0.scanType("Rj}t1?MsV[!");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+f*;RxR; \">R");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5108);
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+f*;RxR; \">R", (-1));
      jSONReaderScanner1.nextToken(5108);
      jSONReaderScanner1.charArrayCompare(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-1), 224);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('?');
      char char0 = JSONLexer.EOI;
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '\u001A';
      charArray0[2] = 'H';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("null", 31);
      jSONScanner0.scanBoolean('^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1490, (-1603));
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1490, (-1577));
      jSONReaderScanner1.nextTokenWithChar(')');
      jSONReaderScanner1.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char char0 = '3';
      char char1 = 'W';
      char char2 = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N}r");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("25Y=");
      JSONScanner jSONScanner0 = new JSONScanner("25Y=");
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('\u008D');
      assertEquals(25.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$s", 1470);
      char[] charArray0 = new char[23];
      charArray0[0] = '=';
      charArray0[1] = '\'';
      charArray0[2] = '=';
      charArray0[3] = '\'';
      charArray0[4] = '=';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[20] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 66);
      jSONReaderScanner0.eofPos = 2;
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner1 = new JSONScanner("$s");
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      char[] charArray0 = new char[3];
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.scanInt('m');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("syntax error", 0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('>');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken(287);
      jSONScanner0.charAt(3);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONReaderScanner0.getCurrent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("92N+");
      Object object0 = new Object();
      jSONScanner0.scanDecimal('s');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("Jhdh");
      jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      char[] charArray1 = new char[2];
      charArray1[0] = 's';
      charArray1[1] = 'n';
      // Undeclared exception!
      try { 
        jSONScanner1.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.properties", 69);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3678080, 3678080);
      char[] charArray1 = new char[3];
      charArray1[0] = 'q';
      charArray1[1] = 'q';
      jSONReaderScanner0.scanDouble('q');
      charArray1[2] = 'q';
      jSONReaderScanner0.scanFieldDouble(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match q - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.scanInt('X');
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("60rxAPfX[++3D");
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      char char0 = '+';
      char char1 = '3';
      JSONScanner.checkDate('+', '+', '3', '3', '+', '%', 0, 2284);
      JSONScanner jSONScanner0 = new JSONScanner("ii2jqYk|G", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108);
      Locale locale0 = Locale.ROOT;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1cN`vV@K;oYK8nE}-s");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '4';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.nextToken(8);
      assertEquals('4', jSONReaderScanner0.getCurrent());
      
      jSONScanner0.scanLong('>');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '4';
      charArray0[0] = '4';
      char char1 = 'a';
      charArray0[1] = 'a';
      int int0 = 12;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      jSONReaderScanner0.subString(120, 12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.isBlankInput();
      char[] charArray1 = new char[3];
      charArray1[0] = '1';
      charArray1[1] = '1';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.getCalendar();
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'N';
      JSONScanner jSONScanner0 = new JSONScanner("t-aH=w'U@");
      jSONScanner0.scanFieldFloatArray(charArray0);
      int int0 = JSONLexer.NOT_MATCH_NAME;
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      int int0 = 36;
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "25Y=";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      JSONScanner jSONScanner0 = new JSONScanner("25Y");
      jSONScanner0.scanFloat('8');
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '+';
      charArray0[6] = '8';
      charArray0[7] = '8';
      charArray0[8] = '8';
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) "/oa^NC-_{";
      objectArray0[2] = (Object) "/oa^NC-_{";
      objectArray0[3] = (Object) "unclosed single-quote string";
      objectArray0[4] = (Object) "/oa^NC-_{";
      objectArray0[5] = (Object) "/oa^NC-_{";
      objectArray0[6] = (Object) jSONScanner0;
      objectArray0[7] = (Object) "/oa^NC-_{";
      objectArray0[8] = (Object) "/oa^NC-_{";
      char[] charArray0 = new char[2];
      objectArray0[1] = (Object) 'S';
      charArray0[1] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-1992));
      jSONReaderScanner0.scanDate('*');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u");
      TimeZone.getTimeZone("u");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFloat('J');
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.charAt(337);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONScanner jSONScanner1 = new JSONScanner("vofmwkOWwkN");
      char char0 = '-';
      jSONScanner1.scanUUID('-');
      jSONScanner1.calendar = null;
      jSONScanner1.scanFloat('6');
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. v
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[2] = '{';
      charArray0[3] = '=';
      charArray0[4] = '\'';
      int int0 = 47;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      int int1 = 0;
      jSONReaderScanner0.eofPos = 0;
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 47, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      int int0 = 31;
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("not");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("not", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "89<Rov7Y~X()C";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("89<Rov7Y~X()C", 32);
      PipedReader pipedReader0 = new PipedReader();
      jSONReaderScanner0.scanInt('c');
      BigDecimal bigDecimal0 = new BigDecimal((-2765));
      SymbolTable symbolTable0 = new SymbolTable(1251);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-364), (-1), 1023, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("25Y=");
      jSONReaderScanner0.scanLong('1');
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanBoolean('[');
      jSONScanner0.isEnabled((-1), 295);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      jSONReaderScanner1.nextIdent();
      assertEquals(9, jSONReaderScanner1.token());
  }
}
