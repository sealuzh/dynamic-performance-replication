/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:08:26 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 1944, 1944);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(2, 2, mockRandom0);
      DenseMatrix denseMatrix1 = DenseMatrix.constant(2, 2, 2);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom((-1053));
      DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix1);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      Random.setNextRandom(5);
      Random.setNextRandom(1);
      eigenDecompositor1.decompose();
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[4][3];
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication2 = new OoPlaceMatrixByItsTransposeMultiplication();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication3 = new OoPlaceMatrixByItsTransposeMultiplication();
      // Undeclared exception!
      try { 
        DenseMatrix.random((-600), (-1602), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(5, 5, mockRandom0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertFalse(ooPlaceMatrixByItsTransposeMultiplication1.equals((Object)ooPlaceMatrixByItsTransposeMultiplication0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(4, 4, mockRandom0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(matrixArray0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      Random.setNextRandom(3);
      Random.setNextRandom(1431800251);
      Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertFalse(ooPlaceMatrixByItsTransposeMultiplication1.equals((Object)ooPlaceMatrixByItsTransposeMultiplication0));
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[10] = (double) 9;
      doubleArray0[3] = (double) 9;
      DenseMatrix denseMatrix1 = DenseMatrix.constant(3, 9, 9.0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertEquals(3, denseMatrix1.rows());
      assertEquals(9, denseMatrix1.columns());
      assertFalse(denseMatrix1.equals((Object)denseMatrix0));
      assertNotNull(denseMatrix1);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertFalse(denseMatrix0.equals((Object)denseMatrix1));
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix1;
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertEquals(3, denseMatrix1.rows());
      assertEquals(9, denseMatrix1.columns());
      assertEquals(9, eigenDecompositor0.matrix.columns());
      assertEquals(3, eigenDecompositor0.matrix.rows());
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2291.7775369111496;
      doubleArray1[1] = 2291.7775369111496;
      doubleArray1[2] = (-6.857853521220742);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[2] = (-2417.176);
      doubleArray2[3] = 2291.7775369111496;
      doubleArray2[4] = 2291.7775369111496;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      Random.setNextRandom(0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(9, 9, mockRandom0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(matrixArray0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, eigenDecompositor0.matrix.rows());
      assertEquals(9, eigenDecompositor0.matrix.columns());
      
      int int0 = (-1039564837);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-1039564837), 2147171347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1039564837x2147171347
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2417.176);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2417.176);
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (-2417.176);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 2290.48;
      doubleArray3[2] = (-2417.176);
      doubleArray3[4] = (-2417.176);
      doubleArray3[5] = 2290.48;
      doubleArray3[6] = (-2417.176);
      doubleArray0[3] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertEquals(4, denseMatrix1.columns());
      assertEquals(4, denseMatrix1.rows());
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertNotNull(denseMatrix1);
      
      DenseMatrix denseMatrix2 = DenseMatrix.zero(3840, 3840);
      assertNotSame(denseMatrix2, denseMatrix1);
      assertNotSame(denseMatrix2, denseMatrix0);
      assertEquals(3840, denseMatrix2.columns());
      assertEquals(3840, denseMatrix2.rows());
      assertFalse(denseMatrix2.equals((Object)denseMatrix1));
      assertFalse(denseMatrix2.equals((Object)denseMatrix0));
      assertNotNull(denseMatrix2);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix1);
      assertEquals(4, denseMatrix1.columns());
      assertEquals(4, denseMatrix1.rows());
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertFalse(denseMatrix1.equals((Object)denseMatrix2));
      assertNotNull(eigenDecompositor0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      assertNotSame(denseMatrix0, denseMatrix2);
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(matrix0, denseMatrix2);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, denseMatrix1);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertFalse(denseMatrix0.equals((Object)denseMatrix2));
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(matrix0.equals((Object)denseMatrix2));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)denseMatrix1));
      assertNotNull(matrix0);
      
      Random.setNextRandom(1382355459);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, matrix0);
      assertNotSame(denseMatrix1, denseMatrix2);
      assertEquals(4, denseMatrix1.columns());
      assertEquals(4, denseMatrix1.rows());
      assertFalse(denseMatrix1.equals((Object)matrix0));
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertFalse(denseMatrix1.equals((Object)denseMatrix2));
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2417.176);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2291.522963792104;
      doubleArray2[0] = (-2417.176);
      doubleArray2[2] = (-2417.176);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = (-2417.176);
      doubleArray3[4] = (-2417.176);
      doubleArray3[5] = 2291.522963792104;
      doubleArray3[6] = (-2417.176);
      doubleArray0[3] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Random.setNextRandom(1411);
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertEquals(4, denseMatrix1.rows());
      assertEquals(4, denseMatrix1.columns());
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertNotNull(denseMatrix1);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertNotNull(eigenDecompositor0);
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotSame(denseMatrix0, denseMatrix1);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertTrue(denseMatrix0.equals((Object)denseMatrix1));
      assertNotNull(matrixArray0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1411, 1878.0);
      assertEquals(1411, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(1878.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7.087172218284905E-4, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1411, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1411, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      // Undeclared exception!
      rowMajorSparseMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2291.7775369111496;
      doubleArray1[1] = 2291.7775369111496;
      doubleArray1[2] = (-6.857853521220742);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2291.7775369111496;
      doubleArray2[2] = (-2417.176);
      doubleArray2[3] = 2291.7775369111496;
      doubleArray2[4] = 2.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray2;
      Random.setNextRandom(488);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      Random.setNextRandom((-25));
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, eigenDecompositor0.matrix.rows());
      assertEquals(4, eigenDecompositor0.matrix.columns());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2291.7775369111496;
      doubleArray1[1] = 2291.7775369111496;
      doubleArray1[2] = (-6.857853521220742);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2291.7775369111496;
      doubleArray2[2] = (-2417.176);
      doubleArray2[3] = 2291.7775369111496;
      doubleArray2[4] = 2.0;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      doubleArray1[1] = 2.0;
      doubleArray0[3] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      Random.setNextRandom(0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(matrixArray0);
      
      Random.setNextRandom(488);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2417.176);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2417.176);
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (-2417.176);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[4] = (-2417.176);
      doubleArray3[5] = 2290.48;
      doubleArray0[3] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(4, eigenDecompositor0.matrix.rows());
      assertEquals(4, eigenDecompositor0.matrix.columns());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertFalse(ooPlaceMatrixByItsTransposeMultiplication1.equals((Object)ooPlaceMatrixByItsTransposeMultiplication0));
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication1);
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      assertNotSame(ooPlaceMatrixByItsTransposeMultiplication0, ooPlaceMatrixByItsTransposeMultiplication1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertFalse(ooPlaceMatrixByItsTransposeMultiplication0.equals((Object)ooPlaceMatrixByItsTransposeMultiplication1));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      Random.setNextRandom(5);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2417.176);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-2417.176);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = (-2417.176);
      doubleArray3[4] = (-2417.176);
      doubleArray3[6] = (-2417.176);
      doubleArray0[3] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, eigenDecompositor0.matrix.columns());
      assertEquals(4, eigenDecompositor0.matrix.rows());
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, eigenDecompositor0.matrix.columns());
      assertEquals(4, eigenDecompositor0.matrix.rows());
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }
}
