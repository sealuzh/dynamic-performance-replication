/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:43:07 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      objectArray0[1] = (Object) "Hw]m\"";
      objectArray0[2] = (Object) "Hw]m\"";
      objectArray0[3] = (Object) "Hw]m\"";
      objectArray0[4] = (Object) "Hw]m\"";
      objectArray0[5] = (Object) "Hw]m\"";
      String string0 = Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('j');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)55;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte) (-118);
      byteArray1[5] = (byte) (-118);
      byteArray1[6] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E$zX{7O]/34M/+!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E$zX{7O]/34M/+!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*7eSUBs(BNSz?_vqDSJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7eSUBs(BNSz?_vqDSJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.replace("", "U3<.HvU7g", "U3<.HvU7g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-1546), false, '&');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readChar();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "goto_w";
      stringArray0[1] = "<Any exception>(0)";
      stringArray0[2] = "dcmpg";
      stringArray0[3] = "<Any exception>(0)";
      stringArray0[4] = "<Any exception>(0)";
      stringArray0[5] = "<Any exception>(0)";
      stringArray0[6] = "<Any exception>(0)";
      String string0 = Utility.methodTypeToSignature("<Any exception>(0)", stringArray0);
      assertEquals("(Lgoto_w;L<Any;Ldcmpg;L<Any;L<Any;L<Any;L<Any;)L<Any;", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(484, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("h<$*5t1b{rYC@", false);
      Utility.encode(byteArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.replace("%`%JR]_g4Qx:9#v", "Wq!1", "rR%7NX>%);.");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((byte) (-80));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.compactClassName("getStatic", "getStatic", false);
      assertEquals("getStatic", string0);
      
      int int0 = Utility.setBit(59, 59);
      assertEquals(134217787, int0);
      
      String string1 = Utility.compactClassName("", false);
      assertEquals("", string1);
      
      String string2 = Utility.getSignature("");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.compactClassName("L:V");
      try { 
        Utility.methodSignatureReturnType("L:V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L:V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang..0");
      assertEquals("java.lang..0", string0);
      
      String string1 = Utility.accessToString(139);
      assertEquals("public private static transient", string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 115;
      int int1 = 4;
      Utility.format(115, 4, false, '^');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "^115";
      objectArray0[1] = (Object) "^115";
      objectArray0[2] = (Object) "^115";
      objectArray0[3] = (Object) "^115";
      objectArray0[4] = (Object) "^115";
      objectArray0[5] = (Object) "^115";
      objectArray0[6] = (Object) "^115";
      objectArray0[7] = (Object) "^115";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("^115");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^115
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u001E');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)50;
      Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('j');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((byte)50);
      try { 
        Utility.methodSignatureReturnType("void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Ld:;V");
      assertEquals("d:", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "new";
      Utility.methodTypeToSignature("i}|Td", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ld:;V", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = Utility.searchOpcode("Expected class `");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format((short) (-1), 123, true, 'w');
      String string1 = Utility.compactClassName("-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = Utility.decode("Expected class `", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[1] = (Object) "Expected class `";
      objectArray0[2] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[3] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[4] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[5] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[6] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[7] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      objectArray0[8] = (Object) "-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("HoFUJ?;k)/{>2>-1sk*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HoFUJ?;k)/{>2>-1sk*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.signatureToString("B:Vh?/c");
      assertEquals("byte", string0);
      
      short short0 = Utility.searchOpcode("byte");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.convertString("(");
      assertEquals("(", string0);
      
      String string1 = Utility.convertString("ELh[3I");
      assertEquals("ELh[3I", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.getSignature("Wq!1");
      assertEquals("LWq!1;", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "freturn", "\\", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ow??M_jy{wd_PC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ow??M_jy{wd_PC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("JavaClass.debug");
      assertEquals("JavaClass.debug", string0);
      
      byte[] byteArray0 = Utility.decode("java.io.Serializable", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y`(T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`(T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.replace("oz6TF", "Lih*X2WJQ~/", (String) null);
      assertNotNull(string0);
      assertEquals("oz6TF", string0);
      
      String string1 = Utility.getSignature("oz6TF");
      assertEquals("Loz6TF;", string1);
      
      short short0 = Utility.searchOpcode("oz6TF");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.fillup("Lih*X2WJQ~/", (short) (-1), true, 'M');
      assertEquals("Lih*X2WJQ~/", string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.classOrInterface(229);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(229);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[5];
      mockPrintStream0.println((-1L));
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(137, byteArrayOutputStream0.size());
      
      String string0 = Utility.accessToString(229, true);
      assertEquals("public protected volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_String", true);
      assertEquals("char", string0);
      
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.classOrInterface(94);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.replace("W+d", "ireturn", "{acW=e`(uXw{0Tn");
      assertEquals("W+d", string0);
      
      int int0 = Utility.clearBit(87, 27);
      assertEquals(87, int0);
      
      short short0 = Utility.searchOpcode("ireturn");
      assertEquals((short)172, short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)24;
      String string0 = Utility.signatureToString("VT:M\"qn#4)h", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.methodSignatureReturnType("ZW#bcevV");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U2j*|]sNgsr=CA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U2j*|]sNgsr=CA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readChar();
      String string0 = Utility.compactClassName("lreturn", "x)P>t\"@:QgZ2I-B", true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\\", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      try { 
        Utility.typeOfSignature("7y@3fq3RoW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7y@3fq3RoW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = Utility.decode("static", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("drem", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `drem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.compactClassName("C? ");
      String string0 = Utility.compactClassName("[OB&X_gu'ovy:$WX");
      assertEquals("[OB&X_gu'ovy:$WX", string0);
      
      byte[] byteArray0 = Utility.decode("}rb%M9_", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[OB&X_gu'ovy:$WX";
      objectArray0[1] = (Object) " ";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("[OB&X_gu'ovy:$WX,  ", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_3", string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ldc2_w\t\t (0)", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-5);
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet(102, (byte) (-118));
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.signatureToString("Integer");
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)16;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("a1 c7 10", string1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "&3M3}6H:>0mUX8,TE";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "&3M3}6H:>0mUX8,TE";
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.available();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-2156), true, 'I');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      try { 
        Utility.methodSignatureArgumentTypes("(:s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C? ");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = MockFile.createTempFile("jsr_w", "arraylength", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) null;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.setBit(269, 24);
      Utility.clearBit((-74), 24);
      Utility.clearBit(24, 2730);
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jsr_w", (String) null, "zxG]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.replace("w", "short", "f2l");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q]|Iy1!a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q]|Iy1!a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "Y8W";
      try { 
        Utility.typeOfSignature("Y8W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y8W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.signatureToString("Deprecated attribute with length > 0");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("p-#ys");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p-#ys'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode(")DZ'7+v@2vl", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W+d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W+d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.classOrInterface(90);
      try { 
        Utility.methodSignatureToString("class", "class", "\n", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("lrem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lrem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)66;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "L|x";
      try { 
        Utility.methodSignatureArgumentTypes("L|x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L|x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      // Undeclared exception!
      try { 
        Utility.compactClassName("Yk", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = Utility.searchOpcode("Expected class `");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.format((short) (-1), (short) (-1), true, 'w');
      String string1 = Utility.compactClassName("-1");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = Utility.decode("Expected class `", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-1";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u001E');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)47;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("2$_", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble((-3457.99446));
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M");
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPool0.constantToString((Constant) constantDouble1);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("-3457.99446");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -3457.99446
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("(", "(", "i2b", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "", "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "P1V2sg/c";
      try { 
        Utility.typeOfSignature("P1V2sg/c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P1V2sg/c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-66);
      Utility.equals(byteArray0, byteArray0);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.compactClassName("2uiV6G*t");
      Utility.compactClassName("2uiV6G*t");
      Utility.convertString("org.apache.commons.io.filefilter.CanWriteFileFilter");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("org.apache.commons.io.filefilter.CanWriteFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.CanWriteFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('-');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("2B", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.format((byte) (-115), (byte) (-115), true, '\"');
      assertEquals("-115", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-120);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      Utility.decode("", false);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.compactClassName("strictfp");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.replace("L>p2(O,qdU`{", "L>p2(O,qdU`{", "L>p2(O,qdU`{");
      String string0 = Utility.signatureToString("Illegal type: ", true);
      String string1 = Utility.format((-3234), 1466, true, 'm');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = Utility.isSet(23, (-1383));
      assertFalse(boolean0);
      
      int int0 = Utility.setBit((-1383), (-1383));
      assertEquals((-1383), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87));
      assertEquals("0:    lload_1\n1:    f2i\n2:    iconst_5\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)69;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iflt\t\t#22618", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("dneg", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 103
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte) (-111);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$_$91", string0);
      
      byte[] byteArray2 = Utility.decode("$_$91", false);
      assertArrayEquals(new byte[] {(byte)47, (byte) (-111)}, byteArray2);
      
      String string1 = Utility.compactClassName("li8bXMILk=w*W6<r", "li8bXMILk=w*W6<r", false);
      assertEquals("li8bXMILk=w*W6<r", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.format((-1308), 69, true, 'q');
      String string1 = Utility.compactClassName("-1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      assertTrue(string1.equals((Object)string0));
      
      Utility.decode("-1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "-1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      objectArray0[1] = (Object) "-1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, -1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("]B3W}Dv");
      String string3 = Utility.accessToString(69);
      assertEquals("public protected volatile", string3);
      
      String string4 = Utility.fillup("-1308qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", 69, false, '2');
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble((-3457.99446));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantPool0.constantToString((Constant) constantDouble1);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.convertString("M");
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.isJavaIdentifierPart('I');
      Utility.fillup("B=Ft7nY3^", (byte)16, true, '&');
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        Utility.decode("=y(*fd!t$9o7:_rI", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "F<qTe)";
      Utility.signatureToString("F<qTe)", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Utility.accessToString((int) (byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      Utility.toHexString(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(255, 255);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(255);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4gqF!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4gqF!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2895, (-1102538760), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.compactClassName("C? ");
      String string0 = Utility.compactClassName("[OB&X_gu'ovy:$WX");
      assertEquals("[OB&X_gu'ovy:$WX", string0);
      
      byte[] byteArray0 = Utility.decode("}rb%M9_", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[OB&X_gu'ovy:$WX";
      objectArray0[1] = (Object) " ";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("[OB&X_gu'ovy:$WX,  ", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.read();
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("land", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)44;
      byteArray0[0] = (byte)64;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-56);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("4c.pNVpJ$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4c.pNVpJ$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      objectArray0[1] = (Object) "Hw]m\"";
      objectArray0[2] = (Object) "Hw]m\"";
      objectArray0[3] = (Object) "Hw]m\"";
      objectArray0[4] = (Object) "Hw]m\"";
      objectArray0[5] = (Object) "Hw]m\"";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("Hw]m\", Hw]m\", Hw]m\", Hw]m\", Hw]m\", Hw]m\"", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore\t\t%118", string1);
      
      String string2 = Utility.compactClassName("Hw]m\"");
      assertEquals("Hw]m\"", string2);
      
      String string3 = Utility.accessToString((int) (byte) (-11));
      assertEquals("public protected final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oj=9f+N'T", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oj=9f+N'T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)66;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readFloat();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("L|x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L|x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L>p2(O,qdU`{");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
      
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      int int0 = 199;
      int int1 = 78;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Integer");
      assertEquals("Integer", string0);
      
      byte[] byteArray0 = Utility.decode("h<$*5t1b{rY@", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Integer";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string1);
      assertEquals(11, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(11, byteArray0.length);
      assertEquals("istore_1", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.signatureToString("BootstrapMethods(");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.isSet(193, 415);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Deprecated attribute with length > 0", true);
      Utility.searchOpcode("double");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)18;
      byte byte0 = (byte)11;
      byteArray0[2] = (byte)11;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">uI0}4Tj[U|yJ52EN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >uI0}4Tj[U|yJ52EN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[9_%bGJ7gis4]80");
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("]02}.+54:", false);
      assertEquals("]02}.+54:", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.signatureToString("ZW#bcevV", true);
      assertEquals("boolean", string0);
      
      int int0 = Utility.clearBit((-1386), (-1386));
      assertEquals((-4195690), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.format((-1894), (-1894), false, ')');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dup2_x2", "-1894", "40wwwwwwww", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.convertString("ZW#bcevV");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-650), (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      Utility.isJavaIdentifierPart('|');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("L:;V", "", " arg");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-112);
      byteArray0[4] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%54", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("jaz]UN-f<d:.J");
      assertEquals("Ljaz]UN-f<d:/J;", string1);
      
      byte[] byteArray1 = Utility.decode("istore\t\t%54", false);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("isub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `isub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("q8q$}tl&KFO[Ww", "W(H[", "new", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q8q$}tl&KFO[Ww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.convertString("M");
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)94;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((int) (byte)94, true);
      assertEquals("private protected static final volatile", string0);
      
      Utility.accessToString((int) (byte)88, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private protected static final volatile";
      objectArray0[1] = (Object) (byte)88;
      objectArray0[2] = (Object) (byte)88;
      objectArray0[3] = (Object) (byte) (-123);
      objectArray0[4] = (Object) "private protected static final volatile";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("private protected static final volatile, 88, 88, -123, private protected static final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2880, 163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Fs)r");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.getSignature(", length = ");
      try { 
        Utility.typeOfMethodSignature("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)127;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 799, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(", low = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.fillup("WRz2;X=X", 5730, false, 'j');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) "WRz2;X=X";
      objectArray0[4] = (Object) "WRz2;X=X";
      String string1 = Utility.printArray(objectArray0, false, false);
      Utility.accessToString((-798), true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "private volatile transient abstract strictfp synthetic annotation enum";
      stringArray0[1] = string1;
      stringArray0[2] = "WRz2;X=X";
      stringArray0[3] = "&.ow`zL05|E~\"!Ah";
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = "WRz2;X=X";
      // Undeclared exception!
      Utility.methodTypeToSignature(string0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-12);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte)6, true);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("GBJtptYzl ;c/R%x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GBJtptYzl ;c/R%x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.replace("qHv!8r:<MQkJD\\,", "invokeinterface", "\\");
      Utility.getSignature("Kkkgz'$BHLwT");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9n1[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9n1[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1|8(?YB7V>X0ELey4\"V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1|8(?YB7V>X0ELey4\"V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = Utility.decode("{\"java.lang.Object@2baa43f4\"}", false);
      Object object1 = new Object();
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart('E');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((-4260));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("{\"java.lang.Object@2baa43f4\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{\"java.lang.Object@2baa43f4\"}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.encode(byteArray0, false);
      Utility.isSet(65, 10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readDouble();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "pop2";
      objectArray0[1] = (Object) null;
      Utility.signatureToString("C[Wj{&F]w..`*N&<I9", false);
      Utility.accessToString(937);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("et{Y", "et{Y", "et{Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: et{Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.signatureToString("Deprecated attribute with length > 0", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1415, (-630));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V#Ef.=~vCr}BC&RN\fZ");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Sfk@S{ImP@AK%j";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.classOrInterface(3082);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(475, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName(",9Siv5D\"O.0E");
      assertEquals(",9Siv5D\"O.0E", string0);
      
      byte[] byteArray0 = Utility.decode(",9Siv5D\"O.0E", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore\t\t%83", string1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.format((-1724), 'q', false, '_');
      Utility.compactClassName("checkcast");
      byte[] byteArray0 = Utility.decode("instanceof", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "checkcast";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "checkcast";
      objectArray0[4] = (Object) "GpoH = ";
      objectArray0[5] = (Object) "instanceof";
      Utility.printArray(objectArray0, false, true);
      Utility.isJavaIdentifierPart('q');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((-1724));
      Utility.isJavaIdentifierPart('_');
      Utility.accessToString((-1724), true);
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = Utility.clearBit((-1675), 255);
      assertEquals(2147481973, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2363), 2998, false);
      assertEquals("0:    iconst_0\n", string0);
      
      int int1 = Utility.setBit((-2667), 85);
      assertEquals((-2667), int1);
      
      String string1 = Utility.classOrInterface(2998);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%/ZswY3#Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %/ZswY3#Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("f2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HoFUJ?;k)/{>2>-1sk*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HoFUJ?;k)/{>2>-1sk*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-82);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("ff 05 ae");
      String string0 = "kO ;=XC17/jCV!`{";
      Utility.searchOpcode("kO ;=XC17/jCV!`{");
      Utility.decode("kO ;=XC17/jCV!`{", false);
      Utility.compactClassName("#LrSoGfi/&<\"L+-UCe", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iKS%nqPZR-]XY?C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iKS%nqPZR-]XY?C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L;`");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.methodSignatureReturnType("L;`", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T\"&F");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "T\"&F";
      objectArray0[1] = (Object) "T\"&F";
      objectArray0[2] = (Object) "T\"&F";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 275, (-738), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5535), (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "getSttic";
      Utility.compactClassName("getSttic", "getSttic", true);
      Utility.setBit(59, 59);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";", ";", "dup_x2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#-14647", string0);
      
      String string1 = Utility.classOrInterface((byte) (-58));
      assertEquals("interface", string1);
      
      String string2 = Utility.methodTypeToSignature("&3M3}6H:>0mUX8,TE", (String[]) null);
      assertEquals("()L&3M3}6H:>0mUX8,TE;", string2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#CP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #CP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.getSignature("!");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1109), 0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*RAe|E8@ul?6{._:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 201, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("lshr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      stringArray0[1] = "w1,w.Ijw 4u";
      stringArray0[2] = "int";
      stringArray0[3] = "w1,w.Ijw 4u";
      stringArray0[4] = "w1,w.Ijw 4u";
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      byteSequence0.close();
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName(".x");
      byte[] byteArray0 = Utility.decode("IF/1rEr", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte)95;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-119));
      assertEquals("0:    aload_0\n1:    monitorenter\n2:    impdep2\n3:    lstore_0\n4:    lshr\n5:    l2f\n6:    return\n7:    ddiv\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("$^H9#eB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $^H9#eB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "Yw ?.gK\"72Ofo,Y";
      String string1 = "anewarray";
      // Undeclared exception!
      try { 
        Utility.getSignature("[z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 104, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = Utility.decode("{\"java.lang.Object@4bac6fa7\"}", false);
      Object object1 = new Object();
      Utility.printArray(objectArray0, true, false);
      Utility.isJavaIdentifierPart('E');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface((-4260));
      Utility.isJavaIdentifierPart('E');
      try { 
        Utility.methodSignatureReturnType("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("boolean");
      Utility.fillup("-", 172, true, 'W');
      PrintStream printStream0 = mockPrintStream0.append('J');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "boolean";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) printStream0;
      objectArray0[4] = (Object) "boolean";
      objectArray0[5] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable((-916), 163, (-916), (-916), (-916), (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2549), (-2549), localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "dreturn", true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.classOrInterface(153);
      MockFile mockFile0 = new MockFile("class");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintStream0.println(153);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      mockPrintStream0.format(locale0, "M>`C", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray1);
      assertEquals(12L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.replace("wide", "wide", "wide");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)113;
      objectArray0[1] = (Object) (byte)113;
      objectArray0[2] = (Object) (byte)113;
      objectArray0[3] = (Object) (byte)113;
      Utility.printArray(objectArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.replace("L>p2(O,qdU`{", "L>p2(O,qdU`{", "L>p2(O,qdU`{");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L>p2(O,qdU`{";
      stringArray0[1] = "L>p2(O,qdU`{";
      Utility.methodTypeToSignature("a4 00 00 00 00", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L>p2(O,qdU`{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L>p2(O,qdU`{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "P1V2sg/c";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P1V2sg/c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P1V2sg/c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(171, 171);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(175, 171);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-93);
      byteArray0[0] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)85;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6UI~Y^k-S`@}|";
      Utility.methodTypeToSignature("5p!$N!3w7gZS^>wh", stringArray0);
      Object object0 = new Object();
      Utility.printArray((Object[]) stringArray0, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iflt\t\t#0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iflt\t\t#0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "27>B{<GVF[GqK";
      // Undeclared exception!
      try { 
        Utility.getSignature("27>B{<GVF[GqK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[GqK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Integer");
      byte[] byteArray0 = Utility.decode("h<$*5t1b{rY@", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Integer";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = ", low = ";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ", low = ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.read();
      byteSequence0.read();
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "Xb*QVBOcXMda:[-[% b";
      // Undeclared exception!
      try { 
        Utility.getSignature("Xb*QVBOcXMda:[-[% b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[-[% b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.convertString("]");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 176, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)80;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString(":;Et`[<~8vx11;Q2Y");
      assertEquals(":;Et`[<~8vx11;Q2Y", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      stringArray0[2] = "int";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.replace("breakpoint", "0z!HlAi}rbt1KyZB@", (String) null);
      String string1 = Utility.signatureToString("SAME_LOCALS_1_STACK", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-67);
      byteArray0[3] = (byte) (-121);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.replace("L>p2(O,qdU`{", "L>p2(O,qdU`{", "L>p2(O,qdU`{");
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte) (-24);
      byteArray1[4] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)69;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.replace("oz6TF", "Lih*X2WJQ~/", (String) null);
      Utility.getSignature("oz6TF");
      Utility.searchOpcode("oz6TF");
      // Undeclared exception!
      Utility.fillup("Lih*X2WJQ~/", 32767, true, 'M');
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ifnull";
      stringArray0[1] = "ifnull";
      stringArray0[2] = "ifnull";
      stringArray0[3] = "ifnull";
      stringArray0[4] = "";
      String string0 = Utility.methodTypeToSignature("ifnull", stringArray0);
      assertEquals("(Lifnull;Lifnull;Lifnull;Lifnull;L;)Lifnull;", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.getSignature("");
      int int0 = Utility.setBit(82, (-2391));
      assertEquals(594, int0);
      
      String string0 = Utility.fillup("", 665, true, '&');
      assertEqualsstring0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-117);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.accessToString((int) (byte)47, true);
      assertEquals("public private protected static", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "Q)G:@XyM";
      try { 
        Utility.typeOfSignature("Q)G:@XyM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q)G:@XyM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "_ENI5ntJ-4wP-W!8i-", "aaload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("abLM*\"&y+~K$ELy?=UI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `abLM*\"&y+~K$ELy?=UI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.typeOfSignature("T\"&F");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "T\"&F";
      objectArray0[1] = (Object) "T\"&F";
      objectArray0[2] = (Object) "T\"&F";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)14;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 219, (-696), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bl0Pr", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "bl0Pr";
      Utility.isJavaIdentifierPart('Q');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.signatureToString("Ld\":;V");
      Utility.printArray((Object[]) null, true, false);
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)37;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('A');
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup2_x2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2_x2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      Utility.encode(byteArray0, false);
      Utility.isSet(65, 10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "lushr";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "istore\t\t%72";
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) "&3M3}6H:>0mUX8,TE";
      objectArray0[6] = (Object) null;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Utility.printArray(objectArray0, true, false);
      String string1 = Utility.replace("lushr", "ior", "SourceFile: ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+4d;*<6+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4d;*<6+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("mlL\")X|49hR3rpy6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X|49hR3rpy6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('m');
      String string0 = Utility.classOrInterface((-298));
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString((-1327), true);
      assertEquals("public final volatile transient strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte)0;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "w1,w.Ijw 4u";
      Utility.searchOpcode("w1,w.Ijw 4u");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "dA\"=hWYak_R1{", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("{java.lang.Object@2fbffc37, java.lang.Object@71281cef, java.lang.Object@1133ed89, java.lang.Object@8174ae4}", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.compactClassName("getStatic", "getStatic", true);
      Utility.setBit(59, 59);
      String string0 = "_oX+WT<J6`e0eJ";
      Utility.replace("s.", "s.", "_oX+WT<J6`e0eJ");
      Utility.accessToString((-112));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)69;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 63
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Utility.printArray((Object[]) stringArray0, true, false);
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = ",^$sF`0(Op";
      try { 
        Utility.typeOfSignature(",^$sF`0(Op");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,^$sF`0(Op
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 259;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 259, 259);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-15), 97);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";TZjP:0.'QBf?1DMY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;TZjP:0.'QBf?1DMY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-67);
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-59);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte) (-125);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-59);
      byteArray1[7] = (byte)115;
      byteArray1[8] = (byte)115;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.format((short)254, 'w', false, 'U');
      Utility.compactClassName("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU254", false);
      byte[] byteArray0 = Utility.decode("F", false);
      Utility.isJavaIdentifierPart('w');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface((short)254);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.read();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("dup2_x2", "}Pf", false);
      assertEquals("dup2_x2", string0);
      
      String string1 = Utility.accessToString(111);
      assertEquals("public private protected static synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)88;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(180, 183);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, 405);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1307, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5535), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "^>3jU4M3U";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^>3jU4M3U");
      try { 
        Utility.methodSignatureReturnType("UdY`iZX;Q0S\"r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UdY`iZX;Q0S\"r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('a');
      Utility.isJavaIdentifierPart('a');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "monitorenter", ";", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)29;
      String string0 = "static";
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Code code0 = new Code((byte)29, (-699), 2347, 4, byteArray0, codeExceptionArray0, (Attribute[]) null, constantPool0);
      code0.getLocalVariableTable();
      try { 
        Utility.methodSignatureToString("7>s'>", "7>s'>", "static", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7>s'>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      stringArray0[1] = "w1,w.Ijw 4u";
      stringArray0[2] = "int";
      stringArray0[3] = "w1,w.Ijw 4u";
      stringArray0[4] = "w1,w.Ijw 4u";
      stringArray0[5] = "w1,w.Ijw 4u";
      stringArray0[7] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-55);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("B..v?)KloKmy.)N7(");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = Utility.clearBit(117, 2794);
      assertEquals(117, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.replace("3e 00", "S", "'");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(60);
      assertEquals("protected static final synchronized", string2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R,t4xj7,I,;+O");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) "protected static final synchronized";
      objectArray0[2] = (Object) (byte)62;
      objectArray0[3] = (Object) "3e 00";
      objectArray0[4] = (Object) "3e 00";
      objectArray0[5] = (Object) "3e 00";
      objectArray0[6] = (Object) (byte)62;
      objectArray0[7] = (Object) "putstatic";
      objectArray0[8] = (Object) "_oX+WT<J6`e0eJ";
      mockPrintWriter0.format("putstatic", objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{0, protected static final synchronized, 62, 3e 00, 3e 00, 3e 00, 62, putstatic, _oX+WT<J6`e0eJ}", string3);
      
      String string4 = Utility.compactClassName("wide", true);
      assertEquals("wide", string4);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Integer");
      assertEquals("Integer", string0);
      
      byte[] byteArray0 = Utility.decode("h<$*5t1b{rY@", false);
      assertEquals(11, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Integer";
      objectArray0[1] = (Object) "Integer";
      objectArray0[2] = (Object) "Integer";
      objectArray0[3] = (Object) fileSystemHandling0;
      Utility.printArray(objectArray0, true, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("{Integer, Integer, Integer, org.evosuite.runtime.testdata.FileSystemHandling@46317687}");
      String string1 = Utility.accessToString(512);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X/G</2k\"1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X/G</2k\"1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Synthetic attribute with length > 0");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet((-427), 1040);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6UI~Y^k-S`@}|";
      String string0 = Utility.methodTypeToSignature("5p!$N!3w7gZS^>wh", stringArray0);
      assertEquals("(L6UI~Y^k-S`@}|;)L5p!$N!3w7gZS^>wh;", string0);
      
      Object object0 = new Object();
      String string1 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("6UI~Y^k-S`@}|", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.setBit((-1389), (byte) (-65));
      assertEquals((-1389), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5jUr$tU0I^[iKm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5jUr$tU0I^[iKm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.compactClassName("instanceof", " (", true);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ifle\t\t#-2953", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("if_acmpeq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.signatureToString("T7UG!`?s HrX;", false);
      assertEquals("7UG!`?s HrX", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("C? ", "C? ", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C? 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 512);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Integer");
      byte[] byteArray0 = Utility.decode("\n", false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Integer";
      objectArray0[2] = (Object) "h<$*5t1b{rY@";
      objectArray0[3] = (Object) "Integer";
      Utility.printArray(objectArray0, true, false);
      Utility.isJavaIdentifierPart('j');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "NewObject";
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?roC%S*1&j%M6B@JR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?roC%S*1&j%M6B@JR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(475, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName(",9Siv5D\"O.0E");
      byte[] byteArray0 = Utility.decode(",9Siv5D\"O.0E", false);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-2160L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger(52);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1131, 76);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (-2714));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.compactClassName(".0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart('&');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)13, (byte) (-21));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.signatureToString("Ld:;V", true);
      assertEquals("d:", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Methodref[10](class_index = 13, name_and_type_index = -21)}", string1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte)26, (byte)17);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("JavaClass.debug");
      assertEquals("JavaClass.debug", string0);
      
      byte[] byteArray0 = Utility.decode("java.io.Serializable", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ladd", string1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.compactClassName("strictfp");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      String string0 = Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)29);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifle");
      assertEquals((short)158, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload\t\t%201", string0);
      
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.classOrInterface((byte)76);
      assertEquals("class", string1);
      
      String string2 = Utility.methodTypeToSignature("class", (String[]) null);
      assertEquals("()Lclass;", string2);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = 741;
      Utility.clearBit(741, 741);
      boolean boolean0 = false;
      Utility.compactClassName("ifle", ",p{Nz1Z`(GON2 /", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ifle", ",p{Nz1Z`(GON2 /");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ,p{Nz1Z`(GON2 /
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[7] = "";
      Utility.methodTypeToSignature("", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.convertString("$3Q*");
      assertEquals("$3Q*", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.methodSignatureReturnType("ZW#bcevV");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Utility.classOrInterface((-2394));
      Utility.clearBit((-2394), 246);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      int int0 = 190;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(190, 0);
      constantArray0[0] = (Constant) constantNameAndType0;
      int int1 = 0;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("r\"D<FC<'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `r\"D<FC<''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "8z7K[";
      objectArray0[1] = (Object) "8z7K[";
      objectArray0[2] = (Object) "8z7K[";
      objectArray0[3] = (Object) "8z7K[";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "8z7K[";
      objectArray0[6] = (Object) "8z7K[";
      objectArray0[7] = (Object) "8z7K[";
      String string0 = Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5535), (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)32;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-112);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte)91, 112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.setBit(68, 2948);
      Utility.compactClassName("goto");
      byte[] byteArray0 = Utility.decode("goto", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("sZ", false);
      Utility.equals(byteArray1, byteArray1);
      Utility.encode(byteArray1, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.fillup("j/*a b$2!)5Ff", 68, false, '@');
      Utility.equals(byteArray0, byteArray0);
      Utility.format(1977, 68, false, '@');
      Utility.getSignature("sZ");
      Utility.classOrInterface((-26));
      try { 
        Utility.methodSignatureReturnType("ldc_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldc_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)48;
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, 2960);
      Utility.convertString("0:    lconst_1\n1:    i2f\n2:    iload\t\t%55\n4:    astore_3\n5:    faload\n");
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.reset();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = Utility.convertString("Fs)r");
      assertEquals("Fs)r", string0);
      
      String string1 = Utility.signatureToString("Fs)r");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-31);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$d0$A$cc$x$ae$e1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -52
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (-1349));
      assertEquals("1:    aconst_null\n2:    aconst_null\n3:    ifne\t\t#260\n6:    aconst_null\n", string0);
      
      byte byte0 = Utility.typeOfSignature("F d");
      assertEquals((byte)6, byte0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1:    aconst_null\n2:    aconst_null\n3:    ifne\t\t#260\n6:    aconst_null\n";
      stringArray0[1] = "F d";
      stringArray0[2] = "F d";
      stringArray0[3] = "dC~";
      stringArray0[4] = "1:    aconst_null\n2:    aconst_null\n3:    ifne\t\t#260\n6:    aconst_null\n";
      stringArray0[5] = "1:    aconst_null\n2:    aconst_null\n3:    ifne\t\t#260\n6:    aconst_null\n";
      stringArray0[6] = "F d";
      stringArray0[7] = "F d";
      String string1 = Utility.methodTypeToSignature("1:    aconst_null\n2:    aconst_null\n3:    ifne\t\t#260\n6:    aconst_null\n", stringArray0);
      assertEquals("(L1:;LF;LF;LdC~;L1:;L1:;LF;LF;)L1:;", string1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-28);
      String string0 = Utility.accessToString((int) (byte)16);
      assertEquals("final", string0);
      
      byte[] byteArray1 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte)16;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)58;
      byteArray2[3] = (byte)58;
      boolean boolean0 = Utility.equals(byteArray1, byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "P1V2sg/c";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "P1V2sg/c";
      objectArray0[3] = (Object) "P1V2sg/c";
      objectArray0[4] = (Object) "P1V2sg/c";
      objectArray0[5] = (Object) "P1V2sg/c";
      objectArray0[6] = (Object) "P1V2sg/c";
      objectArray0[7] = (Object) "P1V2sg/c";
      objectArray0[8] = (Object) "P1V2sg/c";
      Utility.printArray(objectArray0, false, false);
      Utility.methodSignatureReturnType("DI[d#`ttj\">5RHKD[@y", false);
      try { 
        Utility.typeOfMethodSignature("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type array can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      String string0 = Utility.compactClassName("Deprecated attributewith length > 0");
      assertEquals("Deprecated attributewith length > 0", string0);
      
      byte[] byteArray1 = Utility.decode("Deprecated attributewith length > 0", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("4IQR");
      assertEquals("4IQR", string0);
      
      byte[] byteArray1 = Utility.decode("_I>ANElQu+M4'", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte byte0 = (byte)5;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-42);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), 47, false);
      Utility.convertString("0:    iconst_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    saload\n4:    iconst_2\n5:    <illegal opcode>\n");
      try { 
        Utility.methodSignatureReturnType("0:    iconst_2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    saload\n4:    iconst_2\n5:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    iconst_2
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    saload
         // 4:    iconst_2
         // 5:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.getSignature(", length = ");
      try { 
        Utility.typeOfMethodSignature("L,;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L,;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!g(3XKpn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g(3XKpn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = Utility.signatureToString("C? ");
      assertEquals("char", string0);
      
      Utility.searchOpcode("ifle");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.format(229, 106, true, '\\');
      Utility.isSet(231, 183);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-49);
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)40;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.clearBit(117, 2794);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = 115;
      int int1 = 4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(115, 4, false, '^');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "^115";
      objectArray0[1] = (Object) "^115";
      objectArray0[2] = (Object) "^115";
      objectArray0[3] = (Object) "^115";
      objectArray0[4] = (Object) "^115";
      objectArray0[5] = (Object) "^115";
      objectArray0[6] = (Object) "^115";
      objectArray0[7] = (Object) "^115";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.-1wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = "int";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-89);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/GLAnL=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /GLAnL=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l0\bgsT3G";
      stringArray0[1] = "l0\bgsT3G";
      stringArray0[2] = "l0\bgsT3G";
      stringArray0[3] = "l0\bgsT3G";
      stringArray0[4] = "l0\bgsT3G";
      stringArray0[5] = "l0\bgsT3G";
      stringArray0[6] = "l0\bgsT3G";
      stringArray0[7] = "l0\bgsT3G";
      Utility.methodTypeToSignature("l0\bgsT3G", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifle");
      assertEquals((short)158, short0);
      
      byte[] byteArray0 = Utility.decode("+}w(}L%MS7:#Ku$&", false);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.reset();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      try { 
        Utility.typeOfSignature("6]^'b<xz$]M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6]^'b<xz$]M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.format((short)254, 'w', false, 'U');
      Utility.compactClassName("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU254", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Integer");
      byte[] byteArray0 = Utility.decode("Integer", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-15), 97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)123;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d7$dd$A$a49$7b", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = Utility.compactClassName(":\u0000QqjAwk^L4,`g:H");
      assertEquals(":\u0000QqjAwk^L4,`g:H", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)66;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-120);
      byteArray1[2] = (byte) (-120);
      byteArray1[3] = (byte) (-111);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = Utility.decode("J!BB8'q~?v@>G", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "jT_28=3XDxf%,", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("System");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.replace("mlL\")X|49hR3rpy6", "mlL\")X|49hR3rpy6", "mlL\")X|49hR3rpy6");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ixor", "iand", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[0] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface(10);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "w1,w.Ijw 4u";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      stringArray0[2] = "int";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-60);
      byte byte0 = (byte)21;
      byteArray1[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)21, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte byte0 = (byte) (-70);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      byte[] byteArray1 = Utility.decode("0*u];<", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char char0 = 'b';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*RAe|E8@ul?6{._:", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("aload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("M8t=w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M8t=w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "w1,w.Ijw 4u";
      stringArray0[1] = "w1,w.Ijw 4u";
      byte byte0 = (byte) (-47);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";", stringArray0[0], "w1,w.Ijw 4u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      String string0 = Utility.encode(byteArray0, false);
      Utility.isSet(65, 10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(">o@20;4SM_");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readShort();
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = Utility.fillup("vSn.S;6F", (short)0, true, 'n');
      assertEquals("vSn.S;6F", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3t=d5XW1oJw_+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3t=d5XW1oJw_+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", "Invalid method signature: ", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lneg";
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1345), 9, true);
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-114), (int) (byte) (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-115);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%0", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.replace("ret\t\t%0", "ret\t\t%0", "nop");
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.format((-1724), 'q', false, '_');
      assertEquals("____________________________________________________________________________________________________________-1724", string0);
      
      String string1 = Utility.compactClassName("checkcast");
      assertEquals("checkcast", string1);
      
      byte[] byteArray0 = Utility.decode("instanceof", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "checkcast";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "checkcast";
      objectArray0[4] = (Object) "GpoH = ";
      objectArray0[5] = (Object) "instanceof";
      Utility.printArray(objectArray0, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 173, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)7;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0YpM7hzNkD89Qu}8!", "0YpM7hzNkD89Qu}8!", "0YpM7hzNkD89Qu}8!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0YpM7hzNkD89Qu}8!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)18;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZW#bcevV");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".x");
      byteSequence0.mark((byte)58);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(".x");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2392, 3028);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = "A1lo=<kNW4eUdX6QwP";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("astore\t\t%155", "A1lo=<kNW4eUdX6QwP");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A1lo=<kNW4eUdX6QwP
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.methodSignatureArgumentTypes("QyG/ZO+fU_#k&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QyG/ZO+fU_#k&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u001E');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.signatureToString("YM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "MC*9SF!ZbWbbun*";
      Utility.getSignature("MC*9SF!ZbWbbun*");
      Utility.compactClassName("MC*9SF!ZbWbbun*");
      int int0 = 1216;
      Utility.setBit(1216, 0);
      boolean boolean0 = false;
      Utility.format(98, 0, false, 'B');
      try { 
        Utility.typeOfSignature("MC*9SF!ZbWbbun*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MC*9SF!ZbWbbun*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "P#(kRrV={e2ys";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("P#(kRrV={e2ys", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P#(kRrV={e2ys'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Utility.replace("L>p2(O,qdU`{", "L>p2(O,qdU`{", "L>p2(O,qdU`{");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.classOrInterface((byte)127);
      assertEquals("class", string0);
      
      String string1 = Utility.methodTypeToSignature("athrow", (String[]) null);
      assertEquals("()Lathrow;", string1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0poH = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0poH = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.accessToString(0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=c6%A^e*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =c6%A^e*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "`}dF]";
      try { 
        Utility.methodSignatureArgumentTypes("`}dF]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `}dF]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-73);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)37;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 1971);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      stringArray0[2] = "int";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 170);
      assertEquals("0:    ifge\t\t#15163\n3:    istore_0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('a');
      Utility.isJavaIdentifierPart('a');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.accessToString(512, false);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)48;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3309), (-3309));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lmul
         // 2:    lstore_1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lstore_2", "transient", "static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = Utility.isSet(512, 512);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Integer");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.convertString("Integer");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 512);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Integer");
      assertEquals("Integer", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Integer";
      objectArray0[1] = (Object) "Integer";
      objectArray0[2] = (Object) "Integer";
      objectArray0[3] = (Object) "Integer";
      objectArray0[4] = (Object) "h<$*5t1b{rY@";
      objectArray0[5] = (Object) "Integer";
      objectArray0[6] = (Object) "Integer";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{Integer, Integer, Integer, Integer, h<$*5t1b{rY@, Integer, Integer}", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%132\t-124", string2);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)18;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = "G8*F/0rRCT]bba5q";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G8*F/0rRCT]bba5q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G8*F/0rRCT]bba5q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.replace("isub", "isub", "isub");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-63);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)2;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ZW#bcevV", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) " ";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("null, null, \" \"", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)90, (byte)87, (byte)35, (byte)98, (byte)99, (byte)101, (byte)118, (byte)86}, byteArray0);
      
      int int0 = Utility.clearBit((-1992), (-829));
      assertEquals((-2000), int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = (-10);
      Utility.accessToString((-10));
      Utility.isJavaIdentifierPart(']');
      Utility.isSet((-10), (-10));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@AD]`J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @AD]`J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wz1,w.Ijw Ru";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QcFt/y3?JT.ZC]7:", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QcFt/y3?JT.ZC]7:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.getSignature("0n!B:M:X#TQu9)");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)48;
      byte byte0 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)77;
      Constant[] constantArray0 = new Constant[1];
      int int0 = (-2324);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)48, (-2324));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        constantFieldref0.getClass(constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)109;
      byteArray0[6] = (byte)109;
      byteArray0[8] = (byte)109;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 60);
      assertEquals("0:    iinc\t\t%109\t109\n3:    iinc\t\t%18\t18\n6:    ldiv\n7:    nop\n8:    ldiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("h<$*5t1b{rY@", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("h$3c$A5t1b$7brY$40", "h<$*5t1b{rY@", "H(y-wPo", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h$3c$A5t1b$7brY$40
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-3));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64988. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("Integer");
      assertEquals("Integer", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Integer";
      objectArray0[1] = (Object) "Integer";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"Integer\", \"Integer\", null, null, null, null, null, null}", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte byte0 = Utility.typeOfSignature("Integer");
      assertEquals((byte)10, byte0);
      
      String string2 = Utility.accessToString((int) (byte) (-53));
      assertEquals("public private static volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-90);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)18;
      byteArray0[7] = (byte) (-90);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Utility.clearBit((-2431), (-2431));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)9;
      try { 
        Utility.typeOfSignature("KPRT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KPRT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.replace("3>/m(GTc vs", "isub", "");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-67);
      byteArray0[3] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.replace("oz6TF", "i*2WJQ~/", (String) null);
      Utility.getSignature("oz6TF");
      Utility.searchOpcode("oz6TF");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-67);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-89));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.getSignature("MC*9SF!ZbWbbun*");
      Utility.compactClassName("MC*9SF!ZbWbbun*");
      Utility.setBit(1216, 0);
      boolean boolean0 = false;
      Utility.format(98, 0, false, 'B');
      try { 
        Utility.typeOfSignature("MC*9SF!ZbWbbun*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MC*9SF!ZbWbbun*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.getSignature("lastore");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lastore", "d[-(+cRF&oWTa+^", "d[-(+cRF&oWTa+^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 202, (int) (byte)24, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.compactClassName("breakpoint");
      assertEquals("breakpoint", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-271), (int) (byte) (-123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R++J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R++J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("boolean", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
      
      String string1 = Utility.getSignature("fadd");
      assertEquals("Lfadd;", string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.searchOpcode("ifle");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51276. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte)17;
      byteArray1[6] = (byte)69;
      byteArray1[7] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 17
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      Utility.encode(byteArray0, false);
      int int0 = 65;
      Utility.isSet(65, 10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readDouble();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "pop2";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "fstore\t\t%44";
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) "&3M3}6H:>0mUX8,TE";
      objectArray0[6] = (Object) null;
      Object object0 = new Object();
      objectArray0[7] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.replace("pop2", "ior", "SourceFile: ");
      Utility.compactClassName("$s3M3$7d6H$3a$3e0mUX8$yTE", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, (int) (short)27989, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u001E');
      try { 
        Utility.methodSignatureReturnType("GG*N4rmRfK^F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GG*N4rmRfK^F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = Utility.setBit(59, (-2391));
      assertEquals(571, int0);
      
      String string0 = Utility.fillup("", (-2391), true, '&');
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-117);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.accessToString((int) (byte)47, true);
      assertEquals("public private protected static", string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.compactClassName(".0");
      byte byte0 = (byte) (-2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byte byte1 = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)91;
      try { 
        Utility.typeOfSignature(".0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-3389), (-3389));
      assertEquals((-3389), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('a');
      Utility.isJavaIdentifierPart('a');
      String string0 = Utility.format(56, 56, false, 'a');
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa56", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      
      String string2 = Utility.accessToString(512, false);
      assertEquals("interface", string2);
      
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)48;
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$f2i$40$9f0", string3);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.classOrInterface((-3918));
      assertEquals("class", string1);
      
      String string2 = Utility.format((-3918), 5, true, 'n');
      assertEquals("-3918", string2);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.format((short)254, 1494, false, 'U');
      Utility.compactClassName("impdep1");
      byte[] byteArray0 = Utility.decode(" ", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "impdep1";
      objectArray0[1] = (Object) "impdep1";
      objectArray0[2] = (Object) "impdep1";
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart('w');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = "monitorexit";
      Utility.compactClassName("monitorexit", "invokestatic", false);
      Utility.compactClassName("monitorexit");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[P(zts)\":qVaefx", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P(zts)\":qVaefx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-12);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte)6, true);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifle\t\t#3", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-427), 1040);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6UI~Y^k-S`@}|";
      String string0 = Utility.methodTypeToSignature("5p!$N!3w7gZS^>wh", stringArray0);
      assertEquals("(L6UI~Y^k-S`@}|;)L5p!$N!3w7gZS^>wh;", string0);
      
      boolean boolean0 = Utility.isSet(140, (-1480));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.signatureToString("CkgSDFl^5", true);
      assertEquals("char", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals("{6UI~Y^k-S`@}|}", string2);
      
      String string3 = Utility.replace("{6UI~Y^k-S`@}|}", "6UI~Y^k-S`@}|", "(L6UI~Y^k-S`@}|;)L5p!$N!3w7gZS^>wh;");
      assertEquals("{(L6UI~Y^k-S`@}|;)L5p!$N!3w7gZS^>wh;}", string3);
      
      String string4 = Utility.format(140, 140, true, '>');
      assertEquals("140>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", string4);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("IS*W?0.eKd");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-29);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 440);
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.getSignature(" ");
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)28;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)28, 355);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(76);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, (-468), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)59;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.convertString("InnerClasses");
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.BootstrapMethods");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.BootstrapMethods
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.replace("invokedynamic", "W+d", "i");
      assertEquals("invokedynamic", string0);
      
      String string1 = Utility.format(40, 40, true, '9');
      assertEquals("4099999999999999999999999999999999999999", string1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('a');
      Utility.isJavaIdentifierPart('a');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.accessToString(512, false);
      Utility.printArray((Object[]) null);
      String string0 = Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('a');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8z7K[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8z7K[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wz1,w.Ijw Ru";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-96);
      boolean boolean1 = Utility.isSet((byte) (-87), (byte)24);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 46, false);
      assertEquals("0:    ret\t\t%24\n2:    if_icmpne\t\t#2\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-87), false);
      assertEquals("public static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&3M3}6H:>0mUX8,TE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &3M3}6H:>0mUX8,TE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ZW#bcevV", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) " ";
      Utility.printArray(objectArray0, false, true);
      Utility.isJavaIdentifierPart('#');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("IS*W?0.eKd", "IS*W?0.eKd", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IS*W?0.eKd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")%K0mi}:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )%K0mi}:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      objectArray0[1] = (Object) "Hw]m\"";
      objectArray0[2] = (Object) "Hw]m\"";
      objectArray0[3] = (Object) "Hw]m\"";
      objectArray0[4] = (Object) "Hw]m\"";
      objectArray0[5] = (Object) "Hw]m\"";
      boolean boolean1 = false;
      Utility.printArray(objectArray0, false, false);
      char char0 = 'j';
      Utility.isJavaIdentifierPart('j');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)55;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte) (-118);
      byteArray1[5] = (byte) (-118);
      byteArray1[6] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 4118, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = "[db>z";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-87);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-53), (int) (byte) (-53), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iconst_2
         // 2:    lconst_1
         // 3:    <illegal opcode>
         // 4:    lastore
         // 5:    iconst_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2602), (-2602));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    arraylength
         // 2:    aconst_null
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.decode("fsub", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.format((short)254, 'Q', false, 'U');
      Utility.compactClassName("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU254", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU254", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU254'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantDouble constantDouble0 = new ConstantDouble(8);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldc2_w\t\t", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.printArray((Object[]) null, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)82;
      Utility.isJavaIdentifierPart('o');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((byte)109);
      Utility.isJavaIdentifierPart('s');
      try { 
        Utility.methodSignatureReturnType("ldiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ldiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte)74;
      Utility.encode(byteArray0, true);
      Utility.clearBit(47, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "java.lang.Object@5a6ab89d";
      stringArray0[2] = "java.lang.Object@5a6ab89d";
      stringArray0[3] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[4] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[5] = "java.lang.Object@5a6ab89d";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte byte0 = (byte) (-71);
      byte byte1 = (byte) (-47);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-72);
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = "ZW#bcevV";
      Utility.methodSignatureReturnType("ZW#bcevV");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-994));
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      short short0 = Utility.searchOpcode("!H%{I<\"7Vn:]}8X&M");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName("!H%{I<\"7Vn:]}8X&M");
      String string0 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.fillup("'/c8w,`)&V", (short) (-1), true, 'Z');
      assertEquals("'/c8w,`)&V", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-55);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("9b 50 ae fe 8d c9", string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)18;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NlPgjt&m ?\"6|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NlPgjt&m ?\"6|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = "&3M3}6H:>0mUX8,TE";
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      Utility.encode(byteArray0, false);
      Utility.isSet(65, 0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lookupswitch", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lookupswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-3098L));
      byteSequence0.mark((-3868));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-111);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 85, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.replace("L>p2(O,qdU`{", "L>p2(O,qdU`{", "L>p2(O,qdU`{");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("dload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.printArray((Object[]) null, true, true);
      char char0 = '[';
      Utility.isJavaIdentifierPart('[');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte) (-49);
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte) (-3);
      Utility.encode(byteArray1, true);
      try { 
        Utility.typeOfMethodSignature("P;L:`cl>k]79vl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P;L:`cl>k]79vl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      String string0 = Utility.classOrInterface((byte)0);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.isJavaIdentifierPart('m');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)103;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-93);
      objectArray0[1] = (Object) (byte)103;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)92;
      objectArray0[4] = (Object) (byte)103;
      objectArray0[5] = (Object) (byte)92;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.compactClassName("lookupswitch");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-101);
      byte byte0 = (byte)97;
      byteArray0[3] = (byte)97;
      int int0 = 913;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 913, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)98;
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("java.lang.Class", " arg", "HI3-o)oMiU7,0>");
      assertEquals("java.lang.Class", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte byte0 = (byte) (-128);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      byte byte1 = (byte)9;
      byteArray0[8] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      LocalVariable[] localVariableArray0 = null;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(0, (-2084), (LocalVariable[]) null, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("PMGClass", "p)Sv1UKB5jrW,2v!M", "lcmp", false, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.isJavaIdentifierPart('\u001F');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (short)25434);
      assertEquals("0:    nop\n1:    fstore_2\n2:    d2l\n3:    dload_1\n4:    dadd\n5:    dup_x1\n6:    nop\n", string0);
      
      String string1 = Utility.replace("0:    nop\n1:    fstore_2\n2:    d2l\n3:    dload_1\n4:    dadd\n5:    dup_x1\n6:    nop\n", "nop", "InitObject");
      assertEquals("0:    InitObject\n1:    fstore_2\n2:    d2l\n3:    dload_1\n4:    dadd\n5:    dup_x1\n6:    InitObject\n", string1);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.compactClassName("/~+v':z](yGI");
      int int0 = 91;
      boolean boolean0 = false;
      char char0 = 'Z';
      Utility.format(91, 91, false, 'Z');
      String string0 = ">#E!fc^";
      Utility.searchOpcode(">#E!fc^");
      Utility.format(91, (short) (-1), false, 'Z');
      String string1 = ">";
      String string2 = "G>}>6\\pF:%~[Nv";
      int int1 = 49;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T\"&F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T\"&F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[3] = "void";
      stringArray0[3] = "(";
      stringArray0[4] = "TLc";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = "M";
      Utility.convertString("M");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      objectArray0[1] = (Object) "Hw]m\"";
      objectArray0[2] = (Object) "Hw]m\"";
      objectArray0[3] = (Object) "Hw]m\"";
      objectArray0[4] = (Object) "Hw]m\"";
      objectArray0[5] = (Object) "Hw]m\"";
      Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('j');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("Hw]m\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hw]m\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Hw]m\"";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hw]m\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hw]m\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      int int0 = 0;
      Utility.clearBit(0, 236);
      Utility.getSignature("F9");
      String string0 = "W[zz}y lvn5";
      try { 
        Utility.decode("W[zz}y lvn5", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MV*]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MV*]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(83, 83);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1314), 670);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 83. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("Integer");
      assertEquals("Integer", string0);
      
      byte[] byteArray0 = Utility.decode("Integer", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)73, (byte)110, (byte)116, (byte)101, (byte)103, (byte)101, (byte)114}, byteArray0);
      assertEquals("fdiv", string1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("~5'$0B~It");
      assertEquals("~5\\'$0B~It", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Aq(f5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Aq(f5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%109\t109", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.format(71, 32, true, 'u');
      assertEquals("71uuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-121);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte)23;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K=UnIb%p*R z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K=UnIb%p*R z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2`c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2`c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("CONSTANT_String");
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueString() on a non STRINGElementValue");
      assertEquals((byte)7, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.compactClassName("getStatic", "getStatic", true);
      Utility.setBit(59, 59);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokedynamic", "$c-]X'.kN}}Y0ihAl", "$c-]X'.kN}}Y0ihAl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W+d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W+d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.compactClassName("isub", "isub", false);
      Utility.setBit((-1642), 59);
      try { 
        Utility.methodSignatureReturnType("E2&@VRs?mxR~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E2&@VRs?mxR~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("&3M3}6H:>0mUX8,TE", false);
      Utility.encode(byteArray0, false);
      Utility.isSet(65, 10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readDouble();
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "pop2";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) "fstore\t\t%44";
      Utility.encode(byteArray0, false);
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.isSet((-1), (-1));
      // Undeclared exception!
      try { 
        Utility.signatureToString("WnS{(cz4z9ss[y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WnS{(cz4z9ss[y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w1,w.Ijw 4u";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("L{null,;V", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[0];
      constantPool0.setConstantPool(constantArray1);
      constantPool0.copy();
      Utility.signatureToString("BootstrapMethods(", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      try { 
        Utility.decode("$}R-jHO0@#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$}R-jHO0@#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $}R-jHO0@#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(512, 76);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("JavaClass.debug");
      assertEquals("JavaClass.debug", string0);
      
      String string1 = Utility.signatureToString("JavaClass.debug", false);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(72);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("sastore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sastore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.compactClassName("2uiV6G*t");
      Utility.compactClassName("2uiV6G*t");
      Utility.convertString("org.apache.commons.io.filefilter.CanWriteFileFilter");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M^zrd8WiY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M^zrd8WiY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("Integer");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Integer";
      objectArray0[1] = (Object) "Integer";
      objectArray0[3] = (Object) fileSystemHandling0;
      String string0 = Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.typeOfSignature("T\"&F");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "T\"&F";
      objectArray0[1] = (Object) "T\"&F";
      objectArray0[2] = (Object) "T\"&F";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.signatureToString("T\"&F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T\"&F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.format((-1894), (-1894), false, ')');
      try { 
        Utility.methodSignatureReturnType("%Dq-u!k(y[ 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `%Dq-u!k(y[ 0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)14);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)67;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedShort();
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.clearBit(117, 2794);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = "eWL%i2";
      try { 
        Utility.methodSignatureArgumentTypes("eWL%i2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eWL%i2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.signatureToString("Ld\":;V");
      Utility.printArray((Object[]) null, true, false);
      Utility.isJavaIdentifierPart('_');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.typeOfSignature("JQfgo&x`dm ?&}9Hdy");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -82
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, true, true);
      Utility.fillup("qeq9BwbzJ4", 56, true, '^');
      Utility.getSignature("<_");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L>p2(O,qdU`{");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 3553);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = Utility.fillup("WRz2;X=X", 5730, false, 'j');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) "WRz2;X=X";
      objectArray0[4] = (Object) "WRz2;X=X";
      String string1 = Utility.printArray(objectArray0, false, false);
      Utility.accessToString((-798), false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "private synchronized volatile transient abstract strictfp synthetic annotation enum";
      stringArray0[1] = string1;
      stringArray0[2] = "WRz2;X=X";
      stringArray0[3] = "&.ow`zL05|E~\"!Ah";
      stringArray0[4] = string1;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = "WRz2;X=X";
      // Undeclared exception!
      Utility.methodTypeToSignature(string0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.convertString("\":\tY)R `:4");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\":\tY)R `:4", "\":\\tY)R `:4", "if_icmplt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \":\tY)R `:4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = Utility.replace("P1V2sg/c", "P1V2sg/c", "P1V2sg/c");
      assertEquals("P1V2sg/c", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('>');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = "short";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        byteSequence1.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "&3M3}6H:>0mUX8,TE";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "&3M3}6H:>0mUX8,TE";
      Utility.printArray(objectArray0, true, true);
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-2156), true, 'I');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.compactClassName(".0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes(".0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Integer");
      byte[] byteArray0 = Utility.decode("Integer", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = ";<P?&%!t6d";
      boolean boolean0 = true;
      try { 
        Utility.decode(";<P?&%!t6d", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(512, 76);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('a');
      Utility.isJavaIdentifierPart('a');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.accessToString(512, false);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "0\"JFXw=^\b}", "freturn", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      boolean boolean0 = Utility.isSet(97, (-6));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.typeOfSignature("T\"&F");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "T\"&F";
      objectArray0[1] = (Object) "T\"&F";
      objectArray0[2] = (Object) "T\"&F";
      Utility.printArray(objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.format(10, (byte) (-72), false, 'j');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{T\"&F, T\"&F, T\"&F, null, null}", "T\"&F", "T\"&F", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {T\"&F, T\"&F, T\"&F, null, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)87;
      try { 
        Utility.typeOfSignature("':`yeMJOrv+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ':`yeMJOrv+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = Utility.convertString("ELh[3I");
      assertEquals("ELh[3I", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string1);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\r", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      
      String string0 = Utility.classOrInterface(80);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ZW#bcevV";
      stringArray0[1] = "ZW#bcevV";
      String string1 = Utility.methodTypeToSignature("class", stringArray0);
      assertEquals("(LZW#bcevV;LZW#bcevV;)Lclass;", string1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":%/}qi>VF5d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :%/}qi>VF5d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
