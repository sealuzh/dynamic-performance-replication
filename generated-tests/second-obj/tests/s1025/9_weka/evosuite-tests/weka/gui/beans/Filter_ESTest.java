/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:06:32 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Choice;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Scrollbar;
import java.awt.TextField;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.util.Enumeration;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.plaf.synth.SynthConstants;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.clusterers.SimpleKMeans;
import weka.core.Capabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ArffSaver;
import weka.core.converters.C45Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      System.setCurrentTimeMillis((-202L));
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.addDataSourceListener(testSetMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setVisual((BeanVisual) null);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTestSetListener(flowByExpression0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(flowByExpression0, (Instances) null, (-1304), (-1304));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setAlignmentX(1.0F);
      BeanVisual beanVisual0 = filter0.m_visual;
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(1519);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 46, 46);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter0.disconnectionNotification((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      filter0.useDefaultVisual();
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      filter0.globalInfo();
      filter0.setCustomName(":`nk/Csc");
      assertEquals(":`nk/Csc", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addTestSetListener(flowByExpression0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(substringReplacer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SubstringReplacer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "[wTvPl";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.stop();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      weka.filters.Filter.makeCopy(attributeSelection0);
      filter0.setWrappedAlgorithm(attributeSelection0);
      String string1 = StyleContext.DEFAULT_STYLE;
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        attributeSelection0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      PanelUI panelUI0 = filter0.getUI();
      filter0.getGraphics();
      filter0.setUI(panelUI0);
      filter0.m_globalInfo = "Finished.";
      filter0.setCustomName("Finished.");
      JComponent.getDefaultLocale();
      filter0.connectionAllowed("_animated.gif");
      filter0.eventGeneratable("configuration");
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TextViewer textViewer0 = new TextViewer();
      filter0.addTestSetListener(textViewer0);
      assertEquals("Finished.", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getStructure("Finishe!.");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Clusterer clusterer0 = new Clusterer();
      Sorter sorter0 = new Sorter();
      Canvas canvas0 = new Canvas();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0, (-334), (-334));
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = DefaultEditorKit.deleteNextWordAction;
      filter0.connectionNotification("delete-next-word", "delete-next-word");
      filter0.eventGeneratable("delete-next-word");
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextViewer textViewer0 = new TextViewer();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom((-1));
      boolean[] booleanArray0 = new boolean[0];
      instances0.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      testInstances1.setNumRelationalNominalValues(50000);
      filter0.transferFocusDownCycle();
      testInstances1.getOptions();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("})$y8", instances0, (-1), (-2));
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      boolean boolean0 = filter0.eventGeneratable("@relation");
      assertFalse(boolean0);
      
      ArffSaver arffSaver0 = new ArffSaver();
      JComponent.getDefaultLocale();
      filter0.addTrainingSetListener(sorter1);
      arffSaver0.getInstances();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      ClassOrder classOrder0 = new ClassOrder();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      filter0.setLog(logPanel0);
      filter0.acceptInstance((InstanceEvent) null);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      filter0.m_filterThread = (Thread) mockThread0;
      instanceEvent0.setStatus(1);
      instanceEvent0.setStatus((-2131248532));
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ClassAssigner classAssigner0 = new ClassAssigner();
      InstanceEvent instanceEvent0 = new InstanceEvent(classAssigner0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      instanceEvent0.setStatus(1827);
      mockThread0.setContextClassLoader(classLoader0);
      instanceEvent0.setStatus((-2454));
      instanceEvent0.setStatus((-2454));
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.connectionNotification("instance", mockJapaneseDate0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.getUIClassID();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("PanelUI", substringReplacer0);
      substringReplacer0.eventGeneratable("PanelUI");
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      filter0.getPropertyChangeListeners();
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      filter0.getBaselineResizeBehavior();
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      substringReplacer0.setSize(126, (-1741086662));
      substringReplacer1.setUI(multiPanelUI0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      filter0.acceptInstance((InstanceEvent) null);
      filter0.connectionNotification("PanelUI", multiPanelUI0);
      SubstringReplacer substringReplacer2 = new SubstringReplacer();
      substringReplacer1.eventGeneratable("|");
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      filter0.getUI();
      filter0.getGraphics();
      filter0.performRequest("Stop");
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getGraphicsConfiguration();
      String string0 = DefaultEditorKit.deleteNextWordAction;
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification("delete-next-word", classAssigner0);
      boolean boolean0 = filter0.eventGeneratable("5D=+%Sh~a<v?|(I");
      assertFalse(boolean0);
      
      Apriori apriori0 = new Apriori();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread1.setContextClassLoader((ClassLoader) null);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-2131248532));
      boolean boolean1 = predictionAppender0.m_appendProbabilities;
      instanceEvent0.setStatus(11);
      instanceEvent0.setStatus((-1844768494));
      filter0.acceptInstance(instanceEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.removeTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      Sorter sorter0 = new Sorter();
      filter0.addTestSetListener(sorter0);
      Canvas canvas0 = new Canvas();
      filter0.getFocusListeners();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[Filter] ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestSetEvent testSetEvent1 = new TestSetEvent(testInstances0, instances0, (-2354), 1, (-1165), (-1849));
      filter0.acceptTestSet(testSetEvent0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus((-49));
      filter0.removeDataSourceListener(sorter0);
      filter0.setCustomName(".arff");
      filter0.getVisual();
      filter0.addInstanceListener(substringReplacer0);
      assertEquals(".arff", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      Filter filter0 = new Filter();
      filter0.connectionAllowed("instance");
      filter0.getUI();
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SynthConstants.SELECTED;
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.eventGeneratable("Stop");
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom(10L);
      testInstances0.generate();
      testInstances0.getOptions();
      Sorter sorter0 = new Sorter();
      sorter0.getUIClassID();
      Sorter sorter1 = new Sorter();
      sorter1.remove((Component) sorter0);
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      ArffSaver arffSaver0 = new ArffSaver();
      testInstances0.setNumRelationalDate((-2));
      filter0.addTrainingSetListener(sorter1);
      filter0.eventGeneratable(":`nk/Csc");
      Add add0 = new Add();
      textDirectoryLoader0.setRetrieval((-159));
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(".arff", instances0, (-2), (-1), (-1), (-1));
      filter0.acceptTrainingSet(trainingSetEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.stop();
      filter0.connectionNotification(" ", sorter1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      filter0.m_filterThread = (Thread) mockThread0;
      instanceEvent0.setStatus(1);
      MockThread.interrupted();
      instanceEvent0.setStatus((-2131248532));
      filter0.enumerateRequests();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      filter0.m_filterThread = (Thread) mockThread0;
      instanceEvent0.setStatus(1);
      MockThread.interrupted();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.ENDSWITH;
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression_ExpressionClause_ExpressionType0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      instanceEvent0.setStatus(58);
      filter0.getCursor();
      filter0.connectionAllowed("instance");
      filter0.getUI();
      filter0.isBusy();
      instanceEvent0.setStatus((-4728));
      instanceEvent0.setStatus((-4728));
      instanceEvent0.setStatus(58);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent1 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Filter filter1 = new Filter();
      filter1.setCustomName("@relation");
      filter0.globalInfo();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread("9Y?");
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread0.run();
      filter0.m_filterThread = (Thread) mockThread1;
      instanceEvent0.setStatus(1);
      instanceEvent0.setStatus((-2131248532));
      filter0.acceptInstance(instanceEvent0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      double[] doubleArray0 = new double[0];
      Associator associator0 = new Associator();
      associator0.getStructure("9Y?");
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      DataSetEvent dataSetEvent0 = new DataSetEvent(serializedModelSaver0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.setCustomName(".bsi");
      filter0.addInstanceListener(substringLabeler0);
      filter0.removeTestSetListener(substringLabeler0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getTopLevelAncestor();
      DataSetEvent dataSetEvent1 = new DataSetEvent(doubleArray0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.removeTestSetListener(flowByExpression0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(predictionAppender0, (Instances) null, 1, 2);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(classValuePicker0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent1);
      filter0.globalInfo();
      filter0.connectionNotification("INTERRUPTED", trainingSetEvent0);
      filter0.getFilter();
      filter0.notifyInstanceListeners(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      instanceEvent0.setStatus(58);
      filter0.acceptInstance(instanceEvent0);
      filter0.stop();
      filter0.getWrappedAlgorithm();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      PredictionAppender predictionAppender1 = new PredictionAppender();
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getUIClassID();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, (-635), (-635));
      filter0.acceptTestSet(testSetEvent0);
      Enumeration enumeration0 = new WordTokenizer();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("PanelUI", substringReplacer0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      substringReplacer0.getPropertyChangeListeners("PanelUI");
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      substringReplacer0.setUI(multiPanelUI0);
      Random.setNextRandom((-635));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      filter0.eventGeneratable("PanelUI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        filter0.performRequest("jzP?-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jzP?- not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getUIClassID();
      int int0 = (-635);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, (-635), (-635));
      filter0.acceptTestSet(testSetEvent0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("PanelUI", substringReplacer0);
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      substringReplacer0.getPropertyChangeListeners("PanelUI");
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      substringReplacer0.setUI(multiPanelUI0);
      Random.setNextRandom((-635));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      DataSetEvent dataSetEvent0 = new DataSetEvent(predictionAppender0, (Instances) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.performRequest("weka.gui.beans.Filter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka.gui.beans.Filter not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=>PEX8o");
      Filter filter0 = new Filter();
      filter0.getContainerListeners();
      filter0.getAlignmentX();
      filter0.stop();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setVerifyInputWhenFocusTarget(false);
      substringLabeler0.getMouseMotionListeners();
      filter0.addInstanceListener(substringLabeler0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Add add0 = new Add();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]e~,FJoL~A@Dk{=(K");
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances0 = testInstances0.generate();
      TimeZone.getAvailableIDs((-1));
      Sorter sorter0 = new Sorter();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".arff");
      sorter0.remove((Component) filter0);
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      testInstances0.setNumRelationalDate((-2));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 109, 30, (-2), 1212);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Filter filter1 = new Filter();
      testInstances0.generate();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Classifier classifier0 = new Classifier();
      TestSetEvent testSetEvent0 = new TestSetEvent(predictionAppender0, instances0, 46, 30, (-1), 109);
      filter0.acceptTestSet(testSetEvent0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.enumerateRequests();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      // Undeclared exception!
      try { 
        filter1.performRequest("@data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @data not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      KnowledgeFlowApp.getSingleton();
      MultiFilter multiFilter0 = new MultiFilter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      filter0.transferFocusBackward();
      filter1.removeTrainingSetListener(filter0);
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler1.m_ie;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instanceEvent0.setStatus((-15));
      filter0.acceptInstance(instanceEvent0);
      Classifier classifier0 = new Classifier();
      Instances instances0 = predictionAppender1.m_format;
      TestSetEvent testSetEvent0 = null;
      // Undeclared exception!
      try { 
        filter0.acceptTestSet((TestSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      KnowledgeFlowApp.getSingleton();
      MultiFilter multiFilter0 = new MultiFilter();
      Apriori apriori0 = new Apriori();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter1.removeTrainingSetListener(filter0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Add add0 = new Add();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mouseWheelListener0, instances0, (-3424), 3670, (-49), (-1845));
      filter0.acceptTrainingSet(trainingSetEvent0);
      Filter filter2 = new Filter();
      Filter filter3 = new Filter();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      KnowledgeFlowApp.getSingleton();
      MultiFilter multiFilter0 = new MultiFilter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter0.transferFocusBackward();
      filter1.removeTrainingSetListener(filter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getFilter();
      filter0.setFilter(multiFilter0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
