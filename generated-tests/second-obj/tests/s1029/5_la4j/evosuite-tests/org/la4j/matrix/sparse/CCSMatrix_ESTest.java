/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:06:50 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(91);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      CCSMatrix.random(32, 91, (double) 32, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 3697, 2);
      cCSMatrix0.nonZeroAt((-640), 10);
      CCSMatrix.from2DArray((double[][]) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3451, 3451, 3451);
      SparseVector sparseVector0 = SparseVector.zero(10, 3451);
      sparseVector0.min();
      cCSMatrix0.equals((Object) sparseVector0);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroIteratorOfColumn(3451);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.isColumnMajor();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3452
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.toBinary();
      MockRandom mockRandom0 = new MockRandom(8400L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, rowMajorSparseMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3406, 3406);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (-731.2118708389761), (Random) null);
      cCSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector0 = (CompressedVector)columnMajorSparseMatrix0.toColumnVector();
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-440), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -440x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.8, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfShape(0, 0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        cCSMatrix0.set(0, 0, 1584.8001146691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int0 = 1140;
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1140);
      assertEquals(1140, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1140, cRSMatrix0.cardinality());
      assertEquals(8.771929824561404E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1140, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1141' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(509);
      int int0 = 3;
      int int1 = 3;
      Matrix matrix0 = cCSMatrix0.blankOfShape(3, 3);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix0);
      int int2 = 48;
      int int3 = 1758;
      double double0 = 2799.951526689;
      cCSMatrix1.getOrElse(int2, int3, double0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(int2, int1, matrixFunction0);
      cCSMatrix1.columnMajorIterator();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4193, 4193);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4193, cCSMatrix0.rows());
      assertEquals(4193, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(4193, 32);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4193, cCSMatrix0.rows());
      assertEquals(4193, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(32, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(4193, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      Integer integer0 = new Integer(32);
      cCSMatrix1.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 5);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(5, 3);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.columns());
      assertEquals(5, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix1.subtract((double) (byte)29);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.columns());
      assertEquals(5, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(5, basic2DMatrix0.rows());
      assertEquals(3, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)SparseMatrix.identity(2288);
      assertEquals(2288, cRSMatrix0.columns());
      assertEquals(4.3706293706293706E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2288, cRSMatrix0.rows());
      assertEquals(2288, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cCSMatrix0.min();
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachInColumn(3421, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3421
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      String string0 = cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(string0);
      assertEquals("-100%\n", string0);
      
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = (ForwardBackSubstitutionSolver)cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, forwardBackSubstitutionSolver0.equations());
      assertEquals(1, forwardBackSubstitutionSolver0.unknowns());
      assertNotNull(forwardBackSubstitutionSolver0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("`o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1126;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(13, 3, 3);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(3);
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(3.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(39, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(298);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 299
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = columnMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 91;
      doubleArray0[6] = (double) 91;
      doubleArray0[7] = (double) 91;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(35, cCSMatrix0.cardinality());
      assertEquals(0.7291666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(91.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(91.0, 91.0, 91.0, 1022.2, (double)91).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cCSMatrix0.foldRows(vectorAccumulator0);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(35, cCSMatrix0.cardinality());
      assertEquals(0.7291666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(91.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {91.0, 91.0, 91.0, 1022.2, 91.0, 91.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(91);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(35, cCSMatrix0.cardinality());
      assertEquals(0.7291666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(91.0, cCSMatrix0.max(), 0.01);
      assertEquals(8, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(compressedVector0);
      
      CCSMatrix.identity(91);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(91, 91);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(91, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(91, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int0 = 37;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(55, 37);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(91, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(91, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(55, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(37, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      boolean boolean0 = cCSMatrix0.isColumnMajor();
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(91, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(91, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int1 = (-2739);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-2739), (-2739), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3451, 3451, 3119);
      cCSMatrix0.nonZeroIteratorOfColumn(3451);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.isColumnMajor();
      int[] intArray0 = new int[3];
      intArray0[0] = 3119;
      intArray0[1] = 3119;
      intArray0[2] = 3451;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3451' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-474L));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1310), (-1310), (double) (-1310), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3451, 3451, 3166);
      cCSMatrix0.nonZeroIteratorOfColumn(3451);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.maxInColumn(3166);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3397, (-3974.87));
      SparseMatrix.identity(3397);
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(3397, vectorProcedure0);
      int int0 = 1260;
      CCSMatrix.diagonal(int0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3421, 3421, 3421);
      cCSMatrix0.nonZeroIteratorOfColumn(3421);
      cCSMatrix0.subtract((double) 3421);
      SparseMatrix.identity(13);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.min();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(3421, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3422
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4308, (-1292.2));
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(4308, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      cCSMatrix0.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix1 = new CCSMatrix(2700, (byte)48, 2, (double[]) null, intArray0, intArray0);
      cCSMatrix0.setAll((byte)48);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3451, 3451, 3166);
      cCSMatrix0.nonZeroIteratorOfColumn(3451);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.getRow(3451);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      cCSMatrix0.getRow(39);
      cCSMatrix1.isColumnMajor();
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toDenseMatrix();
      NumberFormat.getPercentInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.format(1441.45695011);
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.toCSV(numberFormat0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("`o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      int int0 = 3;
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).getColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 2806, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-1148.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(2806, 2806, 2.0, (Random) mockRandom0);
      double double0 = 731.0;
      Matrix matrix0 = cCSMatrix0.multiply(double0);
      int int1 = 185;
      cCSMatrix0.getRow(int0);
      cCSMatrix1.isColumnMajor();
      cCSMatrix0.maxInColumn(int1);
      int int2 = 66;
      cCSMatrix0.minInColumn(int2);
      Matrix matrix1 = null;
      CCSMatrix.block(matrix0, cCSMatrix0, matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.isColumnMajor();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(294);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 294
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 91;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 91;
      doubleArray0[6] = (double) 91;
      doubleArray0[7] = (double) 91;
      int[] intArray0 = new int[8];
      intArray0[0] = 91;
      intArray0[1] = 91;
      intArray0[2] = 91;
      intArray0[3] = 91;
      intArray0[4] = 91;
      intArray0[5] = 1650;
      intArray0[6] = 91;
      intArray0[7] = 91;
      int[] intArray1 = new int[5];
      intArray1[0] = 1650;
      intArray1[2] = 1650;
      intArray1[3] = 91;
      CCSMatrix cCSMatrix0 = new CCSMatrix(91, 91, 91, doubleArray0, intArray0, intArray1);
      int[] intArray2 = new int[4];
      intArray2[0] = 91;
      // Undeclared exception!
      try { 
        cCSMatrix0.toDenseMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      columnMajorSparseMatrix0.iteratorOfRow(1);
      CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[2] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int1 = (-1366);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(32, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(731, 3167, 8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.transpose();
      int[] intArray0 = new int[1];
      intArray0[0] = (-629);
      cCSMatrix0.set(1, 32, 1.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3421, 3421, 3421);
      cCSMatrix0.nonZeroIteratorOfColumn(3421);
      cCSMatrix0.subtract((double) 3421);
      SparseMatrix.identity(13);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      ColumnMajorSparseMatrix.zero(491, 47, 3421);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(491, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 0);
      cCSMatrix0.copyOfShape(0, 3);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(945, (byte)48);
      cCSMatrix1.isColumnMajor();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)57;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)37;
      doubleArray0[1] = (double) (byte)29;
      doubleArray0[2] = (double) 945;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)57;
      intArray0[1] = (int) (byte)48;
      intArray0[2] = 945;
      intArray0[3] = (int) (byte)57;
      intArray0[4] = (int) (byte)29;
      intArray0[5] = 945;
      intArray0[6] = 0;
      CCSMatrix cCSMatrix2 = new CCSMatrix((byte)37, 945, (byte)48, doubleArray0, intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(322, vectorProcedure0);
      cCSMatrix1.set(1073741824, 914, (byte)48);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.toCSV(numberFormat0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("`o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3451, 3451, 3166);
      DenseMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = new CCSMatrix(3166, 3442);
      CCSMatrix.zero(3451, 3451, 3167);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.is(matrixPredicate0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)33;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3421, 3421, 3421);
      cCSMatrix0.nonZeroIteratorOfColumn(3421);
      cCSMatrix0.subtract((double) 3421);
      SparseMatrix.identity(494);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(472, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3166);
      cCSMatrix0.max();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3166;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3166, (-3327), 3167);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.is(matrixPredicate0);
      double[][] doubleArrayArray0 = null;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArrayArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.foldRows(vectorAccumulator0);
      int int0 = 14;
      cCSMatrix0.getRow(int0);
      CCSMatrix cCSMatrix3 = CCSMatrix.from2DArray(doubleArrayArray0);
      cCSMatrix3.min();
      int int1 = 1114;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix1.eachInColumn(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.setSeed((-602L));
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(731, 731, 8);
      mockRandom0.ints();
      cCSMatrix0.transpose();
      int[] intArray0 = new int[1];
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 731;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 8;
      intArray1[3] = 8;
      cCSMatrix0.select(intArray1, intArray0);
      CCSMatrix.fromBinary(byteArray0);
      int int0 = 19;
      Integer integer0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 13;
      MockRandom mockRandom0 = new MockRandom(13);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(13, 91, 0.0, (Random) mockRandom0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      int int1 = (-497);
      int int2 = 1;
      Integer integer0 = new Integer(91);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) (-497);
      doubleArray0[2] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).eachInColumn(13, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3421);
      cCSMatrix0.nonZeroIteratorOfColumn(3421);
      cCSMatrix0.subtract((double) 3421);
      SparseMatrix.identity(491);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(472, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      cCSMatrix0.rank();
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix1 = new CCSMatrix(2700, (byte)48, 2, (double[]) null, intArray0, intArray0);
      cCSMatrix0.min();
      Integer integer0 = new Integer(4);
      // Undeclared exception!
      try { 
        cCSMatrix1.manhattanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = (-1.8727750800619019);
      doubleArray0[5] = (double) 91;
      doubleArray0[6] = (double) 91;
      doubleArray0[7] = (double) 91;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)16;
      cCSMatrix0.removeLastRow();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.isColumnMajor();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("0FY6>ssb$+uujRe\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(83);
      MockRandom mockRandom0 = new MockRandom(83);
      cCSMatrix0.spliterator();
      cCSMatrix0.minInColumn((byte)3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 91;
      doubleArray0[6] = (double) 91;
      doubleArray0[7] = (double) 91;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("        ");
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-626);
      intArray1[1] = 7;
      intArray1[2] = 91;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 122;
      doubleArray0[2] = (double) 122;
      doubleArray0[3] = (double) 122;
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1474;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(1474, 67, 0.09, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(122, 122, 67);
      columnMajorSparseMatrix0.toColumnVector();
      CCSMatrix.block(denseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      int int1 = 1887;
      CCSMatrix.from1DArray(int1, int0, doubleArray0);
      int int2 = 10;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int1, int2, doubleArray0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 2452;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2452, 2452);
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      int int1 = 961;
      int int2 = (-2273);
      int int3 = 979;
      int int4 = 1125;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int4;
      doubleArray0[1] = (double) int2;
      cCSMatrix0.infinityNorm();
      ColumnMajorSparseMatrix.from1DArray(int3, int4, doubleArray0);
      ColumnMajorSparseMatrix.diagonal(int2, int1);
      int int5 = (-1);
      double double0 = 2013.0;
      cCSMatrix0.getOrElse(int1, int5, double0);
      cCSMatrix0.spliterator();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.maxInColumn(int0);
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-602L));
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 8);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(731, 731, 8);
      mockRandom0.ints();
      cCSMatrix1.transpose();
      int[] intArray0 = new int[1];
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 731;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      CCSMatrix cCSMatrix2 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.select(intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZero(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray1[1] = doubleArray2;
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix1);
      cCSMatrix2.getRow(1);
      int int0 = (-2366);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(1, (-2366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-2366
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix3 = (CCSMatrix)cCSMatrix2.multiply(1127.206);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-3707.2)).when(matrixAccumulator0).accumulate();
      cCSMatrix2.foldNonZero(matrixAccumulator0);
      cCSMatrix2.nonZeroIteratorOfColumn((byte)29);
      byte[] byteArray0 = cCSMatrix2.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix3.iteratorOfColumn((-1690));
      cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix4 = CCSMatrix.identity(int0);
      cCSMatrix4.removeLastRow();
      cCSMatrix0.isColumnMajor();
      String string0 = "Sides of blocks are incompatible!";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = (-1.8727750800619019);
      doubleArray0[5] = (double) 91;
      doubleArray0[6] = (double) 91;
      doubleArray0[7] = (double) 91;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      cCSMatrix0.shuffle();
      byteArray0[1] = (byte)2;
      cCSMatrix0.getRow(4432);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("^q]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      NumberFormat.getPercentInstance();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byte byte0 = (byte) (-86);
      MockRandom mockRandom0 = new MockRandom((byte)8);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      byteArray0[2] = (byte) (-86);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = (-1957);
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      String string0 = "";
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(82, 82, (double) 1, (Random) mockRandom0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      Integer integer0 = new Integer(82);
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.eachInColumn((-878), (VectorProcedure) null);
      CCSMatrix.fromMatrixMarket(string0);
      int int0 = (-4398);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 3;
      int int1 = 2806;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 2806, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-1148.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      int int2 = 15;
      int int3 = 370;
      cCSMatrix0.iteratorOrNonZeroColumns();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 370;
      intArray0[2] = 15;
      intArray0[3] = 370;
      intArray0[4] = 1;
      intArray0[5] = 2806;
      cCSMatrix0.select(intArray0, intArray0);
      Matrix matrix0 = Matrix.unit(int2, int3);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(matrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(int0, (double) int1, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      byte byte0 = (byte)20;
      byte byte1 = (byte) (-4);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = byte1;
      byteArray0[5] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[1] = byte1;
      byteArray0[5] = byte1;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      byte byte0 = (byte)29;
      cCSMatrix1.isColumnMajor();
      cCSMatrix1.rowMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix2.updateColumn(12, vectorFunction0);
      cCSMatrix1.maxInColumn((byte)29);
      byte[] byteArray0 = null;
      CCSMatrix cCSMatrix3 = CCSMatrix.fromBinary(byteArray0);
      int int0 = 1566;
      int int1 = 37;
      CCSMatrix.zero(int1, (int) byte0, int0);
      cCSMatrix3.max();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((byte)29);
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)35, (double) 0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)35, (-260.48251437), (double)(byte)35).when(vectorAccumulator0).accumulate();
      CCSMatrix cCSMatrix3 = new CCSMatrix(3, (byte)29, 80);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-260.48251437), (-260.48251437), 55.0, (-260.48251437), (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix2.updateRow(3, vectorFunction0);
      cCSMatrix0.foldRows(vectorAccumulator0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)35;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 83;
      doubleArray0[1] = (double) 83;
      doubleArray0[2] = (double) 83;
      doubleArray0[3] = (double) 83;
      doubleArray0[4] = (-1.8727750800619019);
      doubleArray0[5] = (double) 83;
      doubleArray0[6] = (double) 83;
      doubleArray0[7] = (double) 83;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeFirstColumn();
      cCSMatrix0.nonZeroRowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      cCSMatrix1.rotate();
      cCSMatrix1.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-1.8727750800619019), Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 3;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(3, 3, 0.0, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Integer integer0 = new Integer(3);
      double[][] doubleArray1 = new double[4][1];
      mockRandom0.nextFloat();
      columnMajorSparseMatrix0.sum();
      CCSMatrix.from2DArray(doubleArray1);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)48, (-260.48251437), (double)(byte)48).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)29, (double)3, 1233.046016569139, (double)(byte)48, 1233.046016569139).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix2.updateRow(3, vectorFunction0);
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.getRow(185);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.removeLastRow();
      cCSMatrix1.maxInColumn(0);
      cCSMatrix2.minInColumn((byte)29);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)48, (-260.48251437), (double)(byte)48).when(vectorAccumulator0).accumulate();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2508.1821, (double)0, 2508.1821, (double)(byte)29, (-513.95615)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix2.updateRow(3, vectorFunction0);
      cCSMatrix0.foldRows(vectorAccumulator0);
      cCSMatrix0.getRow(185);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.removeLastRow();
      cCSMatrix1.maxInColumn(0);
      cCSMatrix2.minInColumn((byte)29);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 83;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(83);
      CCSMatrix.zero(83, 83);
      int int0 = 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(83, 2062.390227804);
      cCSMatrix1.nonZeroColumnMajorIterator();
      cCSMatrix0.maxInColumn(3);
      MockRandom mockRandom0 = new MockRandom(1005L);
      int int1 = 730;
      Matrix.random(730, 83, mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix2 = cCSMatrix1.to(matrixFactory0);
      cCSMatrix1.eachInColumn(int1, vectorProcedure0);
      int int2 = 689;
      org.evosuite.runtime.Random.setNextRandom(int2);
      cCSMatrix1.blankOfShape(int0, int1);
      cCSMatrix2.max();
      int int3 = 1100;
      CCSMatrix.from1DArray(int2, int3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      double[] doubleArray1 = new double[9];
      columnMajorSparseMatrix0.removeFirstRow();
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      cCSMatrix0.removeFirstRow();
      cCSMatrix0.toColumnVector();
      CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(2, 2, doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (double)1).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1651.3367), 4298.163015228971, (-679.8830517382557), (double)(byte)48, (double)(byte)29).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix.unit(1553, 304);
      cCSMatrix2.update(matrixFunction0);
      int[] intArray0 = new int[3];
      MatrixFactory<Matrix> matrixFactory0 = null;
      cCSMatrix0.to(matrixFactory0);
      intArray0[0] = int0;
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.mkString("No rows or columns selected.", "$VALUES");
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      Integer integer0 = new Integer(1);
      CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.select(intArray0, intArray0);
      columnMajorSparseMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).maxInColumn((-1920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1920
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 83;
      doubleArray0[1] = (double) 83;
      doubleArray0[2] = (double) 83;
      doubleArray0[3] = (double) 83;
      doubleArray0[4] = (-1.5439010547397543);
      doubleArray0[5] = (double) 83;
      doubleArray0[6] = (double) 83;
      doubleArray0[7] = (double) 83;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      matrix0.toString();
      matrix0.setColumn(4, (-270.18801822426));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 4, (-1.5439010547397543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      int int0 = 357913941;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1);
      int int1 = 51;
      Integer integer0 = new Integer(1);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix.randomSymmetric(51, (double) 1, (Random) mockRandom0);
      CCSMatrix.from1DArray(357913941, 2195, doubleArray0);
      CCSMatrix.from1DArray(int1, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 91;
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(91);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(91, 91, 0.0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      Integer integer0 = new Integer(91);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication1.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, columnMajorSparseMatrix0);
      ((CCSMatrix) columnMajorSparseMatrix0).columnMajorIterator();
      int int0 = 357913941;
      CCSMatrix.zero(2, 91);
      Integer integer1 = new Integer(357913941);
      columnMajorSparseMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom1 = new MockRandom(1L);
      CCSMatrix.randomSymmetric(91, 91.0, (Random) mockRandom1);
      int int1 = 1887;
      int int2 = 574;
      CCSMatrix.from1DArray(int1, int2, doubleArray0);
      CCSMatrix.from1DArray(int0, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(3, 3);
      cCSMatrix1.rank();
      cCSMatrix1.isColumnMajor();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      CCSMatrix cCSMatrix2 = CCSMatrix.random((int) (byte)29, (int) (byte)48, (double) 0, (Random) mockRandom0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      mockRandom0.longs(0L, (long) (byte)29);
      cCSMatrix2.withInverter(linearAlgebra_InverterFactory0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.maxInColumn(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)29;
      Matrix.random(0, 1722, mockRandom0);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      CCSMatrix.zero((int) (byte)29, (int) (byte)48, 11);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix2);
  }
}
