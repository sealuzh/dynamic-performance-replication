/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:04:29 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.parse("?");
      String string0 = HttpUrl.canonicalize("?", "?", true, false, true, true);
      assertEquals("%3F", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username(".");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.parse("@0QXjkObtr2W'h");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "@0QXjkObtr2W'h", 4, 4, "@0QXjkObtr2W'h", true, true, true, true);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.decodeHexDigit('\'');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "%2e.", 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1045), "7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("X\"1");
      boolean boolean0 = HttpUrl.percentEncoded("X\"1", (-526), (-526));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1190486886), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      int int0 = 1584;
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.port(1584);
      String string2 = "";
      httpUrl_Builder1.username("");
      httpUrl_Builder2.encodedUsername("http:");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(1584, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1584, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(2335);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 37, 37, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("okio.Util");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("{vxFCAfRL");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("okio.Util", "u[*{Gm%e+B3XzJ3gWWl");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username("u[*{Gm%e+B3XzJ3gWWl");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.scheme("C:o*AdquO8]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: C:o*AdquO8]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("A.:P+06");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("::", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ";Ob!dJfD(<'";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host(";Ob!dJfD(<'");
      httpUrl_Builder1.removeAllQueryParameters(";Ob!dJfD(<'");
      String string1 = "N0%";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("N0%");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\r");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedQueryParameter((String) null, "\r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.percentDecode("MISSING_SCHEME", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("1)gCH:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("", "1)gCH:");
      httpUrl_Builder1.removePathSegment(0);
      int int0 = (-1473);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment((-1473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HttpUrl.percentDecode(buffer0, "%2e.", 0, (-198), true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("A", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 159, 159, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "uIqbVS";
      try { 
        HttpUrl.getChecked("uIqbVS");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for uIqbVS
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("d}P5&;:JVoc>(8");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        HttpUrl.getChecked("|7+STF>");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for |7+STF>
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Expected leading [0-9a-fA-F] character but was 0x");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Expected leading [0-9a-fA-F] character but was 0x
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1655);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("Vv");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("Vv");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("Vv");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("Vv");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "Yo^hW8Rrl,d!qMA;P,";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "c:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("c:");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("okio.Buffer");
      String string0 = " 2w6KzzkVN_pE[4f{*";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment(" 2w6KzzkVN_pE[4f{*");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(" 2w6KzzkVN_pE[4f{*");
      int int0 = 31;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(31);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("[c3ru:");
      httpUrl_Builder0.removeAllQueryParameters("in == null");
      String string0 = HttpUrl.percentDecode("in == null", 0, 0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "#9&m2H]X";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("#9&m2H]X");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("#9&m2H]X");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("hex == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: hex == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("tz**H;~x};kRr");
      httpUrl_Builder3.encodedFragment("tz**H;~x};kRr");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "Z97r\"mEc= yJ39Hwaf";
      HttpUrl.parse("Z97r\"mEc= yJ39Hwaf");
      try { 
        HttpUrl.getChecked("Z97r\"mEc= yJ39Hwaf");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Z97r\"mEc= yJ39Hwaf
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.decodeHexDigit('J');
      HttpUrl.defaultPort("..");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", (-5817), (-2313), "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.decodeHexDigit('\\');
      HttpUrl.defaultPort("..");
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "5:Y";
      httpUrl_Builder0.encodedFragment = "5:Y";
      String string1 = "2P]&[q7#";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("2P]&[q7#", "OZ2\"=Qo=W'(jXjS.7%+");
      httpUrl_Builder0.encodedUsername = "";
      httpUrl_Builder0.setQueryParameter("qgHL+N", ":");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("MISSING_SCHEME");
      String string2 = "{aT1\"c!~ndcw\"72(hMT";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("{aT1\"c!~ndcw\"72(hMT");
      String string3 = "TRHL";
      httpUrl_Builder3.encodedQuery("TRHL");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("OZ2\"=Qo=W'(jXjS.7%+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: OZ2\"=Qo=W'(jXjS.7%+
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("a::p+", true);
      assertEquals("a::p ", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = HttpUrl.percentDecode("%", false);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = true;
      HttpUrl.percentDecode("", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("$Y~HCmJg<WcQzK", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("::");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("duration <= 0: ");
      httpUrl_Builder3.encodedUsername("");
      httpUrl_Builder3.addQueryParameter("/S1zE6V8];{", "C+~_UbF@");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("", (String) null);
      httpUrl_Builder4.encodedFragment = "/S1zE6V8];{";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("*#Dbxeg");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setPathSegment(401, "::");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 401, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("eM");
      httpUrl_Builder1.removeAllQueryParameters("eM");
      String string0 = "7.:j";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7.:j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7.:j
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("");
      String string2 = "J@R1\"1@7OgDhwE5G";
      httpUrl_Builder1.addQueryParameter("J@R1\"1@7OgDhwE5G", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("2+C=)\"d#Rp&");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("2+C=)\"d#Rp&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("Eu");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("QhE;");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("Eu", "Ggfz&");
      httpUrl_Builder4.removeAllQueryParameters("QhE;");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("j**n=j*_m%2>oP");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "r>#T\\}\"wbp}$~mgw(!";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("r>#T}\"wbp}$~mgw(!");
      String string1 = "'GBaa#RvWV";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("'GBaa#RvWV");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("%2e.", "sink == null", true, true, true, false);
      assertEquals("%2e.", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "w)u=U0L>ML3f?d^]]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("w)u=U0L>ML3f?d^]]", "w)u=U0L>ML3f?d^]]");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("C_p");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("w)u=U0L>ML3f?d^]]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("8/s{St9/[r}a.~_Z-");
      httpUrl_Builder4.addPathSegments("8/s{St9/[r}a.~_Z-");
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "c'b+~>DK%";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(553, "c'b+~>DK%");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 553, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 84;
      String string0 = "/>_\"7%alT$u+jxw(~";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(84, "/>_\"7%alT$u+jxw(~");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.setEncodedQueryParameter("", "");
      String string0 = "tz**H;~x};kRr";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("tz**H;~x};kRr");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("");
      httpUrl_Builder2.addQueryParameter("", "%2B");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("r%3e%23t");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment(127, "tz**H;~x};kRr");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/zLu>$");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("]?X7lzd#@4w3!d K<j");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "w)u=U0L>ML3f?d^]]";
      httpUrl_Builder0.encodedPassword("w)u=U0L>ML3f?d^]]");
      String string1 = "C_p";
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedPathSegments();
      httpUrl0.redact();
      HttpUrl.decodeHexDigit('\'');
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string2 = "7<w'5QRGN`";
      httpUrl_Builder0.addEncodedPathSegments("7<w'5QRGN`");
      String string3 = "W+:n~s?g0uhR";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1), "W+:n~s?g0uhR");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:0");
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://0/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "http:/";
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somfakeutwelormedurl.or/fooexample");
      httpUrl0.encodedUsername();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(111);
      buffer1.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("o");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somfakeutwelormedurl.or/fooexample");
      httpUrl0.encodedPathSegments();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-757));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockURI.URI("https:6", "https:6", "https:6");
      MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:6");
      httpUrl0.newBuilder("https");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://6/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/[7:j;htp");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/[7:j;htp
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(69);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("b(");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwelformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("uGi!it");
      httpUrl0.encodedPassword();
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwelformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        HttpUrl.getChecked("A:P+0");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for A:P+0
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1655);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("Vv");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("Vv");
      httpUrl_Builder3.query("Vv");
      StringBuilder stringBuilder0 = new StringBuilder(3457);
      httpUrl_Builder0.setQueryParameter("[qGqS{c4^&qc", "E");
      List<String> list0 = httpUrl_Builder2.encodedQueryNamesAndValues;
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.setEncodedQueryParameter("-PUPtHz]", "[qGqS{c4^&qc");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllQueryParameters("interrupted");
      httpUrl_Builder5.encodedQuery("[qGqS{c4^&qc");
      httpUrl_Builder5.addQueryParameter("zVO(rEZf@", "UNSUPPORTED_SCHEME");
      httpUrl_Builder3.host("E");
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%08";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%08");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %08
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("okio.Util");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("{vxFCAfRL");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("okio.Util", "u[*{Gm%e+B3XzJ3gWWl");
      httpUrl_Builder4.username("u[*{Gm%e+B3XzJ3gWWl");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.decodeHexDigit('s');
      HttpUrl.defaultPort("ImgB/e.ZnD#B(");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("UNSUPPORTED_SCHEME", 106, (-2313), "v=:Us`_L u]wc8;", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwelformedurl.org/fooexample");
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      httpUrl0.queryParameter("https:/www.somefakebutwelformedurl.org/fooexample");
      assertEquals("https://www.somefakebutwelformedurl.org/fooexample", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("I");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("v9+j+!>i([r");
      String string0 = "7%253cw'5qrgn%2560";
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("7%253cw'5qrgn%2560");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 7%253cw'5qrgn%2560
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "%Z2e.";
      String string1 = "W![o7N0z*3o";
      boolean boolean0 = true;
      HttpUrl.canonicalize("%Z2e.", "W![o7N0z*3o", true, true, true, true);
      try { 
        MockURL.URL("%25Z2e.", "9gMw<y@I", 3834, "W![o7N0z*3o", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: %25z2e.
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("7.:!Z;");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(61);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("Gt!KKjjG1Xfr!$'Yt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Gt!KKjjG1Xfr!$'Yt
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment(".");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters(" > ");
      httpUrl_Builder1.addEncodedPathSegments(" > ");
      String string0 = "LRps(Xs<gzreDwD+";
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("https:/w~w.somefakebutwellforkedurl.org/fooexample");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(102);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https:/w~w.somefakebutwellforkedurl.org/fooexample");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("ah\n0`*73", "pathSegment == null");
      httpUrl_Builder4.reencodeForUri();
      String string0 = "";
      httpUrl_Builder3.setEncodedQueryParameter("", "Expected leading [0-9a-fA-F] character but was %#x");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder0.encodedFragment("Expected leading [0-9a-fA-F] character but was %#x");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("tz**H;~x};kRr");
      httpUrl_Builder2.encodedFragment("tz**H;~x};kRr");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "UTF-8";
      try { 
        HttpUrl.getChecked("UTF-8");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for UTF-8
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "/endIndex < beginIndex";
      HttpUrl.parse("/endIndex < beginIndex");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("/endIndex < beginIndex");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPath("/endIndex < beginIndex");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("/endIndex < beginIndex", "%20%22'%3c%3e%23");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("%20%22'%3c%3e%23");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port((-1144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1144
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Gw+bLu@G~%*vYpOz`f";
      HttpUrl.parse("Gw+bLu@G~%*vYpOz`f");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = ")E0eW s?/1{[#w";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1050, ")E0eW s?/1{[#w");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1050, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "i%m7F%5C%5C-";
      HttpUrl.parse("i%m7F%5C%5C-");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      String string1 = "/";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somfakeutwelormedurl.or/fooexample");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1989));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("\u0000");
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.readUtf8Line();
      HttpUrl.percentDecode(buffer0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", (-231), (-231), true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "Zuj[i");
      httpUrl_Builder0.removePathSegment(0);
      int int0 = httpUrl0.port();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.readUtf8Line();
      HttpUrl.percentDecode(buffer0, "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)", (-214), (-214), true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "Zuj[i");
      httpUrl_Builder0.removePathSegment(0);
      httpUrl0.hashCode();
      try { 
        HttpUrl.getChecked("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([d.]+)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("C:");
      assertNull(httpUrl1);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URI uRI0 = MockURI.URI("https", "https", "https");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("w)u=U0L>ML3f?d^]]");
      httpUrl0.encodedPathSegments();
      httpUrl0.redact();
      httpUrl0.queryParameterNames();
      HttpUrl.decodeHexDigit('\'');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "https:/www.somefakebutwellformedurl.org/fooexample";
      String string1 = "::";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string2 = "pGnFHq;,!0n'TA";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("pGnFHq;,!0n'TA");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "c:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("c:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: c:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("okio.Util");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string0 = "{vxFCAfRL";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("{vxFCAfRL");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("okio.Util", "u[*{Gm%e+B3XzJ3gWWl");
      httpUrl_Builder4.username("u[*{Gm%e+B3XzJ3gWWl");
      String string1 = "C:o*AdquO8]";
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder1.encodedPassword("A;:O+06");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("C:o*AdquO8]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: C:o*AdquO8]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "okio.Util";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("okio.Util");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("okio.Util");
      httpUrl_Builder3.addEncodedPathSegment(".%2e");
      String string1 = "size > Integer.MAX_VALUE: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("size > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: size > Integer.MAX_VALUE: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl_Builder0.parse(httpUrl0, "Zuj[i");
      httpUrl_Builder0.removePathSegment(0);
      int int0 = httpUrl0.pathSize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.parse(")y~[Kp6/*H,NF6qL");
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "%2e.");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters(":");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("]:Y=Bu!", "]:Y=Bu!");
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder2 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      MockFile mockFile0 = new MockFile("encodedName == null");
      URL uRL0 = mockFile0.toURL();
      HttpUrl.get(uRL0);
      httpUrl_Builder1.parse((HttpUrl) null, "encodedUsername == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addPathSegments("C:");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("encodedPathSegment == null");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:p;!(n");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(1582);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      String string0 = "{vxFCAfRL";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("{vxFCAfRL");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("]aA@#,[]<5)>, <{Ba", "{vxFCAfRL");
      httpUrl_Builder2.username("'d{WeJT4,Zs3&");
      httpUrl_Builder1.encodedPassword("u[*{Gm%e+B3XzJ3gWWl");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("A;:O+06");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: A;:O+06
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "7{:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7{:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7{:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(0);
      buffer1.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "a>%+i]ajgbr");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl_Builder0.parse(httpUrl0, "t=v&su660s%2f%3caw%.c");
      httpUrl_Builder0.removeAllEncodedQueryParameters("://");
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("p5H2'O])", 67, 0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("/");
      httpUrl1.encodedPathSegments();
      httpUrl1.redact();
      httpUrl0.queryParameterNames();
      HttpUrl.decodeHexDigit('\'');
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      httpUrl0.encodedQuery();
      httpUrl0.username();
      httpUrl0.encodedPath();
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "e::Index > string.length: ";
      try { 
        HttpUrl.getChecked("e::Index > string.length: ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for e::Index > string.length: 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("w)u=U0L>ML3f?d^]]");
      httpUrl0.encodedPathSegments();
      httpUrl0.redact();
      httpUrl0.queryParameterNames();
      int int0 = httpUrl0.port;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl1.encodedQuery();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample", (String) null, (String) null, "https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl.queryStringToNamesAndValues("<*(-C/Cc?D_eXEL ");
      HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-3244));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zuj[i");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "%2e.");
      httpUrl0.uri();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder();
      httpUrl0.url();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.encodedFragment();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("https:/w~w.somefakebutwellforkedurl.org/fooexample", "https:/w~w.somefakebutwellforkedurl.org/fooexample");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(102);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("https:/w~w.somefakebutwellforkedurl.org/fooexample");
      httpUrl_Builder3.addQueryParameter("ah\n0`*73", "pathSegment == null");
      httpUrl_Builder3.removeAllEncodedQueryParameters("https:/w~w.somefakebutwellforkedurl.org/fooexample");
      String string0 = "";
      httpUrl_Builder3.setEncodedQueryParameter("", "Expected leading [0-9a-fA-F] character but was %#x");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample", (String) null, (String) null, "https:/www.somefakebutwellformedurl.org/fooexample");
      httpUrl0.newBuilder("");
      httpUrl0.encodedQuery();
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(84);
      buffer1.writeIntLe(84);
      buffer1.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword(".outputStream()");
      String string0 = "[A;:P+06";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[A;:P+06");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [A;:P+06
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-1321));
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder1.addPathSegments("\uFFFD");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.parse(httpUrl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "C:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(2, "\u2026");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      MockURL.getHttpExample();
      HttpUrl.canonicalize("..", "GR*fG@<cts", false, true, false, false);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder1.password("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("GR*fG@<cts", "GR*fG@<cts");
      httpUrl_Builder2.addQueryParameter("http:", "http:");
      httpUrl_Builder2.addPathSegment("..");
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      httpUrl0.isHttps();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.queryParameterValues("`IpLR5 mS=2");
      httpUrl0.encodedPathSegments();
      httpUrl0.equals("https:/www.somefakebutwelformedurl.org/fooexample");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.url();
      httpUrl0.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somfakeutwelormedurl.or/fooexample");
      httpUrl0.queryParameter("https:/www.somfakeutwelormedurl.or/fooexample");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zuj[i");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl_Builder0.parse(httpUrl0, "%2e.");
      httpUrl0.equals("Zuj[i");
      httpUrl0.pathSize();
      httpUrl0.scheme();
      httpUrl0.queryParameter(">W;");
      httpUrl_Builder0.password("%2e.");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "https:/www.somefakebutwellformedurl.org/fooeample");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("Cannot buffer entire body for content length: ", "]^");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("Ym=5L{v(`");
      httpUrl_Builder1.parse(httpUrl0, "Cannot buffer entire body for content length: ");
      httpUrl0.pathSegments();
      httpUrl_Builder1.addEncodedPathSegments("Ym=5L{v(`");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(0);
      buffer0.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("\u0000");
      httpUrl_Builder0.setEncodedPathSegment(0, "\u0000");
      try { 
        HttpUrl.getChecked("\u0000");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for \u0000
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "7.:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "A;:P+06";
      String string1 = "a.:p+06";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("a.:p+06");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: a.:p+06
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "c:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("c:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: c:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "avp%A'$djZBR&FYD_gQ";
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "A;:P+06";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("A;:P+06");
      String string1 = "KG3\\^.g1eee6>lx]28";
      String string2 = ".";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("KG3^.g1eee6>lx]28", ".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("A;:P+06");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("A.:P+06");
      int int0 = (-2623);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setPathSegment((-2623), ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("WhZ/<xs%JD", 10, 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "https:/www.somfakeutwelormedurl.or/fooexample";
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somfakeutwelormedurl.or/fooexample");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.somfakeutwelormedurl.or/fooexample");
      httpUrl1.equals(httpUrl0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("https:/www.somfakeutwelormedurl.or/fooexample");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: https:/www.somfakeutwelormedurl.or/fooexample
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      httpUrl0.encodedPathSegments();
      httpUrl1.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      String string0 = "encodedPathSegment == null";
      httpUrl_Builder0.addEncodedPathSegment("encodedPathSegment == null");
      httpUrl_Builder0.addEncodedPathSegments("mMcB):c");
      String string1 = "[";
      httpUrl_Builder0.encodedPassword("[");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("A::P+06");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: A::P+06
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      httpUrl0.encodedPathSegments();
      httpUrl0.newBuilder("N9P<0[c?U`XoNH#;6TO");
      httpUrl1.newBuilder();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("%2e%2e");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("c:");
      httpUrl0.resolve("c:");
      httpUrl_Builder0.encodedFragment("c:");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.queryParameterValues("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.queryParameter("https:/www.somefakebutwelformedurl.org/fooexample");
      httpUrl0.fragment();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("]");
      httpUrl_Builder0.addEncodedQueryParameter("9pK5Vg-", "https:/www.somefakebutwelformedurl.org/fooexample");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("encodedName == null");
      HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      httpUrl0.encodedPathSegments();
      httpUrl1.queryParameter("N9P<0[c?U`XoNH#;6TO");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder0.setEncodedQueryParameter("'2KuAx%2gt", "'2KuAx%2gt");
      httpUrl_Builder1.setEncodedQueryParameter("; charset=utf-8", "; charset=utf-8");
      httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("; charset=utf-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ; charset=utf-8
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/9gmQ<y@i382w![o7n0z*3o");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/9gmQ<y@i382w![o7n0z*3o
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "%Z2e.";
      String string1 = "http";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.canonicalize("http", "W![o7N0z*3o", true, true, false, true);
      String string2 = "9gMw<y@I";
      int int0 = 3834;
      URL uRL0 = MockURL.URL("http", "9gMw<y@I", 3834, "W![o7N0z*3o", (URLStreamHandler) null);
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("%Z2e.");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("#py");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: #py
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      httpUrl0.encodedPathSegments();
      httpUrl1.query();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("U`XoNH");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("U`XoNH");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("..");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("U`XoNH");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("U`XoNH", "l}]>#75f,m2&GI!{");
      httpUrl_Builder5.setEncodedQueryParameter("U`XoNH", "..");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      httpUrl1.queryParameterValues("[a.:p+0");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7.:!Z;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7.:!Z;
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.canonicalize("http", "W![o7N0z*3o", true, true, false, true);
      URL uRL0 = MockURL.URL("http", "\r", 31, "+VUN!", (URLStreamHandler) null);
      HttpUrl.get(uRL0);
      try { 
        HttpUrl.getChecked("http");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.canonicalize("http", "W![o7N0z*3o", false, false, false, false);
      URL uRL0 = MockURL.URL("http", "W![o7N0z*3o", 3834, "W![o7N0z*3o", (URLStreamHandler) null);
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.password();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("N9P<0[c?U`XoNH#;6TO", "\r");
      httpUrl_Builder2.encodedFragment("p`mdm6\"dci<ofdl");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.host();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("N9P<0[c?U`XoNH#;6TO");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(1545);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3090, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/expected leading [0-9a-fa-f] character but was %#x/%2e%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("%2e%2e", "https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/expected leading [0-9a-fa-f] character but was %#x/%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/expected leading [0-9a-fa-f] character but was %#x/%2e%2e");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment(".xyThQUd9Fd+iwp");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("%2e%2e", "vLr<vDJH)]`");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword(".xyThQUd9Fd+iwp");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setEncodedPathSegment((-933), "vLr<vDJH)]`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\r");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(43);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("\r");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.addQueryParameter((String) null, "\r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/9gmw<y@i:3826w![o7n0z*3o");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:/9gmw<y@i:3826w![o7n0z*3o
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 0, 0, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("iUw");
      httpUrl_Builder0.removePathSegment(0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte(9);
      buffer1.readUtf8Line();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "bw(,B[,(>_q95";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("!R2BVr\"I+", "bw(,B[,(>_q95");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("\t");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(9, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.parse("https:?9gmQ<y@i:3856w![=7n0z*3;");
  }
}
