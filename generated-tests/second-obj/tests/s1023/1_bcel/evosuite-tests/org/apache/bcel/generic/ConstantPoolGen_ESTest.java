/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:46:05 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addNameAndType((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayType arrayType0 = new ArrayType((byte)5, (byte)5);
      int int0 = constantPoolGen0.addArrayClass(arrayType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("", "SimpleElementValueGen doesnt know how to write out type ", "U~U");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-624), 2731);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "fneg", "?Dhi,V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupLong((-749L));
      int int0 = constantPoolGen0.addInterfaceMethodref(">=", "hO5}#r", ">=");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(293, 293);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 293
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      constantPoolGen0.getConstant(1);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      constantPoolGen0.getFinalConstantPool();
      int int1 = constantPoolGen0.addFieldref(",8!", ",8!", ",8!");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong(0L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("xSQgnZB<9KI$GU:");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, (-1673));
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      JavaClass.getComparator();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupNameAndType("xSQgnZB<9KI$GU:", "ct.E");
      assertEquals((-1), int0);
      
      int int1 = constantPoolGen0.addString("xSQgnZB<9KI$GU:");
      assertEquals(2, int1);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(240, 240);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(240, 240);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble(240);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[28];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("xSQgnZB<9KI$GU:");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("xSQgnZB<9KI$GU:");
      constantArray0[0] = (Constant) constantUtf8_0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "xSQgnZB<9KI$GU:");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[4] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantNameAndType0.clone();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("xSQgnZB<9KI$GU:", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addNameAndType("xSQgnZB<9KI$GU:", "xSQgnZB<9KI$GU:");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("xSQgnZB<9KI$GU:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("xSQgnZB<9KI$GU:");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(0, 0);
      constantArray0[4] = (Constant) constantNameAndType2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, (-1673));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupLong((-1673));
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(3643L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      constantArray0[1] = (Constant) constantLong2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-1717986916));
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1717986916), (-1717986916));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-934));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.lookupFieldref((String) null, "' is referenced, but cannot be loaded: '", (String) null);
      int int1 = constantPoolGen0.lookupLong((-1));
      assertEquals(5, constantPoolGen0.getSize());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(395, 395);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 395
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1866), (-1866));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1866
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?D");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-2237L));
      constantPoolGen0.addClass("vy]Qc09/!\"WMk`");
      int int0 = new Integer(1);
      int int1 = constantPoolGen0.lookupClass("vy]Qc09/!\"WMk`");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-694.316933));
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("ekN\"", (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.CANON_EQ;
      int int1 = constantPoolGen0.size;
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantClass constantClass0 = new ConstantClass(77);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      ConstantFloat constantFloat0 = new ConstantFloat(638.42F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(4004);
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("");
      String string0 = "B#U-}6\\-a_Az#2bB";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2067947214), 5);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger((-2067947214));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = Pattern.UNICODE_CASE;
      int int1 = constantPoolGen0.addDouble(64);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-1.9299770677037809));
      InstructionList instructionList0 = new InstructionList();
      constantPoolGen0.lookupNameAndType("B#U-}6-a_Az#2bB", "B#U-}6-a_Az#2bB");
      Type[] typeArray0 = new Type[4];
      FCONST fCONST0 = new FCONST();
      Type type0 = fCONST0.getType(constantPoolGen0);
      typeArray0[0] = type0;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1.9299770677037809));
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) fCONST0, (CompoundInstruction) pUSH0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(2898);
      int int0 = constantPoolGen0.addInteger((-2078209980));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addClass("l\"0Erw9cPS");
      int int0 = Long.BYTES;
      constantPoolGen0.addLong(10L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l\"0Erw9cPS");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1347, 256);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addInteger(2);
      int int1 = constantPoolGen1.addLong(8);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(256, int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = "l\"0Erw9cPS";
      constantPoolGen0.addFieldref("l\"0Erw9cPS", "l\"0Erw9cPS", "l\"0Erw9cPS");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l\"0Erw9cPS");
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8((ConstantUtf8) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-793L));
      constantPoolGen0.lookupFieldref("", "SimpleElementValueGen doesnt know how to write out type ", "U~U");
      constantPoolGen0.lookupFieldref("", "4y3K#\u0005KdOQ\"%kc?[;G", "4y3K#\u0005KdOQ\"%kc?[;G");
      constantPoolGen0.getConstant(0);
      constantPoolGen0.lookupMethodref("", "", "");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupFieldref("4y3K#\u0005KdOQ\"%kc?[;G", "b>984$CC:w7|I", "");
      constantPoolGen0.lookupInterfaceMethodref("ty&nR1fq=+l^[}t", "SimpleElementValueGen doesnt know how to write out type ", "1RmJ?7aE-W^+BLz>");
      constantPoolGen0.adjustSize();
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.adjustSize();
      constantPoolGen0.lookupInteger((-1));
      int int0 = constantPoolGen0.addFloat(2.0F);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-1717986931));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2792), (-1717986931));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addFloat((-1717986931));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantDouble constantDouble0 = new ConstantDouble(3156.187627079152);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      
      ConstantPool constantPool0 = constantPoolGen1.getConstantPool();
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
      int int0 = constantPoolGen1.addFloat(1L);
      constantPoolGen1.lookupLong((-4616189618054758400L));
      assertEquals(10, constantPoolGen1.getSize());
      
      int int1 = constantPoolGen0.lookupLong(1L);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("xSQgnZB<9KI$GU:");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantString constantString0 = new ConstantString(0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(123, 0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(123, 0);
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Float.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat((-1381.2836F));
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2920, (-1664));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2920
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1792.7);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = Float.SIZE;
      constantPoolGen0.getConstantPool();
      String string0 = "l\"0Erw9cPS";
      String string1 = "@D])V(>z";
      String string2 = "$mCaErhw@h";
      constantPoolGen0.addInteger(1);
      String string3 = "l`2i";
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen1.addFloat(1);
      constantPoolGen0.lookupDouble(1);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(132);
      // Undeclared exception!
      try { 
        aNEWARRAY0.getLoadClassType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 132 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1792.7);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 1);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addInteger(8);
      constantPoolGen2.addInteger(8);
      constantPoolGen1.lookupFieldref("O&B]Y]\"`axH <<z@L", "%\nExiting!!\n", "B1@C2dyUKIR+4");
      MONITORENTER mONITORENTER0 = (MONITORENTER)InstructionConstants.MONITORENTER;
      InstructionHandle instructionHandle0 = new InstructionHandle(mONITORENTER0);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      PUSH pUSH0 = new PUSH(constantPoolGen2, false);
      instructionList0.append(instructionHandle0, (CompoundInstruction) pUSH0);
      IFLT iFLT0 = new IFLT();
      InstructionList instructionList1 = new InstructionList((BranchInstruction) iF_ACMPNE0);
      CHECKCAST cHECKCAST0 = new CHECKCAST();
      // Undeclared exception!
      try { 
        cHECKCAST0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(1441);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1441);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(1441);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupClass("N&Nz?@8%xSQgnZB<9KI$GU:");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Float.MIN_EXPONENT;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1707, 220);
      BCELComparator bCELComparator0 = Method.getComparator();
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<ConstantInteger> class0 = ConstantInteger.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, visitor0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      BCELComparator bCELComparator1 = Method.getComparator();
      Constant.setComparator(bCELComparator1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(64, 1707);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W=:{-@!Q");
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantPoolGen0.addInterfaceMethodref("W=:{-@!Q", "W=:{-@!Q", "W=:{-@!Q");
      ConstantFieldref constantFieldref2 = new ConstantFieldref((byte)1, 253);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref2);
      ConstantFieldref constantFieldref4 = new ConstantFieldref(constantFieldref1);
      constantFieldref4.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool1);
      int int1 = Pattern.DOTALL;
      int int2 = Float.SIZE;
      int int3 = constantPoolGen1.lookupFloat((byte)1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(135, 135);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.toString();
      constantArray0[0] = (Constant) constantNameAndType1;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.setConstant(135, constantArray0[0]);
      constantPoolGen0.addDouble(135);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.getSize();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1866), (-1866));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic1, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1866, name_and_type_index = -1866)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayType arrayType0 = new ArrayType("E0c4=32Uef|hzgO,L", 1);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 250;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      Boolean boolean0 = new Boolean("");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(244, 243);
      constantMethodHandle0.copy();
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantLong constantLong0 = new ConstantLong(2679L);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_2;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantUtf8_1;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("", "secdPHILDkiU:7z3~)r:SAME_EXTENDED::`S::#l\"0Erw9cPS#xWPDaKC3");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantArray0[6], constantPoolGen1);
      int int0 = constantPoolGen0.index;
      constantPoolGen0.addConstant(constantUtf8_2, constantPoolGen0);
      constantPoolGen0.lookupString("P@fY+8V\\mk`Q");
      constantPoolGen1.addFloat(0.0F);
      constantPoolGen1.lookupInterfaceMethodref("0th\":EWd!u(}", "b_8&PrU(LqWq|H", "iconst_3");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant((Constant) null, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?Dhi,V";
      int int0 = Float.MIN_EXPONENT;
      constantPoolGen0.addMethodref("?Dhi,V", "?Dhi,V", "?Dhi,V");
      ConstantLong constantLong0 = new ConstantLong((-126));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      EvoSuiteFile evoSuiteFile0 = null;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("?Dhi,V");
      String string1 = "' is a class, but not an interface as expected.";
      String string2 = " not contained in BranchHandle.";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "?Dhi,V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"?Dhi,V\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString(0);
      ConstantString constantString1 = new ConstantString(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = 3067;
      constantPoolGen0.size = 0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addString("xSQgKZB<9KI$GU:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantFloat constantFloat0 = new ConstantFloat((-1208.303F));
      constantArray0[4] = (Constant) constantFloat0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      constantPool0.copy();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      JavaClass javaClass1 = javaClass0.getSuperClass();
      javaClass1.setSuperclassName("_y*YX@ dH=,");
      ConstantString constantString0 = new ConstantString((byte)3);
      constantPoolGen0.setConstant((byte)2, constantFloat0);
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertEquals("Ljava/lang/StringBuffer;", objectType0.getSignature());
      
      objectType0.setSignature("java/lang/StringBuffer");
      constantPoolGen0.lookupNameAndType((String) null, (String) null);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1792.7);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addLong(1L);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 1);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantDouble cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      String string0 = ",*nLMIKq";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",*nLMIKq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",*nLMIKq");
      ConstantInteger constantInteger0 = new ConstantInteger((-35));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantInteger0.copy();
      constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addFieldref(",8!", ",8!", "il.append(_factory.createNewArray(");
      constantPoolGen0.addString(",8!");
      int int2 = constantPoolGen0.addFieldref(",8!", ",8!", "il.append(_factory.createNewArray(");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, (-1716));
      constantMethodHandle0.copy();
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((-1716), (-1716));
      Method.getComparator();
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong((-1716));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1267, 0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref((-1716), (-1716));
      ConstantFieldref constantFieldref2 = new ConstantFieldref(0, (-1716));
      constantPoolGen0.addInterfaceMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      ConstantFieldref constantFieldref3 = new ConstantFieldref(1267, 952);
      ConstantFieldref constantFieldref4 = new ConstantFieldref(1267, (-1278));
      ConstantFieldref constantFieldref5 = new ConstantFieldref(constantFieldref4);
      String string0 = "Unknown constant type ";
      constantPoolGen0.addInterfaceMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("l\"5Erw9cPS:W=:{-@!Q:W=:{-@!Q");
      constantUtf8_0.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 0, reference_index = -1716)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z(q89$Eh:AL#k|:q!");
      constantArray0[0] = (Constant) constantUtf8_0;
      int int0 = 0;
      ConstantString constantString0 = new ConstantString(0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "N&N,z?@8";
      constantPoolGen0.addMethodref("Z(q89$Eh:AL#k|:q!", "N&N,z?@8", "Z(q89$Eh:AL#k|:q!");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("Z(q89$Eh:AL#k|:q!", "N&N,z?@8", "Z(q89$Eh:AL#k|:q!");
      String string1 = "N&Nz?@8";
      constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("Z(q89$Eh:AL#k|:q!", (String) null, "$/zj[Z(`Q_I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }
}
