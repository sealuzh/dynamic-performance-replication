/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:31:41 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.replication.master.MasterFactory;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.normalize("7)/BMx__:GI8([", false);
      assertEquals("7) / BMx__ : GI8 ([", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("l =Io'U", true);
      assertEquals("l = Io 'U'", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[20];
      String string0 = SQLUtil.leftJoin("cns0@7}07{KWwHT", stringArray0, "", "cns0@7}07{KWwHT", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("dDHcf");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin(">\fpg_Clt|G~", stringArray0, "/*", ">\fpg_Clt|G~", stringArray0);
      assertEquals("/* as >\fpg_Clt|G~ on ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName((DBObject) null);
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-68007327), "getUnicodeStream");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getUnicodeStream", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("getUnicodeStream GETUNICODESTREAM(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Invalid isolation name.");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Invalid isolation name.", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"Invalid isolation name.\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SYSFUN", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES null(, )", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SYSFUN", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT SYSFUN ", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES null(, )", string2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBSchema dBSchema0 = new DBSchema("Tfn!`P7[m`rL'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Tfn!`P7[m`rL'", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Tfn!`P7[m`rL'", true, defaultDBTable0, "42506");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Tfn!`P7[m`rL' CHECK 42506", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append(1318.78F);
      SQLUtil.addOptionalCondition("o)d%]b0w", stringBuilder1);
      assertEquals("1318.78 or o)d%]b0w", stringBuilder1.toString());
      assertEquals("1318.78 or o)d%]b0w", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("-tj1J\"}L2|", false);
      assertEquals("- tj1J \"}L2|\"", string0);
      
      String string1 = SQLUtil.substituteMarkers("select43x60.u", "- tj1J \"}L2|\"", "- tj1J \"}L2|\"");
      assertEquals("select43x60.u", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.leftJoin("ns0@7}07{K2WwHT", stringArray0, "", "ns0@7}07{K2WwHT", stringArray0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "derby.optimizer.noTimeout";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Dependable.DEFAULT;
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("derby.optimizer.noTimeout = 'derby.optimizer.noTimeout' AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("renameconstraint primary key (separator)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"separator\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Dependable.DEFAULT;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Default";
      stringArray0[1] = "Default";
      stringArray0[2] = "Default";
      stringArray0[3] = "Default";
      stringArray0[4] = "Default";
      String string1 = SQLUtil.renderColumnListWithTableName("Default", stringArray0);
      assertEquals("Default.Default, Default.Default, Default.Default, Default.Default, Default.Default", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("alter index|:");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("alter index|:", stringBuilder0);
      String string0 = Dependable.DEFAULT;
      assertEquals("Default", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Rs4Eb(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Rs4Eb(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = MasterFactory.MODULE;
      String string1 = SQLUtil.normalize("org.apache.derby.iapi.store.replication.master.MasterFactory", false);
      assertEquals("org.apache.derby.iapi.store.replication.master.MasterFactory", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableselect relname from pg_catalog.pg_jlass where oid = ?");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("T)*]P} \"Vq2}~)Hks");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema T)*]P} \"Vq2}~)Hks", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("><,", false);
      assertEquals("> <,", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDML("ALTER TABLE ");
      boolean boolean1 = SQLUtil.isDDL("ALTER TABLE ");
      assertFalse(boolean1 == boolean0);
      
      String string0 = Page.DIAG_SLOTTABLE_SIZE;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|2'cmw<PP]#u", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("|2'cmw<PP]#u", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      DBDataType dBDataType0 = DBDataType.getInstance(65, "VPjE");
      Integer integer0 = new Integer(65);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";?m", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(";?m VPJE(65) NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(";?m, ;?m", string1);
      
      boolean boolean0 = SQLUtil.isDDL(";?m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      boolean boolean0 = SQLUtil.isDML("callexecuteconstraint primary key (separator)");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "callexecuteconstraint primary key (separator)";
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callexecuteconstraint primary key (separator)", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (callexecuteconstraint primary key (separator), , )", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.mutatesDataOrStructure("alter mterialized view");
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("update");
      boolean boolean1 = SQLUtil.isProcedureCall("update");
      assertFalse(boolean1);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, 2262, "update");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("UPDATE", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("-tj1J\"}L2|", true);
      assertEquals("- tj1J \"}L2|\"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT relname FROM pg_catalog.g_jlass WHERE oi = ?");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ns@7}0{K2wHT");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("Jx7ZXrJg2Y4/rg", stringBuilder0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exec7)/bmx__:gi8([", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec7)/bmx__:gi8([ PRIMARY KEY (, , )", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized view7)/bmx__:gi8([");
      assertTrue(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      String string1 = SQLUtil.renderValue(nameSpec0);
      assertEquals("IF_REPRODUCIBLE", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("T)*]P} \"Vq2}~)Hks", true);
      assertEquals("T) * ] P } \"Vq2}~)Hks\"", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.removeComments("renameconstraint primary key (separator)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = RawStoreFactory.CRYPTO_OLD_EXTERNAL_KEY_VERIFY_FILE;
      SQLUtil.isDML("deletevoszw~");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("verifyOldKey.dat");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME;
      String string1 = MasterFactory.MODULE;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("&h\"[s", stringBuilder0);
      assertEquals("&h\"[s", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("1`D..Z*gDSaTe");
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z<Ao-#");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("z<Ao-#", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = Dependable.ACTIVATION;
      Character character0 = Character.valueOf('4');
      SQLUtil.substituteMarkers("po9TRpB%#I[{jTw4A0", "po9TRpB%#I[{jTw4A0", character0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLUtil.isDML("create materialized view");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("wKk=wPRO,@16k{{M0");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
      
      System.setCurrentTimeMillis(629L);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.CRYPTO_OLD_EXTERNAL_KEY_VERIFY_FILE;
      boolean boolean0 = SQLUtil.isDML("create unique indexalter materialized view");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("truncateverifyoldkey.dat");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      String string0 = Dependable.ACTIVATION;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Activation", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      System.setCurrentTimeMillis((-1380L));
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT Activation ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, ")dS}FB7a?+vxErhy", (String) null, stringArray0);
      assertEquals(")dS}FB7a?+vxErhy as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h}W!oXP9/{sO#kJK)hE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Collection<DBTable> collection0 = new GenericDescriptorList();
      String[] stringArray0 = new String[19];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT  UNIQUE (, , , , , , , , , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*/";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("kgW>TSlq-ps50xsrr.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCatalog dBCatalog0 = new DBCatalog("FOREIGN KEY ");
      dBCatalog0.getSchema("kjV'$grw<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("[P-?9bLJ6qH/(jd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '[P-?9bLJ6qH/(jd' not found in table '*_/'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }
}
