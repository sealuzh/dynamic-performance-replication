/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:31:54 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "y8M8[nr;$?*M@ecb4g";
      try { 
        HttpUrl.getChecked("y8M8[nr;$?*M@ecb4g");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for y8M8[nr;$?*M@ecb4g
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "'}sXN)ko";
      httpUrl_Builder0.query("'}sXN)ko");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("'}sXN)ko");
      httpUrl_Builder1.reencodeForUri();
      String string1 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("[");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.parse("H`");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("H`");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-989), "\r");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("H");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(".:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("rrkk,@&6FG!");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment((-1173), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.parse("7SB@;");
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "7SB@;", 915, 915, "7SB@;", false, false, false, false);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("@/?#");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = ":&";
      httpUrl_Builder0.username(":&");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "icr";
      httpUrl_Builder0.addQueryParameter("icr", "icr");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("icr");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("icr");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("u", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("scheme == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllEncodedQueryParameters("\n");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "charset == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("charset == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      int int0 = (-316);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port((-316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -316
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment((String) null);
      String string0 = "\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-989), "\r");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "timeout";
      try { 
        HttpUrl.getChecked("timeout");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for timeout
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(678);
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("", "");
      String string1 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("lw>NXa,8qsB]RB?NLeh");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("timeout < 0: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: timeout < 0: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("!", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: !
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("kqBu(m< #6zBT!ej)9");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("kqBu(m< #6zBT!ej)9", "kqBu(m< #6zBT!ej)9");
      String string0 = "/V@Nz<s%";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("/V@Nz<s%");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(1124, "ALFoje6]8c8[L[S");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1124, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(49, ".%2e");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "data";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("data");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("data");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("data");
      String string1 = "(";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("(", "(");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.port(70);
      String string2 = "E1F;^$uJ6Qffr";
      httpUrl_Builder5.username("E1F;^$uJ6Qffr");
      String string3 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        HttpUrl.getChecked("http:%");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-3244), "/+z");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.defaultPort("https:vk,m$^,");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "https:vk,m$^,");
      try { 
        HttpUrl.getChecked("Ii:Gmv_vkXM$^,");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for Ii:Gmv_vkXM$^,
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery(".+");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.percentDecode("0p<S%t+D;6N", true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("0p<S%t+D;6N", "0p<S%t+D;6N");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "43/*u%+V`2";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("43/*u%+V`2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 43/*u%+V`2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("%", true);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1653);
      String string0 = "?";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("?");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.parse("H`");
      boolean boolean1 = HttpUrl.percentEncoded("H`", (-3581), (-3890));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.percentEncoded("*r&cAS17,S2?(e%F(RC", 6, 231);
      // Undeclared exception!
      try { 
        HttpUrl.Builder.ParseResult.valueOf("*r&cAS17,S2?(e%F(RC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant okhttp3.HttpUrl.Builder.ParseResult.*r&cAS17,S2?(e%F(RC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("::");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("'");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("\r", "'");
      String string0 = "WS";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("WS");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment((-3534), "WS");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("unexpected port: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: unexpected port: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :@
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/...");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:h@d");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      httpUrl0.query();
      assertEquals("h", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/";
      httpUrl_Builder0.encodedPath("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: /
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "b";
      httpUrl_Builder0.host("b");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 50;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(4);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "H*";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = ".%2e";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "z\flI@PC}GTN8E;");
      String string0 = "thread interrupted";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("thread interrupted", "thread interrupted");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("thread interrupted");
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "?KcIBkuJ|i=e=!!l\"Z";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("?KcIBkuJ|i=e=!!l\"Z");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("?KcIBkuJ|i=e=!!l\"Z");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("\"I 8)=");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("Cannot buffer entire body for content length: ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("zf%7bxix%2fjc.ll2", "U^SH&6Wp|3Ls%%)Ie");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("%0D");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("Unexpected%20hex%20string:%20");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("%0D");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.fragment("]l%3DO%27^8;iw:NA");
      httpUrl_Builder6.addEncodedPathSegment("^s!yofTpR@84F");
      String string0 = "]l=O'^8;iw:NA";
      httpUrl_Builder0.removeAllQueryParameters("delegate == null");
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder5.encodedPassword(" \"':;<=>@[]^`{}|/?#");
      httpUrl_Builder7.setQueryParameter("]l%3DO%27^8;iw:NA", "Z|&tk");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.host("^s!yofTpR@84F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ^s!yofTpR@84F
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword(" #%/:?@[]");
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("8.M", "8.M");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("scheme == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("scheme == null", "ZQ-fu");
      httpUrl_Builder3.username("");
      httpUrl_Builder0.addEncodedQueryParameter("\u2026", "\u2026");
      try { 
        HttpUrl.getChecked("scheme == null");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for scheme == null
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("\u2026]");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\u2026]";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(77, "\u2026]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter(" \"'<>#&=", "^`H)Vv3sz,`W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.password(" \"'<>#&=");
      httpUrl_Builder2.addEncodedPathSegment("^`H)Vv3sz,`W");
      String string0 = "wAua-4g0VU!6";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("wAua-4g0VU!6");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment(" \"'<>#&=");
      String string1 = "";
      httpUrl_Builder3.encodedUsername = "wAua-4g0VU!6";
      httpUrl_Builder3.removeAllQueryParameters("]l=O'^8;iw:NA");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedPassword("");
      httpUrl_Builder5.setQueryParameter("wAua-4g0VU!6", "unexpected port: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("charset == null");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("charset == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("PQBQZaXlom");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegment("duration <= 0: ");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.addEncodedPathSegments("PQBQZaXlom");
      httpUrl_Builder4.addEncodedQueryParameter("duration <= 0: ", "PQBQZaXlom");
      httpUrl_Builder5.addPathSegments("");
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Xx.kR[+JrRx";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("Xx.kR[+JrRx");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(356);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("H`");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("%2e.");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("http", "byteCount < 0: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("/V@Nz<s%", "%2e%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(50);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("%2e%2e");
      httpUrl_Builder5.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder2.encodedPassword("99cjn,W;tJsKs`.*e");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.setPathSegment(255, "99cjn,W;tJsKs`.*e");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.parse("H*");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("$F5z6G\"\"+0y;&s", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(1683);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1683, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "charset == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("charset == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query((String) null);
      String string1 = "JwZ@Vs\"6)zc#ki_";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("JwZ@Vs\"6)zc#ki_", "99cjn,W;tJsKs%5C%60.*e");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("JwZ@Vs\"6)zc#ki_", "JwZ@Vs\"6)zc#ki_");
      int int0 = 50;
      httpUrl_Builder2.port(50);
      // Undeclared exception!
      try { 
        httpUrl_Builder5.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("9X5`R; %");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("em*7l[(_k+");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("H*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: H*
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("+");
      httpUrl_Builder0.host("+");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("ii:gmv");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Y,H%M$PyGgZ&8bBOF");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("H*");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(3109);
      httpUrl_Builder4.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter("Y,H%M$PyGgZ&8bBOF", "Stream closed");
      httpUrl_Builder5.addEncodedPathSegment("Y,H%M$PyGgZ&8bBOF");
      HttpUrl httpUrl0 = HttpUrl.parse("Stream closed");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "H*";
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = ".%2e";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.parse("z(oS");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("f3+d8");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("f3+d8");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("z(oS");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("f3+d8");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedUsername("f3+d8");
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = ".[/ncw;";
      HttpUrl.parse(".[/ncw;");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("If+cGFH");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "{__G'c8l/1;R`B=U&l*";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("{__G'c8l/1;R`B=U&l*");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("{__G'c8l/1;R`B=U&l*");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("{__G'c8l/1;R`B=U&l*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: {__G'c8l/1;R`B=U&l*
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      HttpUrl.parse("v=^C?iAmcX%E'8");
      HttpUrl httpUrl0 = HttpUrl.parse("https:");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("sG3O%%WR7E");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("u]\"1Df.d", (String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setPathSegment(0, "&mhONp`z}");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("/lFL");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("&mhONp`z}");
      httpUrl_Builder5.removePathSegment(0);
      HttpUrl httpUrl0 = HttpUrl.parse("/lFL");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "closed";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("closed", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("%t52e%252e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("closed");
      httpUrl_Builder4.addQueryParameter("Stream closed", "%t52e%252e");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.getChecked("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/9o+i");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/9o+i");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("+");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("+");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.password("+");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("https:mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/9o+i", "-rSN$`et''S\"EA~-!RR");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.reencodeForUri();
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedPath();
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.parse(".");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(356);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("(I.+");
      httpUrl_Builder1.addPathSegments(".");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("http:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("https:_vkxm$^,");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("Ii:Gmv_vkXM$^,", "http:");
      httpUrl_Builder4.removePathSegment(0);
      HttpUrl httpUrl0 = HttpUrl.parse("https:_vkxm$^,");
      httpUrl0.url();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "6W&t5n$/*\"g)ub0Os";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "H`";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "Xx.kR[+JrRx";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("Xx.kR[+JrRx");
      httpUrl_Builder1.port(356);
      httpUrl_Builder0.encodedUsername("H`");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(356);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.parse("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2F%5Exx5k*");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2F%5Exx5k*");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2F%5Exx5k*");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2F%5Exx5k*", "http:%2Fmnt%2Fgaiagpfs%2Fusers%2Fhomedirs%2Fapanichella%2Fevosuite_performance%2Fdataset%2Fgordon_scripts_adaptive%2Fprojects%2F7_okhttp%2F%5Exx5k*");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("'GB*x\"~M6", "%5e%60%7b%7c%7d");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("endIndex < beginIndex: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: endIndex < beginIndex: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "D~:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("D~:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: D~:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.parse(".");
      String string0 = "(I.+";
      HttpUrl.queryStringToNamesAndValues("(I.+");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(998, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "http:v _vkxm$^,";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("http:v _vkxm$^,");
      String string1 = "Invalid URL: ";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("Invalid URL: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("%2e%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("%2e%2e", "%2e%2e");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addPathSegment("%2e%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("%2e%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %2e%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:h@d");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, list0.size());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("h", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:_vkxSm$^,");
      httpUrl0.url();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("J]d8.Zk");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl0.queryParameter("https:_vkxSm$^,");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://_vkxsm$^,/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("h", string0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("h", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.queryParameter((String) null);
      assertEquals(443, httpUrl0.port());
      assertEquals("h", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.redact();
      HttpUrl.Builder.ParseResult.values();
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      
      httpUrl0.queryParameter("O;og8dn");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:_vkxm$^,");
      HttpUrl httpUrl1 = httpUrl0.resolve("l:f$t9");
      assertNull(httpUrl1);
      
      httpUrl0.queryParameter("https:_vkxm$^,");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://_vkxm$^,/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("Content-Length (");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Content-Length (
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder.ParseResult.values();
      URI uRI0 = httpUrl0.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", uRI0.toString());
      
      httpUrl0.encodedQuery();
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.newBuilder();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      
      httpUrl0.query();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("h", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:h@d");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("h", string0);
      
      httpUrl0.equals("https:h@d");
      assertEquals("h", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/http:v _vkxm$^,");
      httpUrl_Builder0.encodedPath("/http:v _vkxm$^,");
      try { 
        HttpUrl.getChecked("okio.GzipSource");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for okio.GzipSource
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("%2e.", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query(".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("://", ":");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword(".");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("%2e.");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      httpUrl0.queryParameterNames();
      String string0 = httpUrl0.host();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E~}|`,cX");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.scheme();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("!hJ%23+kNB%20%20%3Ctv1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: !hJ%23+kNB%20%20%3Ctv1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(",EF7*B%D]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ,EF7*B%D]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[bytecount > integer.max_value: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [bytecount > integer.max_value: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("/f%@5*S-)C");
      String string0 = "::valid URL: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::valid URL: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::valid URL: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.queryParameterValues("AC,,s85^");
      httpUrl0.hashCode();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
      assertEquals("h", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(" hex=");
      StringBuilder stringBuilder0 = new StringBuilder(115);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = httpUrl0.queryParameterNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "*_dofcos-%22%3f%7fzni%7f";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("*_dofcos-%22%3f%7fzni%7f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: *_dofcos-%22%3f%7fzni%7f
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl.parse("f`V=W#|B9!K");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, linkedList0);
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      httpUrl0.queryParameterValues((String) null);
      assertEquals("http://http/#http", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.resolve("h0'4kd)#Y{");
      HttpUrl httpUrl1 = httpUrl0.resolve(" hex=");
      assertNotNull(httpUrl1);
      
      httpUrl1.equals(" hex=");
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/hex=", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder(115);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      httpUrl0.queryParameterNames();
      HttpUrl httpUrl1 = httpUrl0.resolve(" ");
      Object object0 = new Object();
      httpUrl1.equals(object0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = " hex=";
      List<String> list0 = httpUrl0.pathSegments();
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("QRszCnJ9'ShJ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("WC/dvM ?b<M_v:/F^");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("WC/dvM ?b<M_v:/F^", " \"'<>#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("WC/dvM ?b<M_v:/F^");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("WC/dvM ?b<M_v:/F^", "9#2(O");
      httpUrl_Builder5.host("QRszCnJ9'ShJ");
      try { 
        HttpUrl.getChecked(" \"'<>#");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for  \"'<>#
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "%2e";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%2e");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.password();
      httpUrl0.hashCode();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "Iz}>";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1453, "Iz}>");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1453, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("w,Lv57 ho");
      httpUrl1.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("PD\"5z?}3#C");
      httpUrl0.resolve("PD\"5z?}3#C");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\r");
      httpUrl_Builder1.password("\r");
      StringBuilder stringBuilder0 = new StringBuilder();
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("\r");
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("h0'4kd)#Y{");
      httpUrl0.resolve("]u");
      httpUrl0.encodedQuery();
      httpUrl1.port();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("3~<@/zpSQAHu^o-)AR");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("encodedPathSegments == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("]u");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("h0'4kd)#Y{");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("]u");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("R&,S MV/D5/?z}RbPu_");
      httpUrl1.encodedQuery();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("#9%%K|{*Dl^");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("http", ";8Qj7h5m\"");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(2742);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPath("R&,S MV/D5/?z}RbPu_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: R&,S MV/D5/?z}RbPu_
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("h0'4kd)#Y{");
      URI uRI0 = httpUrl1.uri();
      MockURI.getRawAuthority(uRI0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment(".%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("I.|fYEHdZN|_HenW}v", "lZ`\"=Ed~t");
      String string0 = "f0.$.*^>d:f$u +}S";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("f0.$.*^>d:f$u +}S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f0.$.*^>d:f$u +}S
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0.:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder("\\");
      httpUrl0.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("%2e%2e", "%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("%2e%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("e{", "%2e%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("..");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("e{");
      httpUrl_Builder5.addEncodedPathSegment("..");
      try { 
        HttpUrl.getChecked("e{");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for e{
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      MockURL.toString(uRL0);
      httpUrl0.queryParameter("%x7m7U\u0003=?");
      httpUrl0.querySize();
      httpUrl0.resolve("cK{sV$N");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.percentDecode("file:/", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "file:/");
      HttpUrl.parse("https:raop8xy[");
      int int0 = 37;
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("https:raop8xy[", 228, 37, "file:/", true, false, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl.parse("https:ray[");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("size < 8: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("%2e%2e");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("https:hm@d");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllQueryParameters("https:_vkxm$^,");
      httpUrl_Builder5.addEncodedPathSegment("ZhQ;A");
      HttpUrl.getChecked("https:hm@d");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-1162));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("size < 8: ");
      httpUrl_Builder2.username("%2e%2e");
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.newBuilder();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      httpUrl0.pathSize();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("nL <#Xb&");
      httpUrl0.isHttps();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "scheme == null";
      HttpUrl.get(uRL0);
      httpUrl0.fragment();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("KvDr`kog\"");
      String string1 = "okio.SegmentedByteString";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("okio.SegmentedByteString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: okio.SegmentedByteString
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:_vkx?m$^,");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      HttpUrl httpUrl1 = httpUrl0.resolve("V}fMh");
      httpUrl1.resolve("..");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0..*U>d:$ tS";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0..*U>d:$ tS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0..*U>d:$ tS
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      httpUrl1.queryParameterValues("https:h@d");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:kxm$^,");
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("!f!jy\"oI&7tzpBMx", "https:kxm$^,");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 129, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:kxm$^,");
      String string0 = "?#";
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("&(= zfJN2{4YRBM0yb}", "https:kxm$^,");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("i%aZ,;1g`");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("N-;b5nekQS39B");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("https:kxm$^,");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("i%aZ,;1g`", "https:kxm$^,");
      httpUrl_Builder5.reencodeForUri();
      httpUrl1.fragment();
      List<String> list0 = httpUrl1.queryParameterValues("");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("%2e.");
      String string0 = "\n";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("#:d6X>Y>Nuq30#Yx");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:kxm$^,");
      String string0 = "?#";
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("&(= zfJN2{4YRBM0yb}", "https:kxm$^,");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("i%aZ,;1g`");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("N-;b5nekQS39B");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("i%aZ,;1g`");
      httpUrl_Builder3.encodedQueryNamesAndValues = list0;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("https:kxm$^,");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("i%aZ,;1g`", "https:kxm$^,");
      httpUrl_Builder5.reencodeForUri();
      httpUrl1.fragment();
      List<String> list1 = httpUrl1.queryParameterValues("");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:kxm$^,");
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      httpUrl1.encodedUsername();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("?#", "https:kxm$^,");
      httpUrl_Builder1.addPathSegment("?#");
      httpUrl1.query();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:kxm$^,");
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("?#", "https:kxm$^,");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("?#");
      httpUrl_Builder2.host("HmacSHA256");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("\"D6g]`#}=8(%9Iqap", "");
      httpUrl_Builder3.reencodeForUri();
      httpUrl0.fragment();
      httpUrl1.queryParameterValues("VXyzpg<-B;JG4(4#");
      HttpUrl.Builder httpUrl_Builder4 = new HttpUrl.Builder();
      httpUrl_Builder4.username("encodedPath == null");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:h@d");
      HttpUrl httpUrl1 = httpUrl0.resolve("?#");
      httpUrl0.queryParameterNames();
      httpUrl1.queryParameter("https:h@d");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "https:h[=";
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        HttpUrl.getChecked("https:h[=");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:h[=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "7:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("7:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "?Dx3w|iS[");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.queryParameterNames();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("https::k_yp5");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https::k_yp5
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.parse("https::yp5");
  }
}
