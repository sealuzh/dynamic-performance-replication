/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:46:17 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.exit(false);
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(580L, timeUnit0);
      asyncTimeout1.timedOut();
      boolean boolean0 = asyncTimeout1.exit();
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      assertSame(iOException1, iOException0);
      assertEquals("timeout", iOException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      Buffer buffer0 = new Buffer();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.clearDeadline();
      asyncTimeout0.exit(true);
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.enter();
      AsyncTimeout.head = asyncTimeout0;
      Source source0 = asyncTimeout0.source((Source) null);
      AsyncTimeout.head.source(source0);
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(deflaterSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((byte)106);
      Sink sink0 = AsyncTimeout.head.sink(bufferedSink0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException();
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      IOException iOException1 = asyncTimeout0.newTimeoutException(iOException0);
      assertEquals("timeout", iOException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearTimeout();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout0.deadline(60000000000L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head = asyncTimeout0;
      System.setCurrentTimeMillis((-382L));
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(580L, timeUnit0);
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(561L, timeUnit0);
      asyncTimeout1.timeout(561L, timeUnit0);
      asyncTimeout0.exit(true);
      asyncTimeout0.enter();
      asyncTimeout1.exit(true);
      asyncTimeout0.exit();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }
}
