/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:25:37 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("<ALeS9/m9vf#u2", "<ALeS9/m9vf#u2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Mongolian");
      int[] intArray0 = rE2_0.findSubmatchIndex("Mongolian");
      assertArrayEquals(new int[] {0, 9}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 1852);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("}");
      rE2_0.replaceFirst("}", "}");
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("bad *nst");
      String string0 = rE2_0.replaceFirst("bad *nst", "bad *nst");
      assertEquals("bad *nst", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("}");
      String string0 = rE2_0.replaceFirst("}", "}");
      assertEquals("}", string0);
      
      String string1 = rE2_0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      String string0 = rE2_0.replaceFirst("Ol_Chiki", "Ol_Chiki");
      assertEquals("Ol_ChikiOl_Chiki", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("bad inst");
      String string0 = rE2_0.replaceAll("bad inst", "bad inst");
      assertEquals("bad inst", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("PVY :Z~A");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String> list0 = rE2_0.findAll("", (-12));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("L^1WXLlcLB5;rK");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("L^1WXLlcLB5;rK", 265);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = RE2.match("O:okADwCI1+3#", "O:okADwCI1+3#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("5a");
      byte[] byteArray0 = new byte[4];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-829));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-820));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("s", (-2754), false);
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Inherite%d");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.get();
      int[] intArray0 = new int[3];
      intArray0[0] = (-470);
      intArray0[2] = (-470);
      boolean boolean0 = rE2_0.match("", (-470), (-4516), (-470), intArray0, (-4516));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("H%Hx");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 329);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("sK");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Mongolian");
      int[] intArray0 = rE2_0.findSubmatchIndex("]ry{&u+k$Egs3*hlrh");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = new RE2("yb+K");
      rE2_0.reset();
      String string0 = rE2_0.find("yb+K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("V");
      rE2_0.reset();
      String string0 = RE2.quoteMeta("V");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("]~");
      rE2_0.reset();
      String string0 = RE2.quoteMeta("]~");
      assertEquals("\\]~", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      rE2_0.reset();
      rE2_0.numberOfCapturingGroups();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1464);
      intArray0[1] = 0;
      boolean boolean0 = rE2_0.match("can't happen", 0, 0, 18, intArray0, 11076);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.reset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 128);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      rE2_0.findUTF8(byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findIndex("");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("V");
      rE2_0.findSubmatch(";R}zQ>i!n|");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.goole.re2j.RE2");
      rE2_0.numberOfCapturingGroups();
      rE2_0.find("com.goole.re2j.RE2");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.reset();
      byte[] byteArray0 = new byte[0];
      rE2_0.findAllUTF8Index(byteArray0, 800);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("= }>,wj-W!", 16, true);
      rE2_0.findAll("*Ojcc~z4Xo", (-1254));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 553);
      rE2_0.replaceFirst("Radical", "p");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findSubmatch("oGhD,D9~)O-,4Zg\u0005");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("Me", 92, true);
      byte[] byteArray0 = new byte[1];
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)32);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      RE2.quoteMeta("");
      RE2 rE2_0 = new RE2("");
      rE2_0.findUTF8Submatch(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      RE2 rE2_0 = RE2.compilePOSIX("x");
      String string0 = rE2_0.expr;
      rE2_0.findAllUTF8Index(byteArray0, 1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAllIndex("", 128);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("<F-N! x#*");
      rE2_0.findAllSubmatch("Hex_Digit", 32);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Inherited");
      rE2_0.findAllIndex("Inherited", 265);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("q");
      rE2_0.prefix = "q";
      rE2_0.findIndex("UTF-8");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.reset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      rE2_0.findAllUTF8(byteArray0, (-76));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("V");
      rE2_0.reset();
      rE2_0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Index(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findSubmatch("~");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)75;
      rE2_0.replaceAll("~", ",Q4");
      rE2_0.toString();
      rE2_0.findUTF8(byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte byte0 = (byte) (-22);
      RE2 rE2_0 = RE2.compile("");
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      rE2_0.toString();
      boolean boolean0 = rE2_0.prefixComplete;
      int[] intArray0 = new int[1];
      intArray0[0] = (-3679);
      // Undeclared exception!
      try { 
        rE2_0.match("5hOm/}-Gk?JAA)P", 0, (byte)54, 0, intArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("bad inst");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)58;
      rE2_0.findAllIndex("", 3594);
      rE2_0.findAllUTF8Index(byteArray0, (-331));
      RE2 rE2_1 = new RE2("");
      rE2_1.match("", (byte)0, (byte)0, (byte)9, (int[]) null, 8);
      RE2.quoteMeta("Linear_B");
      RE2.compilePOSIX("");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("}e8A{&.|");
      RE2.compile("");
      rE2_0.findAllSubmatch("}e8A{&.|", (byte) (-120));
      RE2.compile("5L!Ogh*|xs");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-120);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte) (-120);
      RE2.compile("");
  }
}
