/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:06:00 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp1.cap = 20;
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[9];
      intArray0[0] = (-129);
      intArray0[1] = 20;
      intArray0[2] = 1774;
      intArray0[3] = 20;
      intArray0[4] = 20;
      intArray0[5] = 20;
      intArray0[6] = 20;
      intArray0[7] = 20;
      intArray0[8] = 20;
      regexp0.runes = intArray0;
      regexp2.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp2.op = regexp_Op1;
      regexp2.flags = 2407;
      regexp0.toString();
      regexp2.op.isPseudo();
      Regexp.Op.values();
      regexp2.reinit();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[invalid char class]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[invalid char class]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals((Object) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (-654);
      intArray0[1] = 835;
      intArray0[2] = 2851;
      intArray0[3] = (-3066);
      intArray0[4] = (-833);
      regexp1.runes = intArray0;
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.reinit();
      regexp0.cap = 2457;
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp2;
      regexp2.subs = regexpArray0;
      regexp1.flags = 2457;
      regexp2.min = 2457;
      regexp1.equals(regexp2);
      regexp0.reinit();
      regexp2.name = "Old_Persian";
      String string0 = "H#lS\"~F5W*DKT4/m[+";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "'m6G\"K5FZn[i,mR#H";
      regexp0.op = regexp_Op0;
      regexp0.name = "ftYtk([@E(o`>I~HXAN";
      regexp0.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      boolean boolean0 = regexp0.equals(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      boolean boolean1 = regexp0.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp1.cap = 20;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp1);
      regexp3.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp regexp0 = null;
      try {
        regexp0 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp1);
      regexp2.equals(regexp3);
      regexp2.reinit();
      regexp3.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexp4.toString();
      Regexp.Op.values();
      int int0 = regexp2.maxCap();
      assertFalse(regexp2.equals((Object)regexp4));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals((Object) null);
      regexp0.reinit();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp_Op1.isPseudo();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("fDk.$Q`[hyEQBt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.fDk.$Q`[hyEQBt
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-857);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      intArray1[0] = (-857);
      intArray1[1] = (-857);
      intArray1[2] = (-857);
      intArray1[3] = 0;
      intArray1[4] = 1604;
      intArray1[5] = (-857);
      intArray1[6] = (-857);
      regexp0.runes = intArray1;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      regexp0.cap = 3547;
      regexp0.maxCap();
      regexp0.min = 7379;
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.toString();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "K{";
      regexp0.toString();
      regexp0.equals("K{");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("eGe/]du");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.eGe/]du
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "15";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 1204;
      regexp1.reinit();
      regexp0.cap = 1204;
      regexp1.reinit();
      regexp0.cap = 1204;
      regexp1.flags = 1204;
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      String string0 = regexp0.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.cap = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = 1963;
      intArray0[1] = 17;
      intArray0[2] = (-814);
      intArray0[3] = 0;
      regexp0.max = 0;
      intArray0[4] = (-1461);
      regexp0.toString();
      intArray0[5] = (-406);
      intArray0[6] = 64014;
      regexp0.runes = intArray0;
      regexp0.reinit();
      intArray0[7] = (-1413);
      intArray0[8] = (-1171);
      regexp0.runes = intArray0;
      regexp0.maxCap();
      regexp0.maxCap();
      regexp0.toString();
      regexp0.equals("\b");
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.maxCap();
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.equals(regexp2);
      regexp1.reinit();
      int int0 = regexp0.maxCap();
      assertFalse(regexp0.equals((Object)regexp1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      regexp0.cap = 0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 2;
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.equals(regexp2);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 123;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = null;
      regexp0.max = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      regexp0.runes = intArray0;
      regexp0.max = 3;
      regexp0.equals(regexp_Op0);
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 1347;
      int int0 = regexp0.min;
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 201;
      regexp0.max = (-827);
      int[] intArray0 = new int[7];
      intArray0[1] = (-827);
      intArray0[2] = (-827);
      intArray0[3] = (-827);
      regexp0.runes = intArray0;
      String string0 = regexp0.toString();
      String string1 = regexp0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-3285);
      intArray0[1] = (-1062);
      intArray0[2] = 1243;
      intArray0[3] = (-642);
      intArray0[4] = 622;
      intArray0[5] = (-348);
      intArray0[6] = 0;
      intArray0[7] = 157;
      intArray0[8] = (-2383);
      regexp0.runes = intArray0;
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 1383;
      regexp0.subs = null;
      regexp0.max = 44;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp0.op = regexp_Op1;
      regexp0.min = 613;
      regexp0.toString();
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.values();
      regexp_Op1.isPseudo();
      regexp0.reinit();
      regexp0.equals("VERTICAL_BAR");
      regexp0.toString();
      regexp0.equals((Object) null);
      regexp0.op.isPseudo();
      regexp0.maxCap();
      regexp0.equals("VERTICAL_BAR");
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
      
      regexp_Op1.isPseudo();
      boolean boolean1 = regexp_Op0.isPseudo();
      regexp0.maxCap();
      boolean boolean2 = regexp0.op.isPseudo();
      assertFalse(boolean2 == boolean1);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      regexp0.reinit();
      regexp0.equals(object0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp0.max = 0;
      regexpArray0[0].op = regexp_Op1;
      Regexp.Op regexp_Op2 = Regexp.Op.LEFT_PAREN;
      regexpArray0[2].op = regexp_Op2;
      regexp0.toString();
      Regexp.Op regexp_Op3 = Regexp.Op.valueOf("LEFT_PAREN");
      regexp_Op3.isPseudo();
      regexp_Op3.isPseudo();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp0.maxCap();
      regexpArray0[0].op = regexp_Op1;
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      regexp0.flags = 2371;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.max = 1772;
      String string0 = regexp1.toString();
      regexp0.maxCap();
      int[] intArray0 = new int[5];
      intArray0[0] = 1772;
      intArray0[1] = 2371;
      intArray0[2] = 0;
      intArray0[3] = (-2593);
      intArray0[4] = 0;
      regexp1.runes = intArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp1.toString();
      String string1 = regexp1.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = (-1522);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      regexp0.min = 125;
      intArray0[0] = (-327);
      intArray0[1] = 0;
      Regexp.Op.valueOf("ANY_CHAR_NOT_NL");
      intArray0[2] = (-1932);
      intArray0[3] = 0;
      intArray0[4] = 0;
      regexp0.runes = intArray0;
      regexp0.op.isPseudo();
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = null;
      regexp0.max = 0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.max = 258;
      regexp1.equals(regexp1);
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1931;
      intArray0[1] = 7424;
      intArray0[2] = 65594;
      intArray0[3] = (-1045);
      regexp0.reinit();
      intArray0[4] = 93;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      regexp0.op = regexp_Op1;
      regexp0.toString();
      intArray0[5] = (-980);
      intArray0[6] = (-2096);
      regexp0.runes = intArray0;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      regexp0.op = regexp_Op2;
      regexp0.op.isPseudo();
      regexp0.op = regexp_Op0;
      regexp0.toString();
      regexp0.toString();
      regexp0.toString();
      Object object0 = new Object();
      regexp0.equals(object0);
      Object object1 = new Object();
      regexp0.equals(object1);
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp0.flags = 6468;
      regexp0.toString();
      boolean boolean0 = regexp0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.reinit();
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1017;
      regexp0.runes = intArray0;
      regexp0.cap = 1017;
      regexp0.reinit();
      regexp0.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Object object0 = new Object();
      regexp0.reinit();
      regexp0.equals(object0);
      regexp0.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 5919;
      regexp0.min = 5919;
      regexp1.min = 12;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.reinit();
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1017;
      regexp0.runes = intArray0;
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 5919;
      regexp0.min = 5919;
      regexp1.min = 12;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 0;
      regexp0.flags = 0;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      regexp0.cap = 0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.equals(regexp2);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 489;
      intArray0[2] = 0;
      intArray0[3] = 2;
      int int0 = 1250;
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1587;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp_Op0);
      regexp1.reinit();
      regexp1.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp_Op1.isPseudo();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("d#Bu[cDq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.d#Bu[cDq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      regexp1.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 28;
      regexp0.reinit();
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.subs = regexpArray0;
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      Regexp[] regexpArray1 = new Regexp[6];
      regexpArray1[0] = regexp1;
      regexpArray1[1] = regexp1;
      regexpArray1[2] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray1[3] = regexp2;
      regexpArray1[4] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray1[5] = regexp3;
      regexpArray0[0].subs = regexpArray1;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp1);
      int[] intArray0 = new int[9];
      intArray0[0] = (-129);
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp_Op1.isPseudo();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp regexp3 = new Regexp(regexp1);
      regexp0.equals(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      regexp_Op2.isPseudo();
      Regexp.Op.values();
      regexp3.maxCap();
      Regexp.Op.values();
      Regexp regexp4 = new Regexp(regexp2);
      regexp4.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("=w@nJ.|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.=w@nJ.|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = 0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      regexp1.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-857);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      intArray1[0] = (-857);
      intArray1[1] = (-857);
      intArray1[2] = (-857);
      intArray1[3] = 0;
      intArray1[4] = 1604;
      intArray1[5] = (-857);
      intArray1[6] = (-857);
      regexp0.runes = intArray1;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      boolean boolean0 = regexp_Op0.isPseudo();
      regexp0.toString();
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertFalse(boolean1);
      
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      boolean boolean2 = regexp_Op1.isPseudo();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-827);
      int[] intArray0 = new int[7];
      intArray0[1] = (-827);
      intArray0[2] = (-827);
      intArray0[3] = (-827);
      regexp0.runes = intArray0;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertFalse(boolean0);
      
      regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      regexp0.min = 125;
      intArray0[0] = 125;
      intArray0[1] = 0;
      Regexp.Op.valueOf("ANY_CHAR_NOT_NL");
      intArray0[2] = (-1932);
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.maxCap();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp0.op.isPseudo();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 3016;
      regexp1.equals((Object) null);
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp2.min = 3183;
      regexp2.equals(regexp1);
      regexp2.reinit();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.flags = 18;
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp1.reinit();
      regexp1.toString();
      regexp_Op1.isPseudo();
      regexp1.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("7kh/kE&^)SsrD1o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.7kh/kE&^)SsrD1o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-834);
      intArray0[1] = (-834);
      intArray0[2] = (-834);
      intArray0[3] = (-834);
      regexp0.runes = intArray0;
      regexp0.max = (-834);
      String string0 = regexp0.toString();
      assertEquals("[\\xfffffcbe\\xfffffcbe]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }
}
