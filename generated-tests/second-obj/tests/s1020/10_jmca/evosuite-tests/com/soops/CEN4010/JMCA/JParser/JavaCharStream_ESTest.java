/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:13:06 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.ReInit((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedReader pipedReader0 = new PipedReader(2066);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 1, 8257536, 93);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaCharStream.hexval('F');
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 15, 15, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaCharStream.hexval('F');
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 1, 1);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream1);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(40);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0, 40);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader1);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 40, 40);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char char0 = 'T';
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, (-1178), (-633), (-1670));
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      javaCharStream0.ReInit((Reader) charArrayReader0, (-633), (-1670));
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 5, 5, 5);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JavaCharStream.hexval('C');
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor1);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, (-2624), 533);
      javaCharStream0.AdjustBuffSize();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream1, mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-247), (-247));
      javaCharStream0.ReInit((Reader) stringReader0, (-247), 1994);
      javaCharStream0.adjustBeginLineColumn((-247), (-247));
      javaCharStream0.readChar();
      javaCharStream0.adjustBeginLineColumn((-247), (-1300));
      int int0 = javaCharStream0.getColumn();
      assertEquals((-247), javaCharStream0.getBeginLine());
      assertEquals((-1300), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, 1, 744);
      javaCharStream0.GetSuffix(1);
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaCharStream.hexval('8');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 8);
      JavaCharStream.hexval('8');
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JavaCharStream.hexval('C');
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 514, 514, 514);
      JavaCharStream.hexval('3');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream1.markSupported();
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream1, 1, 3, (-1));
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      javaCharStream0.ExpandBuff(false);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 69, 2, 749);
      javaCharStream0.GetSuffix(2);
      JavaCharStream.hexval('5');
      javaCharStream0.backup(5);
      javaCharStream0.adjustBeginLineColumn(2, (-1823));
      javaCharStream0.readChar();
      javaCharStream0.ReInit((Reader) stringReader0, 4080, 749);
      javaCharStream0.getBeginLine();
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaCharStream.hexval('D');
      JavaCharStream.hexval('D');
      try { 
        JavaCharStream.hexval('p');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      javaCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-247), (-247));
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.ReInit((Reader) stringReader0, (-247), 1994);
      javaCharStream0.adjustBeginLineColumn((-247), (-247));
      char char0 = File.pathSeparatorChar;
      stringReader0.skip((-1));
      javaCharStream0.adjustBeginLineColumn((-247), (-1300));
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, '\\', '\\');
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 1616, '\\');
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 80;
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaCharStream.hexval('c');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      int int0 = 69;
      JavaCharStream.hexval('5');
      pipedOutputStream0.write(1);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream.hexval('2');
      JavaCharStream.hexval('1');
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaCharStream.hexval('f');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      try { 
        fileDescriptor1.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1091;
      int int1 = 498;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.Done();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaCharStream.hexval('b');
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 11, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 69, 2, 749);
      javaCharStream0.GetSuffix(2);
      JavaCharStream.hexval('5');
      javaCharStream0.backup(5);
      javaCharStream0.adjustBeginLineColumn(2, (-1823));
      javaCharStream0.getBeginLine();
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaCharStream.hexval('d');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      int int0 = 514;
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamReader inputStreamReader1 = new InputStreamReader(mockFileInputStream0, charsetDecoder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 65);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0, 13, 13, 0);
      JavaCharStream.hexval('d');
      FileDescriptor fileDescriptor2 = new FileDescriptor();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor2);
      JavaCharStream.hexval('d');
      FileDescriptor fileDescriptor3 = new FileDescriptor();
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor1);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1, 1316);
      char[] charArray0 = javaCharStream0.buffer;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.ReInit((Reader) stringReader0, 1316, 11);
      javaCharStream0.getBeginLine();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      stringReader0.reset();
      byte byte0 = (byte)92;
      boolean boolean0 = JavaCharStream.staticFlag;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringReader0.read();
      JavaCharStream.hexval('0');
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6%S9k$s:'(U-1wJ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<CTZ6%S9k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 1, 37);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.BeginToken();
      byte[] byteArray0 = new byte[1];
      javaCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      stringReader0.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 1, 1);
      javaCharStream0.readChar();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.nextCharInd = 1384;
      int[] intArray0 = new int[3];
      intArray0[0] = 1384;
      intArray0[1] = 0;
      intArray0[2] = 1384;
      stringReader0.reset();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      javaCharStream0.inBuf = 1384;
      byteArray0[0] = (byte)87;
      byteArray0[3] = (byte) (-4);
      byteArray0[5] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      stringReader0.read();
      javaCharStream0.readChar();
      javaCharStream0.getLine();
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.read();
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JavaCharStream.hexval('B');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3664);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream.hexval('e');
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      Charset.defaultCharset();
      stringReader0.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1338);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      javaCharStream0.getBeginLine();
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = ObjectStreamConstants.baseWireHandle;
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[3] = (byte) (-4);
      byteArray0[5] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      char char0 = 'A';
      char char1 = ';';
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream.hexval('6');
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1161);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1161);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0, charsetDecoder0);
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      JavaCharStream.hexval('7');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int2 = ObjectStreamConstants.baseWireHandle;
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 2048, 2048, 2048);
      JavaCharStream.hexval('A');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream.hexval('A');
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      FileDescriptor fileDescriptor2 = new FileDescriptor();
      FileDescriptor fileDescriptor3 = new FileDescriptor();
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      javaCharStream0.GetImage();
      JavaCharStream.hexval('a');
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream(8257536);
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      int int0 = 1160;
      javaCharStream0.inBuf = 1160;
      int int1 = 0;
      javaCharStream0.GetSuffix(0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char char0 = 'O';
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JavaCharStream.hexval('4');
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("*4");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 1, 749);
      stringReader0.read();
      javaCharStream0.backup(64);
      stringReader0.read();
      javaCharStream0.GetImage();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.GetSuffix(99);
      try { 
        JavaCharStream.hexval('}');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      stringReader0.markSupported();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 1, 1);
      javaCharStream0.readChar();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.nextCharInd = 1384;
      int[] intArray0 = new int[3];
      intArray0[0] = 1384;
      stringReader0.skip(1L);
      intArray0[1] = 37;
      intArray0[2] = 1384;
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("Invalid escape character at line ");
      stringReader1.reset();
      stringReader1.ready();
      javaCharStream0.UpdateLineColumn('_');
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      javaCharStream0.ReInit((InputStream) dataInputStream0, 2, 1384);
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      javaCharStream0.ReInit((InputStream) dataInputStream0);
      javaCharStream0.readChar();
      stringReader0.read();
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      javaCharStream0.GetSuffix(11);
      javaCharStream0.Done();
      javaCharStream0.ReInit((InputStream) dataInputStream0, 37, 1384);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader1 = new InputStreamReader(pushbackInputStream0, charsetDecoder0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 4, 8, 4);
      int int2 = ObjectStreamConstants.baseWireHandle;
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      JavaCharStream.hexval('E');
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]i!/n{g{_n\"~cs~)3");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("g[*qz2-jc");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream.hexval('9');
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor1);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 9, 9);
      char[] charArray0 = javaCharStream0.buffer;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("g[*qz2-jc");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      Charset.defaultCharset();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.readLine();
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0);
      char char0 = 'H';
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6%S9k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 1, 1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.nextCharInd = 1384;
      byte[] byteArray0 = new byte[1];
      javaCharStream0.BeginToken();
      byteArray0[0] = (byte) (-4);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedReader pipedReader0 = new PipedReader();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedReader0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      javaCharStream0.backup(1);
      javaCharStream0.adjustBeginLineColumn(117, 2);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<CTZ6%S9k$s:'(U-1wJ");
      stringReader0.skip(37);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.read();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 69, 2, 2);
      char[] charArray0 = javaCharStream0.nextCharBuf;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      javaCharStream0.BeginToken();
      javaCharStream0.backup(1);
      Charset charset0 = Charset.defaultCharset();
      charset0.newDecoder();
      javaCharStream0.BeginToken();
      javaCharStream0.getBeginLine();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.GetImage();
      javaCharStream0.readChar();
      javaCharStream0.Done();
      StringReader stringReader1 = new StringReader("");
      stringReader1.read();
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 38, 1519, 1735);
      javaCharStream0.available = (-1);
      stringReader0.reset();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 1, 749);
      javaCharStream0.readChar();
      char[] charArray0 = javaCharStream0.nextCharBuf;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      stringReader0.close();
      javaCharStream0.backup(9);
      Charset.defaultCharset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-334), 1, 749);
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.reset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      boolean boolean0 = JavaCharStream.staticFlag;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, (byte)10);
      javaCharStream0.readChar();
      stringReader0.read();
      javaCharStream0.readChar();
      stringReader0.reset();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      stringReader0.reset();
      stringReader0.ready();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_Y72F-%h(");
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3151, (-667));
      javaCharStream0.readChar();
      javaCharStream0.getLine();
      javaCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 1, 733);
      javaCharStream0.readChar();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      javaCharStream0.ReInit((Reader) bufferedReader0);
      stringReader0.read();
      javaCharStream0.backup(64);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 857, 4031, 857);
      JavaCharStream javaCharStream2 = new JavaCharStream(bufferedReader0, (-1), 4031, 4031);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid escape character at line ");
      javaCharStream0.bufsize = 2023;
      javaCharStream0.bufsize = 3;
      stringReader0.read();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.UpdateLineColumn('<');
      // Undeclared exception!
      try { 
        javaCharStream1.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      StringReader stringReader0 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      StringReader stringReader1 = new StringReader("<CTZ6Y%k$s:'(U-1wJ");
      Charset.defaultCharset();
      stringReader1.markSupported();
      stringReader0.ready();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1, 1);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      stringReader1.reset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.readChar();
      javaCharStream0.getEndColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      boolean boolean0 = JavaCharStream.staticFlag;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)10, (-1679));
      javaCharStream0.readChar();
      javaCharStream0.getLine();
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      Charset.defaultCharset();
      stringReader0.markSupported();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 2945);
      bufferedReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 2945, 2945, 82);
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.readChar();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-1502), (int) (byte) (-1));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 'Y', (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringReader stringReader0 = new StringReader("_Y72F-%h(");
      Charset.defaultCharset();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 38, 38, 1739);
      javaCharStream0.tokenBegin = 2049;
      javaCharStream0.available = (-1);
      stringReader0.reset();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.readChar();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      stringReader0.read();
      javaCharStream0.readChar();
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
