/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:39:00 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RowMajorSparseMatrix.zero(3300, 3300);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2488.64);
      doubleArray1[1] = (-2731.3349882158);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2390.816082467408;
      doubleArray1[4] = (-2390.816082467408);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-2488.64);
      doubleArray2[1] = (-2731.3349882158);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2390.816082467408);
      doubleArray2[4] = (-2731.3349882158);
      doubleArray2[5] = (-2488.64);
      doubleArray2[6] = (-2390.816082467408);
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(2, denseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      Matrix matrix2 = matrix1.copy();
      double double0 = denseMatrix0.sum();
      assertEquals((-15562.101047114807), double0, 0.01);
      
      double double1 = matrix2.determinant();
      assertEquals(2, matrix2.columns());
      assertEquals(7.41959702473548E15, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(9, 825);
      Integer integer0 = new Integer(9);
      matrix0.equals((Object) integer0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix1.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(320, 2.0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(320, 1380, 886.48);
      basic2DMatrix0.toDenseMatrix();
      ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect(1380, 24);
      rowMajorSparseMatrix0.equals((Matrix) basic2DMatrix0, (-60.838174974));
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) basic2DMatrix0, 319, 1380);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 319 rows and 1380 cols at 0, 0 in a 320x320 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 5;
      Matrix matrix0 = Matrix.zero(5, 191);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5, 0.5);
      matrix0.equals((Object) matrix1);
      int int1 = 1220;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 191, 1220, 191, 202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 191, 1220
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.diagonal(1, 1);
      matrix0.norm();
      matrix0.getColumn(1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      Matrix matrix1 = matrix0.add((Matrix) columnMajorSparseMatrix0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix1.withInverter(linearAlgebra_InverterFactory0);
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.iterator();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.determinant();
      matrix0.trace();
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[0][6];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(2311, vectorFunction0);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket vector coordinate real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1284928.285505597;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1284928.285505597;
      doubleArray2[1] = 1284928.285505597;
      doubleArray2[2] = 1284928.285505597;
      doubleArray2[3] = 1284928.285505597;
      doubleArray2[4] = 1284928.285505597;
      doubleArray2[5] = 1284928.285505597;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1284928.285505597;
      doubleArray3[1] = 1284928.285505597;
      doubleArray3[2] = 1284928.285505597;
      doubleArray3[3] = 1284928.285505597;
      doubleArray3[4] = 1284928.285505597;
      doubleArray3[5] = 1284928.285505597;
      doubleArray3[6] = 1284928.285505597;
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(830, 0, 0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Matrix matrix2 = matrix0.kroneckerProduct(matrix1);
      assertEquals(2490, matrix2.rows());
      assertTrue(matrix1.equals((Object)rowMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 804;
      DenseMatrix.constant(804, 804, 804);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3181, 804, 804);
      int int1 = 1421;
      int int2 = (-1);
      int int3 = (-2587);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1703));
      linkedList0.add(integer0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      denseVector0.sum();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setColumn((-2587), (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 3181.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(17, 17);
      RowMajorSparseMatrix.zero(17, 2584);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 17);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-8), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(4, 4);
      Matrix matrix1 = matrix0.add((double) 4);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-0.4375);
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-0.4375);
      doubleArray2[1] = (-0.4375);
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = (double) 4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-0.4375);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 4;
      doubleArray4[1] = (-0.4375);
      doubleArray4[2] = (-0.4375);
      doubleArray4[3] = (double) 4;
      doubleArray4[4] = (-0.4375);
      doubleArray4[5] = (double) 4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 4;
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      matrix1.equals((Matrix) denseMatrix0, 476.22916427590906);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 1.0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 3, 3, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 3 rows and 3 cols at 3, 3 in a 3x3 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 183);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow(5, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.sum();
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Integer integer0 = new Integer(32);
      linkedList0.add(integer0);
      Matrix matrix1 = matrix0.add(0.0);
      Matrix matrix2 = matrix1.transpose();
      matrix2.euclideanNorm();
      Matrix matrix3 = matrix1.rotate();
      assertNotSame(matrix3, matrix1);
      assertNotSame(matrix1, matrix2);
      assertTrue(matrix3.equals((Object)matrix2));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.sum();
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(Integer.MAX_VALUE, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 18;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(18, 18);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      int[] intArray0 = new int[6];
      intArray0[0] = 18;
      intArray0[1] = 18;
      intArray0[2] = 18;
      intArray0[3] = 18;
      int int1 = 0;
      intArray0[4] = 0;
      matrix0.equals((Object) columnMajorSparseMatrix0);
      intArray0[5] = 18;
      matrix0.getColumn((-101));
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(983);
      // Undeclared exception!
      denseMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.sum();
      sparseVector0.toCSV();
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      Integer integer0 = new Integer(32);
      linkedList0.add(integer0);
      Matrix matrix1 = matrix0.add(0.0);
      matrix0.max();
      Matrix matrix2 = matrix1.transpose();
      matrix2.euclideanNorm();
      assertEquals(0, matrix2.rows());
      assertNotSame(matrix2, matrix1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      Matrix matrix0 = denseMatrix0.power(0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-1779.1660544886);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      matrix0.equals((Object) sparseVector0);
      NumberFormat.getPercentInstance();
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 392.888140765;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 392.888140765;
      doubleArray2[1] = 392.888140765;
      doubleArray2[2] = 392.888140765;
      doubleArray2[3] = 392.888140765;
      doubleArray2[4] = 392.888140765;
      doubleArray2[5] = 2.0;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = 392.888140765;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1233.7025995);
      doubleArray3[1] = 2.0;
      doubleArray3[2] = (-2517.6);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2.0;
      doubleArray4[2] = (-1233.7025995);
      doubleArray4[3] = 392.888140765;
      doubleArray4[4] = (-1233.7025995);
      doubleArray4[5] = (-5619.5910622);
      doubleArray4[6] = 2.0;
      doubleArray4[7] = (-2517.6);
      doubleArray4[8] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 392.888140765;
      doubleArray5[1] = (-2517.6);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-5619.5910622);
      doubleArray7[1] = (-2517.6);
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-2058005161), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, (double[]) null);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      int int0 = matrix0.rank();
      assertEquals(0, matrix0.rows());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.iterator();
      double[][] doubleArray1 = new double[7][9];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 2928.243048;
      doubleArray2[2] = 628.2493918866;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 2928.243048;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 2928.243048;
      doubleArray3[4] = 2928.243048;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 628.2493918866;
      doubleArray3[7] = 1.0;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 628.2493918866;
      doubleArray4[1] = 2928.243048;
      doubleArray4[2] = 628.2493918866;
      doubleArray4[3] = 628.2493918866;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = 2928.243048;
      doubleArray4[6] = 628.2493918866;
      doubleArray1[2] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray1[3] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 628.2493918866;
      doubleArray1[4] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = 1.0007227165121355;
      doubleArray7[2] = 628.2493918866;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = 1.0;
      doubleArray1[5] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 1.0;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 2928.243048;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 1.0007227165121355;
      doubleArray8[5] = 1.0007227165121355;
      doubleArray8[6] = (-16.339677905266);
      doubleArray1[6] = doubleArray8;
      Matrix.from2DArray(doubleArray1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.forEach(consumer0);
      boolean boolean0 = matrix0.is(matrixPredicate0);
      assertFalse(boolean0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transformColumn(6, vectorFunction0);
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(312, 322, 322);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 322;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 312;
      doubleArray2[1] = (double) 312;
      doubleArray2[2] = (double) 312;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 312;
      doubleArray3[1] = (double) 322;
      doubleArray3[2] = (double) 322;
      doubleArray3[3] = (double) 312;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 322;
      doubleArray4[1] = (double) 312;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (double) 312;
      doubleArray4[4] = (double) 322;
      doubleArray4[5] = (double) 322;
      doubleArray4[6] = (double) 322;
      doubleArray4[7] = (double) 322;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = (double) 312;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = (double) 312;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray5[7] = (double) 322;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 322;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = 1.0;
      doubleArray6[4] = (double) 322;
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = 1.0;
      doubleArray6[7] = (double) 322;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      doubleArray8[0] = Double.POSITIVE_INFINITY;
      doubleArray8[1] = (double) 322;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = (double) 312;
      doubleArray8[4] = 1.0;
      doubleArray8[5] = 1.0;
      doubleArray8[6] = (double) 312;
      doubleArray8[7] = 1.0;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.blankOfRows(312);
      assertEquals(312, matrix1.rows());
      assertEquals(1, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(10);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 10, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 10x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 2804;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2804, 2804, 2804);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      rowMajorSparseMatrix0.toRowVector();
      SparseVector sparseVector0 = SparseVector.zero(5);
      ooPlaceVectorsSubtraction0.partiallyApply(sparseVector0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.non(matrixPredicate0);
      DenseVector denseVector0 = DenseVector.constant(2804, (-1.0));
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      vector0.blankOfLength(5);
      rowMajorSparseMatrix0.multiply(vector0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformRow(2804, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2805
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[21];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 373.318556;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 373.318556;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 373.318556;
      doubleArray2[5] = 373.318556;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[3] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(32, 32);
      int int0 = (-4077);
      // Undeclared exception!
      try { 
        matrix0.swapColumns((-1789569705), (-4077));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1789569705' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 2969;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 2969);
      Matrix matrix0 = denseVector0.toRowMatrix();
      Integer integer0 = new Integer(2969);
      matrix0.hashCode();
      Integer integer1 = new Integer((-2782));
      hashMap0.put(integer0, integer1);
      matrix0.toCSV();
      int int1 = (-2980);
      hashMap0.put(integer0, integer1);
      // Undeclared exception!
      try { 
        matrix0.maxInRow((-2980));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 10);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      denseMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      Matrix matrix1 = denseMatrix0.insert(matrix0, 4, 4);
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      matrix1.toMatrixMarket(numberFormat0);
      matrix1.divide((-1637.8831651));
      matrix1.iterator();
      // Undeclared exception!
      try { 
        denseMatrix0.minInColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(4);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.swapRows(4, 4);
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can";
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and limit arrays must be of the same length.
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(32, 32, 32);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.fromCSV(" ");
      cCSMatrix0.iterator();
      Locale locale0 = Locale.GERMAN;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      char char0 = 'd';
      decimalFormatSymbols0.setDigit('d');
      DecimalFormat decimalFormat0 = new DecimalFormat(" ", decimalFormatSymbols0);
      cCSMatrix0.mkString((NumberFormat) decimalFormat0);
      int int0 = (-710);
      cCSMatrix0.iteratorOfRow((-710));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int1 = (-2147482801);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-2147482801), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1133.0468828);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 476.22916427590906;
      doubleArray0[4] = (-2238.8971111226);
      doubleArray0[5] = (-1383.6684);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix1 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      boolean boolean0 = matrix0.equals(matrix1, 476.22916427590906);
      assertTrue(boolean0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      assertFalse(rowMajorSparseMatrix0.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 37;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(37, (-4781.632164934816));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      columnMajorSparseMatrix0.swapColumns(37, 37);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(37);
      hashMap0.entrySet();
      linkedList0.offerLast(integer0);
      SparseVector.fromMap(hashMap0, 37);
      // Undeclared exception!
      try { 
        sparseVector0.sliceRight(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [37..0].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1917.957;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (-3138.7995253238);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-1791.57825);
      doubleArray1[6] = (-1050.895);
      doubleArray1[7] = (-462.758077);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3138.7995253238);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-3138.7995253238);
      doubleArray3[1] = (-3138.7995253238);
      doubleArray3[2] = (-3138.7995253238);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-3138.7995253238);
      doubleArray3[7] = 100.0;
      doubleArray3[8] = (-1791.57825);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1917.957;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (-1791.57825);
      doubleArray4[3] = (-462.758077);
      doubleArray4[4] = 100.0;
      doubleArray4[5] = (-1050.895);
      doubleArray4[6] = 1.0;
      doubleArray4[7] = (-462.758077);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-3138.7995253238);
      doubleArray5[3] = (-1050.895);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-1791.57825);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-3138.7995253238);
      doubleArray6[1] = 1917.957;
      doubleArray6[2] = 100.0;
      doubleArray6[3] = (-1050.895);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-462.758077);
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.power(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 7 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 5;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, 5);
      denseMatrix0.manhattanNorm();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      denseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MatrixPredicate matrixPredicate0 = null;
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      denseMatrix0.sum();
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("Unknown symmetry type: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(508, 508, 508);
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 508;
      doubleArray1[1] = (double) 508;
      doubleArray1[2] = (-0.4375);
      doubleArray1[3] = (double) 508;
      doubleArray1[4] = (double) 508;
      doubleArray1[5] = (-2381.45491);
      doubleArray1[6] = (double) 508;
      doubleArray1[7] = (double) 508;
      doubleArray1[8] = (double) 508;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 508;
      doubleArray3[1] = (-2381.45491);
      doubleArray3[2] = (-2381.45491);
      doubleArray3[3] = (-2381.45491);
      doubleArray3[4] = (-0.4375);
      doubleArray3[5] = (-2381.45491);
      doubleArray3[6] = (double) 508;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 508;
      doubleArray4[1] = (-2381.45491);
      doubleArray4[2] = (double) 508;
      doubleArray4[3] = (-0.4375);
      doubleArray4[4] = (-0.4375);
      doubleArray4[5] = 30.369382992;
      doubleArray0[3] = doubleArray4;
      Matrix.from2DArray(doubleArray0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      // Undeclared exception!
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 275.2956072099;
      doubleArray1[2] = 5012660.274193124;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(6, 6, mockRandom0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.removeLastRow();
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-1633));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 1183;
      SparseVector sparseVector0 = SparseVector.zero(1178, 1183);
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      mockRandom0.nextInt();
      mockRandom0.ints(1868L, 0, 2380);
      Matrix matrix0 = Matrix.random(0, 1192, mockRandom0);
      Matrix matrix1 = Matrix.block(matrix0, matrix0, matrix0, matrix0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      numberFormat0.setGroupingUsed(false);
      matrix1.mkString(numberFormat0);
      matrix0.maxInColumn(1192);
      // Undeclared exception!
      try { 
        matrix1.swapRows(0, 2380);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 16);
      rowMajorSparseMatrix0.iteratorOfNonZeroRows();
      rowMajorSparseMatrix0.setColumn(9, (double) 16);
      rowMajorSparseMatrix0.mkString((String) null, "ZF8d5jsh");
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.removeLastColumn();
      assertEquals(0.0625, rowMajorSparseMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, 10);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(31, 10, (-1.0));
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.updateColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5007, 5007, 2464.741);
      // Undeclared exception!
      denseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(2, Integer.MAX_VALUE, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 5;
      Matrix matrix0 = Matrix.unit(995, 5);
      matrix0.toBinary();
      int int1 = 1553;
      int int2 = (-1646);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        matrix0.insertRow(10, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2206, 2206);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2206, 2206);
      // Undeclared exception!
      matrix0.equals((Matrix) denseMatrix0, 2.0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2, 2);
      Matrix matrix0 = columnMajorSparseMatrix0.sliceBottomRight(2, 2);
      columnMajorSparseMatrix0.toMatrixMarket();
      columnMajorSparseMatrix0.rowMajorIterator();
      Matrix.zero(2, 2);
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 2;
      doubleArray3[7] = (double) 2;
      doubleArray3[8] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = (double) 2;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (double) 2;
      doubleArray8[1] = (double) 2;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-0.4375);
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 2, 2, 5, 2, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 5, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(2, 10, 2);
      matrix0.removeLastRow();
      MockRandom mockRandom0 = new MockRandom(53L);
      Vector vector0 = Vector.random(2, mockRandom0);
      matrix0.insertColumn(2, vector0);
      Matrix.random(2, 2, mockRandom0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        matrix0.set(2, 917, (-1191.77));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2390.816082467408;
      doubleArray1[1] = 1.1102230246251565E-14;
      doubleArray1[2] = 161.69;
      doubleArray1[3] = (-397.2022616544);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-611.91075774878);
      doubleArray1[6] = 1905.7976866185118;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1.1102230246251565E-14;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1905.7976866185118;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 1.1102230246251565E-14;
      doubleArray3[1] = 2390.816082467408;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 1.1102230246251565E-14;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 161.69;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = 161.69;
      doubleArray8[1] = (-1518.0);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 2390.816082467408;
      doubleArray8[4] = 161.69;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 2390.816082467408;
      doubleArray8[7] = 1.1102230246251565E-14;
      doubleArray8[8] = 1.1102230246251565E-14;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-2058005161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2058005161.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1943, 1943, 1943);
      Vector vector0 = Vector.unit(1505);
      // Undeclared exception!
      try { 
        matrix0.setRow(283, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1505. Should be: 1943.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(53, 2538);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      Matrix matrix1 = matrix0.copyOfRows(53);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix1, 58, 6, 53, 1240, 53, 2538);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 58, 6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(7, 1);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 7, 548, 1, 548, 548, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 1, 548
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Random.setNextRandom(706);
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(706, 1141);
      ((Matrix)cCSMatrix0).ensureDimensionsAreCorrect(706, 706);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 706;
      doubleArray1[1] = (double) 706;
      doubleArray1[2] = (double) 706;
      doubleArray1[3] = (double) 1141;
      doubleArray1[4] = (double) 706;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0, 1141, (-1), 12, 3465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1141, -1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(7, 7, 3913.836253);
      matrix0.diagonalProduct();
      matrix0.max();
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      Matrix.unit(20, 20);
      Random.setNextRandom((-641));
      matrix0.iterator();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft((-641), (-3827));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-641][0..-3827].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.columnMajorIterator();
      matrix0.toColumnVector();
      // Undeclared exception!
      try { 
        matrix0.apply((MatrixOperation<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 3206;
      double double0 = 1283795.238622797;
      Matrix matrix0 = Matrix.diagonal(3206, 1283795.238622797);
      matrix0.spliterator();
      // Undeclared exception!
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      // Undeclared exception!
      try { 
        matrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2390.816082467408);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 2042.981569439818;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 30.490589577497;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      boolean boolean0 = matrix0.equals((Object) columnMajorSparseMatrix0);
      assertFalse(boolean0);
      assertEquals(1, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 4;
      DenseMatrix.from1DArray(4, 4, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 938;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 938);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(938);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix0, denseMatrix0);
      basic2DMatrix0.setRow(5, 1.0008825760126792);
      MockRandom mockRandom0 = new MockRandom(5);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)DenseMatrix.random(5, 5, mockRandom0);
      inPlaceCopyMatrixToMatrix0.ensureApplicableTo(basic2DMatrix1, basic2DMatrix1);
      inPlaceCopyMatrixToMatrix0.apply((DenseMatrix) basic2DMatrix1, (DenseMatrix) basic2DMatrix1);
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("^$_R|:_1!'N?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 759.064107;
      doubleArray2[1] = (-1704.230380688107);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1704.230380688107);
      doubleArray3[1] = 759.064107;
      doubleArray3[2] = 759.064107;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = (-1704.230380688107);
      doubleArray3[7] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 759.064107;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = 1.0;
      doubleArray4[7] = Double.POSITIVE_INFINITY;
      doubleArray4[8] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = Double.POSITIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 759.064107;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      double double0 = matrix0.sum();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1133.0468828);
      doubleArray2[1] = (-476.22916427590906);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1133.0468828);
      doubleArray3[1] = (-1133.0468828);
      doubleArray3[2] = (-1133.0468828);
      doubleArray3[3] = (-476.22916427590906);
      doubleArray3[4] = (-1133.0468828);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-476.22916427590906);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-476.22916427590906);
      doubleArray5[1] = (-1133.0468828);
      doubleArray5[2] = (-476.22916427590906);
      doubleArray5[3] = (-476.22916427590906);
      doubleArray5[4] = (-476.22916427590906);
      doubleArray5[5] = (-1133.0468828);
      doubleArray5[6] = 2.0;
      doubleArray5[7] = (-1419.07276226);
      doubleArray5[8] = (-710.34667189);
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      matrix0.hadamardProduct(denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertTrue(matrix0.equals((Object)denseMatrix0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("0.000");
      rowMajorSparseMatrix0.rowMajorIterator();
      double double0 = rowMajorSparseMatrix0.trace();
      assertEquals(1, rowMajorSparseMatrix0.columns());
      assertEquals(1, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 3563;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3563, 3563);
      columnMajorSparseMatrix0.blankOfShape(3563, 32);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(173, (-4781.632164934816));
      int int0 = (-1);
      double double0 = new Double((-4781.632164934816));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.setRow((-1), (double) 173);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 5;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 5, 9);
      Matrix matrix0 = denseMatrix0.copyOfRows(9);
      denseMatrix0.toColumnVector();
      int int1 = 1971;
      // Undeclared exception!
      try { 
        matrix0.removeRow(1971);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 14;
      Matrix matrix0 = Matrix.zero(9, 14);
      matrix0.toString();
      matrix0.multiplyByItsTranspose();
      int int1 = 3;
      matrix0.copyOfColumns(3);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      String string0 = "x4>&N";
      // Undeclared exception!
      try { 
        DenseVector.fromCSV("x4>&N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 2;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double[][] doubleArray5 = new double[1][3];
      doubleArray5[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray5);
      ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(2, 2, 2);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(179, 2);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix1, columnMajorSparseMatrix0);
      matrix0.shuffle();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix1.minInRow((-2073432486));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2073432486
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 671;
      Matrix matrix0 = Matrix.diagonal(671, 671);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2147483639, 555, 15);
      MockRandom mockRandom0 = new MockRandom();
      SparseVector sparseVector0 = SparseVector.random(3, 0.0, (java.util.Random) mockRandom0);
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertRow(671, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..670
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(3);
      Locale locale0 = Locale.JAPAN;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      decimalFormatSymbols0.setZeroDigit('w');
      decimalFormatSymbols0.setMinusSign('R');
      decimalFormatSymbols0.setZeroDigit('R');
      columnMajorSparseMatrix0.determinant();
      DecimalFormat decimalFormat0 = new DecimalFormat("\n", decimalFormatSymbols0);
      NumberFormat.getCurrencyInstance();
      decimalFormat0.clone();
      columnMajorSparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.iteratorOfColumn(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      mockRandom0.nextLong();
      Matrix matrix0 = Matrix.random(4, 4, mockRandom0);
      Vector vector0 = matrix0.toRowVector();
      assertEquals(4, matrix0.rows());
      assertEquals(4, vector0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 17;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(17, 0.0);
      Matrix matrix0 = columnMajorSparseMatrix0.subtract(0.0);
      matrix0.toCSV();
      int int1 = 3;
      columnMajorSparseMatrix0.nonZeroIteratorOfRow(3);
      columnMajorSparseMatrix0.trace();
      columnMajorSparseMatrix0.trace();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.update(matrixFunction0);
      int int2 = 7;
      matrix0.set(7, 3, 0.0);
      matrix0.toDenseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(48, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2578.546144190716;
      doubleArray0[1] = (-167.31123);
      doubleArray0[2] = (-4029.555598);
      doubleArray0[3] = 1.1102230246251565E-14;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.min();
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix0.mkString(numberFormat0);
      NumberFormat numberFormat1 = NumberFormat.getIntegerInstance(locale0);
      numberFormat1.setMaximumFractionDigits((-1269));
      matrix0.toCSV(numberFormat1);
      int int0 = 7;
      matrix0.iteratorOfRow(7);
      matrix0.toDenseMatrix();
      Matrix.constant(7, 7, (-4781.632164934816));
      int int1 = 0;
      Matrix matrix1 = Matrix.diagonal(0, (-4781.632164934816));
      Random.setNextRandom(8);
      // Undeclared exception!
      try { 
        matrix1.set(0, (-1269), (-1806.0166231851172));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 402;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(402, 402);
      // Undeclared exception!
      sparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Double double0 = new Double(1.0);
      linkedList0.add(double0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(37, 37);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 37);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = matrix0.toCSV((NumberFormat) decimalFormat0);
      Matrix matrix1 = matrix0.divide(37);
      matrix1.mkString(string0, "org.la4j.operation.ooplace.OoPlaceVectorsAddition");
      matrix1.iteratorOfColumn(37);
      ColumnMajorSparseMatrix.identity(37);
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        matrix0.foldColumn(769, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 769
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 173;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(173, (-4781.632164934816));
      int int1 = (-1);
      // Undeclared exception!
      columnMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 6;
      MockRandom mockRandom0 = new MockRandom(6);
      Matrix matrix0 = Matrix.randomSymmetric(6, mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      Matrix matrix1 = matrix0.insert((Matrix) sparseMatrix0);
      matrix1.determinant();
      mockRandom0.nextFloat();
      mockRandom0.longs(1000L);
      mockRandom0.nextGaussian();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(6, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 29;
      MockRandom mockRandom0 = new MockRandom(29);
      mockRandom0.doubles();
      mockRandom0.longs(0L, (long) 29);
      mockRandom0.doubles(0L);
      Matrix matrix0 = Matrix.randomSymmetric(29, mockRandom0);
      matrix0.determinant();
      // Undeclared exception!
      try { 
        matrix0.maxInRow(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 1878);
      // Undeclared exception!
      try { 
        denseMatrix0.setColumn(1878, (-165.801368354));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(32, 32);
      String string0 = rowMajorSparseMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n32 32 32\n1 1 32.000\n2 2 32.000\n3 3 32.000\n4 4 32.000\n5 5 32.000\n6 6 32.000\n7 7 32.000\n8 8 32.000\n9 9 32.000\n10 10 32.000\n11 11 32.000\n12 12 32.000\n13 13 32.000\n14 14 32.000\n15 15 32.000\n16 16 32.000\n17 17 32.000\n18 18 32.000\n19 19 32.000\n20 20 32.000\n21 21 32.000\n22 22 32.000\n23 23 32.000\n24 24 32.000\n25 25 32.000\n26 26 32.000\n27 27 32.000\n28 28 32.000\n29 29 32.000\n30 30 32.000\n31 31 32.000\n32 32 32.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(7, 7, 3913.836253);
      matrix0.diagonalProduct();
      matrix0.max();
      int int0 = (-641);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, (-641), 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -641x20
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 1453;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      int int1 = 5;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transformRow(5, vectorFunction0);
      matrix0.toSparseMatrix();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix.identity(2244);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInRow(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 6);
      columnMajorSparseMatrix0.removeFirstRow();
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      int int0 = 566;
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0, (-1073741823), 6, (-1073741823), 6, 566, 566);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1073741823, 6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      sparseMatrix0.multiplyByItsTranspose();
      sparseMatrix0.power(1);
      Matrix matrix0 = sparseMatrix0.subtract(1914538.2411585602);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 1049;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 5577.0;
      doubleArray2[2] = (-52.0);
      doubleArray2[3] = (-2037.414991329134);
      doubleArray2[4] = (-4781.632164934816);
      doubleArray2[5] = (-127.303324397199);
      doubleArray2[6] = (-2390.816082467408);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-127.303324397199);
      doubleArray3[1] = (-4781.632164934816);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 5577.0;
      doubleArray4[1] = (-4781.632164934816);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 5577.0;
      doubleArray4[4] = 5577.0;
      doubleArray4[5] = (-127.303324397199);
      doubleArray4[6] = 5577.0;
      doubleArray4[7] = (-127.303324397199);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2037.414991329134);
      doubleArray5[1] = (-2037.414991329134);
      doubleArray5[2] = 5577.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-127.303324397199);
      doubleArray5[5] = (-4781.632164934816);
      doubleArray5[6] = (-4781.632164934816);
      doubleArray5[7] = 2846.92961731;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 5577.0;
      doubleArray6[1] = (-4781.632164934816);
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-127.303324397199);
      doubleArray6[4] = 389.718981259;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-52.0);
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Vector vector0 = rowMajorSparseMatrix0.toColumnVector();
      assertEquals(7, vector0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 80;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 80;
      doubleArray0[0] = (double) 80;
      doubleArray0[2] = (double) 80;
      Matrix matrix0 = Matrix.from1DArray(80, 80, doubleArray0);
      int int1 = (-843);
      // Undeclared exception!
      try { 
        matrix0.minInColumn((-843));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-843' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 373.318556;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 373.318556;
      doubleArray2[1] = (-2527.44964991337);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 373.318556;
      doubleArray2[5] = 373.318556;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-2527.44964991337);
      doubleArray3[1] = (-2527.44964991337);
      doubleArray3[2] = (-2527.44964991337);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(4, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(558, 1);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.norm();
      matrix0.iteratorOfColumn(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight((-3081), 3038);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-3081..1][3038..558].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(7, 768);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight((-1952257860), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1952257860' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 671;
      Matrix.diagonal(671, 671);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(Integer.MAX_VALUE, 555, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(9, 9);
      sparseMatrix0.removeFirstColumn();
      Matrix matrix0 = sparseMatrix0.transpose();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Unknown symmetry type: ");
      // Undeclared exception!
      try { 
        matrix0.mkString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, (-3147.4442629636665));
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 2);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, sparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.transformRow(2, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("     ");
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      Matrix matrix2 = matrix1.insert(matrix0);
      Matrix.block(matrix1, matrix1, matrix0, matrix2);
      denseMatrix0.iterator();
      int int0 = 25;
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      NumberFormat.getIntegerInstance(locale0);
      denseMatrix0.toMatrixMarket(numberFormat0);
      RowMajorSparseMatrix.identity(25);
      double double0 = Double.POSITIVE_INFINITY;
      matrix0.norm();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6528;
      doubleArray0[1] = (-2775.9572615223638);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 6528;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray((-424), 6528, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -424x6528
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("   ");
      sparseMatrix0.blank();
      sparseMatrix0.rows();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-3257.8712814004));
      linkedList0.add(double0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        sparseMatrix0.apply((MatrixVectorOperation<String>) null, (Vector) sparseVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1368);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(17);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      
      Matrix matrix1 = denseMatrix0.insert(matrix0);
      assertEquals(1368, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 776;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(776, 1.0);
      // Undeclared exception!
      denseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(30, 30, 30);
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1351, 1351);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(1731);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1731' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 31;
      doubleArray0[2] = (double) 31;
      Matrix matrix0 = Matrix.from1DArray(31, 31, doubleArray0);
      assertEquals(31, matrix0.rows());
      assertEquals(31, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 37;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(37);
      int int1 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 37);
      Matrix matrix0 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix0.blankOfColumns(5);
      Matrix matrix1 = matrix0.add((Matrix) rowMajorSparseMatrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) 37;
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) 37;
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix1.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 9 does not equal to 37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1882;
      doubleArray0[1] = (double) (-1436);
      doubleArray0[2] = (double) 1882;
      doubleArray0[3] = (double) (-1436);
      doubleArray0[4] = (double) 1882;
      doubleArray0[5] = (double) (-1436);
      doubleArray0[6] = (double) (-1436);
      doubleArray0[7] = (double) 1882;
      doubleArray0[8] = (double) (-1436);
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(1882, (-1436), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1882x-1436
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.infinityNorm();
      assertEquals(1, matrix0.rows());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.sliceTopLeft(1, 1);
      cRSMatrix0.iteratorOfColumn(3752);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toColumnMatrix();
      ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-2648), (-2648), (-2974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2648x-2648
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 924;
      double double0 = (-2124.239359993602);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(924, (-2124.239359993602));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        sparseMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      String string0 = "org.la4j.matrix.ColumnMajorSparseMatrix";
      int int0 = 7;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(7, 7, 7);
      Matrix.zero(7, 5);
      inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("org.la4j.matrix.ColumnMajorSparseMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(8);
      assertEquals(0.125, cRSMatrix0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.randomSymmetric(2, mockRandom0);
      assertEquals(2, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 27;
      int int1 = (-1990);
      // Undeclared exception!
      try { 
        Matrix.zero(27, (-1990));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1327.6);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1327.6);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1327.6);
      doubleArray4[1] = (-1327.6);
      doubleArray4[2] = 4181.57183660511;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.euclideanNorm();
      assertEquals(4, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1854, 1854);
      // Undeclared exception!
      matrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 303;
      ColumnMajorSparseMatrix.zero(303, 303, 303);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("@&\"@ej``V.o4P3j*]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(839, 6);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      Matrix matrix1 = Matrix.identity(6);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 6, 6, 3, 316, (-1983913403), (-1983913403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1983913403x-1983913403
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1000, 37, 37);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2806, 1000, 1000);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix0.toRowMajorSparseMatrix();
      assertEquals(2806, rowMajorSparseMatrix0.rows());
      assertEquals(1000, rowMajorSparseMatrix0.columns());
      assertEquals(1000, columnMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "eC@bIr[#Lc%GT]N";
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("eC@bIr[#Lc%GT]N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 511;
      Matrix matrix0 = Matrix.constant(511, 2949, 511);
      matrix0.iteratorOfColumn(1794);
      int int1 = 17;
      matrix0.minInRow(17);
      // Undeclared exception!
      matrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(17);
      Matrix matrix0 = columnMajorSparseMatrix0.add(0.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      matrix0.subtract((double) 17);
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      Locale locale1 = new Locale("H#!v{&kX", "H#!v{&kX");
      locale0.getDisplayVariant(locale1);
      matrix0.mkString(numberFormat0, "`\"37z_E`AD]h(B4`.U", "`\"37z_E`AD]h(B4`.U");
      matrix0.rank();
      MatrixPredicate matrixPredicate1 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate1).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("org.la4j.operation.MatrixVectorOperation$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
