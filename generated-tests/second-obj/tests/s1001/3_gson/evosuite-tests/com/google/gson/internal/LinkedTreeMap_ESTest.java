/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:49:46 GMT 2018
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LinkedTreeMap;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedTreeMap_ESTest extends LinkedTreeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>(comparator0);
      boolean boolean0 = linkedTreeMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      boolean boolean0 = linkedTreeMap_EntrySet0.remove(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("", linkedTreeMap_EntrySet0);
      boolean boolean0 = linkedTreeMap_EntrySet1.contains(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.clear();
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      String string0 = linkedTreeMap_Node0.toString();
      assertEquals("null=null", string0);
      
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      assertNotNull(linkedTreeMap_Node1);
      
      boolean boolean0 = linkedTreeMap_Node1.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedTreeMap<Integer, Object> linkedTreeMap0 = new LinkedTreeMap<Integer, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertFalse(boolean0);
      assertEquals(0, linkedTreeMap_KeySet0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      int int0 = linkedTreeMap_KeySet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.first();
      boolean boolean0 = linkedTreeMap_Node1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedTreeMap<Object, Object> linkedTreeMap0 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap0.remove((Object) "H/`3Pk/0j5");
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>();
      Object object0 = new Object();
      linkedTreeMap0.get(object0);
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap0 = new LinkedTreeMap<String, String>(comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = linkedTreeMap0.find("2Tqm_", true);
      linkedTreeMap_Node0.setValue("]/9v3rw<C&aK](gX");
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(12);
      linkedTreeMap0.put("dz=Lq'e\"68YNW&/y8", integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertEquals(1, linkedTreeMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4550).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(4550);
      linkedTreeMap0.remove((Object) integer0);
      Integer integer1 = new Integer(12);
      linkedTreeMap0.put("dz=Lq'e\"68YNW&/y8", integer1);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      boolean boolean0 = linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-16), 0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      Integer integer0 = new Integer(12);
      linkedTreeMap0.keySet();
      linkedTreeMap0.put("dz=Lq'e\"68YNW&/y8", integer0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap_KeySet0.contains(linkedTreeMap0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      boolean boolean0 = linkedTreeMap_KeySet1.remove(object0);
      assertEquals(1, linkedTreeMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Integer> linkedTreeMap0 = new LinkedTreeMap<String, Integer>(comparator0);
      LinkedTreeMap<String, Object> linkedTreeMap1 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.values();
      int int0 = 0;
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap1.merge("5w|Wo{,XGv%!xiuH.Z", "5w|Wo{,XGv%!xiuH.Z", biFunction0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      linkedTreeMap0.replace("", integer1, integer0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("5w|Wo{,XGv%!xiuH.Z", integer0);
      Integer integer2 = new Integer(0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap1.new KeySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet0.removeAll(linkedTreeMap_EntrySet0);
      Integer integer3 = new Integer((int) integer2);
      try { 
        Integer.parseUnsignedInt("5w|Wo{,XGv%!xiuH.Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5w|Wo{,XGv%!xiuH.Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      linkedTreeMap0.put("fs$|:YXYSP.Q", linkedTreeMap1);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("@HQT@2l\"`", "@HQT@2l\"`");
      linkedTreeMap0.findByEntry(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedTreeMap<Integer, String> linkedTreeMap0 = new LinkedTreeMap<Integer, String>();
      linkedTreeMap0.values();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      linkedTreeMap_Node0.left = null;
      linkedTreeMap_Node0.getKey();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      linkedTreeMap0.containsValue((Object) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.forEach(biConsumer0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedTreeMap0.put((String) null, comparator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
         verifyException("com.google.gson.internal.LinkedTreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = null;
      Object object0 = null;
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      linkedTreeMap_Node0.height = 668;
      linkedTreeMap_Node0.value = "";
      linkedTreeMap_Node0.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      boolean boolean0 = linkedTreeMap_Node0.equals(linkedTreeMap_Node0);
      assertTrue(boolean0);
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = linkedTreeMap1.header;
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      assertNotNull(linkedTreeMap_Node1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(linkedTreeMap_Node1);
      boolean boolean0 = linkedTreeMap_EntrySet1.remove(abstractMap_SimpleEntry0);
      assertEquals(0, linkedTreeMap1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      Map.Entry.comparingByKey();
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      Integer integer0 = Integer.valueOf((-1));
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      linkedTreeMap_Node0.height = (-1);
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      linkedTreeMap1.find(integer0, false);
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      assertEquals((-1), linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      Map.Entry.comparingByKey();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      assertTrue(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node0));
      
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap_Node0.equals(linkedTreeMap_Node2);
      linkedTreeMap_Node1.toString();
      assertFalse(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node0));
      
      linkedTreeMap_EntrySet0.iterator();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.Node<Object, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Object>();
      Integer integer0 = new Integer(1013);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge(linkedTreeMap_Node0, integer0, biFunction0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_EntrySet0.forEach(consumer0);
      linkedTreeMap_EntrySet0.contains(linkedTreeMap0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      assertEquals(1, linkedTreeMap0.size());
      
      boolean boolean0 = linkedTreeMap_KeySet0.remove("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>(comparator0);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node1 = linkedTreeMap0.find(linkedTreeMap_Node0, true);
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.first();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.last();
      boolean boolean0 = linkedTreeMap_Node3.equals(linkedTreeMap_Node2);
      assertSame(linkedTreeMap_Node2, linkedTreeMap_Node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedTreeMap_Node0.parent = linkedTreeMap_Node1;
      linkedTreeMap_Node1.left = linkedTreeMap_Node0;
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Integer> linkedTreeMap0 = new LinkedTreeMap<Object, Integer>(comparator0);
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node0 = new LinkedTreeMap.Node<Object, Integer>();
      LinkedTreeMap.Node<Object, Integer> linkedTreeMap_Node1 = new LinkedTreeMap.Node<Object, Integer>(linkedTreeMap_Node0, linkedTreeMap0, linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.right = linkedTreeMap_Node0;
      linkedTreeMap_Node0.equals(linkedTreeMap_Node1);
      Integer integer0 = Integer.valueOf((-1));
      linkedTreeMap_Node0.setValue(integer0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      // Undeclared exception!
      try { 
        linkedTreeMap0.removeInternal(linkedTreeMap_Node1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node0, "", linkedTreeMap_Node0, linkedTreeMap_Node0);
      linkedTreeMap_Node1.right = linkedTreeMap_Node0;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node1.parent = linkedTreeMap_Node0;
      linkedTreeMap_Node1.toString();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      linkedTreeMap_Node3.getValue();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>(comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.iterator();
      LinkedTreeMap<Integer, Object> linkedTreeMap1 = new LinkedTreeMap<Integer, Object>();
      Integer integer0 = new Integer((-4309));
      try { 
        Integer.parseUnsignedInt((String) null, (-4309));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      linkedTreeMap_Node0.right = linkedTreeMap_Node1;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1, "01d6^tPJ>kkFw<S]lo}", linkedTreeMap_Node0, linkedTreeMap_Node1);
      linkedTreeMap_Node2.left = linkedTreeMap_Node1;
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node2.first();
      assertSame(linkedTreeMap_Node3, linkedTreeMap_Node1);
      
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, Object>();
      Integer integer0 = new Integer(0);
      linkedTreeMap0.keySet();
      Integer integer1 = new Integer(0);
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet1.spliterator();
      Integer integer2 = new Integer(0);
      Integer.compareUnsigned((-77), (-77));
      Set<String> set0 = linkedTreeMap0.keySet();
      assertNotNull(set0);
      
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      linkedTreeMap1.clear();
      assertEquals(0, linkedTreeMap1.size());
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap0.new EntrySet();
      int int0 = linkedTreeMap_EntrySet2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      Object object0 = new Object();
      linkedTreeMap0.put("SbZ?Uq-D|B.M6$?wUr", "%P:_](3");
      linkedTreeMap0.putIfAbsent("Qa6", "*Y|LfIatO'{e");
      linkedTreeMap0.entrySet();
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>(comparator0);
      linkedTreeMap2.size = 0;
      Integer integer0 = new Integer(194);
      Integer.compare(583, (-12));
      Integer.remainderUnsigned((-65), 194);
      Object object1 = new Object();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("%P:_](3").when(biFunction0).apply(any() , any());
      linkedTreeMap0.compute("", biFunction0);
      Integer integer1 = new Integer(194);
      try { 
        Integer.parseUnsignedInt("", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("3%?P;tJ\t6c", "3%?P;tJ\t6c");
      linkedTreeMap0.put("", "");
      linkedTreeMap0.putIfAbsent("Qa6", "");
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      assertEquals(3, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedTreeMap<Object, String> linkedTreeMap0 = new LinkedTreeMap<Object, String>();
      Integer integer0 = new Integer(1440);
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedTreeMap0.merge(integer0, "yM\"X", biFunction0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, Object>();
      Object object0 = linkedTreeMap_Node0.value;
      // Undeclared exception!
      try { 
        linkedTreeMap0.find((Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LinkedTreeMap$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      linkedTreeMap1.containsKey("");
      linkedTreeMap0.find("o", true);
      linkedTreeMap0.putIfAbsent("o", "o");
      linkedTreeMap_KeySet0.remove(linkedTreeMap1);
      linkedTreeMap0.findByObject((Object) null);
      linkedTreeMap0.find("*Y|LfIatO'{e", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = linkedTreeMap_Node0.last();
      linkedTreeMap_Node1.setValue("jgOdv@i^H37v*");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<String, Object> linkedTreeMap3 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap<Integer, Integer> linkedTreeMap4 = new LinkedTreeMap<Integer, Integer>();
      linkedTreeMap0.putIfAbsent("jgOdv@i^H37v*", linkedTreeMap4);
      linkedTreeMap3.entrySet();
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("3%5D&tJ\t(c", "3%5D&tJ\t(c");
      linkedTreeMap0.put("mbZ?Uq-s|B.Mw$?wUr", "%P:_](3");
      linkedTreeMap0.putIfAbsent("Y|LfRatO'{e", "Y|LfRatO'{e");
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "3%5D&tJ\t(c");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      predicate1.negate();
      linkedTreeMap_KeySet0.removeIf(predicate0);
      // Undeclared exception!
      try { 
        linkedTreeMap_KeySet0.add(linkedTreeMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("3%?P;tJ\t6c", "3%?P;tJ\t6c");
      linkedTreeMap0.put("Y|LfIatO'{e", "a}UsI/gm");
      linkedTreeMap0.putIfAbsent("Qa6", "Y|LfIatO'{e");
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "Qa6");
      predicate0.test((Object) null);
      predicate1.negate();
      predicate1.negate();
      predicate1.negate();
      linkedTreeMap_KeySet0.removeIf(predicate1);
      LinkedTreeMap<String, String> linkedTreeMap2 = new LinkedTreeMap<String, String>();
      linkedTreeMap2.entrySet();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet0.clear();
      assertEquals(0, linkedTreeMap_EntrySet0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("", "");
      linkedTreeMap0.put("SbZ?Uq-D|B.M6$?wUr", "%P:_](3");
      linkedTreeMap0.putIfAbsent("Qa6", "Y|LfIatO'{e");
      linkedTreeMap0.entrySet();
      LinkedTreeMap<Integer, String> linkedTreeMap1 = new LinkedTreeMap<Integer, String>();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Integer, String> linkedTreeMap2 = new LinkedTreeMap<Integer, String>();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer.compare((-1), 1472);
      LinkedTreeMap<Integer, Integer> linkedTreeMap3 = new LinkedTreeMap<Integer, Integer>(comparator0);
      Integer integer0 = new Integer(1472);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      linkedTreeMap0.compute("p,gQ~Cqv", biFunction0);
      Integer.remainderUnsigned((-1201), 1472);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.removeInternalByKey("");
      assertNotNull(linkedTreeMap_Node0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      assertTrue(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node0));
      
      linkedTreeMap_Node1.value = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node2.getValue();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, Object> linkedTreeMap1 = new LinkedTreeMap<Object, Object>(comparator1);
      linkedTreeMap_Node0.equals(linkedTreeMap_Node2);
      assertFalse(linkedTreeMap_Node1.equals((Object)linkedTreeMap_Node0));
      
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      assertEquals(0, linkedTreeMap0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node0 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap_Node0.value = "";
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node2, "", linkedTreeMap_Node1, linkedTreeMap_Node0);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, Object>();
      Map.Entry.comparingByValue();
      linkedTreeMap_Node1.prev = linkedTreeMap_Node3;
      linkedTreeMap_Node4.prev.equals(linkedTreeMap_Node1);
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      linkedTreeMap0.find("", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node5 = new LinkedTreeMap.Node<String, String>(linkedTreeMap_Node1.prev, "", linkedTreeMap_Node3, linkedTreeMap_Node3);
      linkedTreeMap_Node1.setValue("");
      linkedTreeMap_Node1.prev.setValue("=");
      Object object0 = new Object();
      linkedTreeMap0.entrySet();
      Object object1 = new Object();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node6 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<Object, String> linkedTreeMap_Node7 = new LinkedTreeMap.Node<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.contains(linkedTreeMap_Node3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap0.new EntrySet();
      LinkedTreeMap<String, Integer> linkedTreeMap1 = new LinkedTreeMap<String, Integer>();
      linkedTreeMap1.removeInternalByKey(linkedTreeMap_Node0);
      Integer integer0 = new Integer((-3));
      LinkedTreeMap.Node<Integer, Object> linkedTreeMap_Node8 = new LinkedTreeMap.Node<Integer, Object>();
      LinkedTreeMap<Object, Object> linkedTreeMap2 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap2.new EntrySet();
      assertEquals(0, linkedTreeMap_EntrySet2.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("", "*Y|LfIatO'{e");
      linkedTreeMap0.findByObject((Object) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*Y|LfIatO'{e", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      linkedTreeMap_Node1.last();
      linkedTreeMap_KeySet0.toString();
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap1.new EntrySet();
      linkedTreeMap0.put("[, *Y|LfIatO'{e]", linkedTreeMap_Node2);
      linkedTreeMap0.replace("[, *Y|LfIatO'{e]", (Object) linkedTreeMap_Node2, (Object) "");
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = new LinkedTreeMap.Node<String, String>();
      linkedTreeMap0.putIfAbsent(" is not Comparable", "");
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap1.new EntrySet();
      linkedTreeMap_EntrySet1.contains("[, *Y|LfIatO'{e]");
      Integer.remainderUnsigned((-2090), (-2090));
      Integer integer0 = new Integer((-2090));
      LinkedTreeMap.KeySet linkedTreeMap_KeySet1 = linkedTreeMap1.new KeySet();
      linkedTreeMap_KeySet1.toString();
      Object object1 = new Object();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, true);
      LinkedTreeMap<Object, Integer> linkedTreeMap2 = new LinkedTreeMap<Object, Integer>();
      LinkedTreeMap.Node<String, Integer> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, Integer>();
      linkedTreeMap_Node4.getKey();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet2 = linkedTreeMap2.new KeySet();
      String string0 = linkedTreeMap_Node0.getKey();
      assertEquals("*Y|LfIatO'{e", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedTreeMap<String, Object> linkedTreeMap0 = new LinkedTreeMap<String, Object>();
      LinkedTreeMap.KeySet linkedTreeMap_KeySet0 = linkedTreeMap0.new KeySet();
      linkedTreeMap0.putIfAbsent("", "*Y|LfIatO'{e");
      linkedTreeMap0.findByObject((Object) null);
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node0 = linkedTreeMap0.find("*Y|LfIatO'{e", true);
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node1 = new LinkedTreeMap.Node<String, String>();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node2 = linkedTreeMap_Node1.last();
      LinkedTreeMap.Node<String, String> linkedTreeMap_Node3 = linkedTreeMap_Node1.first();
      linkedTreeMap_KeySet0.toString();
      LinkedTreeMap<Object, Integer> linkedTreeMap1 = new LinkedTreeMap<Object, Integer>();
      linkedTreeMap0.put("[, *Y|LfIatO'{e]", linkedTreeMap_Node2);
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet0 = linkedTreeMap0.new EntrySet();
      linkedTreeMap_EntrySet0.remove(linkedTreeMap_Node0);
      LinkedTreeMap<String, Object> linkedTreeMap2 = new LinkedTreeMap<String, Object>();
      linkedTreeMap2.put("", "gf\":p]Q$0TVrtr9d^");
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedTreeMap2.compute("*Y|LfIatO'{e", biFunction0);
      linkedTreeMap2.replace("", (Object) "%#lt551h>L", (Object) linkedTreeMap_Node3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedTreeMap<Object, String> linkedTreeMap3 = new LinkedTreeMap<Object, String>(comparator0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      linkedTreeMap2.compute("", biFunction1);
      LinkedTreeMap<Object, Object> linkedTreeMap4 = new LinkedTreeMap<Object, Object>();
      linkedTreeMap_KeySet0.clear();
      linkedTreeMap0.removeInternal(linkedTreeMap_Node0, false);
      LinkedTreeMap<Object, Object> linkedTreeMap5 = new LinkedTreeMap<Object, Object>();
      LinkedTreeMap<Object, String> linkedTreeMap6 = new LinkedTreeMap<Object, String>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet1 = linkedTreeMap3.new EntrySet();
      LinkedTreeMap.Node<String, Object> linkedTreeMap_Node4 = new LinkedTreeMap.Node<String, Object>();
      LinkedTreeMap.EntrySet linkedTreeMap_EntrySet2 = linkedTreeMap1.new EntrySet();
      LinkedTreeMap<String, String> linkedTreeMap7 = new LinkedTreeMap<String, String>();
      assertEquals(0, linkedTreeMap7.size());
  }
}
