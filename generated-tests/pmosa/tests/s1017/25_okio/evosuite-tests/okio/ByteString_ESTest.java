/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:36:21 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString1 = hashingSource1.hash();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString2.EMPTY.md5();
      hashingSource1.close();
      // Undeclared exception!
      try { 
        byteString1.substring(43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      ByteString byteString3 = byteString2.md5();
      hashingSource0.close();
      // Undeclared exception!
      try { 
        byteString3.substring((int) (byte) (-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.substring(0, 0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.toString();
      byteString1.indexOf(byteString0);
      // Undeclared exception!
      try { 
        byteString0.substring(1585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)98;
      byte byte0 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.startsWith(byteArray0);
      byteString0.hashCode = (-1951);
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString0.base64Url();
      String string0 = "HmacSHA256";
      byteString0.indexOf(byteString1);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)45, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=17 offset=45 byteCount=122
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      Buffer buffer0 = new Buffer();
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      Inflater inflater0 = new Inflater();
      int int0 = (-692);
      // Undeclared exception!
      try { 
        ByteString.encodeString("%e~tkAp@", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      long long0 = (-434L);
      int int0 = (-692);
      // Undeclared exception!
      try { 
        ByteString.encodeString("%e~tkAp@", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      int int0 = byteString0.lastIndexOf(byteArray0, (-3976));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("UQ&P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: U
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2UQP&P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: U
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      boolean boolean0 = byteString0.rangeEquals(6, byteString1, 95, 2693);
      assertFalse(boolean0);
      
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-11);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)9;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = 76;
      ByteString byteString2 = byteString0.EMPTY.substring(0, 0);
      byteString1.base64();
      // Undeclared exception!
      try { 
        byteString2.EMPTY.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.toString();
      byteString0.indexOf(byteString1);
      ByteString.codePointIndexToCharIndex("HmacSHA256", 82);
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString1.lastIndexOf(byteString0, 8);
      byteString2.hex();
      byteString2.hex();
      byteString2.indexOf(byteString1);
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.substring((-691), (int) (byte) (-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("l^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)120;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)76, (byte) (-70), (byte) (-95), (byte)85, (byte)33, (byte) (-40), (byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k\"P]U&E,*hdj");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)33;
      byteArray0[3] = (byte) (-40);
      byteArray0[3] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (-864));
      assertEquals((-1), int0);
      
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=77]", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=d7777777d737777d73dd7f7f7d3773777fd37777]", string0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byte byte0 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)45;
      byteArray0[5] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.startsWith(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)98;
      byteString0.EMPTY.indexOf(byteArray1);
      byteString0.hashCode = (-1951);
      ByteString byteString1 = byteString0.EMPTY.toAsciiLowercase();
      byteString0.toString();
      String string0 = "HmacSHA256";
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString1.internalArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(pushbackInputStream0, (byte) (-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -37
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      int int0 = 101;
      byteString1.lastIndexOf(byteString0, (-167));
      byteString0.EMPTY.indexOf(byteString1, 101);
      byteString1.base64();
      Pipe pipe0 = new Pipe(101);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString0.equals(hashingSource0);
      assertFalse(boolean0);
      
      byteString1.asByteBuffer();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)71;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.EMPTY.write(buffer1);
      boolean boolean0 = byteString0.equals(buffer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.sha256(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("*g*fIYW(@r,", charset0);
      byteString1.rangeEquals(102, byteArray0, (int) (byte)0, (int) (byte)0);
      realBufferedSource0.readByteString((long) (byte)0);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = buffer0.sha1();
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      hashingSource1.hash();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)82;
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString1.toString();
      assertEquals("[hex=dd]", string0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)22;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.indexOf(byteString1);
      byteString1.EMPTY.sha1();
      ByteString.codePointIndexToCharIndex("-kC)OX6oU", (byte) (-103));
      ByteString byteString2 = ByteString.decodeBase64("N4");
      byteString2.lastIndexOf(byteString0, (int) (byte)37);
      byteString0.hex();
      byteString1.hex();
      byteString1.indexOf(byteString0);
      ByteString byteString3 = ByteString.of(byteArray0);
      byteString3.EMPTY.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(48, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.toString();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha256(byteString2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "size < 4: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "size < 4: ");
      ByteString byteString0 = ByteString.encodeUtf8("B!EZ0]3eF");
      byteString0.EMPTY.equals("B!EZ0]3eF");
      // Undeclared exception!
      try { 
        byteString0.getByte(2024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)45;
      byteArray0[5] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.startsWith(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)98;
      boolean boolean0 = byteString0.startsWith(byteArray1);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=d7777777dd7d]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte)0;
      byteArray1[5] = (byte) (-106);
      byteArray1[6] = (byte) (-21);
      byteString0.startsWith(byteArray1);
      String string0 = byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      String string1 = byteString0.string(charset0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)0;
      ByteString byteString1 = ByteString.decodeHex("");
      byteString1.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)45;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)45;
      byteArray1[4] = (byte)45;
      byteArray1[5] = (byte)65;
      byteString0.startsWith(byteArray1);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.toString();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.indexOf(byteString0);
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[0] = (byte) (-37);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0, 65);
      ByteString byteString2 = byteString0.sha512();
      int int1 = byteString2.lastIndexOf(byteString1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString2.equals(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(470L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.substring(0, 0);
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = 0;
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteString.read(bufferedInputStream0, 0);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=777d]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      ByteString byteString1 = byteString0.sha1();
      byteString1.EMPTY.utf8();
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      HashingSource.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = realBufferedSource0.buffer.sha1();
      ByteString byteString1 = byteString0.substring(9, 9);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-127);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.startsWith(byteArray0);
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA512");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      boolean boolean0 = byteString0.startsWith(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=7dddddddddd777d7d7dd77d7ddddddddd77ddddd]", string0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertTrue(boolean1);
      
      byteString0.equals(buffer0);
      byteString0.base64Url();
      boolean boolean2 = byteString1.rangeEquals(2879, byteArray0, 3365, 2879);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.startsWith(byteArray0);
      byteString0.EMPTY.endsWith(byteString1);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=00000000000000]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=dd]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSource0);
      HashingSource.hmacSha1(hashingSource1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=77d7d7d7dd77]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=dd]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      Pipe pipe0 = new Pipe((byte)55);
      Source source0 = pipe0.source();
      HashingSource hashingSource0 = HashingSource.sha256(source0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.string(charset0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r(IzO,[Z(0uH/");
      byteArray1[3] = (byte)0;
      byteString0.EMPTY.endsWith(byteArray1);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("6+kq~D(CLW\"%AL9G!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 6+kq~D(CLW\"%AL9G!
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "A!V6_\\";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("A!V6_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: A!V6_
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3934, 86);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.startsWith(byteString1);
      byte[] byteArray1 = byteString0.internalArray();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("gQ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(100);
      byteString0.write(byteArrayOutputStream0);
      assertEquals("gQ", byteArrayOutputStream0.toString());
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.substring(0, 0);
      ByteString byteString2 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString2.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Pipe pipe0 = new Pipe(810L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      HashingSource.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = realBufferedSource0.buffer.sha1();
      ByteString byteString1 = byteString0.substring(0, 0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(0, byteString1.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)44;
      byteString0.startsWith(byteArray0);
      byteString0.toString();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(70);
      try { 
        ByteString.read(byteArrayInputStream0, 17);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      HashingSink.sha512(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-3);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteString1);
      ByteString byteString2 = byteString0.md5();
      byteString0.hex();
      byteString2.toString();
      byteString1.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [0-9] or '-' character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Expected leading [0-9] or '-' character but was %#x
         //
         verifyException("okio.ByteString", e);
      }
  }
}
