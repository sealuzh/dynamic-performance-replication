/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:35:58 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.clearBit(1093, 88);
      Utility.classOrInterface(88);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-10), 75, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-27);
      byte byte0 = (byte)115;
      byteArray0[3] = (byte)115;
      byte byte1 = (byte)32;
      byteArray0[4] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1818, 1818);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.fillup("oHM ~jBJ5bc\"zI7df", 256, true, '0');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "M1LL:v.t/9^Lf*-/,}";
      try { 
        Utility.typeOfSignature("M1LL:v.t/9^Lf*-/,}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M1LL:v.t/9^Lf*-/,}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.accessToString(162);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-810), (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpne\t\t#-19813
         // 3:    if_acmpne\t\t#-25774
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-16);
      byte byte0 = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      boolean boolean0 = true;
      char char0 = ']';
      Utility.fillup("aconst_null", (byte) (-16), true, ']');
      Utility.isJavaIdentifierPart('w');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte)111, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "5(`^#p";
      try { 
        Utility.typeOfSignature("5(`^#p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5(`^#p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<";
      stringArray0[1] = ", low = ";
      stringArray0[2] = "<";
      stringArray0[3] = "<";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[4] = "<";
      Utility.methodTypeToSignature("<", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<;L,;L<;L<;L<;)L<;", ", low = ", "<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;L,;L<;L<;L<;)L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.ConstantUtf8$1", false);
      int int0 = (-1618393472);
      Utility.classOrInterface((-1618393472));
      Utility.equals(byteArray0, byteArray0);
      Utility.decode("_BD:S1s'$O{m5c'", false);
      Constant[] constantArray0 = new Constant[6];
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1618393472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)117;
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1581, 983);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 417, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = Utility.searchOpcode("multianewarray");
      assertEquals((short)197, short0);
      
      Utility.getSignature("multianewarray");
      String string0 = Utility.accessToString((int) (short)197);
      assertEquals("public protected volatile transient", string0);
      
      Utility.getSignature("multianewarray");
      String string1 = Utility.convertString("'STgq||N");
      assertEquals("\\'STgq||N", string1);
      
      String string2 = Utility.signatureToString("IS__El!+Z*O/e$bRs");
      assertEquals("int", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)80;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("41 02 50", string3);
      
      String string4 = Utility.getSignature("iload_3");
      assertEquals("Liload_3;", string4);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)80;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-884), (byte)80);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string5 = Utility.codeToString(byteArray1, constantPool0, (-875), (int) (byte) (-119), false);
      assertEquals("0:    l2f\n1:    iconst_m1\n2:    iconst_m1\n3:    isub\n4:    lastore\n", string5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)39;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto");
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)71;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte)10, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    laload\n1:    lconst_1\n2:    baload\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lsub\n6:    lastore\n7:    lload_3\n8:    dstore_0\n", "0:    laload\n1:    lconst_1\n2:    baload\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lsub\n6:    lastore\n7:    lload_3\n8:    dstore_0\n", "0:    laload\n1:    lconst_1\n2:    baload\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    lsub\n6:    lastore\n7:    lload_3\n8:    dstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    laload
         // 1:    lconst_1
         // 2:    baload
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    lsub
         // 6:    lastore
         // 7:    lload_3
         // 8:    dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("land");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4096, 3475);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "&Y7RL}0/+2_=Crr";
      try { 
        Utility.typeOfSignature("&Y7RL}0/+2_=Crr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Y7RL}0/+2_=Crr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.classOrInterface(89);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-60);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 126, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1734;
      int int1 = (-3302);
      Utility.isSet(1734, (-3302));
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "GJ5F2$v";
      try { 
        Utility.typeOfSignature("GJ5F2$v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GJ5F2$v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Warning: Padding byte != 0 in ";
      stringArray0[1] = "Warning: Padding byte != 0 in ";
      stringArray0[2] = "Warning: Padding byte != 0 in ";
      stringArray0[3] = "Warning: Padding byte != 0 in ";
      Utility.methodTypeToSignature("Warning: Padding byte != 0 in ", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)89;
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString(183);
      constantArray0[0] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-411), 221);
      constantArray0[1] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)112, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.searchOpcode("DQz%8");
      Utility.methodSignatureReturnType("DQz%8", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)70;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4096, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, 57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-60);
      Utility.encode(byteArray0, false);
      Utility.decode("Z$9f$7b$c4", false);
      String string0 = Utility.compactClassName("5");
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.compactClassName(":");
      String string0 = "H";
      try { 
        Utility.typeOfSignature("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-117);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "(D";
      Utility.compactClassName("(D");
      String string1 = "getstatic";
      String string2 = "freturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(D", "getstatic", "freturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.accessToString(307, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private final synchronized native";
      objectArray0[1] = (Object) "public private final synchronized native";
      objectArray0[2] = (Object) "public private final synchronized native";
      objectArray0[3] = (Object) "public private final synchronized native";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "public private final synchronized native";
      objectArray0[6] = (Object) "public private final synchronized native";
      objectArray0[7] = (Object) "public private final synchronized native";
      Utility.printArray(objectArray0, false, true);
      boolean boolean0 = false;
      Utility.accessToString(10, false);
      Utility.typeOfSignature("StackMapTable");
      try { 
        Utility.typeOfMethodSignature("synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rY.|V)P/;bXk_m");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-35);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3132), (int) (byte) (-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_1
         // 1:    fdiv
         // 2:    lstore_0
         // 3:    ifle\t\t#924
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.isSet((-659), (-659));
      Utility.replace("istore_0", "\t<", "l2i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.mark(1250);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("lstore\t\t%5", true);
      Utility.clearBit((byte) (-78), 103);
      String string0 = "}2Ywn=3z";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: `", "lstore\t\t%5", "}2Ywn=3z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 2363, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "new";
      Utility.replace("new", "new", "new");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.decode("new", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(13, true);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)16;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.setBit(383, (-3390));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-106);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("T?Q'91^M~L");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("T?Q'91^M~L");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-106), 383);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-106), 41, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("L1!{gs(E_#ZW!FU<j>C;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j>C;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)66;
      byte byte0 = (byte) (-113);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "byte", "dadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      Utility.toHexString(byteArray0);
      String string0 = "Ljava/lang/Object";
      Utility.searchOpcode("Ljava/lang/Object");
      Utility.typeOfSignature("Ljava/lang/Object");
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.compactClassName("", "boolean", true);
      assertEquals("", string0);
      
      Utility.convertString("");
      String string1 = Utility.accessToString(4, true);
      assertEquals("protected", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", end_pc = ";
      stringArray0[1] = "boolean";
      stringArray0[2] = "From\tTo\tHandler\tType\n";
      stringArray0[3] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[4] = "boolean";
      String string3 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L,;ZLFrom;L$l$8b$I$A$A$A$A$A$A$A;Z)L;", string3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-100));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface((-1614161456));
      Utility.classOrInterface((byte) (-100));
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-122), (-1790145684));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong((-913L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(36);
      constantArray0[2] = (Constant) constantMethodType0;
      byteSequence0.close();
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantMethodType0.toString();
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), 1008);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "*KvwXT";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("*KvwXT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KvwXT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("if_icmpne");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "if_icmpne";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "if_icmpne";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "if_icmpne";
      objectArray0[6] = (Object) "if_icmpne";
      PrintWriter printWriter0 = mockPrintWriter0.format("V`Qp}(nKeO,dueqs ", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.fillup("V`Qp}(nKeO,dueqs ", (-2835), false, 'R');
      Utility.isSet((-2835), 122);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " arg");
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.accessToString((-4822));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4822), (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), (-3136), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    athrow
         // 2:    <illegal opcode>
         // 3:    dcmpg
         // 4:    ifgt\t\t#29890
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Q*j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q*j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-520), (-520));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    isub
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (-2463), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-50);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 835, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)79;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("42 8e d5 e7 52 4f", string0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte) (-43);
      byteArray1[3] = (byte)79;
      byteArray1[4] = (byte) (-114);
      byteArray1[5] = (byte) (-43);
      byteArray1[6] = (byte) (-43);
      byteArray1[7] = (byte) (-105);
      byteArray1[8] = (byte)79;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray1, constantPool0, 2, 512, false);
      assertEquals("2:    <illegal opcode>\n3:    iastore\n4:    d2i\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    dcmpl\n8:    iastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Double");
      Utility.fillup("Double", 248, true, 'G');
      Utility.isSet(214, 248);
      Utility.accessToString((-177));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-3);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("DoubleGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", false);
      String string0 = "NU2k";
      try { 
        Utility.typeOfSignature("NU2k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NU2k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)56);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantString constantString0 = new ConstantString((byte)46);
      constantArray0[1] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^1gl(Uox?o}");
      Utility.fillup("FdjF14EKb`jki%T@", (-1765), true, '8');
      Utility.typeOfSignature("FdjF14EKb`jki%T@");
      String string0 = Utility.convertString("9SN'-+;yd+");
      assertEquals("9SN\\'-+;yd+", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "FdjF14EKb`jki%T@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "FdjF14EKb`jki%T@";
      objectArray0[3] = (Object) "^1gl(Uox?o}";
      objectArray0[4] = (Object) "9SN'-+;yd+";
      objectArray0[5] = (Object) "9SN'-+;yd+";
      objectArray0[6] = (Object) "^1gl(Uox?o}";
      objectArray0[7] = (Object) "FdjF14EKb`jki%T@";
      objectArray0[8] = (Object) "FdjF14EKb`jki%T@";
      Utility.printArray(objectArray0, false);
      Utility.setBit((byte)6, (byte)6);
      String string1 = Utility.replace("lreturn", "ret", "2N");
      assertEquals("l2Nurn", string1);
      
      String string2 = Utility.accessToString((int) (byte)6, true);
      assertEquals("private protected", string2);
      
      Utility.fillup("^1gl(Uox?o}", (byte)6, true, 'v');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)6;
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$A$G$G$G$G$G$40$G", string3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)67;
      byteArray0[0] = (byte)67;
      byte byte1 = (byte)96;
      byteArray0[1] = (byte)96;
      byte byte2 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte)96, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_0
         // 1:    iadd
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-113));
      assertEquals("0:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1250);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("dneg", true);
      Utility.clearBit((byte) (-78), 103);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: `", "dneg", "}2Ywn=3z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char char0 = '3';
      Utility.fillup("char", 57, true, '3');
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble");
      Utility.isJavaIdentifierPart('t');
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble");
      Utility.isJavaIdentifierPart('t');
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)22;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-104);
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)112;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)109, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.compactClassName("Illegal type: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.setBit(3806, (-429));
      String string0 = "!+}vn~f:nb5N?xC@v";
      try { 
        Utility.typeOfSignature("!+}vn~f:nb5N?xC@v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }vn~f:nb5N?xC@v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-112);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("... (truncated)", true);
      try { 
        Utility.typeOfSignature("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ... (truncated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("i2d", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.isSet((-829), (-829));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-52);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), 39);
      assertEquals("0:    i2l\n1:    iconst_m1\n2:    <illegal opcode>\n3:    if_icmplt\t\t#7412\n6:    idiv\n7:    nop\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(74, 3422, true, '(');
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringArray0[0]);
      mockPrintWriter0.write(string1);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      Utility.methodSignatureToString(string1, stringArray0[0], "f]*3=_JC", false);
      Utility.isJavaIdentifierPart('(');
      Utility.accessToString(3422);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.getSignature("WC,|)w\"i|*");
      Utility.signatureToString("JKy", false);
      Utility.setBit(3422, 3422);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)5;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, 671);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.classOrInterface(57);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-127);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-84));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1447062627), (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_2
         // 1:    astore_0
         // 2:    pop2
         // 3:    monitorexit
         // 4:    ireturn
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3470, (byte) (-58));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantMethodHandle1.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1436, 229, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte) (-46), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-102);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, 90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.getSignature("jsr_w");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-23);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2110, (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4503, 4503);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)108, 232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5324. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.format(1213, 1213, true, '\"');
      Utility.accessToString(222, true);
      Utility.isJavaIdentifierPart('%');
      try { 
        Utility.decode("w$pu54cy[V.-`~vtW<@", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-117);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (int) (byte)28, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.setBit(488, 488);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("Y4VLKMKI=F", true);
      try { 
        Utility.methodSignatureReturnType("Y4VLKMKI=F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y4VLKMKI=F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.format((-1615078355), 1559, false, 'G');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.compactClassName("lookupswitch", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte) (-75));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)88, 3);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)57;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)70, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "62't==MyZ(";
      try { 
        Utility.typeOfSignature("62't==MyZ(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 62't==MyZ(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "lookupswitch";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2048, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)38;
      ConstantPool constantPool0 = null;
      int int0 = (-634);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (-634));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)13;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("45 0e 0d", string0);
      
      String string1 = Utility.fillup("char", (byte)13, true, 'v');
      assertEquals("charvvvvvvvvv", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      short short0 = Utility.searchOpcode("$l$8b$I$A$A$A$A$A$A$A");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)13;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) byteSequence0;
      objectArray0[6] = (Object) "char";
      objectArray0[7] = (Object) "45 0e 0d";
      String string3 = Utility.printArray(objectArray0, true, true);
      String string4 = Utility.printArray(objectArray0);
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lconst_0");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-39), (-251));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)79;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, 670, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.accessToString(47, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)13;
      byte byte0 = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 1170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 178, 165, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48035. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)123;
      byte byte0 = (byte) (-93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-93);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-41), (int) (byte)102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    <illegal opcode>
         // 2:    lshr
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.convertString("\nAttribute(s) = ");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-26);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)97;
      objectArray0[1] = (Object) "$d2$3ea$H$e6";
      objectArray0[2] = (Object) (byte) (-46);
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)7);
      constantArray0[0] = (Constant) constantFloat0;
      int int0 = 69;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-46), 69);
      constantArray0[1] = (Constant) constantFieldref0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      int int1 = 1538;
      ConstantInteger constantInteger0 = new ConstantInteger(1538);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      constantArray0[4] = (Constant) constantFloat1;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantInteger constantInteger1 = null;
      try {
        constantInteger1 = new ConstantInteger(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-74);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 183, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iand
         // 1:    faload
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ";,UtF71!;1([h";
      try { 
        Utility.typeOfSignature(";,UtF71!;1([h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;,UtF71!;1([h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.clearBit(240, 2628);
      boolean boolean0 = true;
      Utility.format(0, 45, true, 'x');
      try { 
        Utility.typeOfSignature("0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.setBit(1026, 1026);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1482), 3205, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.classOrInterface(71);
      Utility.setBit(123, 123);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(16384, 0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantPool1.dump(dataOutputStream0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.searchOpcode("\t\t#");
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)47, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-67);
      byte byte1 = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)116;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 34, 106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.compactClassName("char", "char", true);
      Utility.accessToString(400, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-48);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-45), (int) (byte)56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byte byte0 = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-43);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-27);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(80);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 80, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2556, (int) (byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "int";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("int", "int", false);
      String string1 = "JFYTC{~K";
      Utility.typeOfSignature("JFYTC{~K");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Tu3+oGUl", "int", "JFYTC{~K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Tu3+oGUl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('-');
      Utility.replace("{java.lang.Object@6c739083, java.lang.Object@59d58c3d, java.lang.Object@39b29553, java.lang.Object@66b227b3, java.lang.Object@16b5546e, java.lang.Object@63f496e1, java.lang.Object@4ec18fc1, java.lang.Object@39b9b615, java.lang.Object@5939368}", "{java.lang.Object@6c739083, java.lang.Object@59d58c3d, java.lang.Object@39b29553, java.lang.Object@66b227b3, java.lang.Object@16b5546e, java.lang.Object@63f496e1, java.lang.Object@4ec18fc1, java.lang.Object@39b9b615, java.lang.Object@5939368}", "{java.lang.Object@6c739083, java.lang.Object@59d58c3d, java.lang.Object@39b29553, java.lang.Object@66b227b3, java.lang.Object@16b5546e, java.lang.Object@63f496e1, java.lang.Object@4ec18fc1, java.lang.Object@39b9b615, java.lang.Object@5939368}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 115, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3657, 114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "3Y?";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Y?");
      String string1 = "96&MQF\"$&76G#xyxy";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "96&MQF\"$&76G#xyxy");
      Utility.compactClassName("<", false);
      try { 
        Utility.typeOfSignature("3Y?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Y?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)88;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (-867));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 157. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), (-3136), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.setBit((-53), 2619);
      Utility.format(2619, 191, false, '[');
      Utility.decode("qsN-'T6%;q}0>N*`?5", false);
      String string0 = "R[wC{";
      try { 
        Utility.typeOfSignature("R[wC{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R[wC{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "'L`bAk1oZ]9Lqs";
      boolean boolean0 = true;
      Utility.fillup("'L`bAk1oZ]9Lqs", 1314, true, '+');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 1810);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "3Y?";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3Y?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "96&MQF\"$&76G#xyxy");
      Utility.compactClassName("<", false);
      String string1 = "OD '=NKv/5RV#";
      try { 
        Utility.typeOfSignature("OD '=NKv/5RV#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OD '=NKv/5RV#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[4R^ihMo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4R^ihMo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "X0mM_=\"";
      try { 
        Utility.typeOfSignature("X0mM_=\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X0mM_=\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(28);
      try { 
        Utility.typeOfSignature("%^bdkOv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %^bdkOv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-99);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart(',');
      Utility.accessToString(3008);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Utility.compactClassName("'r1f&G{&^]@97uRxE", "'r1f&G{&^]@97uRxE", false);
      assertEquals("'r1f&G{&^]@97uRxE", string0);
      
      String string1 = Utility.fillup("'r1f&G{&^]@97uRxE", 81, false, 's');
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss'r1f&G{&^]@97uRxE", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)83;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)70;
      byteArray1[4] = (byte) (-13);
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)115;
      byteArray1[7] = (byte)9;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "(descriptor_index = ";
      boolean boolean0 = true;
      char char0 = 'w';
      String string1 = Utility.fillup("(descriptor_index = ", 1870, true, 'w');
      try { 
        Utility.typeOfMethodSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "I(oS8GTt!:2MsE6z`\\0";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I(oS8GTt!:2MsE6z`\u0000");
      Utility.isSet(73, 757);
      String string1 = "iinc";
      Utility.convertString("iinc");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)85;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 6);
      String string2 = "org.apache.bcel.classfile.ParameterAnnotations";
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-53);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1589, 103);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)46, 4275);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L8&9");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "L8&9";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.println(objectArray0[0]);
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-118);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(2639L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantClass constantClass0 = new ConstantClass((-783));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)107, (-1970602018), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.fillup("byte", 157, false, '!');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!byte";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("byte, !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!byte", string0);
      
      byte[] byteArray0 = Utility.decode("byte", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('*');
      assertFalse(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 157);
      assertEquals("0:    fadd\n1:    lshl\n2:    ineg\n3:    lsub\n", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.signatureToString("Synthetic", false);
      String string0 = "athrow";
      String string1 = "|U";
      boolean boolean0 = false;
      int int0 = 89;
      String string2 = "invokespecial";
      try { 
        MockURI.URI("\".f9.UAq", "short", "athrow", 57, "V", "\t", "!FP?ND8chn4");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: \".f9.UAq://short@athrow:57V?%09#!FP?ND8chn4
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "{sZtSg=p($";
      boolean boolean0 = true;
      try { 
        Utility.decode("{sZtSg=p($", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        Utility.typeOfSignature("81+c*!.J,).O)5Le");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 81+c*!.J,).O)5Le
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("xS", "if_icmple", "xS");
      String string0 = "java.lang.{java.lang.Object@328f0ef5, java.lang.Object@6638e252, java.lang.Object@5965e82, java.lang.Object@312ec9c6}";
      Utility.compactClassName("java.lang.{java.lang.Object@328f0ef5, java.lang.Object@6638e252, java.lang.Object@5965e82, java.lang.Object@312ec9c6}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "java.lang.{java.lang.Object@328f0ef5, java.lang.Object@6638e252, java.lang.Object@5965e82, java.lang.Object@312ec9c6}";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.fillup("org.apache.bcel.classfile.Annotations", 1043, false, 'A');
      boolean boolean0 = Utility.isSet(4128, 4128);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)83;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-46.61));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.findClass("BootstrapMethods");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantDouble0.accept(descendingVisitor0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), (int) (byte)113);
      assertEquals("0:    imul\n1:    iaload\n2:    fcmpl\n3:    lrem\n4:    aastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "P`Q|!-";
      try { 
        Utility.typeOfSignature("P`Q|!-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P`Q|!-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.searchOpcode("Illl typue: ");
      Utility.searchOpcode("Illl typue: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte)62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.accessToString((-166), false);
      try { 
        Utility.typeOfSignature(">f.ahp)<yxe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >f.ahp)<yxe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("+Y($mg8MM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y($mg8MM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureArgumentTypes("()}-<b:z0t-1");
      String string0 = Utility.format((-1447625173), 3, true, '?');
      assertEquals("-1447625173", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " B(ra87]+A'}e4l";
      stringArray0[1] = " B(ra87]+A'}e4l";
      stringArray0[2] = " B(ra87]+A'}e4l";
      stringArray0[3] = " B(ra87]+A'}e4l";
      stringArray0[4] = " B(ra87]+A'}e4l";
      stringArray0[5] = " B(ra87]+A'}e4l";
      stringArray0[6] = " B(ra87]+A'}e4l";
      Utility.methodTypeToSignature(" B(ra87]+A'}e4l", stringArray0);
      Utility.compactClassName("short", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-79);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2708, 242);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)10;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 235, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.isSet((-3408), (-3408));
      Utility.compactClassName("\\", "CONSTANT_Fieldref", false);
      Utility.setBit((-3408), (-3408));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-55);
      Utility.encode(byteArray0, true);
      Utility.convertString("\\");
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('L');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) null);
      String string0 = Utility.accessToString(65);
      assertEquals("public volatile", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-108), (-166), false);
      assertEquals("0:    return\n1:    <illegal opcode>\n2:    astore_3\n3:    lcmp\n", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 65;
      Utility.isSet(65, 65);
      Utility.setBit(65, (-1117));
      Utility.compactClassName("drem");
      try { 
        Utility.typeOfSignature(":Xg4FZy4,N?7Cd];Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Xg4FZy4,N?7Cd];Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "Pm*5r)mQa;WVq}eFs";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pm*5r)mQa;WVq}eFs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pm*5r)mQa;WVq}eFs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1163));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byte byte0 = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byte byte1 = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-57);
      byte byte2 = (byte) (-54);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-36);
      byte byte3 = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-36), (int) (byte) (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "Gacx#tt[[PSqg1?DG@=";
      try { 
        Utility.methodSignatureReturnType("Gacx#tt[[PSqg1?DG@=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gacx#tt[[PSqg1?DG@='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte)122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "? extends ";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble");
      Utility.isJavaIdentifierPart('t');
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantDouble");
      Utility.isJavaIdentifierPart('t');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)84;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-10);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte) (-85), (byte) (-85));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-10);
      byteArray1[4] = (byte) (-10);
      byteArray1[5] = (byte) (-85);
      byteArray1[6] = (byte) (-85);
      byteArray1[7] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-10), (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "HadBp3#bCWJ<r=";
      // Undeclared exception!
      try { 
        Utility.signatureToString("HadBp3#bCWJ<r=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HadBp3#bCWJ<r='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)86);
      assertEquals("0:    fstore_1\n1:    fload_2\n2:    castore\n3:    saload\n4:    <illegal opcode>\n5:    sastore\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "T<";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T<");
      int int0 = (-3178);
      Utility.isSet((-336), (-3178));
      Utility.typeOfSignature("T<");
      Utility.replace("T<", "(", "i2c");
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 5503);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.accessToString(121);
      Utility.setBit(121, 121);
      Utility.classOrInterface(33554553);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokeinterface");
      Utility.replace("public static final synchronized volatile", "class", "lookupswitch");
      Utility.format(121, 121, true, 'I');
      Utility.isJavaIdentifierPart('I');
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "4";
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)67;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 700, 5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit(190, 6);
      try { 
        Utility.methodSignatureReturnType(")O=$ZF'Clr1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O=$ZF'Clr1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zUCxX{~wfwCqW7!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zUCxX{~wfwCqW7!");
      // Undeclared exception!
      try { 
        Utility.getSignature(">,[(r~`@ *[#fBV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[(r~`@ *[#fBV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "2F3^]TC[T/v";
      try { 
        Utility.typeOfSignature("2F3^]TC[T/v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2F3^]TC[T/v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.decode("=j8=", false);
      Utility.replace("@V", "athrow", "\t(wide)");
      try { 
        Utility.typeOfSignature("@V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.replace("P[~7]%E3L2we/L>^)", ">\"6c3/E}c9PLb", (String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">\"6c3/E}c9PLb";
      stringArray0[1] = "invokevirtual";
      stringArray0[2] = "invokevirtual";
      stringArray0[3] = ">\"6c3/E}c9PLb";
      stringArray0[4] = "P[~7]%E3L2we/L>^)";
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(">\"6c3/E}c9PLb", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-79));
      assertEquals("public final synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("KQQ;u):2Fu?");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-92), 510);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmple\t\t#-23541", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)22;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)80);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 238, (-315), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.replace("null", "null", "Bwur!TRF");
      Utility.accessToString(1406);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(1520, 1406);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)83;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("9rV!2>b]1G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9rV!2>b]1G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I/ 7x&Y U");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "(C[<:vqzj";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(C[<:vqzj");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = "K=ORIuP";
      Utility.replace("K=ORIuP", "K=ORIuP", "K=ORIuP");
      String string2 = "return";
      Utility.compactClassName("K=ORIuP", "return", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("K=ORIuP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K=ORIuP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)98;
      byte byte0 = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)7;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-42);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("T#NIZ$l86;,PH8KE");
      MockFile mockFile0 = new MockFile("#NIZ$l86");
      String string0 = ";OfeVPMF/:y]";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ";OfeVPMF/:y]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;OfeVPMF/:y]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit((-6245), (-6245));
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Wxg`hWf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wxg`hWf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.searchOpcode("Illegal type: ");
      Utility.searchOpcode("Illegal type: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)62;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte)62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = Utility.typeOfSignature("ZiJ&:AQ@+5%xV");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = Utility.decode("ZiJ&:AQ@+5%xV", false);
      String string0 = Utility.accessToString((int) (byte)4);
      assertEquals("protected", string0);
      
      Utility.fillup("protected", (-4402), true, '7');
      String string1 = Utility.accessToString(1605, true);
      assertEquals("public protected volatile abstract", string1);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(",Pd O>*1A&OWN.[SST%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,Pd O>*1A&OWN.[SST%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 65;
      Utility.accessToString(65, false);
      Utility.isJavaIdentifierPart('_');
      String string0 = "Could not create the directory ";
      Utility.compactClassName("Could not create the directory ", true);
      String string1 = "org.apache.bcel.classfile.arrayelementvalue";
      String string2 = "Tx;2iUYo#&(slCXh";
      int int1 = (-875);
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      int int2 = 250;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Eyh/|+v_C];XA1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eyh/|+v_C];XA1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-601);
      Utility.fillup("3Y]LM%TOv^k", (-601), true, '(');
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*zxF3D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zxF3D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.signatureToString("F`$v'#i", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The magic number must contain at least one byte", "dup2", "float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The magic number must contain at least one byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "=TwW1VqYLt";
      try { 
        Utility.typeOfSignature("=TwW1VqYLt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =TwW1VqYLt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " [";
      stringArray0[1] = "_gg.6v qF+6NHN";
      stringArray0[2] = " [";
      stringArray0[3] = " [";
      stringArray0[4] = " [";
      stringArray0[5] = " [";
      stringArray0[6] = " [";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(" [", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.methodTypeToSignature("short", (String[]) null);
      Constant[] constantArray0 = new Constant[7];
      DataInput dataInput0 = null;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.getSignature("tP}Em_JY.g2c<L;f");
      String string0 = "MwBqVOu";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MwBqVOu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MwBqVOu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      byte byte0 = (byte)103;
      byteArray0[2] = (byte)103;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3277, (int) (byte)8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.decode("+FI*v+%C:;X)$!", false);
      Utility.replace("+FI*v+%C:;X)$!", "+FI*v+%C:;X)$!", "+FI*v+%C:;X)$!");
      try { 
        Utility.methodSignatureArgumentTypes("+FI*v+%C:;X)$!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +FI*v+%C:;X)$!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("=j8=", false);
      assertArrayEquals(new byte[] {(byte)61, (byte)106, (byte)56, (byte)61}, byteArray0);
      
      String string0 = Utility.replace("V", "athrow", "\t(wide)");
      assertEquals("V", string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lload_0", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)48}, byteArray0);
      
      byte byte0 = Utility.typeOfSignature("BuqDSkTi$");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.compactClassName("null");
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[1] = "lload_0";
      stringArray0[2] = "lload_0";
      stringArray0[3] = "lload_0";
      stringArray0[4] = "BuqDSkTi$";
      stringArray0[5] = "lload_0";
      stringArray0[6] = "null";
      stringArray0[7] = "BuqDSkTi$";
      String string1 = Utility.methodTypeToSignature("null", stringArray0);
      assertEquals("(Lnull;Llload_0;Llload_0;Llload_0;LBuqDSkTi$;Llload_0;Lnull;LBuqDSkTi$;)Lnull;", string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "UOM:\\";
      Utility.compactClassName("UOM:");
      Utility.accessToString(147, false);
      Object[] objectArray0 = new Object[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = (Object) "public private final transient";
      objectArray0[1] = (Object) "public private final transient";
      objectArray0[2] = (Object) "UOM:";
      objectArray0[3] = (Object) "public private final transient";
      objectArray0[4] = (Object) "UOM:";
      Utility.printArray(objectArray0);
      Utility.clearBit(237, 9974);
      String string1 = "WzoaWttk(4x(})af$E";
      String string2 = "invokestatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("WzoaWttk(4x(})af$E", "public private final transient", "invokestatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WzoaWttk(4x(})af$E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-10);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)0, (byte)0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-10);
      byteArray1[3] = (byte) (-10);
      byteArray1[4] = (byte) (-10);
      byteArray1[7] = (byte) (-10);
      boolean boolean0 = true;
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-10), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = Utility.setBit((-760), 2085);
      assertEquals((-728), int0);
      
      String string0 = Utility.format(349, (-760), false, 'k');
      assertEquals("349", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (-2177));
      assertEquals("0:    ior\n1:    dreturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 764;
      Utility.format(764, 764, false, '^');
      try { 
        Utility.methodSignatureReturnType("LVyn!^oxqNaH'=IHp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LVyn!^oxqNaH'=IHp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lookupswitch");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2048, (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.format((-29), (-29), true, 'd');
      Utility.getSignature("~4OO;hvqt.Ks2N.");
      Utility.compactClassName("L~4OO;hvqt/Ks2N/;", true);
      Utility.isSet((-4102), (-29));
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-10);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ae$f6", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((byte) (-82), (byte) (-82));
      assertEquals((-16466), int0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-82);
      byteArray1[3] = (byte) (-10);
      byteArray1[4] = (byte) (-10);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte) (-82);
      byteArray1[7] = (byte) (-10);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-10), (int) (byte) (-82), true);
      assertEquals("0:    <illegal opcode>\n1:    freturn\n2:    freturn\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    freturn\n6:    freturn\n7:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "-FZYw:P4#j>S";
      try { 
        Utility.typeOfSignature("-FZYw:P4#j>S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -FZYw:P4#j>S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.getSignature("=-rPz");
      Utility.clearBit((-2628), 1570);
      Utility.accessToString(67);
      String string0 = "null";
      Utility.searchOpcode("null");
      Utility.accessToString(16384, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "WY=Rx C:$i{V8>?.";
      try { 
        Utility.typeOfSignature("WY=Rx C:$i{V8>?.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WY=Rx C:$i{V8>?.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.methodSignatureReturnType("IDGo3 'wl+#zW");
      Utility.methodSignatureReturnType("IDGo3 'wl+#zW", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)58;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-119);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "new";
      Utility.getSignature("new");
      String string1 = "$7Fx_Z1rSXE'}%";
      try { 
        Utility.typeOfSignature("$7Fx_Z1rSXE'}%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $7Fx_Z1rSXE'}%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.typeOfSignature("CHH%24~I5@");
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("CHH%24~I5@", true);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("CQ@T?q", "CQ@T?q", true);
      Utility.format((-1881401120), 3, true, 's');
      Constant[] constantArray0 = new Constant[2];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("synthetic", "<illegal opcode>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"<illegal opcode>\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "Uv-R7s_j?r[";
      try { 
        Utility.methodSignatureReturnType("Uv-R7s_j?r[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uv-R7s_j?r['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "\\n";
      Utility.compactClassName("\n", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)72, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("f]");
      Utility.getSignature("f]");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.setBit((-756), (-315));
      String string0 = "(Q2z25g";
      try { 
        Utility.methodSignatureArgumentTypes("(Q2z25g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q2z25g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.getSignature("d*?*C'9/nMF7I(Gq]}Y");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit(3850, (-16));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Ld*?*C'9/nMF7I(Gq]}Y;";
      objectArray0[1] = (Object) "d*?*C'9/nMF7I(Gq]}Y";
      objectArray0[2] = (Object) "Ld*?*C'9/nMF7I(Gq]}Y;";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NK?!,+m;(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NK?!,+m;('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.compactClassName("Z?jIHSknBzt#zA");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.signatureToString("Z?jIHSknBzt#zA");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z?jIHSknBzt#zA", "Z?jIHSknBzt#zA", "IEVkxHfgQX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z?jIHSknBzt#zA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.isJavaIdentifierPart('l');
      Utility.getSignature("g5R^P%F;Bc,4Q");
      Utility.searchOpcode("vSjyQ^:f");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "BXX~~_$0}!{oxT";
      // Undeclared exception!
      try { 
        Utility.decode("BXX~~_$0}!{oxT", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("new");
      Utility.fillup("Lnew;", 1864, false, 'y');
      Utility.fillup("Lnew;", 1864, true, '3');
      // Undeclared exception!
      try { 
        Utility.signatureToString("XWT4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XWT4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3L<ME<[iKw\"jj%VT0L");
      Utility.compactClassName("3L<ME<[iKw\"jj%VT0L", true);
      Utility.accessToString(165);
      Utility.getSignature("public protected synchronized transient");
      Utility.fillup("3L<ME<[iKw\"jj%VT0L", 165, true, 'D');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3L<ME<[iKw\"jj%VT0L", "x-0?>6st|.7E", "[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3L<ME<[iKw\"jj%VT0L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.accessToString((-4667));
      Utility.isSet((-4667), (-4667));
      Utility.accessToString(3043, true);
      Utility.format((-4667), 212, true, 'N');
      String string0 = "Invalid type: ";
      Utility.searchOpcode("Invalid type: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private volatile transient native strictfp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private volatile transient native strictfp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byte byte1 = (byte)39;
      byteArray0[1] = (byte)39;
      byte byte2 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byte byte3 = (byte)8;
      byteArray0[3] = (byte)8;
      byte byte4 = (byte)106;
      byteArray0[4] = (byte)106;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.searchOpcode("ss_^<;hr=");
      Utility.methodSignatureReturnType("Byte code error: ");
      Utility.convertString("Byte code error: ");
      boolean boolean0 = true;
      Utility.compactClassName("byte", true);
      Utility.classOrInterface((short) (-1));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)116;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)15;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte)116, true);
      assertEquals("0:    ineg\n1:    nop\n2:    <illegal opcode>\n3:    dconst_1\n", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0:    ineg\n1:    nop\n2:    <illegal opcode>\n3:    dconst_1\n";
      objectArray0[1] = (Object) null;
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{0:    ineg\n1:    nop\n2:    <illegal opcode>\n3:    dconst_1\n, null}", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.getSignature("\t\t%");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)65;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.searchOpcode("Illegal type: ");
      Utility.searchOpcode("Illegal type: ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte)62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.typeOfSignature("[szH{q");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[szH{q";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 13
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isSet(4800, (-358));
      String string0 = " o6_k32z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" o6_k32z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintWriter0.println(true);
      mockPrintWriter0.append((CharSequence) " o6_k32z");
      PrintWriter printWriter0 = mockPrintWriter0.printf("/G\"OGg", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      Utility.isJavaIdentifierPart('1');
      int int0 = 773;
      boolean boolean0 = false;
      Utility.format((-358), 773, false, 'e');
      Utility.accessToString(64, false);
      String string1 = "boolean";
      int int1 = 194;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.replace("float", "anewarray", "Illegally nested brackets:");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.readChar();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)94;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)28;
      byteArray1[6] = (byte)28;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byte byte0 = (byte)123;
      byteArray0[1] = (byte)123;
      byte byte1 = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)123);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 31510. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "lreturn";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lreturn");
      Utility.isJavaIdentifierPart('/');
      Utility.printArray((Object[]) null, false);
      byte[] byteArray0 = Utility.decode("lreturn", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      int int0 = (-2244);
      int int1 = 59;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 101
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "PJqA~I[(";
      // Undeclared exception!
      try { 
        Utility.getSignature("PJqA~I[(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.format((-1), (-1), true, 'd');
      assertEquals("-1", string0);
      
      String string1 = Utility.getSignature("~4OO;hvqt.Ks2N.");
      assertEquals("L~4OO;hvqt/Ks2N/;", string1);
      
      String string2 = Utility.compactClassName("L~4OO;hvqt/Ks2N/;", false);
      assertEquals("L~4OO;hvqt.Ks2N.;", string2);
      
      boolean boolean0 = Utility.isSet((-2361), (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.isSet(222, (-3307));
      String string0 = "Linvokespecial;V";
      Utility.methodSignatureReturnType("Linvokespecial;V", false);
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.compactClassName("invokespecial", true);
      Utility.accessToString(222);
      Utility.compactClassName("invokespecial", false);
      Utility.typeOfSignature("Linvokespecial;V");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("areturn");
      int int0 = 36;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "areturn");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString(36, true);
      String string0 = "ZZ&vv";
      // Undeclared exception!
      try { 
        Utility.replace("protected", (String) null, "ZZ&vv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)26;
      byte byte0 = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)70;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[8];
      DataInput dataInput0 = null;
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)15;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte)116, true);
      assertEquals("0:    ineg\n1:    iconst_m1\n2:    <illegal opcode>\n3:    dconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@2e5a083e\", \"java.lang.Object@13bb533e\", \"java.lang.Object@111a67a9\", \"java.lang.Object@5a23e0d1\", \"java.lang.Object@24461853\", \"java.lang.Object@6d2d8d46\", \"java.lang.Object@2f489865\", \"java.lang.Object@6aa8c035\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@2e5a083e\", \"java.lang.Object@13bb533e\", \"java.lang.Object@111a67a9\", \"java.lang.Object@5a23e0d1\", \"java.lang.Object@24461853\", \"java.lang.Object@6d2d8d46\", \"java.lang.Object@2f489865\", \"java.lang.Object@6aa8c035\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.accessToString((-2798));
      assertEquals("private final native abstract synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)104;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$Xh", string1);
      
      int int0 = Utility.setBit((-3732), (-1145));
      assertEquals((-3604), int0);
      
      Utility.compactClassName("$Xh");
      Utility.isJavaIdentifierPart('l');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string2 = Utility.methodTypeToSignature("\r", stringArray0);
      assertEquals("(L;)L;", string2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.replace("org.apache.bcel.util.ClassPath$Dir", "org.apache.bcel.util.ClassPath$Dir", "org.apache.bcel.util.ClassPath$Dir");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)11;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-112);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte)11);
      Utility.methodTypeToSignature("org.apache.bcel.util.ClassPath$Dir", (String[]) null);
      Utility.fillup("%ocwK8k=C8iEVc.D#", 67, false, 'a');
      Utility.convertString("^uh$,");
      String string0 = "fload";
      Utility.replace("fload", "fload", "^uh$,");
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte) (-112));
      Utility.convertString("^uh$,");
      try { 
        Utility.methodSignatureReturnType("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.fillup("Linvokespecial;V", 213, true, '2');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Linvokespecial;V";
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("invokestatic", true);
      Utility.printArray(objectArray0);
      Utility.clearBit(213, 213);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      stringArray0[3] = " (";
      stringArray0[4] = " (";
      stringArray0[5] = " (";
      Utility.methodTypeToSignature(" (", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$;wbFh^R sd C9Ii)?", "$;wbFh^R sd C9Ii)?", "$;wbFh^R sd C9Ii)?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $;wbFh^R sd C9Ii)?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.accessToString(162);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-810), (int) (byte) (-90));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)31;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.convertString("\"`&BhHxlCcxy'");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((int) (byte)96, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.isJavaIdentifierPart('C');
      try { 
        Utility.methodSignatureArgumentTypes("invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = (-371);
      Utility.classOrInterface((-371));
      Utility.fillup("interface", (-371), false, 'u');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 71
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.replace("IIJ2=7~ 0", "byte", "byte");
      boolean boolean0 = true;
      try { 
        Utility.decode("J50sUxJv0sO43eA~J ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      String string0 = "multianewarray";
      try { 
        Utility.typeOfSignature("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.InnerClass";
      boolean boolean0 = false;
      Utility.compactClassName("org.apache.bcel.classfile.InnerClass", false);
      String string1 = "ifnonnull";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "ifnonnull");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ifnonnull
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "StackMap", "?GxWP,cp=9)rp3&5", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "6t";
      Utility.getSignature("6t");
      Utility.compactClassName("e@cmk lJqt'W%", "L6t;", true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.classOrInterface(196);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lstore_2", string1);
      
      int int0 = Utility.setBit(1435, 250);
      assertEquals(67110299, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.ArrayElementValue");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-28);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("fd 18 2a a3 ac 00 e4", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 0;
      int int1 = 9;
      Utility.isSet(0, 9);
      Utility.accessToString((-651), true);
      String string0 = "BNoc[4I={G";
      try { 
        Utility.typeOfMethodSignature("BNoc[4I={G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BNoc[4I={G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.isSet((-2997), (-2997));
      String string0 = "";
      Utility.fillup("", (-2997), false, ';');
      Utility.accessToString(3696, false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("mX(uBmF;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `mX(uBmF;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.compactClassName("org.apache.commons.io.filefilter.SuffixFileFilter");
      String string0 = "";
      boolean boolean0 = true;
      int int0 = 4117;
      int int1 = 632;
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString((-533), true);
      assertEquals("public private static volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.clearBit(4548, (-1841915887));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 865);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)45;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 700, 5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.compactClassName("D-;9az`rm`3)Ve", false);
      String string0 = Utility.signatureToString("D-;9az`rm`3)Ve");
      assertEquals("double", string0);
      
      byte byte0 = Utility.typeOfSignature("D-;9az`rm`3)Ve");
      assertEquals((byte)7, byte0);
      
      Utility.searchOpcode("D-;9az`rm`3)Ve");
      String string1 = Utility.compactClassName("Exception while looking for class ", "double", true);
      short short0 = Utility.searchOpcode("double");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.methodSignatureReturnType("D-;9az`rm`3)Ve", true);
      assertEquals("void", string2);
      
      String string3 = Utility.convertString("Exception while looking for class ");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.compactClassName("HZ]=!ILTa-t5PVM", true);
      assertEquals("HZ]=!ILTa-t5PVM", string0);
      
      String string1 = Utility.fillup("HZ]=!ILTa-t5PVM", 193, true, '6');
      assertEquals("HZ]=!ILTa-t5PVM6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "\\\\";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\\");
      String string1 = "invokespecial";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokespecial", "invokespecial", "xYK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokespecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format(74, 3422, true, '(');
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringArray0[0]);
      mockPrintWriter0.write(string1);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) stringArray0);
      Utility.methodSignatureToString(string1, stringArray0[0], "f]*3=_JC", false);
      Utility.isJavaIdentifierPart('(');
      Utility.accessToString(3422);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.getSignature("WC,|)w\"i|*");
      Utility.signatureToString("JKy", false);
      Utility.setBit(3422, 3422);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-65);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)88, 671);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "FVd7e jpD`H";
      try { 
        Utility.methodSignatureArgumentTypes("FVd7e jpD`H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: FVd7e jpD`H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }
}
