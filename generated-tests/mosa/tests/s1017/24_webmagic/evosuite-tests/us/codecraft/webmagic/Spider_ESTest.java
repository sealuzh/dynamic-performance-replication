/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:36:38 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.stop();
      Spider spider2 = spider0.setUUID("ju9u");
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4g_o%]ye2w");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("4g_o%]ye2w");
      spider1.exitWhenComplete = true;
      spider1.setEmptySleepTime((-1832));
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("=VI}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.=VI}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider1.downloader((Downloader) null);
      spider0.clearPipeline();
      spider1.setEmptySleepTime((-163));
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ju9u");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      
      int int0 = spider_Status0.getValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ju9u");
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider.Status spider_Status0 = Spider.Status.Init;
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ju9u", "ju9u");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      
      spider1.setUUID("ju9u");
      spider1.getScheduler();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider.Status.valueOf("Running");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Running";
      stringArray0[1] = "Running";
      stringArray0[2] = "Running";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.stop();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("b%MHy");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      spider0.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("}LZ/|u,!eJT35", "get a candidate url {}");
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("b%MHy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      spider2.stop();
      // Undeclared exception!
      try { 
        spider0.thread((-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pagestatus code error, page {} , cde: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider0.get("pagestatus code error, page {} , cde: {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      spider1.clearPipeline();
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "\n";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) null, (-1479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ju9u", "");
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.clearPipeline();
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("illegal encoding ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(228);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("ju9u");
      Page page0 = new Page();
      spider1.stop();
      // Undeclared exception!
      try { 
        spider1.get("'f9A%");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll((Task) null);
      priorityScheduler0.poll((Task) null);
      requestArray0[0] = null;
      Request request0 = new Request("_cycle_tried_times");
      requestArray0[1] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      spider1.extractAndAddRequests((Page) null, false);
      Spider spider2 = spider0.thread(2);
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("text/xml");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("text/xml");
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.addPipeline(multiPagePipeline0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList0);
      Spider spider4 = spider3.setScheduler((Scheduler) null);
      Spider spider5 = spider4.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider5.get("text/xml");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ne)O10^'t3");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("ne)O10^'t3");
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ne)O10^'t3");
      FilePipeline filePipeline0 = new FilePipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue((-1633));
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.getStatus();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider.Status spider_Status0 = Spider.Status.Init;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Running", "Running");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider0.isExitWhenComplete());
      
      spider1.getAll((Collection<String>) linkedList1);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider.Status spider_Status0 = Spider.Status.Init;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      int int0 = spider_Status0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pagesttus cde error,1pae {} , cde:{}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "pagesttus cde error,1pae {} , cde:{}");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      
      spider1.run();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.destroyWhenExit = false;
      SpiderMonitor.instance();
      spider0.getSpiderListeners();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("0)-tt.n84c(4=");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 4434);
      // Undeclared exception!
      try { 
        spider2.get("Get totalPageCount fail, try to use a Scheduler implement MonitorableScheduler for monitor count!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider0.getPageCount();
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      SpiderMonitor.instance();
      spider2.scheduler((Scheduler) null);
      assertFalse(spider1.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.setUUID("process request ");
      spider1.runAsync();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pagestatus code error, page {} , cde: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      spider0.stop();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setScheduler((Scheduler) null);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider2.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7da{OZ2gvVu+N6P^MfJ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("7da{OZ2gvVu+N6P^MfJ", "7da{OZ2gvVu+N6P^MfJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      phantomJSDownloader0.setThread(1090);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7da{OZ2gvVu+N6P^MfJ");
      spider0.getThreadAlive();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider4 = spider3.startRequest(list0);
      spider1.getStartTime();
      spider4.clearPipeline();
      spider4.startRequest(list0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("7da{OZ2gvVu+N6P^MfJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.7da{OZ2gvVu+N6P^MfJ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "ju9u";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("ju9u");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      spider0.start();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "ju9u";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.getSite();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("file.separator", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(34, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(50, 50, 425L, timeUnit0, blockingQueue0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 50);
      phantomJSDownloader0.setRetryNum(34);
      int int0 = PriorityScheduler.INITIAL_CAPACITY;
      spider1.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("file.separator", "UZCBGZ]P.");
      spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      int int1 = spider_Status0.getValue();
      assertEquals(2, int1);
      
      spider0.close();
      spider1.test(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      Spider.Status spider_Status1 = Spider.Status.Init;
      int int2 = spider_Status1.getValue();
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pagestatus code error, page {} , cde: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("pagestatus code error, page {} , cde: {}", "");
      spider0.downloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider1.initComponent();
      Spider.Status spider_Status0 = Spider.Status.Init;
      int int0 = spider_Status0.getValue();
      assertEquals(0, int0);
      
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ju9u");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("file.separator", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(50, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(50, 50, 425L, timeUnit0, blockingQueue0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 50);
      int int0 = PriorityScheduler.INITIAL_CAPACITY;
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("file.separator", "UZCBGZ]P.");
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      spider3.uuid = "ju9u";
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      spider_Status0.getValue();
      spider0.close();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("*Ff<Kzp-*Tf");
      Spider spider4 = spider2.scheduler(fileCacheQueueScheduler0);
      Request request0 = new Request("*Ff<Kzp-*Tf");
      request0.setUrl("*Ff<Kzp-*Tf");
      fileCacheQueueScheduler0.push(request0, spider0);
      spider0.clearPipeline();
      spider4.getUUID();
      spider_Status0.getValue();
      Spider spider5 = spider1.scheduler(fileCacheQueueScheduler0);
      assertSame(spider1, spider5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pagestatus code error, page {} , cde: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("pagestatus code error, page {} , cde: {}", "pagestatus code error, page {} , cde: {}");
      spider0.downloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider1.getThreadAlive();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider1.getAll((Collection<String>) linkedList0);
      spider1.isSpawnUrl();
  }
}
