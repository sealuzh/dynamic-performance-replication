/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:58:48 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.compactClassName("=[%qAT&Qz_3ENP", "=[%qAT&Qz_3ENP", true);
      try { 
        Utility.methodSignatureReturnType("=[%qAT&Qz_3ENP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=[%qAT&Qz_3ENP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "NU?}Y$y";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NU?}Y$y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NU?}Y$y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "6<H";
      objectArray0[1] = (Object) "6<H";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("6<H, 6<H", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.convertString("'");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.isJavaIdentifierPart('@');
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      
      String string1 = Utility.classOrInterface((-2690));
      assertEquals("class", string1);
      
      byte[] byteArray0 = Utility.decode("'", false);
      assertArrayEquals(new byte[] {(byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      Utility.clearBit(0, 0);
      try { 
        Utility.typeOfMethodSignature("r.x,%?m1DuF,a^Yb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r.x,%?m1DuF,a^Yb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-98);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte) (-98);
      Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Utility.isSet(218, 218);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("return");
      assertEquals("Lreturn;", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      boolean boolean0 = Utility.isSet((-729), (-1002));
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName(", ");
      assertEquals(", ", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.typeOfSignature("*D $PH^$x%X?");
      Utility.classOrInterface((byte)7);
      byte byte0 = (byte) (-124);
      byte byte1 = (byte) (-100);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "4i8\\gU@,";
      try { 
        Utility.typeOfSignature("4i8gU@,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4i8gU@,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J_wvl.";
      String string0 = Utility.methodTypeToSignature("J_wvl.", stringArray0);
      assertEquals("(LJ_wvl/;)LJ_wvl/;", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("6\"#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6\"#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.format(2, 2, false, '`');
      assertEquals("`2", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      String string0 = Utility.format(91, 36, true, '0');
      assertEquals("910000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.convertString("0B2\"h3@<'bvfk");
      assertEquals("0B2\\\"h3@<\\'bvfk", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.accessToString((-3385), true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private protected volatile transient synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected volatile transient synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("l.H=5!Y 6Z");
      Utility.replace("l.H=5!Y 6Z", "r&uuV@3O=6:7,", "r&uuV@3O=6:7,");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Exceptions: ";
      Utility.compactClassName("Exceptions: ", false);
      Utility.compactClassName("0><x8V|35;;_dmiz");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "Exceptions: ";
      boolean boolean0 = false;
      Utility.compactClassName("0><x8V|35;;_dmiz");
      Utility.methodTypeToSignature("0><x8V|35;;_dmiz", (String[]) null);
      String string1 = "$9x8 UOt//0'C`ewW^";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0><x8V|35;;_dmiz", ">", "0><x8V|35;;_dmiz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0><x8V|35;;_dmiz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.clearBit(170, (-1557));
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = Utility.setBit((-2395), (-2395));
      assertEquals((-2395), int0);
      
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2395), (int) (byte)51);
      assertEquals("0:    baload\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.convertString("Y` Puw(%hgfg%n-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.getSignature("\tdefault = ");
      assertEquals("Ldefault;", string1);
      
      String string2 = Utility.replace("Y` Puw(%hgfg%n-", "\"$", "ldc");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)4;
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("04", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string0);
      
      String string1 = Utility.compactClassName("I,;");
      assertEquals("I,;", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-39);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("4e d9", string2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.convertString("lshr");
      assertEquals("lshr", string0);
      
      byte[] byteArray0 = new byte[4];
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("frem", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2 qDD\"IgTjXJD@<c> L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2 qDD\"IgTjXJD@<c> L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1246L);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "=/\\pXZ,YFn";
      Utility.convertString("=/pXZ,YFn");
      Utility.getSignature("=/pXZ,YFn");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("=/pXZ,YFn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=/pXZ,YFn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i2c");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "i2c");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "i2c";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) printWriter0;
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-127);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.format((-911), (-911), false, '+');
      assertEquals("-911", string0);
      
      int int0 = Utility.setBit(213, (byte) (-127));
      assertEquals(215, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.decode("$P[j^;,zZ#A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      constantMethodType0.toString();
      constantMethodType0.clone();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      String string0 = constantMethodType0.toString();
      constantMethodType0.clone();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("fmul");
      String string1 = Utility.signatureToString("Z'C2|-d$j");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      byteArray0[4] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmpge");
      Utility.codeToString(byteArray0, constantPool0, (-2744), 116);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "if_icmpge", "wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.setBit(78, (-2658));
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      String string0 = "\"?mY|[Dr-";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("\"?mY|[Dr-");
      // Undeclared exception!
      try { 
        Utility.getSignature("\"?mY|[Dr-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Dr-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.compactClassName("Exceptions: ", true);
      try { 
        Utility.methodSignatureReturnType("K@fds,gDBXHJSpq<5&k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K@fds,gDBXHJSpq<5&k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-124);
      byte[] byteArray1 = Utility.decode("'", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = ", low = ";
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (-3663), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      Utility.convertString("'");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("L5+j}H:!^o3dce4?|T;V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("9`Di'G{%=gqUEKPwW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9`Di'G{%=gqUEKPwW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.convertString("'");
      Utility.classOrInterface((-2690));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-103);
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "'";
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) "'";
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 70, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.convertString("'");
      Utility.classOrInterface((-2690));
      byte[] byteArray0 = new byte[5];
      Utility.methodTypeToSignature("'", (String[]) null);
      Utility.methodSignatureToString("()L';", "'", "");
      try { 
        Utility.methodSignatureArgumentTypes("$9x8 UOt//0'C`ewW^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $9x8 UOt//0'C`ewW^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "LocalVariableTypeTable";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTypeTable");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTypeTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte) (-82);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.convertString("L26e;V");
      assertEquals("L26e;V", string0);
      
      String string1 = Utility.getSignature("L26e;V");
      assertEquals("LL26e;V;", string1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      String string2 = Utility.signatureToString("L26e;V");
      assertEquals("26e", string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LocalVariableTypeTable");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PiWlFb(_]U}+jgwW1p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PiWlFb(_]U}+jgwW1p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "?'+]L";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)84;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("M^9k%UzVSZJw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M^9k%UzVSZJw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.compactClassName("0><x8V|35;;_djiz");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("0><x8V|35;;_djiz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0><x8V|35;;_djiz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.typeOfSignature("V");
      Utility.classOrInterface((byte)12);
      byte byte0 = (byte) (-124);
      byte byte1 = (byte) (-100);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-91);
      byte byte0 = Utility.typeOfSignature("ZJ}act=q");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("ZJ}act=q");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), 43);
      Utility.compactClassName("0:    nop\n1:    ifge\t\t#1\n4:    nop\n");
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("0:    nop\n1:    ifge\t\t#1\n4:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    ifge\t\t#1
         // 4:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(51);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = (byte) (-122);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)72;
      try { 
        Utility.typeOfSignature(">'Kh75$zJWQj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >'Kh75$zJWQj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "\"";
      byte[] byteArray0 = new byte[20];
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("[F%tDQq");
      try { 
        Utility.decode("byte", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.classOrInterface(94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte)17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.compactClassName("Exceptions: ", false);
      byte[] byteArray0 = Utility.decode("Exceptions: ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", "\t", "Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Utility.decode("class", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      
      Utility.getSignature("boolean");
      byteSequence2.reset();
      String string0 = Utility.codeToString(byteSequence2, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("\t\t");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "impdep1";
      byte[] byteArray1 = Utility.decode("impdep1", false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 519, 87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 518, (-728));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte) (-108);
      byteArray0[2] = (byte) (-101);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = "dTlh-[RubVK}";
      Utility.replace("<init>", "dTlh-[RubVK}", "dTlh-[RubVK}");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CIo/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (-2202));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      Utility.classOrInterface((byte)112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = Utility.decode("jsr_w", false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2404), (-2404));
      assertEquals("0:    fmul\n1:    drem\n2:    frem\n3:    swap\n4:    dneg\n", string0);
      assertArrayEquals(new byte[] {(byte)106, (byte)115, (byte)114, (byte)95, (byte)119}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      constantMethodType0.toString();
      constantMethodType0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      constantMethodType0.toString();
      Constant[] constantArray0 = new Constant[0];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 177, (int) (byte)31, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer((-1));
      Utility.compactClassName("\"wP7LT,VxP", false);
      byte[] byteArray0 = Utility.decode("\"wP7LT,VxP", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      int int0 = 187;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 187, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      Utility.classOrInterface(225);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      constantMethodType0.copy();
      constantMethodType0.toString();
      constantMethodType0.clone();
      Constant[] constantArray0 = new Constant[0];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.getSignature("i2l");
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("+e*vx}SCOTBG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e*vx}SCOTBG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "int";
      stringArray0[1] = "goto_w";
      stringArray0[2] = "goto_w";
      stringArray0[3] = "goto_w";
      stringArray0[4] = "goto_w";
      String string0 = Utility.methodTypeToSignature("goto_w", stringArray0);
      assertEquals("(ILgoto_w;Lgoto_w;Lgoto_w;Lgoto_w;)Lgoto_w;", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("V", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "])0Lok";
      stringArray0[2] = "void";
      stringArray0[3] = "org.apache.commons.io.filefilter.WildcardFileFilter";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.typeOfSignature("F8\"E-U2Ns<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F8\"E-U2Ns<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)6, (-534));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1246L);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((-674));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      Utility.classOrInterface((byte)10);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "class", "private protected static final volatile native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("Couldn't find: ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.replace("^0ms*", "^0ms*", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(55, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public private protected final", string1);
      assertNotNull(string1);
      
      String string2 = Utility.replace("public private protected final", "public private protected final", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "=[%qAT&Qz_3ENP";
      try { 
        Utility.typeOfSignature("=[%qAT&Qz_3ENP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =[%qAT&Qz_3ENP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?o@EAwVz#&E$%S+,");
      assertFalse(boolean0);
      
      byte byte0 = (byte)64;
      try { 
        Utility.typeOfSignature("?o@EAwVz#&E$%S+,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?o@EAwVz#&E$%S+,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.format(175, 13, true, 't');
      assertEquals("175tttttttttt", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("MW%z>f8l_^;K46Z u3e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MW%z>f8l_^;K46Z u3e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Exceptions: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.classOrInterface((-784));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("X]4^G$1RZ)U_X,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U_X,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.compactClassName("Exceptions: ", false);
      assertEquals("Exceptions: ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)10}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(10, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      assertArrayEquals(new byte[] {(byte)0, (byte)10}, byteArray0);
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      String string1 = Utility.compactClassName("\t\t#", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\t\t#", string1);
      assertNotNull(string1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray1);
      
      String string2 = Utility.compactClassName("Exceptions: ", "Exceptions: ", false);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Exceptions: ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        MockURI.create("Exceptions: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in opaque part at index 11: Exceptions: 
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "t";
      String string1 = Utility.replace("t", "t", "GZ<\"/5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("GZ<\"/5", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)25;
      ConstantString constantString0 = new ConstantString((byte)25);
      assertEquals(25, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals(25, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(25, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertNotNull(constantString1);
      
      ConstantString constantString2 = new ConstantString(constantString1);
      assertTrue(constantString0.equals((Object)constantString1));
      assertTrue(constantString1.equals((Object)constantString0));
      assertTrue(constantString2.equals((Object)constantString1));
      assertTrue(constantString2.equals((Object)constantString0));
      assertEquals(25, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(25, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals((byte)8, constantString2.getTag());
      assertEquals(25, constantString2.getStringIndex());
      assertNotNull(constantString2);
      
      int int0 = 191;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("NoxR=IQ>{(N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NoxR=IQ>{(N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("long", true);
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("long", true);
      assertTrue(string1.equals((Object)string0));
      assertEquals("long", string1);
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.compactClassName("FjT5V>S,r~S+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FjT5V>S,r~S+", string2);
      assertNotNull(string2);
      
      String string3 = Utility.methodSignatureReturnType("FjT5V>S,r~S+");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("float", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.convertString("Exceptions: ");
      assertEquals("Exceptions: ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)93;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-36), (byte)103, (byte) (-36), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-36), (byte)103, (byte) (-36), (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-36), (byte)103, (byte) (-36), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals("dup2_x1", string1);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)93, (byte) (-36), (byte)103, (byte) (-36), (byte)0, (byte)0}, byteArray0);
      
      String string2 = Utility.getSignature("Exceptions: ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LExceptions:;", string2);
      assertNotNull(string2);
      
      String string3 = Utility.fillup("Invalid type: ", (byte) (-82), false, 'K');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Invalid type: ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature(":'uIK#C$[[T}D6ka2!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[T}D6ka2!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("athrow", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      String string1 = Utility.fillup("rU==//T3gnQ!e@# ", (byte) (-65), false, '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("rU==//T3gnQ!e@# ", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Unknown attribute 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(90, 90);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(90, constantFieldref0.getNameAndTypeIndex());
      assertEquals(90, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setNameAndTypeIndex(90);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(90, constantFieldref0.getNameAndTypeIndex());
      assertEquals(90, constantFieldref0.getClassIndex());
      
      ClassPath classPath0 = new ClassPath("I5#Q~k");
      assertNotNull(classPath0);
      
      byte byte0 = Utility.typeOfSignature("I5#Q~k");
      assertEquals((byte)10, byte0);
      
      MockFile mockFile0 = new MockFile("I5#Q~k", "I5#Q~k");
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/I5#Q~k", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/I5#Q~k/I5#Q~k", mockFile0.toString());
      assertEquals("I5#Q~k", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      String string0 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      byte byte0 = Utility.typeOfSignature("StackMapTable");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((byte)16);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      
      byteSequence0.reset();
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertEquals(0, byteSequence0.getIndex());
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteSequence1.getIndex());
      assertEquals("bipush\t\t16", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(225);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1437, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("nBq)C*vS");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature(")poW2k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )poW2k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Signature");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[4] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, (-46));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.compactClassName("Exceptions: ", false);
      assertEquals("Exceptions: ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.mark((byte)126);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(0, byteSequence0.getIndex());
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = byteSequence0.readByte();
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)126, byte0);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iand", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short short0 = Constants.IF_ACMPNE;
      assertEquals((short)166, short0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong0 = new ConstantLong((short)166);
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(166L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = (ConstantLong)constantLong1.copy();
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(166L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(166L, constantLong2.getBytes());
      assertNotNull(constantLong2);
      assertNotSame(constantLong0, constantLong2);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong2);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong2, constantLong1);
      assertNotSame(constantLong2, constantLong0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?o@EAwVz#&E$%S+,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.compactClassName("Exceptions: ", true);
      assertEquals("Exceptions: ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("lload_2", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      
      String string2 = Utility.getSignature("L5+j}H:!^o3dce4?|T;V");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LL5+j}H:!^o3dce4?|T;V;", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("`F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[3] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3390, (-1559));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(239);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(239, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(239);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(239, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)37;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte) (-43);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-2), (byte)37, (byte) (-43)}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (-1282));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    iconst_1\n1:    impdep1\n2:    fload_3\n3:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-2), (byte)37, (byte) (-43)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      String string1 = constantMethodType0.toString();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string1);
      assertNotNull(string1);
      assertNotSame(constantMethodType0, constantMethodType1);
      
      Constant[] constantArray0 = new Constant[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)44;
      String string2 = Utility.compactClassName("=[%qAT&Qz_", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=[%qAT&Qz_", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "=[%qAT&Qz_");
      assertEquals("=[%qAT&Qz_", stringWriter0.toString());
      assertEquals("=[%qAT&Qz_", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append('m');
      assertEquals("=[%qAT&Qz_m", stringWriter2.toString());
      assertEquals("=[%qAT&Qz_m", stringWriter0.toString());
      assertEquals("=[%qAT&Qz_m", stringWriter1.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      assertEquals("=[%qAT&Qz_m", stringWriter2.toString());
      assertEquals("=[%qAT&Qz_m", stringWriter0.toString());
      assertEquals("=[%qAT&Qz_m", stringWriter1.toString());
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "java.lang.Ille9ally nested brackets:", (Object[]) constantArray0);
      assertEquals("=[%qAT&Qz_mjava.lang.Ille9ally nested brackets:", stringWriter2.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("=[%qAT&Qz_mjava.lang.Ille9ally nested brackets:", stringWriter0.toString());
      assertEquals("=[%qAT&Qz_mjava.lang.Ille9ally nested brackets:", stringWriter1.toString());
      assertNotNull(mockPrintWriter1);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)44, 225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8wE-U2Ns,");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F8wE-U2Ns,");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 78, true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      assertEquals("6:    iconst_3\n", string0);
      assertNotNull(string0);
      assertNotSame(constantPool0, constantPool1);
      assertArrayEquals(new byte[] {(byte)6, (byte)34, (byte)6, (byte)46, (byte)6, (byte)6, (byte)6}, byteArray0);
      
      String string1 = Utility.compactClassName("lcmp");
      assertFalse(string1.equals((Object)string0));
      assertEquals("lcmp", string1);
      assertNotNull(string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(89);
      assertEquals(89, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      String string0 = constantMethodType0.toString();
      assertEquals(89, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 89)", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 71, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)81;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-113), (byte)4, (byte)81}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1711, 1711);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Constants.LSTORE_1;
      assertEquals((short)64, short0);
      
      byte[] byteArray0 = Utility.decode("?o@EAwVz#&E$%S+,", false);
      assertNotNull(byteArray0);
      
      ConstantLong constantLong0 = new ConstantLong((-1706L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1706L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      constantLong0.setBytes(0L);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = (ConstantLong)constantLong0.copy();
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)64, (int) (short)64, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)117, (byte)14, (byte)41, (byte)87, (byte)87, (byte)9, (byte)124, (byte) (-5)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lneg", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)117, (byte)14, (byte)41, (byte)87, (byte)87, (byte)9, (byte)124, (byte) (-5)}, byteArray0);
      
      int int0 = Utility.setBit(69, 88);
      assertEquals(16777285, int0);
      
      try { 
        Utility.methodSignatureArgumentTypes("Unreachabl[ defauSt}case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachabl[ defauSt}case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-2690));
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence3.reset();
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertEquals(0, byteSequence3.getIndex());
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(byteSequence1.equals((Object)byteSequence3));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("l2i", string2);
      assertNotNull(string2);
      assertNotSame(byteSequence1, byteSequence3);
      assertNotSame(byteSequence1, byteSequence2);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 225;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte byte0 = (byte)19;
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = false;
      Constant[] constantArray0 = null;
      try { 
        Utility.typeOfSignature("Pc|I'LO*<,kkweM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pc|I'LO*<,kkweM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("ireturn", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 150, 1424);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)112;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)36;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1852, (byte) (-67));
      assertEquals(1852, constantFieldref0.getClassIndex());
      assertEquals((-67), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setClassIndex((byte)112);
      assertEquals((-67), constantFieldref0.getNameAndTypeIndex());
      assertEquals(112, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("5#]px/HkCr");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("5~n4M'P% ~}3p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5~n4M'P% ~}3p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.clone();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Pattern.quote("CONSTANT_MethodType[16](descriptor_index = 225)");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\QCONSTANT_MethodType[16](descriptor_index = 225)\\E", string1);
      assertNotNull(string1);
      
      String string2 = Utility.methodSignatureReturnType("SourceFile", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("short", string2);
      assertNotNull(string2);
      
      String string3 = Utility.printArray((Object[]) constantArray0, true, true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{}", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      short short0 = Constants.BIPUSH;
      assertEquals((short)16, short0);
      
      String string0 = "Q/\"kA";
      try { 
        Utility.typeOfSignature("Q/\"kA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q/\"kA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)118;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (-775), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-67), (byte) (-55), (byte) (-67)}, byteArray0);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(1L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), (-1799));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48585. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_BOOLEAN;
      assertEquals((byte)90, byte0);
      
      boolean boolean0 = false;
      String string0 = Utility.fillup("6B$m3)pichgv|", (byte)90, false, 'p');
      assertEquals("pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp6B$m3)pichgv|", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("6B$m3)pichgv|", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "]V$bB-jy^hEN";
      try { 
        Utility.decode("]V$bB-jy^hEN", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte) (-115);
      String string0 = "$7e$7e$7e";
      try { 
        Utility.decode("$7e$7e$7e", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 150, 1424);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1852, (byte) (-67));
      assertEquals((-67), constantFieldref0.getNameAndTypeIndex());
      assertEquals(1852, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 19, (int) (byte) (-49));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 53028. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      assertNotSame(constantMethodType0, constantMethodType1);
      
      ConstantMethodType constantMethodType2 = (ConstantMethodType)constantMethodType0.clone();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertNotNull(constantMethodType2);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType2);
      assertNotSame(constantMethodType2, constantMethodType1);
      assertNotSame(constantMethodType2, constantMethodType0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)42;
      byte byte0 = (byte)50;
      byteArray0[6] = (byte)50;
      boolean boolean0 = false;
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("G$87pW$3f$w2", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-121), (byte)112, (byte)87, (byte)63, (byte)42, (byte)50}, byteArray0);
      
      try { 
        Utility.typeOfSignature("#;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("U/HuSx7d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U/HuSx7d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator((BCELComparator) null);
      byte[] byteArray0 = Utility.decode("Pc|I'LO*<,kkwewM", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lastore", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{null, null, null, null, null, null}", string2);
      assertNotNull(string2);
      
      try { 
        Utility.methodSignatureReturnType("{null, null, null, null, null, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{null, null, null, null, null, null}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte) (-82), (byte) (-41), (byte) (-68), (byte)126, (byte) (-59), (byte) (-104), (byte)0}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte) (-82), (byte) (-41), (byte) (-68), (byte)126, (byte) (-59), (byte) (-104), (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("newarray\t\t<<illegal type>>", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte) (-82), (byte) (-41), (byte) (-68), (byte)126, (byte) (-59), (byte) (-104), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-115);
      String string0 = Utility.classOrInterface(256);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte) (-115);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)91, (byte) (-115)}, byteArray1);
      
      String string1 = Utility.codeToString(byteSequence2, constantPool0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertEquals("f2d", string1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte)91, (byte) (-115)}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("f2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `f2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("@)82a}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @)82a}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("6BPm3)pichgv|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6BPm3)pichgv|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[4];
      String string0 = "A5";
      try { 
        Utility.typeOfSignature("A5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8\"E-U2Ns<");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F8\"E-U2Ns<");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 769, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string1 = Utility.methodSignatureReturnType("[I++OsK/:iF", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int[]", string1);
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)25, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)25, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence1.readFully(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(5, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)25, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence1.reset();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)25, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$8a$Z$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)25, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = "^OZ1o";
      byte[] byteArray1 = Utility.decode("^OZ1o", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)79, (byte)90, (byte)49, (byte)111}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 172, (-2828), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit('5', 0);
      assertEquals(52, int0);
      
      String string0 = "\"?mY|[Dr-";
      String string1 = Utility.compactClassName("\"?mY|[Dr-", false);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\"?mY|[Dr-", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("\"?mY|[Dr-", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)109, (byte)89, (byte)124, (byte)91, (byte)68, (byte)114, (byte)45}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)109, (byte)89, (byte)124, (byte)91, (byte)68, (byte)114, (byte)45}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 194, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?o@EAwrVz#&E$Z%S+,");
      assertFalse(boolean0);
      
      short short0 = Constants.LSTORE_2;
      assertEquals((short)65, short0);
      
      byte[] byteArray0 = Utility.decode("?o@EAwrVz#&E$Z%S+,", false);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1064255557, int0);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1L, long0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertEquals(0, byteSequence4.getIndex());
      assertNotNull(byteSequence4);
      
      String string0 = Utility.codeToString(byteSequence4, constantPool0);
      assertFalse(byteSequence4.equals((Object)byteSequence0));
      assertFalse(byteSequence4.equals((Object)byteSequence1));
      assertFalse(byteSequence4.equals((Object)byteSequence3));
      assertFalse(byteSequence4.equals((Object)byteSequence2));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence4.getIndex());
      assertEquals("lstore_0", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence4, byteSequence0);
      assertNotSame(byteSequence4, byteSequence1);
      assertNotSame(byteSequence4, byteSequence3);
      assertNotSame(byteSequence4, byteSequence2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = Constants.IF_ACMPNE;
      assertEquals((short)166, short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong0 = new ConstantLong((-1552L));
      assertEquals((-1552L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((-1552L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1552L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = (ConstantLong)constantLong0.copy();
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertEquals((-1552L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1552L), constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong2);
      assertNotSame(constantLong0, constantLong2);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong2, constantLong0);
      assertNotSame(constantLong2, constantLong1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (short)166, (int) (short)166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "\\E014";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E014");
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface((-1612941370));
      assertFalse(string1.equals((Object)string0));
      assertEquals("interface", string1);
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("CHOP ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("char", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("E014");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E014
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      assertNotSame(constantMethodType0, constantMethodType1);
      
      ConstantMethodType constantMethodType2 = (ConstantMethodType)constantMethodType0.clone();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType1));
      assertTrue(constantMethodType2.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals(225, constantMethodType2.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType2.getTag());
      assertNotNull(constantMethodType2);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType2);
      assertNotSame(constantMethodType2, constantMethodType1);
      assertNotSame(constantMethodType2, constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("caload", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52}, byteArray0);
      
      String string2 = Utility.getSignature("caload");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Lcaload;", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `caload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte) (-73);
      ConstantPool constantPool3 = constantPool2.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool3, (int) (byte) (-73), (-990));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    laload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("athrow", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?o@EAwVz#&E$%S+,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("Exceptions: ", false);
      assertEquals("Exceptions: ", string0);
      assertNotNull(string0);
      
      short short0 = Constants.LSTORE_2;
      assertEquals((short)65, short0);
      
      byte[] byteArray0 = Utility.decode("?o@EAwVz#&E$%S+,", false);
      assertNotNull(byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      long long0 = byteSequence0.skip(1L);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1L, long0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double double0 = byteSequence0.readDouble();
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(7.7088294929715E227, double0, 0.01);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("dload_0", string1);
      assertNotNull(string1);
      
      MockFile mockFile0 = new MockFile("Exceptions: ");
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Exceptions: ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Exceptions: ", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Exceptions: ", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Exceptions: ", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertNotNull(mockPrintStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("c:CV R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c:CV R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = constantMethodType0.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      String string1 = constantMethodType0.toString();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(string1.equals((Object)string0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string1);
      assertNotNull(string1);
      assertNotSame(constantMethodType0, constantMethodType1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lstore_1", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      
      String string3 = Constants.ILLEGAL_OPCODE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<illegal opcode>", string3);
      assertNotNull(string3);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      
      String string4 = Utility.printArray((Object[]) constantArray0, true);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{}", string4);
      assertNotNull(string4);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = Utility.encode(byteArray0, false);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("$40", string5);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{}");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.compactClassName(" fields:\n");
      assertEquals(" fields:\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l\"Sb/y><-I+");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)47, (byte)108, (byte)65, (byte) (-25)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.getSignature(" fields:\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lfields:;", string1);
      assertNotNull(string1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String[] stringArray0 = Constants.TYPE_NAMES;
      assertNotNull(stringArray0);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-1911133630), (int) (byte)108);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    laload\n1:    idiv\n2:    lstore_2\n3:    <illegal opcode>\n", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)47, (byte)108, (byte)65, (byte) (-25)}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    laload\n1:    idiv\n2:    lstore_2\n3:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    laload
         // 1:    idiv
         // 2:    lstore_2
         // 3:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit('5', 0);
      assertEquals(52, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)14, (byte)94, (byte)119}, byteArray0);
      
      int int1 = byteSequence0.available();
      assertFalse(int1 == int0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, int1);
      assertArrayEquals(new byte[] {(byte)14, (byte)94, (byte)119}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)3678, short0);
      assertArrayEquals(new byte[] {(byte)14, (byte)94, (byte)119}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)14, (byte)94, (byte)119}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("dneg", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)14, (byte)94, (byte)119}, byteArray0);
      
      String string1 = Utility.getSignature("dneg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ldneg;", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)96, (byte)96, (byte)118}, byteArray0);
      
      Constant[] constantArray0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("ishr", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)96, (byte)96, (byte)118}, byteArray0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)96, (byte)96, (byte)118}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.ILOAD_0;
      assertEquals((short)26, short0);
      
      String string1 = Utility.convertString("wWE.]2&");
      assertFalse(string1.equals((Object)string0));
      assertEquals("wWE.]2&", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("I`m]q4x52cF&U?.", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)87, 2510, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("L;?e", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)59, (byte)63, (byte)101}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(0L);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(0L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong0);
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong2);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(55, 55);
      assertEquals(55, constantFieldref0.getClassIndex());
      assertEquals(55, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals(55, constantFieldref0.getClassIndex());
      assertEquals(55, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(55, constantFieldref1.getNameAndTypeIndex());
      assertEquals(55, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertNotNull(constantFieldref1);
      
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong2;
      constantArray0[3] = (Constant) constantLong2;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong3 = new ConstantLong(0L);
      assertTrue(constantLong3.equals((Object)constantLong0));
      assertTrue(constantLong3.equals((Object)constantLong1));
      assertTrue(constantLong3.equals((Object)constantLong2));
      assertEquals((byte)5, constantLong3.getTag());
      assertEquals(0L, constantLong3.getBytes());
      assertNotNull(constantLong3);
      
      ConstantLong constantLong4 = new ConstantLong(constantLong2);
      assertTrue(constantLong4.equals((Object)constantLong3));
      assertTrue(constantLong4.equals((Object)constantLong0));
      assertTrue(constantLong4.equals((Object)constantLong1));
      assertTrue(constantLong4.equals((Object)constantLong2));
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong0.equals((Object)constantLong3));
      assertTrue(constantLong0.equals((Object)constantLong2));
      assertTrue(constantLong2.equals((Object)constantLong3));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals((byte)5, constantLong4.getTag());
      assertEquals(0L, constantLong4.getBytes());
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong4);
      
      String string0 = constantLong1.toString();
      assertTrue(constantLong1.equals((Object)constantLong3));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertTrue(constantLong1.equals((Object)constantLong2));
      assertTrue(constantLong1.equals((Object)constantLong4));
      assertEquals(0L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals("CONSTANT_Long[5](bytes = 0)", string0);
      assertNotNull(string0);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong1, constantLong3);
      assertNotSame(constantLong1, constantLong2);
      assertNotSame(constantLong1, constantLong4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 80, 63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "impdep2";
      String string0 = Utility.methodTypeToSignature("impdep2", stringArray0);
      assertEquals("(Limpdep2;)Limpdep2;", string0);
      assertNotNull(string0);
      
      byteArray0[1] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-81)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_1", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-81)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("<clinit>", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      
      byte byte0 = byteSequence1.readByte();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(1, byteSequence1.getIndex());
      assertEquals((byte)60, byte0);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      
      byteSequence0.reset();
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(0, byteSequence0.getIndex());
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertEquals(1L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 614, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.", "java.lang.", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-73), (byte) (-99)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup2", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-73), (byte) (-99)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.compactClassName("2jc&BP;c5L$'@hXa>V");
      assertEquals("2jc&BP;c5L$'@hXa>V", string0);
      assertNotNull(string0);
      
      try { 
        Utility.decode("2jc&BP;c5L$'@hXa>V", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.getSignature("^?|jV#8eFSEC']0&{H");
      assertEquals("L^?|jV#8eFSEC']0&{H;", string0);
      assertNotNull(string0);
      
      short short0 = Constants.MAX_ACC_FLAG;
      assertEquals((short)16384, short0);
      
      String string1 = Utility.convertString("^?|jV#8eFSEC']0&{H");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^?|jV#8eFSEC\\']0&{H", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      String string2 = Utility.compactClassName("TCa.e#w>L0(RrtJu", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("TCa.e#w>L0(RrtJu", string2);
      assertNotNull(string2);
      
      byte byte0 = (byte) (-36);
      byte[] byteArray1 = Utility.decode("^?|jV#8eFSEC']0&{H", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("dup2_x2", string3);
      assertNotNull(string3);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 106
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string0 = Pattern.quote("2jc&BP;c5L$'@hXa>V");
      assertEquals("\\Q2jc&BP;c5L$'@hXa>V\\E", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong((-1L));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong0);
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong1));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertEquals(1L, constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong3 = new ConstantLong(1L);
      assertTrue(constantLong3.equals((Object)constantLong0));
      assertTrue(constantLong3.equals((Object)constantLong2));
      assertFalse(constantLong3.equals((Object)constantLong1));
      assertEquals(1L, constantLong3.getBytes());
      assertEquals((byte)5, constantLong3.getTag());
      assertNotNull(constantLong3);
      
      ConstantLong constantLong4 = new ConstantLong(constantLong1);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(constantLong1.equals((Object)constantLong2));
      assertFalse(constantLong1.equals((Object)constantLong3));
      assertFalse(constantLong4.equals((Object)constantLong2));
      assertFalse(constantLong4.equals((Object)constantLong3));
      assertTrue(constantLong4.equals((Object)constantLong1));
      assertFalse(constantLong4.equals((Object)constantLong0));
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-1L), constantLong4.getBytes());
      assertEquals((byte)5, constantLong4.getTag());
      assertNotNull(constantLong4);
      
      String string1 = constantLong1.toString();
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(constantLong1.equals((Object)constantLong2));
      assertTrue(constantLong1.equals((Object)constantLong4));
      assertFalse(constantLong1.equals((Object)constantLong3));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals("CONSTANT_Long[5](bytes = -1)", string1);
      assertNotNull(string1);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong1, constantLong2);
      assertNotSame(constantLong1, constantLong4);
      assertNotSame(constantLong1, constantLong3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-24);
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1434, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      String string0 = Utility.compactClassName(">KvlITF:IIJ", false);
      assertEquals(">KvlITF:IIJ", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode(">KvlITF:IIJ", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = true;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 254, (int) (byte) (-78), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.ILOAD_0;
      assertEquals((short)26, short0);
      
      String string1 = Utility.convertString("=[%qAT&Qz_3ENP");
      assertFalse(string1.equals((Object)string0));
      assertEquals("=[%qAT&Qz_3ENP", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Constant[] constantArray0 = null;
      byte[] byteArray1 = Utility.decode("=[%qAT&Qz_3ENP", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)87, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short short0 = Constants.IF_ACMPNE;
      assertEquals((short)166, short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), (int) (byte)96, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      assertNotNull(byteArray0);
      
      byte byte0 = (byte)118;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Pattern.quote("Pc|I'LO*<,kkwewM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\QPc|I'LO*<,kkwewM\\E", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-2690));
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("class", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(99, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      
      Constant[] constantArray0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("idiv", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray0);
      
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 610, (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-57);
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-84), (-950));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lushr
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.replace("Amc7]", "Amc7]", "Amc7]");
      assertEquals("Amc7]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-113);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3254);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    d2l
         // 2:    nop
         // 3:    dcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.markSupported();
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[2];
      String string1 = Utility.compactClassName("'", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'", string1);
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("'");
      assertEquals((short) (-1), short0);
      
      String string2 = "Hw}qL%l{p>|aW=p";
      try { 
        Utility.methodSignatureReturnType("Hw}qL%l{p>|aW=p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hw}qL%l{p>|aW=p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      String string0 = Utility.compactClassName("'", false);
      assertEquals("'", string0);
      assertNotNull(string0);
      
      String string1 = "\"i~X*Sy+r";
      byte[] byteArray0 = Utility.decode("\"i~X*Sy+r", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)105, (byte)126, (byte)88, (byte)42, (byte)83, (byte)121, (byte)43, (byte)114}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-119), (byte) (-74)}, byteArray1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = Utility.convertString("'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\'", string2);
      assertNotNull(string2);
      
      String string3 = Utility.getSignature("'");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("L';", string3);
      assertNotNull(string3);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = Utility.replace("monitorexit", "'", "'");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("monitorexit", string4);
      assertNotNull(string4);
      
      String string5 = Utility.classOrInterface((-2476));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("interface", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("G9k:/&CR/Hq5h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G9k:/&CR/Hq5h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Jr$uMf.m9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.getSignature("<illegal opcode>");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L<illegal;", string1);
      assertNotNull(string1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("anewarray");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("anewarray", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      try { 
        Utility.methodSignatureReturnType("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("L#0En}]<;wASs>!J;V");
      assertEquals((byte)14, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("L#0En}]<;wASs>!J;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;wASs>!J;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-2690));
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byte byte0 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-128), (byte) (-50), (byte) (-76), (byte)72}, byteArray0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O'QbMp%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'QbMp%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)32, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Utility.replace("4i8gU@,", "\"", "? super ");
      assertEquals("4i8gU@,", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    fstore_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-2690));
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte)61;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)0, (byte)0, (byte) (-108)}, byteArray0);
      
      Object[] objectArray0 = new Object[5];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 70, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[1] = (byte)84;
      String[] stringArray0 = Constants.ACCESS_NAMES;
      assertNotNull(stringArray0);
      
      boolean boolean1 = Utility.isSet(87, (byte)84);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)11, (byte)84, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteSequence0.skip((byte)11);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(5L, long0);
      assertArrayEquals(new byte[] {(byte)11, (byte)84, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)11, (byte)84, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.compactClassName("7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-332), (-162), false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    fconst_0\n1:    bastore\n2:    nop\n3:    nop\n4:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)11, (byte)84, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("\t*");
      assertEquals("\t*", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("\t*", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray1);
      
      long long0 = byteSequence2.skip(707L);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(2, byteSequence2.getIndex());
      assertEquals(2L, long0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence2, byteSequence0);
      assertNotSame(byteSequence2, byteSequence1);
      assertArrayEquals(new byte[] {(byte)9, (byte)42}, byteArray1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = byteSequence1.readDouble();
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertEquals(8, byteSequence1.getIndex());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteSequence1, byteSequence2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertEquals(0, byteSequence3.getIndex());
      assertNotNull(byteSequence3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence3, constantPool0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence3.getIndex());
      assertEquals("nop", string1);
      assertNotNull(string1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence3, byteSequence2);
      assertNotSame(byteSequence3, byteSequence1);
      assertNotSame(byteSequence3, byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 18;
      int int1 = 1044;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1044, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.compactClassName("=[%qAT&Qz_3ENP", "=[%qAT&Qz_3ENP", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("=[%qAT&Qz_3ENP");
      assertFalse(string1.equals((Object)string0));
      assertEquals("=[%qAT&Qz_3ENP", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1852, 70);
      assertEquals(1852, constantFieldref0.getClassIndex());
      assertEquals(70, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "QwZv@z";
      try { 
        Utility.methodSignatureReturnType("QwZv@z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QwZv@z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Q'";
      String string1 = Utility.convertString("Q'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q\\'", string1);
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface((-2690));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("class", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte) (-50), (byte) (-76), (byte)72}, byteArray0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals("lstore\t\t%0", string3);
      assertNotNull(string3);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte) (-50), (byte) (-76), (byte)72}, byteArray0);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.compactClassName("=[%qAT&Qz_3ENP", "=[%qAT&Qz_3ENP", false);
      assertEquals("=[%qAT&Qz_3ENP", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.compactClassName("Sign(a're", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Sign(a're", string1);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("=[%qAT&Qz_3ENP");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=[%qAT&Qz_3ENP", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("1Im\"x9~s1 )l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1Im\"x9~s1 )l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokespecial", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = "L<illegal;V";
      String string1 = Pattern.quote("&R=Dek!C2{iL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\Q&R=Dek!C2{iL\\E", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)118, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-67);
      byteArray0[0] = (byte) (-55);
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-67), (byte)0, (byte) (-67)}, byteArray0);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(1L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), (-1799));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(8S<!@Sf.ZLNi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8S<!@Sf.ZLNi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.DUP_X2;
      assertEquals((short)91, short0);
      
      try { 
        Utility.typeOfSignature("O!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = Utility.clearBit('5', '5');
      assertEquals(53, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[0] = (byte) (-14);
      Constant[] constantArray0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Constants.DUP_X2;
      assertEquals((short)91, short0);
      
      Constant[] constantArray0 = new Constant[1];
      ClassPath classPath0 = new ClassPath("z!#BUyvWA)#s$VEh");
      assertNotNull(classPath0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/z!#BUyvWA)#s$VEh");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "\r");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 49, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VzF'@hL3I);+En>J3_");
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("Pc|I'LO*<,kkwewM", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((short)20607, short0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(6, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("dadd", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short)20607, 220, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-91);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), (int) (byte) (-124), false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    dmul\n1:    iinc\t\t%25\t-91\n4:    nop\n5:    aload\t\t%132\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-124), (byte)25, (byte) (-91), (byte)0, (byte)25, (byte) (-124)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte byte0 = (byte)127;
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.accessToString((int) (byte)127);
      assertEquals("public private protected static final synchronized volatile", string0);
      assertNotNull(string0);
      
      String string1 = "(anonymous)";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(anonymous)");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, (-438));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$P[j^;,zZ#A");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)102;
      String string0 = Utility.classOrInterface(60);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-29), (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-29), (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-29), (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("fsub", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-29), (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-126);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = byteSequence1.markSupported();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertTrue(boolean0);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean1);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(4, byteSequence1.getIndex());
      assertEquals(0, constantInvokeDynamic0.getClassIndex());
      assertEquals((-32256), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(0, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("ixor", string0);
      assertNotNull(string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteSequence0, byteSequence2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48394. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          byte[] byteArray0 = new byte[6];
          String string0 = Utility.compactClassName("Byte code error: ");
          assertEquals("Byte code error: ", string0);
          assertNotNull(string0);
          
          String string1 = Utility.signatureToString("D44<q }6jil");
          assertFalse(string1.equals((Object)string0));
          assertEquals("double", string1);
          assertNotNull(string1);
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertFalse(fileDescriptor0.valid());
          assertNotNull(fileDescriptor0);
          
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor102.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("dm4pg", "dm4pg", true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[4] = (byte)76;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)76, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[1] = (byte) (-90);
      Constant[] constantArray0 = new Constant[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-90)}, byteArray2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-90)}, byteArray2);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-90)}, byteArray2);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      
      byte byte0 = Utility.typeOfSignature("J+zbJ%TG_Td.A,J5");
      assertEquals((byte)11, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 42, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(125);
      assertEquals(125, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(125, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(125, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      
      String string0 = constantMethodType1.toString();
      assertTrue(constantMethodType0.equals((Object)constantMethodType1));
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals(125, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(125, constantMethodType1.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 125)", string0);
      assertNotNull(string0);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("CONSTANT_MethodType[16](descriptor_index = 125)");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[LCONSTANT_MethodType;", string1);
      assertNotNull(string1);
      
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(231);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(231, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)10;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      byte byte0 = Utility.typeOfSignature("Ille9ally nested brackets:");
      assertEquals((byte)10, byte0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)10}, byteArray0);
      
      boolean boolean1 = byteSequence0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)10}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)10}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[F%tDQq");
      assertEquals((byte)13, byte0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2236, (-2613));
      assertEquals(2236, constantFieldref0.getClassIndex());
      assertEquals((-2613), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setClassIndex((-1447));
      assertEquals((-1447), constantFieldref0.getClassIndex());
      assertEquals((-2613), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)21, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Utility.replace("Amc7]", "Amc7]", "Amc7]");
      assertEquals("Amc7]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 3254);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_3
         // 1:    d2l
         // 2:    impdep2
         // 3:    dcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.replace("\"", "\"", "? super ");
      assertEquals("? super ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = (byte) (-60);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-60), (byte) (-60));
      assertEquals((-60), constantNameAndType0.getSignatureIndex());
      assertEquals((-60), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      assertTrue(constantNameAndType1.equals((Object)constantNameAndType0));
      assertEquals((-60), constantNameAndType0.getSignatureIndex());
      assertEquals((-60), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-60), constantNameAndType1.getNameIndex());
      assertEquals((-60), constantNameAndType1.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertNotNull(constantNameAndType1);
      
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-60), (-904));
      assertEquals(1, constantPool0.getLength());
      assertEquals("0:    wide\t(wide)\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      
      String string1 = Utility.convertString("vUPhfJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vUPhfJ", string1);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("vUPhfJ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vUPhfJ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("vUPhfJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vUPhfJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-82);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-91);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), 43);
      assertEquals(3, constantPool0.getLength());
      assertEquals("0:    nop\n1:    if_acmpeq\t\t#1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-91), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.compactClassName("0:    nop\n1:    if_acmpeq\t\t#1\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    if_acmpeq\t\t#1\n", string1);
      assertNotNull(string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("0:    nop\n1:    if_acmpeq\t\t#1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    if_acmpeq\t\t#1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-59), (byte) (-59));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getClassIndex());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setClassIndex(1163);
      assertEquals(1163, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 206, (-3753));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1303, 1303);
      assertEquals(1303, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1303, constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setClassIndex(1163);
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(1303, constantFieldref0.getNameAndTypeIndex());
      assertEquals(1163, constantFieldref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteSequence0.close();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-115);
      String string0 = Utility.compactClassName("$7e$7e$7e", "i_Fcqpe", false);
      assertEquals("$7e$7e$7e", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("Y[&?D~8krqw2Q;IP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y[&?D~8krqw2Q;IP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CdXgkbA%ec>L");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.replace("%lJunMT", "[F%tDQq", "{}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%lJunMT", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[F%tDQq";
      stringArray0[1] = "<illegal type>";
      stringArray0[2] = "{}";
      stringArray0[3] = "%lJunMT";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("_$P/G3/YH", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [F%tDQq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-109), (byte)72, (byte) (-5)}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("i2f", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-109), (byte)72, (byte) (-5)}, byteArray0);
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("i2s", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-109), (byte)72, (byte) (-5)}, byteArray0);
      
      String string3 = Utility.encode(byteArray0, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$86$93H$fb", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-109), (byte)72, (byte) (-5)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8\"E-U2Ns<");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("F8\"E-U2Ns<", (String[]) null);
      assertEquals("()LF8\"E-U2Ns<;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("invokedynamic");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Linvokedynamic;", string1);
      assertNotNull(string1);
      
      ConstantLong constantLong0 = new ConstantLong((byte)6);
      assertEquals(6L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = (ConstantLong)constantLong0.copy();
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(6L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(6L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)104;
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals(225, constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-36);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-36), 14, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)0, (byte) (-36), (byte) (-36)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("X$Bk~?|.B8IMywu0$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X$Bk~?|.B8IMywu0$^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Bogus");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.format(46, 2667, true, 'y');
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) string0;
      String string1 = Utility.printArray(objectArray0, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = Utility.setBit(2667, 92);
      assertEquals(268438123, int0);
      
      String string2 = Utility.convertString(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = Utility.printArray(objectArray0, true);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H>5j");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H>5j");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.convertString("K@Cif/L(ta/t[Dp");
      assertEquals("K@Cif/L(ta/t[Dp", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("$P[j^,[z#A", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$P[j^,[z#A", string1);
      assertNotNull(string1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      try { 
        Utility.typeOfSignature("K@Cif/L(ta/t[Dp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K@Cif/L(ta/t[Dp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<illegal opcode>", string2);
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature(".&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertEquals(1, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte) (-45);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte) (-45);
      byteArray1[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-45), (byte) (-45), (byte) (-73), (byte) (-73), (byte) (-45), (byte) (-73)}, byteArray1);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-45), (byte) (-45), (byte) (-73), (byte) (-73), (byte) (-45), (byte) (-73)}, byteArray1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool3);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-44), (byte) (-35), (byte)112, (byte) (-75), (byte)71, (byte)47}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("monitorenter", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-44), (byte) (-35), (byte)112, (byte) (-75), (byte)71, (byte)47}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte byte0 = (byte) (-93);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-93);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), (int) (byte) (-93));
      assertEquals(1, constantPool0.getLength());
      assertEquals("0:    nop\n1:    if_icmpgt\t\t#1\n4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-93), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = constantPool0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, constantPool0.getLength());
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        constantPool0.constantToString((Constant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.compactClassName("BootstrapMethod(", false);
      assertEquals("BootstrapMethod(", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("BootstrapMethod(", false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("byte", string1);
      assertNotNull(string1);
      
      ConstantLong constantLong0 = new ConstantLong((-830L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-830L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      String string2 = constantLong0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-830L), constantLong0.getBytes());
      assertEquals("CONSTANT_Long[5](bytes = -830)", string2);
      assertNotNull(string2);
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantLong0;
      String string3 = Utility.convertString("ASpbU2{ofv3)|=}");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ASpbU2{ofv3)|=}", string3);
      assertNotNull(string3);
      
      ClassPath classPath0 = new ClassPath((ClassPath) null, "|=8'>0}~A]@~");
      assertNotNull(classPath0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(171);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(171, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(171, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(171, constantMethodType1.getDescriptorIndex());
      assertNotNull(constantMethodType1);
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-36);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-36), (int) (byte) (-36), true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    pop2\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    iconst_3\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-36), (byte) (-36), (byte) (-36), (byte) (-36), (byte)6, (byte) (-36), (byte) (-36), (byte) (-36)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("X$Bk~?|.B8IMywu0$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X$Bk~?|.B8IMywu0$^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-59), (byte) (-59));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getClassIndex());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setNameAndTypeIndex((byte) (-59));
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-59), constantFieldref0.getClassIndex());
      assertEquals((-59), constantFieldref0.getNameAndTypeIndex());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(2703L);
      assertEquals(2703L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(2703L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(2703L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantLong1.setBytes(2703L);
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(2703L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(2703L, constantLong1.getBytes());
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong1, constantLong0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 105, 965);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected class `CONSTANT_Class' at index 0 and got CONSTANT_Fieldref[9](class_index = -59, name_and_type_index = -59)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(6, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(6, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-79), (byte) (-41), (byte) (-126), (byte)51, (byte) (-94)}, byteArray0);
      
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-79), (byte) (-41), (byte) (-126), (byte)51, (byte) (-94)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(6, constantPool1.getLength());
      assertEquals("d2i", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-79), (byte) (-41), (byte) (-126), (byte)51, (byte) (-94)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("The wildcard must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The wildcard must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.getSignature("invokedyni");
      assertEquals("Linvokedyni;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("oKby{/Z!o)8&(=Mn", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = (-4100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)112, (-4100), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(225);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      String string0 = constantMethodType0.toString();
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(225, constantMethodType0.getDescriptorIndex());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 225)", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, 225);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<clinit>", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8\"E-U2Ns<");
      assertEquals((byte)6, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F8\"E-U2Ns<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-79);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)95, (byte) (-79), (byte)0}, byteArray0);
      
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)95, (byte) (-79), (byte) (-126)}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)95, (byte) (-79), (byte) (-126)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("return", string1);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)95, (byte) (-79), (byte) (-126)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("sn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.printArray((Object[]) constantArray0, true, false);
      assertEquals("{null}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 88, (-2731), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0}, byteArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 88, (-2731), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte byte0 = (byte) (-127);
      byte[] byteArray0 = new byte[14];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence1);
      
      byteArray1[0] = (byte) (-127);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(0, byteSequence2.getIndex());
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence2, constantPool0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence0.equals((Object)byteSequence2));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence2.getIndex());
      assertEquals("lor", string0);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteSequence0, byteSequence2);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence2, byteSequence1);
      assertNotSame(byteSequence2, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte byte0 = (byte) (-107);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-72), (byte) (-107), (byte)0}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-72), (byte) (-107), (byte)0}, byteArray0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-72));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-72), constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-72));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-72), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals("fcmpl", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-72), (byte) (-107), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lreturn", "<w$", "fcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "K@Ci`L(ta/t[Dp";
      ConstantMethodType constantMethodType0 = new ConstantMethodType(115);
      assertEquals(115, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantMethodType0.setDescriptorIndex((-4450));
      assertEquals((-4450), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong(169L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(169L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong((-2701L));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertEquals((-2701L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals((-2701L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-2701L), constantLong2.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertNotNull(constantLong2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = constantLong1.toString();
      assertTrue(constantLong1.equals((Object)constantLong2));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2701L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals("CONSTANT_Long[5](bytes = -2701)", string1);
      assertNotNull(string1);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong1, constantLong2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2352, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rc.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rc.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "java.lang.=[%qAT&Qz_3ENP";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.=[%qAT&Qz_3ENP");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("java.lang.=[%qAT&Qz_3ENP", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(196);
      assertEquals(196, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(7, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = constantPool0.toString();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)CONSTANT_MethodType[16](descriptor_index = 196)\n2)CONSTANT_MethodType[16](descriptor_index = 196)\n3)null\n4)CONSTANT_Utf8[1](\"java.lang.=[%qAT&Qz_3ENP\")\n5)null\n6)null\n", string1);
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-4101), 3241, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      ConstantString constantString0 = new ConstantString((byte)25);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(25, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(25, constantString0.getStringIndex());
      assertEquals(25, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertNotNull(constantString1);
      
      ConstantString constantString2 = new ConstantString(constantString1);
      assertTrue(constantString0.equals((Object)constantString1));
      assertTrue(constantString1.equals((Object)constantString0));
      assertTrue(constantString2.equals((Object)constantString0));
      assertTrue(constantString2.equals((Object)constantString1));
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(25, constantString0.getStringIndex());
      assertEquals(25, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals((byte)8, constantString2.getTag());
      assertEquals(25, constantString2.getStringIndex());
      assertNotNull(constantString2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(89);
      assertEquals(89, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      String string0 = constantMethodType0.toString();
      assertEquals(89, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals("CONSTANT_MethodType[16](descriptor_index = 89)", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)27);
      assertEquals(27, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2148), (int) (byte)27);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    iload_1\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      constantPool1.setConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[6] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[10] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-77));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(13, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      byteArray0[0] = (byte) (-57);
      String string0 = Utility.classOrInterface((byte)10);
      assertEquals("class", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(13, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = 193;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)10, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1246L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1246L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(198, 198);
      assertEquals(198, constantFieldref0.getNameAndTypeIndex());
      assertEquals(198, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantFieldref0.setNameAndTypeIndex(198);
      assertEquals(198, constantFieldref0.getNameAndTypeIndex());
      assertEquals(198, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantFieldref0.setClassIndex(2);
      assertEquals(2, constantFieldref0.getClassIndex());
      assertEquals(198, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-16);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 2, 198);
      assertEquals(3, constantPool0.getLength());
      assertEquals("2:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)26, (byte) (-16)}, byteArray0);
      
      String string1 = constantPool0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, constantPool0.getLength());
      assertEquals("1)CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 198)\n2)CONSTANT_Long[5](bytes = 1246)\n", string1);
      assertNotNull(string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)26, (byte) (-16)}, byteArray0);
      
      ConstantLong constantLong1 = new ConstantLong((byte)26);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertEquals(26L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = new ConstantLong(constantLong0);
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong1));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1246L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(1246L, constantLong2.getBytes());
      assertNotNull(constantLong2);
      
      ConstantLong constantLong3 = new ConstantLong(constantLong2);
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong0.equals((Object)constantLong2));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertFalse(constantLong2.equals((Object)constantLong1));
      assertTrue(constantLong3.equals((Object)constantLong2));
      assertTrue(constantLong3.equals((Object)constantLong0));
      assertFalse(constantLong3.equals((Object)constantLong1));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1246L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(1246L, constantLong2.getBytes());
      assertEquals((byte)5, constantLong3.getTag());
      assertEquals(1246L, constantLong3.getBytes());
      assertNotNull(constantLong3);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, (-5347));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(l~J<@?o", "(l~J<@?o", "kZ}kx7M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l~J<@?o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-102);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals(5, constantPool0.getLength());
      assertEquals("0:    nop\n1:    ifne\t\t#1\n4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-102), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{null, null, null, null, null}", string1);
      assertNotNull(string1);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("{null, null, null, null, null}");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.compactClassName("2jc&BP;c5L$'@hXa>V");
      assertEquals("2jc&BP;c5L$'@hXa>V", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("2jc&BP;c5L$'@hXa>V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2jc&BP;c5L$'@hXa>V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*0D'fUNHEIs");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[2] = (byte) (-85);
      byteArray0[0] = (byte) (-63);
      byteArray0[2] = (byte) (-122);
      byteArray0[5] = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byte[] byteArray1 = Utility.decode("*0D'fUNHEIs", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1750, (int) (byte) (-122), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-69);
      byteArray0[0] = (byte) (-69);
      byteArray0[6] = (byte) (-67);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      String string0 = "(anonymous)";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "(anonymous)");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-55);
      byteArray0[3] = (byte) (-67);
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      try { 
        Utility.typeOfMethodSignature("(anonymous)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lload_0", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfMethodSignature("[p`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [p`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.compactClassName("dcmpg", "dcmpg", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[1] = (byte) (-64);
      Constant[] constantArray0 = new Constant[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64)}, byteArray2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64)}, byteArray2);
      
      boolean boolean2 = byteSequence0.markSupported();
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, byteSequence0.getIndex());
      assertTrue(boolean2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-64)}, byteArray2);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 42, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      short short0 = Constants.IF_ACMPNE;
      assertEquals((short)166, short0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantLong constantLong0 = new ConstantLong((short)166);
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      String string1 = constantLong0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals("CONSTANT_Long[5](bytes = 166)", string1);
      assertNotNull(string1);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(166L, constantLong1.getBytes());
      assertNotNull(constantLong1);
      
      ConstantLong constantLong2 = (ConstantLong)constantLong1.copy();
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong0));
      assertTrue(constantLong2.equals((Object)constantLong1));
      assertEquals(166L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(166L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong2.getTag());
      assertEquals(166L, constantLong2.getBytes());
      assertNotNull(constantLong2);
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong0, constantLong2);
      assertNotSame(constantLong1, constantLong0);
      assertNotSame(constantLong1, constantLong2);
      assertNotSame(constantLong2, constantLong0);
      assertNotSame(constantLong2, constantLong1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      constantLong0.setBytes((byte) (-63));
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertFalse(constantLong0.equals((Object)constantLong2));
      assertEquals((-63L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotSame(constantLong0, constantLong1);
      assertNotSame(constantLong0, constantLong2);
      
      String string2 = Utility.accessToString((-757));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("public private static native abstract strictfp synthetic annotation enum", string2);
      assertNotNull(string2);
      
      int int0 = Utility.clearBit(251, (short)166);
      assertEquals(187, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-757), 254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i\"1;qq3\"84/++/g!v");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("4Rc.", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)82, (byte)99, (byte)46}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)102, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = ":{T?";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature(":{T?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :{T?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.getSignature("invokedyni");
      assertEquals("Linvokedyni;", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-118);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-17);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-17), (byte)0}, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-17), (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("l2d", string1);
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-17), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      String string0 = Utility.replace("'", "'", "'");
      assertEquals("'", string0);
      assertNotNull(string0);
      
      int int0 = 123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)20, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.compactClassName("<illegal o", true);
      assertEquals("<illegal o", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("I4n|=", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)52, (byte)110, (byte)124, (byte)61}, byteArray1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)20;
      byteArray2[1] = (byte)20;
      byteArray2[4] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 235, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("*|g3kvft8S(Dr]Q", (String[]) null);
      assertEquals("()L*|g3kvft8S(Dr]Q;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.methodSignatureToString("()L*|g3kvft8S(Dr]Q;", "()L*|g3kvft8S(Dr]Q;", "()L*|g3kvft8S(Dr]Q;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("()L*|g3kvft8S(Dr]Q; *|g3kvft8S(Dr]Q ()L*|g3kvft8S(Dr]Q;()", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L*|g3kvft8S(Dr]Q;", false);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = Utility.decode("iz1M6$JG@[ngR$", false);
      assertNotNull(byteArray0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()L*|g3kvft8S(Dr]Q; *|g3kvft8S(Dr]Q ()L*|g3kvft8S(Dr]Q;()");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('[');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      byteSequence0.readFully(byteArray0);
      assertEquals(11, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-4100), 3164, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    lload_1\n1:    f2i\n2:    iconst_5\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean1 = Utility.isSet((-1446), (-4100));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "java.lang.<init>", "java.lang.<init>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "!$P[j^;,[zZ#A";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "K@Ci`L(ta/t[Dp";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K@Ci`L(ta/t[Dp");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.convertString("K@Ci`L(ta/t[Dp");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("K@Ci`L(ta/t[Dp", string2);
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("!$P[j^;,[zZ#A", false);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!$P[j^;,[zZ#A", string3);
      assertNotNull(string3);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      try { 
        Utility.typeOfSignature("!$P[j^;,[zZ#A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $P[j^;,[zZ#A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.replace("Amc7]", "Amc7]", "Amc7]");
      assertEquals("Amc7]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-113);
      byte byte0 = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[3] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3390, (-1559));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "$P[j^;,[zZ#A";
      String string1 = "K@Ci`L(ta/t[Dp";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$P[j^;,[zZ#A");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.convertString(" not found.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" not found.", string2);
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("Lmonitorexit;V", false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Lmonitorexit;V", string3);
      assertNotNull(string3);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      try { 
        Utility.typeOfSignature("Gvoap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gvoap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("IepjUzc*u`:V", false);
      assertEquals("int", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-937), (byte) (-74));
      assertEquals((-74), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-937), constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals((-74), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-937), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-937), constantFieldref1.getClassIndex());
      assertEquals((-74), constantFieldref1.getNameAndTypeIndex());
      assertNotNull(constantFieldref1);
      
      constantFieldref1.setClassIndex((byte) (-74));
      assertEquals((-74), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-937), constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals((-74), constantFieldref1.getClassIndex());
      assertEquals((-74), constantFieldref1.getNameAndTypeIndex());
      assertNotSame(constantFieldref0, constantFieldref1);
      assertNotSame(constantFieldref1, constantFieldref0);
      
      short short0 = Utility.searchOpcode("IepjUzc*u`:V");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = Utility.decode(",9^R", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)57, (byte)94, (byte)82}, byteArray1);
      
      short short1 = Utility.searchOpcode("int");
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      byte byte0 = Utility.typeOfSignature("The wildcard array must not be null");
      assertEquals((byte)14, byte0);
      
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H>5j");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("H>5j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H>5j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      short short0 = Constants.IF_ACMPNE;
      assertEquals((short)166, short0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-79);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[7] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2709), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    dcmpl
         // 2:    return
         // 3:    nop
         // 4:    dcmpl
         // 5:    dcmpl
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      constantPool1.setConstantPool(constantArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I,Fj";
      stringArray0[1] = "I,Fj";
      stringArray0[2] = "JTRy185||g";
      stringArray0[3] = "invokespecial";
      stringArray0[4] = "I,Fj";
      stringArray0[5] = "I,Fj";
      stringArray0[6] = "invokespecial";
      String string0 = Utility.methodTypeToSignature("invokespecial", stringArray0);
      assertEquals("(LI,Fj;LI,Fj;LJTRy185||g;Linvokespecial;LI,Fj;LI,Fj;Linvokespecial;)Linvokespecial;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = Utility.clearBit(4954, (byte) (-124));
      assertEquals(4938, int0);
      
      String string2 = Utility.signatureToString("JTRy185||g", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("long", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Utility.replace("4i8gU@,", "\"", ",)o");
      assertEquals("4i8gU@,", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ior
         // 1:    fstore_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)19;
      short short0 = Constants.DLOAD_3;
      assertEquals((short)41, short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ybo<-K9$fi[Dta");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ybo<-K9$fi[Dta'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[3];
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte byte1 = (byte)123;
      byteArray0[0] = (byte)123;
      byteArray0[0] = (byte) (-94);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), (int) (byte)25, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    if_icmpge\t\t#0\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.isSet((byte)25, (byte) (-94));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".", ".", "sLb<a7F73i#6\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)11;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79, (byte)123, (byte) (-82), (byte) (-92), (byte)100, (byte) (-74), (byte)6, (byte)11}, byteArray0);
      
      String string0 = "amc7]";
      String string1 = Utility.compactClassName("amc7]", true);
      assertTrue(string1.equals((Object)string0));
      assertEquals("amc7]", string1);
      assertNotNull(string1);
      
      String string2 = Utility.convertString("amc7]");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("amc7]", string2);
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-683), (-683));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0:    iastore\n1:    lshr\n2:    freturn\n3:    if_icmple\t\t#25785\n6:    iconst_3\n7:    fconst_0\n", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)79, (byte)123, (byte) (-82), (byte) (-92), (byte)100, (byte) (-74), (byte)6, (byte)11}, byteArray0);
      
      boolean boolean1 = Utility.isSet((-3349), (-3349));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfMethodSignature("amc7]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: amc7]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = Utility.replace("Amc7]", "Amc7]", "Amc7]");
      assertEquals("Amc7]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-110);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3254);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\n1:    d2l\n2:    nop\n3:    d2l\n4:    d2l\n5:    i2c\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte) (-113), (byte) (-113), (byte) (-110)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-45)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 228);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), 89);
      assertEquals("0:    d2f\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".`bj'FL%%`U1";
      stringArray0[2] = "0:    d2f\n1:    nop\n2:    nop\n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(".`bj'FL%%`U1", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(125);
      assertEquals(125, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      float float0 = byteSequence0.readFloat();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = false;
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$A$A$A$A$A$A$A$A$A$A", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfSignature("75ugKL&2CB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 75ugKL&2CB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifnonnull");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte) (-99);
      byte byte0 = (byte)96;
      byteArray0[8] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-99), (byte)0, (byte)96}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)96);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      constantPool1.setConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-80);
      String string1 = Utility.replace("<illegal opcode>", "<illegal opcode>", "<illegal opcode>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 163, 3495);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
