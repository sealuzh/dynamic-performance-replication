/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:20:47 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(7, 7);
      // Undeclared exception!
      try { 
        sparseMatrix0.minInRow(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(1);
      cRSMatrix0.rotate();
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rowMajorIterator();
      assertEquals(0, cCSMatrix0.columns());
      
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      matrix0.toCSV();
      assertEquals(0, cCSMatrix0.rows());
      assertTrue(matrix0.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      matrix0.hashCode();
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      basic2DMatrix0.rank();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(5290, vectorFunction0);
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.mkString(numberFormat0);
      assertTrue(cCSMatrix0.equals((Object)matrix0));
      assertNotSame(cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(280, 280);
      Matrix matrix0 = basic2DMatrix0.copyOfShape(280, 280);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      matrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-2140), (-2140));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2140x-2140
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("-/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 2366;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2366, 2366, 2366);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2366);
      // Undeclared exception!
      try { 
        Basic2DMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2367' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(9, 9);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      basic2DMatrix0.rows();
      basic2DMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = Locale.UK;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(392);
      cCSMatrix0.divide(417.3270397663);
      cCSMatrix0.rank();
      int int0 = 1245;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(int0, vectorFunction0);
      double double0 = 1.0;
      cCSMatrix0.equals(matrix0, double0);
      cCSMatrix0.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      basic2DMatrix0.subtract(14.0);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      NumberFormat.getInstance();
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.GERMAN;
      Vector vector0 = Vector.constant(14, (-1055.33));
      sparseMatrix0.equals((Object) vectorFunction0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = sparseMatrix0.insertColumn(0, vector0);
      matrix0.removeLastRow();
      int int0 = Double.SIZE;
      matrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      matrix0.toSparseMatrix();
      matrix0.add((double) 0);
      cRSMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, (-1564.22));
      Matrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(958);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -183.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldColumns(vectorAccumulator0);
      basic2DMatrix0.determinant();
      basic2DMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      rowMajorSparseMatrix0.maxInColumn(0);
      ColumnMajorSparseMatrix.zero(0, 0, 0);
      int int0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          Matrix.constant(958, 958, 2.0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 10);
      rowMajorSparseMatrix0.sum();
      rowMajorSparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(958);
      // Undeclared exception!
      denseMatrix0.power(958);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeRow(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      matrix0.power(4073);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        matrix0.blankOfColumns((-2583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2583
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn((-17));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 2808);
      cRSMatrix0.setColumn(3, 792.35226776);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("zj#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2366, 2366, 2366);
      // Undeclared exception!
      try { 
        cCSMatrix0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
          LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
          basic2DMatrix0.withInverter(linearAlgebra_InverterFactory0);
          basic2DMatrix0.determinant();
          // Undeclared exception!
          try { 
            basic2DMatrix0.swapColumns(7, 1642);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 7
             //
             verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(" ");
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.copy();
      matrix0.subtract((Matrix) cCSMatrix0);
      cCSMatrix0.kroneckerProduct(matrix0);
      cCSMatrix0.insert((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        matrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 7;
      SparseMatrix.identity(7);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(7, 7);
      basic2DMatrix0.swapRows(7, 7);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((SparseMatrix) basic2DMatrix0).foldNonZeroInRow(0, vectorAccumulator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2329);
      sparseMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(1960, 1960);
      matrix0.blankOfRows(10);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.columnMajorIterator();
      basic2DMatrix0.determinant();
      basic2DMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 5, 8);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.hashCode();
      cCSMatrix0.columns();
      SparseVector sparseVector0 = SparseVector.zero(8, 5);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 8 does not equal to 5.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      NumberFormat.getInstance();
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)14, (double)14, (-1055.33), (double)14).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.removeRow(0);
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.removeRow(0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        matrix1.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 14x13 does not equal to 14x14.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SparseMatrix.identity(2347);
      Matrix matrix0 = Matrix.zero(2347, 2347);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow((-3769), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 5, 8);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false, false, false, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(7, 7);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(2, mockRandom0);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 5, 8);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.non(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse((-789), (-789), (-789));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-789' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1, 1739);
      cRSMatrix0.equals((Matrix) cRSMatrix1, (double) 1739);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2366, 2366, 2366);
      CCSMatrix.identity(2366);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2366);
      cCSMatrix0.equals((Matrix) cRSMatrix0, (-39.50677527031101));
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      Matrix matrix0 = Matrix.unit(0, 0);
      sparseMatrix0.equals(matrix0, (double) 0);
      locale0.clone();
      NumberFormat.getCurrencyInstance(locale0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.columns();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.transformColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(2, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(6, 6);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.equals((Matrix) basic2DMatrix0, 3948.683289984143);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 6 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2366);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice((-2655), 2366, 2366, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-2655..2366][2366..7].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(" ");
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) columnMajorSparseMatrix0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1 rows and 1 cols at 0, 0 in a 2x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Vector vector0 = Vector.zero(59);
      // Undeclared exception!
      try { 
        cCSMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 59 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(" ");
      columnMajorSparseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2366;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2366);
      int int1 = (-2655);
      int int2 = 7;
      sparseMatrix0.shuffle();
      sparseMatrix0.columnMajorIterator();
      Matrix matrix0 = sparseMatrix0.slice(int1, int0, int0, int2);
      matrix0.multiply((Matrix) sparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.removeFirstRow();
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 1000);
      Matrix matrix0 = cCSMatrix0.sliceBottomRight((-2418), 1000);
      matrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(14, (-2021161079), 2, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [14..2][-2021161079..37].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.mkString("Z`4,", "Z`4,");
      Locale locale0 = Locale.TAIWAN;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2366);
      sparseMatrix0.columnMajorIterator();
      Matrix matrix0 = sparseMatrix0.slice(2366, 2366, 2366, 2366);
      // Undeclared exception!
      try { 
        matrix0.multiply((Matrix) sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 2366.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2329);
      // Undeclared exception!
      try { 
        sparseMatrix0.updateRow(2329, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2330
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2329);
      sparseMatrix0.copyOfColumns(2329);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2329);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      sparseMatrix0.toMatrixMarket(numberFormat0);
      sparseMatrix0.transform((MatrixFunction) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(183);
      // Undeclared exception!
      try { 
        Matrix.random(183, (-354), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(" ");
      CRSMatrix cRSMatrix0 = (CRSMatrix)columnMajorSparseMatrix0.multiplyByItsTranspose();
      cRSMatrix0.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct(cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x0 does not equal to 1x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Locale locale0 = Locale.TAIWAN;
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      Locale locale1 = Locale.CANADA;
      cCSMatrix0.hadamardProduct(matrix0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.equals((Object) matrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Locale locale0 = Locale.TAIWAN;
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      Locale locale1 = Locale.CANADA;
      cCSMatrix0.hadamardProduct(matrix0);
      cCSMatrix0.getRow(0);
      cCSMatrix0.equals((Object) locale1);
      cCSMatrix0.copyOfRows(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(4133, 0.0, (Random) mockRandom0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector.zero(4133);
      RowMajorSparseMatrix.from1DArray(1601, 0, (double[]) null);
      Matrix.from1DArray(0, 32, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      Locale locale0 = Locale.TAIWAN;
      locale0.getCountry();
      Matrix matrix0 = Matrix.unit(0, 0);
      Locale locale1 = Locale.CANADA;
      Matrix matrix1 = sparseMatrix0.hadamardProduct(matrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateColumn(0, vectorFunction0);
      ColumnMajorSparseMatrix.block(sparseMatrix0, matrix0, matrix1, sparseMatrix0);
      CRSMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 8);
      Locale locale0 = Locale.GERMANY;
      NumberFormat.getInstance();
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)8, (double)8, (-2613.40265733), (double)8).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      matrix0.equals((Matrix) sparseMatrix0, 1.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV(" ");
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 113, 1075, 1075, 1755);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 113, 1075
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(179, (-1.0));
      String string0 = columnMajorSparseMatrix0.toString();
      int int0 = (-1795);
      columnMajorSparseMatrix0.blankOfColumns(int0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string1 = "org.la4j.LinearAlgebra$SolverFactory$7";
      columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0, string1, string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 2329;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2329);
      // Undeclared exception!
      cRSMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft(282, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 2366;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2366, 2366, 2366);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2366);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2366);
      cCSMatrix0.equals((Matrix) cRSMatrix0, (double) 2366);
      cRSMatrix0.blankOfShape(int0, int0);
      int int1 = 2366;
      cCSMatrix1.copyOfRows(int1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Basic2DMatrix.unit(7, 7);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(7, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 22;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(22, 2366.0);
      cCSMatrix0.mkString("ID$.@qpN8M.T.Y>qc}j", "ID$.@qpN8M.T.Y>qc}j");
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SparseMatrix.zero(0, 0);
      SparseMatrix.identity(967);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 967;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(967, 0, doubleArray0);
      cRSMatrix0.updateRow(967, (VectorFunction) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.equals((Object) null);
      basic2DMatrix0.determinant();
      // Undeclared exception!
      try { 
        basic2DMatrix0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.insert((Matrix) cRSMatrix0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(0);
      matrix0.trace();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toDenseMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 17, 17, 17, 17, (-2756), (-376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -2756x-376
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.foldRows(vectorAccumulator0);
      matrix0.subtract((Matrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      DenseMatrix denseMatrix0 = matrix0.toDenseMatrix();
      denseMatrix0.add(matrix0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Matrix matrix0 = Matrix.unit(9, 9);
      matrix0.trace();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cCSMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      matrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = new CCSMatrix(10, 10, 10);
      Locale locale0 = Locale.TAIWAN;
      locale0.getCountry();
      Matrix matrix0 = Matrix.unit(10, 10);
      Locale locale1 = Locale.CANADA;
      cCSMatrix0.hadamardProduct(matrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(10, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(2, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) basic2DMatrix0, 960, 2, 2, 30, 4, 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2, 30
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      numberFormat0.setMaximumIntegerDigits(14);
      sparseMatrix0.rank();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        sparseMatrix0.minInColumn((-479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -479
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      NumberFormat.getIntegerInstance();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      numberFormat0.setMaximumIntegerDigits(5);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.removeRow(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(17, 363);
      // Undeclared exception!
      try { 
        basic2DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      NumberFormat.getInstance();
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)14, (double)14, (-2613.40265733), (double)14).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transformRow(0, vectorFunction0);
      matrix0.euclideanNorm();
      sparseMatrix0.equals(matrix0, 0.0);
      sparseMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        Matrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(21, 21);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      numberFormat0.setMaximumIntegerDigits(21);
      sparseMatrix0.rank();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.non(advancedMatrixPredicate0);
      // Undeclared exception!
      try { 
        sparseMatrix0.minInColumn((-479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -479
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Matrix matrix0 = cCSMatrix0.insert((Matrix) cRSMatrix0);
      matrix0.setRow(0, (double) 0);
      cCSMatrix0.copyOfRows(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(37, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(2, (-963.4576151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.GERMANY;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      NumberFormat.getInstance();
      numberFormat0.setMaximumIntegerDigits(14);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.rank();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-1938), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      basic2DMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      NumberFormat.getInstance();
      sparseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.CHINESE;
      Locale locale2 = Locale.FRANCE;
      Vector vector0 = Vector.constant(2, (-1055.33));
      sparseMatrix0.equals((Object) locale0);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(5, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 14.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberFormat.getInstance();
      int int0 = 2;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.unit(2);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.setRow(2, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.determinant();
      basic2DMatrix0.iterator();
      basic2DMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(22, 22);
      basic2DMatrix0.removeLastRow();
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(22, mockRandom0);
      matrix0.rows();
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SparseMatrix.zero(8, 8);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.GERMANY;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(8, 8);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(22, 22);
      Matrix matrix0 = basic2DMatrix0.copy();
      basic2DMatrix0.removeLastRow();
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      matrix0.transpose();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(22, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic2DMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.minInRow(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7);
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      denseMatrix0.blankOfShape(7, 7);
      Matrix matrix0 = denseMatrix0.multiply(801.05585979345);
      matrix0.toCSV();
      Matrix matrix1 = Matrix.unit(7, 1773);
      matrix1.subtract((double) 7);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Basic2DMatrix.zero(0, 0);
      Basic2DMatrix.zero(0, 3);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(3, (-501.21381));
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      matrix0.swapColumns(5438, 5438);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      basic2DMatrix0.add((-118.631));
      basic2DMatrix0.add((Matrix) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(2, 2);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      int int0 = (-607);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapColumns(2, (-607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(1, 1);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-1381), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(16, 16);
      int[] intArray0 = new int[1];
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      matrix0.sum();
      Matrix.diagonal(4900, 4900);
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(8, 1991);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) sparseMatrix0, (-2987), 1991, 0, 289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -2987, 1991
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.slice(422, 422, 422, 422);
      matrix0.max();
      matrix0.swapRows(25, 0);
      cCSMatrix0.hadamardProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberFormat.getInstance();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1600, 1600);
      DenseVector denseVector0 = DenseVector.constant(1600, 1600);
      denseMatrix0.insertRow(35, denseVector0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int0 = (-2130);
      Matrix.identity(10);
      SparseVector sparseVector0 = SparseVector.zero(10, (-4412));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(sparseVector0).when(vectorFactory0).apply(anyInt());
      Vector vector0 = sparseVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow((-2130), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8, 8);
      cCSMatrix0.mkString(numberFormat0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n");
      cCSMatrix0.toColumnVector();
      cCSMatrix1.rows();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(14, 14);
      NumberFormat.getInstance();
      int int0 = 414;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(406, 414);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) sparseMatrix0, 406, 395);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 406 rows and 395 cols at 0, 0 from a 14x14 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(7, 7);
      DenseVector denseVector0 = DenseVector.zero(7);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertRow(7, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberFormat.getInstance();
      Basic2DMatrix.unit(1897, 377);
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(8, mockRandom0);
      basic2DMatrix0.determinant();
      CCSMatrix.diagonal(1296, 6.575878658239514E-10);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1600, 1600);
      // Undeclared exception!
      denseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberFormat.getInstance();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1600, 1600);
      DenseVector denseVector0 = DenseVector.constant(1600, 1600);
      denseMatrix0.insertRow(0, denseVector0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.kroneckerProduct(cCSMatrix1);
      cCSMatrix0.swapRows((-39), (-39));
  }
}
