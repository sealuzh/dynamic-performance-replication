/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:10:51 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.io.PipedInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntUnaryOperator;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Rectangle> class1 = Rectangle.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "is", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("1*SV% sBo|ug", class0, class1, class0, (Field) null, 37, 37, (-6254807));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("org.springframework.security.web.savedrequest.SavedCookie");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      indexOutOfBoundsException0.printStackTrace();
      TypeUtils.isHibernateInitialized(indexOutOfBoundsException0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      String string0 = "(C)F";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "(C)F", fieldArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(indexOutOfBoundsException0);
      sQLTransientConnectionException0.addSuppressed(indexOutOfBoundsException0);
      sQLTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLTransientConnectionException: java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeUtils.getParserFeatures(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ">9m2#BrekZv\"I:__ ";
      TypeUtils.isNumber(">9m2#BrekZv\"I:__ ");
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      Class<Annotation> class0 = Annotation.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.isPath(class0);
      Class<NoSuchMethodError> class1 = NoSuchMethodError.class;
      TypeUtils.isPath(class1);
      TypeUtils.isNumber("]'x[*kf");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isNumber("T&Qz_3ENPIfoF");
      TypeUtils.isGenericParamType(class0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setClassAssertionStatus("]'x[*kf", false);
      TypeUtils.loadClass("]'x[*kf", classLoader1, true);
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader1.setClassAssertionStatus("j", false);
      classLoader1.setPackageAssertionStatus("getEndInclusive", false);
      TypeUtils.isGenericParamType((Type) null);
      classLoader1.clearAssertionStatus();
      TypeUtils.getGenericParamType((Type) null);
      int int0 = Opcodes.NEWARRAY;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.loadClass("soD8*Nne|]{`<A@:O,");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.castToDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      Class<Annotation> class1 = Annotation.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      concurrentHashMap0.size();
      TypeUtils.fnv1a_64_lower("-0^uQ h*");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Collator collator0 = Collator.getInstance(locale0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = collator0.thenComparingDouble(toDoubleFunction0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>(comparator0);
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, (ParserConfig) null);
      String string0 = TypeUtils.decapitalize("to");
      assertEquals("to", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.getSerializeFeatures(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      treeMap0.put("AllowComment", "u1-),/z}1'6gg0Ep~;t");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(";Ljava/la@g/Object;C)C", ";Ljava/la@g/Object;C)C");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      InternalError internalError0 = new InternalError(sQLIntegrityConstraintViolationException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = TypeUtils.decapitalize(";Ljava/la@g/Object;C)C");
      assertEquals(";Ljava/la@g/Object;C)C", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TypeUtils.isProxy(class0);
      Point point0 = new Point(12, 12);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point0.setLocation((Point2D) point2D_Float0);
      Point point1 = new Point((byte)115, (-9));
      point0.setLocation(point1);
      point0.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<MockGregorianCalendar, NullPointerException> hashMap0 = new HashMap<MockGregorianCalendar, NullPointerException>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      MockNullPointerException mockNullPointerException1 = new MockNullPointerException();
      hashMap0.getOrDefault(jSONPDeserializer0, mockNullPointerException1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.toLocale("wait");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.Object@2d3e4ec2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.isProxy(class0);
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isProxy(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("short overflow : ", "NV2=4eqe\\EUI4qf7}K");
      hashMap0.put("short overflow : ", "autoType is not support. ");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) serializeBeanInfo0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<SQLException> class1 = SQLException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, linkedHashMap0);
      javaBeanSerializer0.getFieldValuesMap(class1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.subMap("$ref", true, "$ref", true);
      treeMap0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Class<InternalError> class2 = InternalError.class;
      boolean boolean0 = TypeUtils.isPath(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Point point0 = new Point((-1932735281), (-1932735281));
      Point point1 = new Point();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      Class<StackTraceElement> class0 = StackTraceElement.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Locale locale0 = Locale.ITALY;
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, concurrentHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "x7PTA!rF";
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Method> class1 = Method.class;
      Class<Double> class2 = Double.TYPE;
      parserConfig0.getDeserializer((Class<?>) class1, (Type) class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.util.IOUtils");
      Type type0 = TypeUtils.getCollectionItemType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type1);
      TypeUtils.getRawClass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("float", "float");
      // Undeclared exception!
      try { 
        JSON.parseObject("Z;crCZ JTf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Z;crCZ JTf
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.clearClassMapping();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<TimeUnit> class1 = TimeUnit.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("SUPPRESSED_CAPTION");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLTransactionRollbackException: SUPPRESSED_CAPTION
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("j", "hM{p}s");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(0L, biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Calendar> class0 = Calendar.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<String> class2 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig.getFieldFromCache("&WvB4ui", identityHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<VerifyError> class0 = VerifyError.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.size();
      TypeUtils.fnv1a_64_lower("-0^uQ h*");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("getDeclaringClass");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      TypeUtils.getRawClass(class2);
      TypeUtils.getClass((Type) class2);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(map0);
      TypeUtils.getSerializeFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-0^uQ Fh*");
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.isNumber("Bnks9T=u~zVN=N~J$<M");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Bnks9T=u~zVN=N~J$<M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Bnks9T=u~zVN=N~J$<M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getClass((Type) class0);
      TypeUtils.getRawClass(class0);
      String string0 = "]/3jAWdz";
      TypeUtils.isNumber("]/3jAWdz");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      ParserConfig.getGlobalInstance();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.fillInStackTrace();
      negativeArraySizeException0.getSuppressed();
      String string0 = "Ljava.awt.Font";
      TypeUtils.isNumber("Ljava.awt.Font");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Font", "vB, 578o3{p;5");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getCollectionItemClass(class1);
      Class<String> class2 = String.class;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = TypeUtils.castToJavaBean((Object) mockDateFormat0, class2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError(";Ljava/lang/String;Ljava/lang/Object;)V");
      stackOverflowError0.printStackTrace();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) stackOverflowError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StackOverflowError: ;Ljava/lang/String;Ljava/lang/Object;)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToDouble((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Calendar> class0 = Calendar.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread0.getContextClassLoader();
      MockThread mockThread2 = new MockThread("(Ljava/lang/Object;Ljava/lang/Object;)");
      MockThread mockThread3 = new MockThread();
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread3, "(Ljava/lang/Object;Ljava/lang/Object;)");
      TypeUtils.castToByte((Object) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getRawClass(type0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      BiFunction<Boolean, Integer, Integer> biFunction0 = (BiFunction<Boolean, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      mockNullPointerException0.getCause();
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      Class<Annotation> class1 = Annotation.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "getbooleanValue", fieldArray0);
      identityHashMap0.put("oracle.sql.DATE", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      String string0 = TypeUtils.decapitalize("getbooleanValue");
      assertEquals("getbooleanValue", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.decapitalize("j");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.loadClass("j", (ClassLoader) null, true);
      TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemType((Type) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.toLocale("_k");
      ThreadGroup threadGroup0 = new ThreadGroup("&d^{=AD{;P3'(&v_:");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "&d^{=AD{;P3'(&v_:");
      MockThread mockThread2 = new MockThread(mockThread0, "&d^{=AD{;P3'(&v_:");
      MockThread mockThread3 = new MockThread(threadGroup0, "*");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("&d^{=AD{;P3'(&v_:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      TypeUtils.isHibernateInitialized((Object) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Long long0 = new Long((-648L));
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      TypeUtils.castToSqlDate((Object) null);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = Opcodes.FLOAD;
      String string0 = "getDeclaringClass";
      TypeUtils.isNumber("getDeclaringClass");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("L^;XFp", "null", 90);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLIntegrityConstraintViolationException: L^;XFp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      String string0 = "Ljava.awt.oint";
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.oint", classLoader0);
      Thread[] threadArray0 = new Thread[0];
      MockThread.enumerate(threadArray0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      TypeUtils.loadClass("?av2o8rbe1x5I]NvAX");
      TypeUtils.fnv1a_64("-0^uQ ");
      LinkedHashMap<SQLTransientException, Properties> linkedHashMap1 = new LinkedHashMap<SQLTransientException, Properties>();
      assertEquals(0, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "Lorg.springframework.util.LinkedMultiValueMap";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Lorg.springframework.util.LinkedMultiValueMap");
      String string1 = "org.springframework.security.web.savedrequest.SavedCookie";
      TypeUtils.fnv1a_64_lower("org.springframework.security.web.savedrequest.SavedCookie");
      Timestamp timestamp0 = new Timestamp((-3750763034362895579L));
      TypeUtils.castToSqlTime(timestamp0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("org.springframework.security.web.savedrequest.SavedCookie");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      Point point0 = new Point();
      Point point1 = new Point();
      point0.setLocation(point1);
      point1.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TreeMap<NumberFormatException, EnumDeserializer> treeMap0 = new TreeMap<NumberFormatException, EnumDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@86a8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Point point0 = new Point(74, 74);
      Point point1 = new Point();
      Point point2 = new Point((-12473307), 48);
      point0.setLocation(point2);
      point0.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) gridBagConstraints0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@70c5e47
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Point point0 = new Point((byte)3, 132);
      point0.setLocation(point0);
      point0.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HashMap<MockGregorianCalendar, NullPointerException> hashMap0 = new HashMap<MockGregorianCalendar, NullPointerException>();
      ParserConfig.getGlobalInstance();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"x\":3,\"y\":132}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation(class1, class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "]'x[*kf";
      MockThread mockThread0 = new MockThread("]'x[*kf");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "]'x[*kf";
      MockThread mockThread0 = new MockThread("]'x[*kf");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ClassLoader.getSystemClassLoader();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, false, propertyNamingStrategy0);
      LinkedHashMap<NoSuchFieldException, IllegalMonitorStateException> linkedHashMap1 = new LinkedHashMap<NoSuchFieldException, IllegalMonitorStateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("]'x[*kf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]'x[*kf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(type0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      Class<Collator> class2 = Collator.class;
      TypeUtils.isProxy(class2);
      TypeUtils.toLocale("_k");
      MockThread mockThread1 = new MockThread("bg\"R+C@+9Kfe,N.");
      ThreadGroup threadGroup0 = new ThreadGroup("&d^{=AD{;P3'(&v_:");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "&d^{=AD{;P3'(&v_:");
      MockThread mockThread3 = new MockThread(mockThread0, "&d^{=AD{;P3'(&v_:");
      MockThread mockThread4 = new MockThread(threadGroup0, "*");
      TypeUtils.decapitalize("]'x[*kf");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        treeMap0.subMap("LZL7iknr].RK:", false, "8*|lfY=u;2&]we-qR@", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ClassLoader.getSystemClassLoader();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      concurrentHashMap1.mappingCount();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap0, true, propertyNamingStrategy0);
      LinkedHashMap<NoSuchFieldException, IllegalMonitorStateException> linkedHashMap1 = new LinkedHashMap<NoSuchFieldException, IllegalMonitorStateException>();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToInt(bigInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 32;
      AtomicInteger atomicInteger0 = new AtomicInteger(32);
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(160).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.weakCompareAndSet(32, 32);
      atomicInteger0.getAndIncrement();
      atomicInteger0.getAndUpdate(intUnaryOperator0);
      TypeUtils.castToFloat(atomicInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(atomicInteger0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Calendar> class0 = Calendar.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Double> class2 = Double.TYPE;
      TypeUtils.getCollectionItemType(class2);
      TypeUtils.getGenericParamType(class2);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.cast((Object) null, (Type) class2, (ParserConfig) null);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class1);
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      TypeUtils.isProxy(class2);
      TypeUtils.getClass(type0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Point point0 = new Point();
      Point point1 = new Point(0, 0);
      point1.setLocation(point0);
      point0.clone();
      point1.y = 0;
      TypeUtils.isHibernateInitialized(point0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      ParserConfig.getGlobalInstance();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.getSuppressed();
      HashMap<MockGregorianCalendar, NullPointerException> hashMap0 = new HashMap<MockGregorianCalendar, NullPointerException>();
      ParserConfig.getGlobalInstance();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      byte byte0 = (byte) (-16);
      Byte byte1 = new Byte((byte) (-16));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -16
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.clearClassMapping();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<TimeUnit> class2 = TimeUnit.class;
      JSONType jSONType0 = null;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      String string0 = "uIaB[1";
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      String string1 = "GG8C,3SUbgF8O`Y(";
      Field[] fieldArray0 = new Field[2];
      Integer integer0 = new Integer((byte)58);
      TypeUtils.castToTimestamp(integer0);
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class3, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      String string0 = "5Enm*,n>";
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "5Enm*,n>", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      ClassLoader.getSystemClassLoader();
      stackOverflowError0.printStackTrace();
      Class<Date> class0 = Date.class;
      TypeUtils.getClassFromMapping("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.castToJavaBean((Object) null, class0);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getParserFeatures(class0);
      String string0 = "/:,";
      TypeUtils.isNumber("/:,");
      TypeUtils.isNumber("/:,");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("/:,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : /:,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Field[] fieldArray0 = new Field[0];
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      Byte byte0 = new Byte((byte)107);
      TypeUtils.castToSqlTime(byte0);
      String string0 = "wait";
      int[] intArray0 = new int[7];
      intArray0[3] = 3442;
      intArray0[4] = 3442;
      // Undeclared exception!
      try { 
        Charset.forName("agdM>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // agdM>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      indexOutOfBoundsException0.printStackTrace();
      TypeUtils.isHibernateInitialized(indexOutOfBoundsException0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "(C)F", fieldArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(indexOutOfBoundsException0);
      sQLTransientConnectionException0.addSuppressed(indexOutOfBoundsException0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TypeUtils.castToByte((Object) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getRawClass(class1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      Class<?> class0 = null;
      SQLDataException sQLDataException0 = new SQLDataException("is", ", fieldName ");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLDataException0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass((String) null, classLoader0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-0^uQ Fh*");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass((Type) class0);
      TypeUtils.getRawClass(class0);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.isProxy(class1);
      TypeUtils.getRawClass(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Float> class2 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class2, concurrentHashMap0, false, propertyNamingStrategy0);
      String string0 = "8xae#0J?F~U";
      TypeUtils.isNumber("8xae#0J?F~U");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "k &m(`l!v<Xy";
      TypeUtils.isNumber("k &m(`l!v<Xy");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToFloat((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getClass((Type) class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      ClassLoader.getSystemClassLoader();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.toLocale("J");
      ThreadGroup threadGroup0 = new ThreadGroup("thenComparing");
      threadGroup0.checkAccess();
      MockThread mockThread1 = new MockThread(threadGroup0, "ed^K9nEXsrsWBk:vax");
      MockThread mockThread2 = new MockThread(mockThread0);
      mockThread2.getContextClassLoader();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Collator> class0 = Collator.class;
      parserConfig0.getDeserializer((Type) class0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class1 = String.class;
      classArray0[0] = class1;
      Class<String> class2 = String.class;
      classArray0[1] = class2;
      Class<String> class3 = String.class;
      classArray0[2] = class3;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      InstantiationException instantiationException0 = new InstantiationException((String) null);
      instantiationException0.fillInStackTrace();
      Class<AtomicLong> class4 = AtomicLong.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationException0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockThread mockThread0 = new MockThread("to");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      linkedHashMap0.put("XO1xNr%^D", illegalMonitorStateException0);
      linkedHashMap0.entrySet();
      LinkedHashMap<Date, TimeDeserializer> linkedHashMap1 = new LinkedHashMap<Date, TimeDeserializer>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Boolean boolean0 = new Boolean("Ljava/lang/Object;Ljava/lang/Object;I)V");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.toLocale("o");
      JSONObject jSONObject0 = new JSONObject(true);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.compatibleWithJavaBean = true;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ClassLoader> class0 = ClassLoader.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      Class<FieldInfo> class1 = FieldInfo.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      String string0 = "f&j\"# MK=G";
      TypeUtils.toLocale("f&j\"# MK=G");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      Class<Annotation> class0 = Annotation.class;
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<Double> class3 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class2);
      TypeUtils.getGenericParamType(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(type0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      mockThread1.getContextClassLoader();
      MockThread mockThread2 = new MockThread(" S @fi");
      MockThread mockThread3 = new MockThread();
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread1, "(Ljava/lang/Object;Ljava/lang/Object;)");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getClass(type1);
      Class<?> class4 = TypeUtils.getClass(type0);
      TypeUtils.getRawClass(class4);
      mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Class<SQLException> class5 = SQLException.class;
      TypeUtils.getAnnotation((Class<?>) class5, class2);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "(Ljava/lang/Object;Ljava/lang/Object;)", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      locale0.hasExtensions();
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : ko_KR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToShort((Object) null);
      String string0 = "isread";
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("isread");
      negativeArraySizeException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NegativeArraySizeException: isread
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("]'x[*kf", false);
      TypeUtils.loadClass("]'x[*kf", classLoader1, true);
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader1.setClassAssertionStatus("j", false);
      classLoader1.setPackageAssertionStatus("getEndInclusive", false);
      TypeUtils.isGenericParamType((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.initJavaBeanDeserializers((Class<?>[]) null);
      Class<AtomicLong> class0 = AtomicLong.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getEndInclusive", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Point point0 = new Point(27, (-2373));
      Point point1 = new Point();
      point0.setLocation(point1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      MockThread mockThread2 = new MockThread("uqXii:@WcP]S8s");
      MockThread mockThread3 = new MockThread();
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread4 = new MockThread((ThreadGroup) null, thread0, " S @fi");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getRawClass(class0);
      mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) optionalCodec0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockThread mockThread0 = new MockThread("]'x[*kf");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      linkedHashMap0.put("", "]'x[*kf");
      SQLDataException sQLDataException0 = new SQLDataException("can not cast to : ", "]o:ufgwBri$[Xry=", 460);
      TypeUtils typeUtils0 = new TypeUtils();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.clearClassMapping();
      JSONObject jSONObject0 = new JSONObject(244, true);
      jSONObject0.getJSONObject("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("]'x[*kf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]'x[*kf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Map<String, String> map0 = null;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.isPath(class0);
      String string0 = "getDeclm&aOingClass";
      TypeUtils.fnv1a_64_lower("getDeclm&aOingClass");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLDataException> class1 = SQLDataException.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isKotlin(class2);
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = '+';
      charArray0[1] = 'b';
      charArray0[2] = '@';
      charArray0[3] = '';
      charArray0[4] = 'a';
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(charArray0, (-1147), parserConfig0, (-2063));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Point point0 = new Point();
      Point point1 = new Point();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("[boolean");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("country", "org.springframework.cglib.proxy.Factory");
      Long long0 = new Long(0);
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("[boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockThread mockThread0 = new MockThread("to");
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Point point0 = new Point((-1932735281), (-1932735281));
      Point point1 = new Point();
      point1.setLocation(point0);
      Point point2 = new Point(38, (-1932735281));
      point2.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeAccept", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "can not cast to : ", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fastjson.parser.autoTypeSupport", "can not cast to : ", sQLTransientConnectionException0);
      // Undeclared exception!
      TypeUtils.cast((Object) sQLNonTransientConnectionException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      Class<?> class0 = TypeUtils.loadClass("org.evosuite.runtime.mock.StaticReplacementMock", classLoader0, false);
      Class<InternalError> class1 = InternalError.class;
      classLoader0.setPackageAssertionStatus("%1D?BjL<mzXNI*F9NK", false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("%1D?BjL<mzXNI*F9NK", hashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.evosuite.runtime.mock.StaticReplacementMock");
      FieldInfo fieldInfo0 = new FieldInfo("org.evosuite.runtime.mock.StaticReplacementMock", (Class<?>) null, class1, class0, (Field) null, 14, 14, 65);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      Class<InternalError> class2 = InternalError.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TypeUtils.loadClass("org.evosuite.runtime.mock.StaticReplacementMock");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Function<String, SQLTimeoutException> function0 = (Function<String, SQLTimeoutException>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, SQLTimeoutException, SQLTimeoutException> biFunction0 = (BiFunction<Object, SQLTimeoutException, SQLTimeoutException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.fnv1a_64_lower("-0^uQ h*");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("-0^uQ h*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -0^uQ h*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      String string0 = "parse unwrapped field error.";
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Function<String, SQLTimeoutException> function0 = (Function<String, SQLTimeoutException>) mock(Function.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, SQLTimeoutException, SQLTimeoutException> biFunction0 = (BiFunction<Object, SQLTimeoutException, SQLTimeoutException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.fnv1a_64_lower("parse unwrapped field error.");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("parse unwrapped field error.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"parse unwrapped field error.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.toLocale("_k");
      String string0 = "&d^{=AD{;P3'(&v_:";
      ThreadGroup threadGroup0 = new ThreadGroup("&d^{=AD{;P3'(&v_:");
      threadGroup0.checkAccess();
      MockThread mockThread0 = new MockThread(threadGroup0, "*");
      MockThread mockThread1 = new MockThread(mockThread0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Long long0 = new Long(26L);
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = ParserConfig.global;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockIllegalAccessException0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "componentType");
      TypeUtils.loadClass("org.evosuite.runtime.mock.StaticReplacementMock", classLoader0, false);
      Long long0 = new Long(1L);
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      TypeUtils.castToSqlDate((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TypeUtils.castToChar((Object) null);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("fastjson.parser.autoTypeAccept", linkedHashMap0);
      BigInteger bigInteger0 = null;
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Point point0 = new Point((byte)3, 132);
      point0.setLocation(point0);
      point0.clone();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<InternalError> class2 = InternalError.class;
      HashMap<MockGregorianCalendar, NullPointerException> hashMap0 = new HashMap<MockGregorianCalendar, NullPointerException>();
      ParserConfig.getGlobalInstance();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<GridBagConstraints> class3 = GridBagConstraints.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class0, class3, class1, (Field) null, 132, (byte)66, (-1169));
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(fieldInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.createCollection(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      LinkedHashMap<Date, TimeDeserializer> linkedHashMap0 = new LinkedHashMap<Date, TimeDeserializer>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Boolean boolean0 = new Boolean("org.evosuite.runtime.mock.StaticReplacementMock");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      TypeUtils.toLocale("org.evosuite.runtime.mock.StaticReplacementMock");
      JSONObject jSONObject0 = new JSONObject(false);
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = new Type[8];
      Class<IllegalStateException> class0 = IllegalStateException.class;
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", linkedHashMap1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Point point0 = new Point(24, 24);
      point0.setLocation((double) (-430), 0.0);
      ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      Class<Date> class2 = Date.class;
      TypeUtils.isKotlin(class2);
      MockDate mockDate0 = new MockDate(115, (-430), 6, 3089, (-430));
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      System.setCurrentTimeMillis(58L);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("SUPPRESSED_CAPTION", "$NHE;`J>t7");
      Long long0 = new Long((-1L));
      TreeMap<Boolean, Integer> treeMap0 = new TreeMap<Boolean, Integer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "componentType");
      Class<?> class0 = TypeUtils.loadClass("org.evosuite.runtime.mock.StaticReplacementMock", classLoader0, false);
      Class<InternalError> class1 = InternalError.class;
      classLoader0.setPackageAssertionStatus("%1D?BjL<mzXNI*F9NK", false);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("%1D?BjL<mzXNI*F9NK", hashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.evosuite.runtime.mock.StaticReplacementMock");
      FieldInfo fieldInfo0 = new FieldInfo("org.evosuite.runtime.mock.StaticReplacementMock", (Class<?>) null, class1, class0, (Field) null, 14, 14, 65);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      Class<InternalError> class2 = InternalError.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      TypeUtils.loadClass("org.evosuite.runtime.mock.StaticReplacementMock");
      TypeUtils.getKoltinConstructorParameters(class2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Locale locale0 = Locale.ITALY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      SQLWarning sQLWarning0 = new SQLWarning("kJjM+_on9\"2", "xjT{aB`\"zEV+pM^d", (-1935721954));
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLWarning0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLWarning: kJjM+_on9\"2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      LinkedHashMap<Date, TimeDeserializer> linkedHashMap0 = new LinkedHashMap<Date, TimeDeserializer>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getRawClass(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("getgetRoundingMode");
      TypeUtils.fnv1a_64("org.evosuite.runtime.mock.StaticReplacementMock");
      TypeUtils.fnv1a_64_lower("u_xcN&;aD6 ^M\"");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("u_xcN&;aD6 ^M\"");
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "c ", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      TypeUtils.getClass((Type) class2);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(map0);
      TypeUtils.getSerializeFeatures(class1);
      HashMap<MockGregorianCalendar, NullPointerException> hashMap0 = new HashMap<MockGregorianCalendar, NullPointerException>();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException(",");
      hashMap0.getOrDefault(mockJapaneseDate0, mockNullPointerException0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@70677aaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
