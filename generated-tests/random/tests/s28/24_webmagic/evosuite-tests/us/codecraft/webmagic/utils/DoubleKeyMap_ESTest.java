/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 12:53:26 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Integer, Integer> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer((-1689));
      doubleKeyMap0.put(map0, "[5w~LLlC'k", (Object) integer0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Map<String, Object> map1 = doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Integer integer0 = new Integer(1753);
      String string0 = doubleKeyMap0.put((Object) integer0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Object>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, Integer>((Map<Integer, Map<Map<Object, Object>, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Object, Object>>();
      doubleKeyMap0.put((Integer) null, "X8.H8]TN", (Map<Object, Object>) null);
      Map<Object, Object> map0 = doubleKeyMap0.remove((Integer) null, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, Integer>>();
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = doubleKeyMap0.remove((String) null, (Map<Integer, String>) hashMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(1633);
      doubleKeyMap0.put("", "", integer0);
      Integer integer1 = doubleKeyMap0.remove("", "");
      assertEquals(1633, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Integer, Integer> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer((-1689));
      doubleKeyMap0.put(map0, "[5w~LLlC'k", (Object) integer0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, "", (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = doubleKeyMap0.get("", "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(1633);
      doubleKeyMap0.put("", "", integer0);
      Integer integer1 = doubleKeyMap0.get("", "");
      assertEquals(1633, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, HashMap<Integer, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, HashMap<Integer, Map<Object, Object>>>();
      Map<HashMap<Map<Object, Object>, String>, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<Object, Object>, String>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<Object, Object>, String>, String, Integer>(map0);
      HashMap<Map<Object, Object>, String> hashMap0 = new HashMap<Map<Object, Object>, String>();
      Map<String, Integer> map1 = doubleKeyMap1.get(hashMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Integer, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Integer, Map<Object, Object>>>((Map<Integer, Map<Integer, Map<Integer, Map<Object, Object>>>>) null);
      Integer integer0 = new Integer((-1));
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      doubleKeyMap0.put(integer0, integer0, (Map<Integer, Map<Object, Object>>) hashMap0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.remove(integer0, integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Integer, Map<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Integer, Map<Object, Object>>>((Map<Integer, Map<Integer, Map<Integer, Map<Object, Object>>>>) null);
      Integer integer0 = new Integer((-1));
      Map<Integer, Map<Integer, Map<Object, Object>>> map0 = doubleKeyMap0.remove(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, HashMap<Object, Integer>>();
      Map<HashMap<String, String>, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }
}
