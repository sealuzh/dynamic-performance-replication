/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:27:12 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Pipe;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.newTimeoutException(mockIOException0);
      Buffer buffer0 = new Buffer();
      Source source0 = asyncTimeout0.source(buffer0);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Timeout timeout0 = asyncTimeout0.clearDeadline();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      asyncTimeout0.timeout(1029L, timeUnit0);
      asyncTimeout0.exit(false);
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime((long) 0);
      AsyncTimeout.head.enter();
      asyncTimeout1.sink((Sink) null);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout1.exit(iOException0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime((long) 0);
      AsyncTimeout.head.enter();
      asyncTimeout1.sink((Sink) null);
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8R\"MV{");
      asyncTimeout0.deadlineNanoTime((long) 0);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      asyncTimeout0.sink((Sink) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime((long) 0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.exit(iOException0);
      asyncTimeout0.exit((IOException) interruptedIOException0);
      asyncTimeout1.enter();
      asyncTimeout0.exit(true);
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout1.newTimeoutException(iOException0);
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      asyncTimeout2.deadlineNanoTime((long) 0);
      asyncTimeout2.exit((IOException) interruptedIOException1);
      asyncTimeout0.enter();
      asyncTimeout0.exit(true);
      asyncTimeout2.sink((Sink) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime((long) 0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout1.timeout(60000000000L, timeUnit0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.exit(iOException0);
      asyncTimeout0.exit((IOException) interruptedIOException0);
      asyncTimeout0.enter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime((long) 0);
      AsyncTimeout.head.enter();
      asyncTimeout1.sink((Sink) null);
      asyncTimeout0.deadlineNanoTime();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.deadlineNanoTime((long) 0);
      AsyncTimeout.head.enter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException((Throwable) null);
      MockIOException mockIOException2 = new MockIOException((String) null, mockIOException1);
      MockIOException mockIOException3 = new MockIOException();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.source((Source) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      asyncTimeout1.deadlineNanoTime(9223372036854775807L);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout1.enter();
      asyncTimeout0.sink((Sink) null);
      asyncTimeout1.deadlineNanoTime();
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
