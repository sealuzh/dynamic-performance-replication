/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:17:57 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3970L);
      int int0 = rationalNumber0.intValue();
      assertEquals(3970, int0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("3970", string0);
      assertEquals(3970.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483653L);
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-464L), (-464L));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-537.5));
      long long0 = rationalNumber0.longValue();
      assertEquals((-537.5), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-537L), long0);
      assertEquals(2, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(6.601504243508019E-9);
      assertEquals(6.6015042306367E-9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(151480627, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(6247.6);
      assertEquals(31238, rationalNumber1.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(4525, 4525);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(3.400000000510772E-4);
      String string0 = rationalNumber1.toString();
      assertEquals("4/11765 (0)", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      assertEquals((short) (-1), rationalNumber2.shortValue());
      assertEquals((-1.0), rationalNumber2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1431655765, 346);
      String string0 = rationalNumber0.toString();
      assertEquals("1431655765/346 (4,137,733.425)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("-1", string0);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-873), (-4472));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0.195", string0);
      assertEquals(0.19521466905187834, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1099L), 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.003257570730635);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1.747412170516327E-8);
      assertEquals(1.7474121655848466E-8, rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("5", string0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("5", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836688017054E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals("2,147,483,647", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-1852L), (-1852L));
      rationalNumber0.negate();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      assertEquals((short) (-1), rationalNumber3.shortValue());
      
      int int0 = rationalNumber2.intValue();
      assertEquals(1, int0);
      assertEquals(1, rationalNumber2.divisor);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(224L, 2147483653L);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0430813E-7F, float0, 0.01F);
      assertEquals(536870913, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483653L, 2147483653L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483653L, 1);
      assertEquals((-2147483643L), rationalNumber1.longValue());
      assertEquals(1, rationalNumber1.divisor);
      
      rationalNumber0.longValue();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(0L, 2147483653L);
      String string1 = rationalNumber2.toString();
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483653L, 2147483653L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483653L, 1);
      rationalNumber0.toString();
      rationalNumber0.intValue();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(0.10435575426326509);
      rationalNumber3.negate();
      RationalNumber.factoryMethod(1L, (-1591L));
      RationalNumber.valueOf((-2147483643));
      RationalNumber.valueOf(1);
      RationalNumber.valueOf(1);
      RationalNumber rationalNumber4 = new RationalNumber((-2147483643), 1);
      RationalNumber rationalNumber5 = new RationalNumber(7, (-2147483643));
      rationalNumber5.negate();
      rationalNumber1.toString();
      rationalNumber2.toString();
      RationalNumber.factoryMethod((-1L), (-2147483649L));
      RationalNumber rationalNumber6 = new RationalNumber(1, (-2147483643));
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483649L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483649, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
