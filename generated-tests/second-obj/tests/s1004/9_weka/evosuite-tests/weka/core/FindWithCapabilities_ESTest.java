/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:11:52 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.MinkowskiDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.Range;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("H4;t,>5+!YdKCl");
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("%q");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte byte0 = (byte) (-6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("%q");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("%q");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("%q");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[1] = (byte)16;
      byteArray0[5] = (byte)11;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-34);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities1.m_Filename = "4FgoQ?a!vBH/";
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      vector0.add("4FgoQ?a!vBH/");
      Vector<String> vector1 = findWithCapabilities0.m_Matches;
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      vector0.remove((Object) optionHandlerJavadoc0);
      String[] stringArray0 = checkOptionHandler0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#fnC0";
      stringArray0[1] = "\nFRE?GEIQ3?{|ta";
      stringArray0[2] = "::qp?:Om(%ejy.iMgM";
      stringArray0[3] = "PM_mxBiP";
      stringArray0[4] = "-not-date-class";
      stringArray0[5] = "q78{#T ?|<|H";
      stringArray0[6] = "z\"5]";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[5] = (byte) (-31);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities.getOtherCapabilities();
      findWithCapabilities0.getOptions();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Num";
      stringArray0[2] = "P";
      stringArray0[3] = "-missing-class-values";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.find();
      boolean boolean0 = ClassCache.VERBOSE;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      capabilities0.enableAll();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities1.getOptions();
      String string0 = "\tMust handle missing class values.";
      findWithCapabilities0.setClassIndex("\tMust handle missing class values.");
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      vector0.add("weka/core/Capabilities.props");
      vector0.addElement("\tMust handle missing class values.");
      vector0.add("\">G");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)92;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-3);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      System.setCurrentTimeMillis(0L);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      testInstances0.m_Relation = "";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.enableAll();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities1.getOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = capabilities0.m_MinimumNumberInstancesTest;
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      String[] stringArray0 = new String[0];
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.m_Test = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray1);
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-31);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String string0 = "OM@F&";
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      capabilities0.disableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[1] = (byte)19;
      byteArray0[6] = (byte)19;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enable(capabilities_Capability1);
      LinkedList<GlobalInfoJavadoc> linkedList0 = new LinkedList<GlobalInfoJavadoc>();
      vector0.retainAll(linkedList0);
      findWithCapabilities0.listOptions();
      vector0.add("\"");
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      ListOptions listOptions0 = new ListOptions();
      vector0.remove((Object) listOptions0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      String[] stringArray0 = new String[0];
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      FindWithCapabilities.main(stringArray1);
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      capabilities1.enable(capabilities_Capability1);
      vector0.add("weka/core/Capabilities.props");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities1.listOptions();
      vector0.add((String) null);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      findWithCapabilities0.m_Matches.remove((Object) optionHandlerJavadoc0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-31);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.enable(capabilities_Capability0);
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities1.listOptions();
      vector0.add((String) null);
      findWithCapabilities0.m_Superclass = "M_mxBi";
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      boolean boolean0 = capabilities0.m_MissingClassValuesTest;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      capabilities0.enableAllClasses();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      capabilities0.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      vector0.add("(,");
      vector0.add("=bdip");
      Capabilities capabilities2 = new Capabilities(findWithCapabilities2);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.enableNot(capabilities_Capability3);
      capabilities0.enable(capabilities_Capability2);
      vector0.add("ZCx@W");
      capabilities2.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      Random.setNextRandom(892);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities1.setNotCapabilities(capabilities3);
      findWithCapabilities1.getMisses();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities4 = findWithCapabilities2.getNotCapabilities();
      assertFalse(capabilities4.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nominal-atts";
      stringArray0[1] = "integer";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.setFilename("-generic");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      vector0.add("-generic");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-62);
      byteArray0[3] = (byte)115;
      byteArray0[1] = (byte)34;
      byteArray0[6] = (byte) (-30);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities1.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      vector0.add("ywmcnJO)");
      capabilities0.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector0.remove((Object) null);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities2.enable(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      vector0.remove((Object) findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)115;
      byteArray0[1] = (byte)34;
      byteArray0[6] = (byte) (-34);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities1.listOptions();
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      findWithCapabilities0.m_Matches.remove((Object) minkowskiDistance0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte) (-31);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities1.listOptions();
      vector0.add((String) null);
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      findWithCapabilities1.m_NotCapabilities = capabilities0;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.enable(capabilities_Capability1);
      Vector<String> vector1 = new Vector<String>();
      vector1.add("M_mxBiP");
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector0.remove((Object) capabilities_Capability0);
      boolean boolean0 = capabilities2.m_MissingClassValuesTest;
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      byteArray0[1] = (byte)19;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Range range0 = new Range("");
      Vector vector0 = range0.m_RangeStrings;
      vector0.remove((Object) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[1] = (byte)19;
      byteArray0[6] = (byte) (-51);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.enable(capabilities_Capability0);
      vector0.add("Is@Npz`");
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      vector0.remove((Object) globalInfoJavadoc0);
      boolean boolean0 = capabilities1.m_MissingClassValuesTest;
      findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)99;
      byteArray0[6] = (byte) (-31);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(L'IY";
      stringArray0[1] = "-not-relational-atts";
      stringArray0[2] = "-t <file>";
      stringArray0[3] = "i#";
      stringArray0[4] = "Unknown attribute type '";
      stringArray0[5] = "5Z/}{y'Af";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)16;
      byteArray0[5] = (byte)0;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.listOptions();
      vector0.add((String) null);
      vector0.add((String) null);
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Matches.remove((Object) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      capabilities1.capabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("-1");
      Range range0 = new Range();
      int[] intArray0 = new int[7];
      intArray0[0] = 87;
      intArray0[1] = (-233);
      intArray0[2] = 1130;
      intArray0[3] = 2150;
      intArray0[4] = 111;
      intArray0[5] = 79;
      intArray0[6] = (-1567);
      Range.indicesToRangeList(intArray0);
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities0.getOptions();
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      findWithCapabilities3.getHandler();
      // Undeclared exception!
      try { 
        range0.isInRange((-1969330625));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)16;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-31);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Matches.retainAll(vector0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.m_Matches.add((String) null);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      capabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      vector0.remove((Object) minkowskiDistance0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "`e-";
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ListOptions listOptions0 = new ListOptions();
      Vector<String> vector0 = new Vector<String>();
      vector0.add(";N#H#~y4w7v#`8r3;");
      vector0.add("OcQu<N=@ZN>5S(");
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      hashtable0.getOrDefault(vector0, vector1);
      hashtable0.getOrDefault(listOptions0, vector0);
      ClassDiscovery.m_Cache = hashtable0;
      stringArray0[1] = "-not-no-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)0;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)16;
      byteArray0[5] = (byte)0;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities0.listOptions();
      vector0.add((String) null);
      vector0.add((String) null);
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.enable(capabilities_Capability0);
      vector0.add("S1(dbaxMD~*&Ha6");
      findWithCapabilities0.m_NotCapabilities.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector0.add("S1(dbaxMD~*&Ha6");
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte)16;
      byteArray0[4] = (byte)116;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      vector0.retainAll(findWithCapabilities0.m_Matches);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.enable(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      TestInstances.forCapabilities(capabilities1);
      Object object0 = new Object();
      vector0.remove(object0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)116;
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-31);
      byteArray0[3] = (byte)116;
      byteArray0[1] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      vector0.add((String) null);
      findWithCapabilities0.m_Superclass = "M_mxBiP";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_NotCapabilities.enable(capabilities_Capability1);
      vector0.add("M_mxBiP");
      findWithCapabilities0.m_Matches.add("weka/core/Capabilities.props");
      capabilities0.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Range range0 = new Range();
      Vector vector1 = range0.m_RangeStrings;
      findWithCapabilities0.m_Matches.remove((Object) null);
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }
}
