/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:12:02 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-2119);
      intArray0[0] = (-2119);
      int int1 = (-529556517);
      intArray0[1] = (-529556517);
      int int2 = 390;
      intArray0[2] = 390;
      int int3 = (-246);
      intArray0[3] = (-246);
      int int4 = 66639;
      intArray0[4] = 66639;
      intArray0[5] = 69688;
      intArray0[6] = (-570);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2119), (-529556517), 390, (-246), 66639, 69688, (-570)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-311);
      intArray1[1] = 2403;
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1114111;
      intArray0[1] = 1114111;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1114111, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = (-3540);
      CharClass charClass2 = charClass0.appendRange(1114111, (-3540));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int int1 = (-1905);
      CharClass charClass3 = charClass2.appendFoldedRange((-1905), 1114111);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3540);
      CharClass charClass4 = charClass0.appendNegatedClass(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-3540), 0}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = (-3540);
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      assertNotNull(charClass5);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-3540), (-3540)}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[2][7];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1183;
      int int1 = (-612);
      CharClass charClass1 = charClass0.appendLiteral(1183, (-612));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[0x49f]", string0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.negateClass();
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1183, 1183}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      
      CharClass charClass5 = charClass2.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1183, 1183}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass5.appendNegatedClass(intArray0);
      assertNotNull(charClass7);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1183, 1183}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      
      int[][] intArray1 = new int[1][4];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-5);
      intArray0[1] = (-4456);
      intArray0[2] = 1791;
      intArray0[3] = (-2200);
      intArray0[4] = 6106;
      intArray0[5] = 1370;
      intArray0[6] = 7951;
      intArray0[7] = 621;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2200));
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(621, (-1627));
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 7951;
      intArray2[1] = 6106;
      intArray2[2] = (-5);
      intArray2[3] = (-1627);
      intArray2[4] = 1791;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-254253));
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass6 = charClass5.appendRange(6106, 660);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-5), (-4456), 1791, (-2200), 6106, 1370, 7951, 621}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 128067;
      intArray0[1] = 2642;
      intArray0[2] = 977;
      intArray0[3] = 2391;
      intArray0[4] = 4;
      intArray0[5] = (-1261);
      intArray0[6] = 409;
      intArray0[7] = 1543;
      intArray0[8] = 3244;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {128067, 2642, 977, 2391, 4, (-1261), 409, 1543, 3244}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {128067, 2642, 977, 2391, 4, (-1261), 409, 1543, 3244}, intArray0);
      assertArrayEquals(new int[] {128067, 2642, 977, 2391, 4, (-1261), 409, 1543, 3244}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 65;
      intArray0[1] = 1812;
      intArray0[2] = 1537;
      intArray0[3] = (-1384);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {65, 1812, 1537, (-1384)}, intArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1384);
      intArray1[1] = 1812;
      intArray1[2] = (-1384);
      intArray1[3] = (-1384);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray1);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-1384), 1812, 1537, (-1384)}, intArray0);
      assertArrayEquals(new int[] {(-1384), 1812, (-1384), (-1384)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1114111);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral((-819), 943);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[7];
      intArray1[0] = 943;
      intArray1[1] = 1114111;
      intArray1[2] = 1114111;
      intArray1[3] = (-819);
      intArray1[4] = (-48);
      intArray1[5] = 1114111;
      intArray1[6] = 943;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 943;
      intArray2[1] = (-819);
      intArray2[2] = (-819);
      intArray0[1] = intArray2;
      CharClass charClass3 = charClass2.appendTable(intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1114111;
      CharClass charClass4 = charClass1.appendLiteral(1114111, 3856);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      intArray3[1] = 93;
      CharClass charClass5 = charClass1.appendClassWithSign(intArray3, 5);
      assertNotNull(charClass5);
      assertEquals(2, intArray3.length);
      assertArrayEquals(new int[] {1114111, 93}, intArray3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 1604;
      intArray4[1] = 5;
      intArray4[2] = 3856;
      String string0 = CharClass.charClassToString(intArray4, (-3822));
      assertNotNull(string0);
      assertEquals(3, intArray4.length);
      assertArrayEquals(new int[] {1604, 5, 3856}, intArray4);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1464279);
      int int0 = 1648;
      intArray0[1] = 1648;
      intArray0[2] = 1;
      intArray0[3] = (-1454375);
      intArray0[4] = 6070;
      String string0 = CharClass.charClassToString(intArray0, (-1465516));
      assertNotNull(string0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1464279), 1648, 1, (-1454375), 6070}, intArray0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1464279), 1648, 1, (-1454375), 6070}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1456851), (-544));
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1464279), 1648, 1, (-1454375), 6070}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 91;
      intArray0[1] = 66639;
      intArray0[2] = 1041;
      intArray0[3] = 2045;
      intArray0[4] = 4017;
      intArray0[5] = 4015;
      intArray0[6] = 91;
      intArray0[7] = 4041;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2045;
      intArray2[1] = 91;
      intArray2[2] = 4015;
      intArray2[3] = 3135;
      intArray2[4] = 4041;
      intArray2[5] = 91;
      intArray2[6] = 1041;
      intArray2[7] = 91;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass3 = charClass2.appendLiteral(2045, 4015);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertFalse(intArray0.equals((Object)intArray2));
      
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray3);
      assertNotNull(charClass5);
      assertEquals(0, intArray3.length);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertEquals(0, intArray3.length);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {91, 66639, 1041, 2045, 4017, 4015, 91, 4041}, intArray0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 1160;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.cleanClass();
      assertArrayEquals(new int[] {1, 3, 1161, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1492;
      intArray0[2] = (-154);
      intArray0[3] = (-1614);
      intArray0[4] = 64;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = 1492;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = (-154);
      intArray2[4] = 0;
      intArray2[5] = 64;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-730);
      intArray0[1] = 0;
      intArray0[2] = (-344);
      intArray0[3] = 754;
      intArray0[4] = 0;
      intArray0[5] = (-740);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.appendRange((-740), 754);
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      charClass2.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass4.appendRange(0, 4031);
      charClass2.appendFoldedRange(43020, (-344));
      int[][] intArray1 = new int[5][9];
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 2442;
      intArray0[0] = 2442;
      intArray0[1] = (-2687);
      int int1 = 561;
      intArray0[2] = 561;
      intArray0[3] = (-2599);
      int int2 = (-300);
      CharClass.charClassToString(intArray0, (-300));
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange((-2599), 512);
      charClass1.appendRange((-300), (-300));
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[7];
      intArray2[0] = 2;
      intArray2[1] = (-2687);
      intArray2[2] = (-2687);
      intArray2[3] = (-300);
      intArray2[4] = 3841;
      intArray2[5] = 561;
      intArray2[6] = (-300);
      intArray1[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = (-2599);
      intArray3[1] = 1610;
      intArray3[2] = (-126);
      intArray3[3] = 66639;
      intArray3[4] = (-300);
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1546));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 2677;
      int int0 = 119885;
      intArray1[2] = 119885;
      int int1 = 1456;
      intArray1[3] = 1456;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray1);
      charClass2.negateClass();
      CharClass charClass3 = charClass1.appendFoldedRange(2, 1783);
      CharClass charClass4 = charClass3.appendClass(intArray1);
      CharClass charClass5 = charClass3.appendTable(intArray0);
      CharClass charClass6 = charClass5.appendLiteral(2677, 1456);
      int int2 = 1805;
      CharClass charClass7 = charClass6.appendClassWithSign(intArray1, 1805);
      int[] intArray2 = new int[1];
      charClass4.cleanClass();
      intArray2[0] = 1805;
      // Undeclared exception!
      try { 
        charClass7.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1781;
      intArray0[0] = 1781;
      int int1 = 3711;
      intArray0[1] = 3711;
      int int2 = 1804;
      intArray0[2] = 1804;
      intArray0[3] = 2;
      intArray0[4] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      int int3 = (-747);
      CharClass charClass1 = charClass0.appendRange(1781, (-747));
      CharClass charClass2 = charClass1.negateClass();
      // Undeclared exception!
      try { 
        charClass2.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 66639;
      intArray0[1] = 8115;
      intArray0[2] = (-84);
      CharClass.charClassToString(intArray0, (-1243));
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1809;
      intArray0[1] = 64279;
      intArray0[2] = 1016;
      intArray0[3] = (-3218);
      intArray0[4] = (-621);
      intArray0[5] = 4;
      intArray0[6] = 130;
      intArray0[7] = (-1618);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = (-3218);
      intArray2[1] = (-3218);
      intArray2[2] = 1809;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[7];
      intArray3[0] = (-3218);
      intArray3[1] = (-3218);
      intArray3[2] = 1016;
      intArray3[3] = (-621);
      intArray3[4] = (-3218);
      intArray3[5] = 1809;
      intArray3[6] = 1016;
      intArray1[5] = intArray3;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 4);
      CharClass charClass2 = charClass1.appendFoldedRange((-717), (-1618));
      charClass2.toString();
      assertArrayEquals(new int[] {1809, 64279, 1016, (-3218), (-621), 4, 130, (-1618)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      CharClass charClass1 = charClass0.appendFoldedRange(1965, 1790);
      intArray0[1] = 4;
      charClass0.appendClassWithSign(intArray0, 120362);
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 1790;
      intArray2[1] = 1965;
      intArray2[2] = 120362;
      intArray2[3] = 1790;
      intArray2[4] = 1;
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
