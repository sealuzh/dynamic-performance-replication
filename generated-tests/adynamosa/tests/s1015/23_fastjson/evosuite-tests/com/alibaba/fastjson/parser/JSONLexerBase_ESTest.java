/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 21:46:53 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      JSONScanner jSONScanner0 = new JSONScanner("[LML q:gE6uio'!d1W", 42);
      jSONScanner0.scanStringArray(hashSet0, 'E');
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}2");
      JSONScanner jSONScanner1 = new JSONScanner("}2");
      jSONScanner1.close();
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner1.nextIdent();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      long long1 = jSONScanner1.longValue();
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-W$;%IUj#cJ", 78);
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('t');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1M[0>%`$s6,+)la", (-2298));
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'w';
      charArray0[2] = 'a';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.numberString();
      SymbolTable symbolTable0 = new SymbolTable(63);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-2298), (-1401), 2, symbolTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nQ$'");
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdFQu");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 72);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(78);
      JSONScanner jSONScanner0 = new JSONScanner("Cs~[$]pf)9|PC6", 3053);
      jSONScanner0.scanLong('7');
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(3053, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nQ$'");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fa)lse");
      JSONScanner jSONScanner1 = new JSONScanner("fa)lse");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oracle.sql.");
      jSONScanner0.nextIdent();
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'D';
      charArray0[2] = 'V';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 7, json : oracle.sql.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]Cz~VesG<)W<");
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "',3IoyN";
      JSONScanner jSONScanner0 = new JSONScanner("',3IoyN");
      jSONScanner0.close();
      int int0 = 1872;
      int int1 = 13;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "false";
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.matchStat = 57;
      char[] charArray0 = new char[2];
      int int0 = (-3519);
      jSONScanner0.np = (-3519);
      charArray0[0] = 'g';
      jSONScanner0.scanFalse();
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = JSONLexer.ARRAY;
      jSONScanner0.isEOF();
      jSONScanner0.scanString('$');
      jSONScanner0.isEnabled(2);
      jSONScanner0.info();
      jSONScanner0.charAt(1246);
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A%fYPjYi0abe", 11);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "3;S\\b";
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      SymbolTable symbolTable0 = new SymbolTable(3164);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nQ$'");
      jSONScanner0.close();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",nSbau'+OaR");
      jSONScanner0.scanBoolean('a');
      jSONScanner0.close();
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NotWriteDefaultValue");
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // NotWriteDefaultValue
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 66;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.np = 66;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0;Y[b)");
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      jSONScanner0.scanFieldDecimal(charArray0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(448);
      jSONScanner0.scanEnum(class0, symbolTable0, '@');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("net.sf.json.JSONNull", (-1517));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('`');
      jSONScanner0.scanDecimal('d');
      jSONScanner0.nextIdent();
      jSONScanner0.scanLong('4');
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-214748364), (-214748364));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'ww~:*NA$R)vd\"6O`");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      jSONReaderScanner0.scanLong(')');
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.stringDefaultValue = "treeset";
      JSONScanner jSONScanner0 = new JSONScanner("treeset", (-2));
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(9");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = JSONLexer.ARRAY;
      jSONScanner0.isEOF();
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N");
      jSONScanner0.nextToken();
      jSONScanner0.decimalValue(true);
      jSONScanner0.intValue();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      jSONScanner0.scanNumber();
      jSONScanner0.isEnabled((-3766));
      jSONScanner0.scanDecimal('v');
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.TypeReference");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[0];
      int int0 = 2;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y`\"zm<e");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner0.stringVal();
      jSONScanner0.scanString();
      int int0 = JSONLexer.NOT_MATCH;
      int int1 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      jSONScanner0.tokenName();
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      SymbolTable symbolTable0 = new SymbolTable(295);
      Locale.forLanguageTag("3;S\b");
      jSONScanner0.scanISO8601DateIfMatch(false);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "I9ylVn&N";
      JSONScanner jSONScanner0 = new JSONScanner("I9ylVn&N");
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.skipWhitespace();
      JSONScanner jSONScanner1 = new JSONScanner("I9ylVn&N");
      jSONScanner1.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ft\"AeVD/GQ(r'");
      char[] charArray0 = new char[1];
      char char0 = '!';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[0] = '!';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0;Y[b)");
      JSONScanner jSONScanner1 = new JSONScanner("sdQuoWEz,?0;Y[b)", 0);
      jSONScanner1.close();
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'n';
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanString('C');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2, 2);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NIC#42,`:&5Rp+04");
      JSONScanner jSONScanner1 = new JSONScanner("FtUw?b~j{,(\")B`0_", (-332));
      jSONScanner1.scanLong('4');
      jSONScanner1.scanNumber();
      assertEquals('t', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-1421);
      JSONScanner jSONScanner0 = new JSONScanner("'nn");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("CCDDH");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDouble(')');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("8Y&Py");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 66;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      String string0 = "SQ*M }C`P!N&&1#n";
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      jSONReaderScanner0.lexError("SQ*M }C`P!N&&1#n", objectArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("SQ*M }C`P!N&&1#n");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0;Y[b)");
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(76);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xp");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. p
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0;Y[b)");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken(9);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"DG#\rv5]clx");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("  ");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'p';
      charArray0[2] = 'i';
      charArray0[3] = '-';
      charArray0[4] = '4';
      charArray0[5] = '+';
      charArray0[6] = 'P';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.isBlankInput();
      Integer integer0 = new Integer(0);
      int int0 = JSONLexer.NOT_MATCH_NAME;
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PQF#", 31);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(31, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0;Y[b)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0Cb)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONLexerBase.isWhitespace('Y');
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      SymbolTable symbolTable0 = new SymbolTable(39);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('S');
      jSONScanner0.scanBoolean('`');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f - ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%qAY3lJ+#ROXq]?>L", 1113);
      jSONScanner0.scanIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.isEnabled((-1758), (-209));
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((char[]) null, 1113, 1113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"DG#Kv5]clx");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Lf");
      jSONScanner0.scanBoolean('$');
      jSONScanner0.close();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.nextIdent();
      jSONScanner0.scanNumber();
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(16);
      JSONScanner jSONScanner1 = new JSONScanner("{");
      jSONScanner1.nextIdent();
      assertEquals(12, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(10);
      jSONScanner0.nextToken();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 66;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}2|t!+.wM[+rBu");
      jSONScanner0.scanNumber();
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"DG#Kv5]clx");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("DisableCheckSpecialChar");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Disab\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sdQuoWEz,?0[b)", (-1084518693));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanString('4');
      jSONReaderScanner0.matchField(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("sdQuoWEz,?0[b)"));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"d`\"zm<e*", 0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDouble('V');
      jSONReaderScanner0.indexOf('\"', 0);
      jSONReaderScanner0.scanLong('@');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1BYPQF#XBjp*N>");
      int int0 = JSONLexer.OBJECT;
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('k');
      assertEquals('Y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('b');
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      jSONScanner0.nextToken();
      jSONScanner0.scanString('P');
      int int0 = JSONLexer.OBJECT;
      int int1 = jSONScanner0.token();
      assertEquals(1, jSONScanner0.pos());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"u`\"zm<e*");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanBoolean('H');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 1pos 0, json : 1PQF#XBjp*N>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"d`\"zm<e*", 1589);
      jSONReaderScanner0.scanBoolean('=');
      jSONReaderScanner0.scanLong(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(12);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '4');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("RXCE } |'o");
      char char0 = 'A';
      jSONScanner0.scanDecimal('A');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - }, info : pos 5, json : RXCE } |'o
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("51PQF#XBjp*N>");
      jSONScanner0.sp = (-235);
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("-+e< /wVW>@fLJgJ_", (-2));
      jSONScanner1.nextToken();
      assertEquals('+', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9eL");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 2, json : 9eL
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.scanBoolean('u');
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.pos();
      assertEquals(1, jSONScanner0.token());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(726057184, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(123, (-1708));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/2}leB");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(18);
      // Undeclared exception!
      try { 
        jSONScanner0.scanEnum(class0, symbolTable0, '9');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanString('C');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1M[0>%`$s6,+)la", (-2298));
      jSONScanner0.close();
      jSONScanner0.np = (-2298);
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      assertEquals(14, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn", (-2067));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nn", (-2068));
      jSONReaderScanner0.scanDouble('.');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('\"', (-1056));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Lf");
      jSONScanner0.scanBoolean('$');
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.nextIdent();
      jSONScanner0.isEOF();
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5");
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",nSbau'+OaR", 5);
      jSONReaderScanner0.next();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ']');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":=o>sJy1JBTW6_");
      jSONReaderScanner0.nextTokenWithColon(1295);
      JSONScanner jSONScanner0 = new JSONScanner(":=o>sJy1JBTW6_", 6181);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONReaderScanner0.tokenName();
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn", (-2067));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fase");
      jSONScanner0.scanBoolean('p');
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";\b", (-2302));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldBoolean(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}2|t!+.wM[>rBu");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
      
      char[] charArray0 = new char[0];
      int int0 = 31;
      jSONScanner0.pos = 31;
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, pos 1, json : B}2|t!+.wM[>rBu
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2160));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.DefaultJSONParser", 70);
      jSONReaderScanner0.scanDouble('D');
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.scanBoolean('D');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.np = 70;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.bytesValue();
      JSONScanner jSONScanner0 = new JSONScanner("H9^8oag3B`", 70);
      char[] charArray1 = new char[2];
      charArray1[0] = 'D';
      charArray1[1] = 'D';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.stringVal();
      jSONReaderScanner0.nextToken(70);
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5TW[y:CR>A^g");
      jSONScanner0.nextToken();
      jSONScanner0.scanFloat('!');
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      System.setCurrentTimeMillis(3730752432285826863L);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.isBlankInput();
      jSONScanner0.close();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = (-3142);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("k3?", (-3142));
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = '.';
      jSONReaderScanner0.scanBoolean('B');
      charArray1[1] = 'z';
      charArray1[2] = 'a';
      char char0 = 'F';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray1, (-3142));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanUUID('M');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-L,ja__{p+,");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanString('l');
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}2|t!+.wM[>rBu");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(3);
      jSONScanner0.scanDouble('<');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanNumber();
      jSONScanner0.scanFalse();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7DAYMZTt=:mG(uqRo");
      int int0 = JSONLexer.NOT_MATCH;
      int int1 = jSONScanner0.intValue();
      assertEquals(0, int1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7DAYMZTt=:mG(uqRo", 1053);
      long long0 = jSONReaderScanner0.scanLong('@');
      assertEquals(7L, long0);
      assertEquals(1053, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '|');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 331);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g-", 83);
      jSONReaderScanner1.scanFieldBoolean(charArray0);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 439;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sp", 439);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "sp";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) null;
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.scanInt('x');
      jSONReaderScanner0.setLocale(locale0);
      objectArray0[3] = (Object) "sp";
      jSONReaderScanner0.lexError((String) null, objectArray0);
      jSONReaderScanner0.getLocale();
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanString('C');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.Period");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 0);
      jSONReaderScanner1.scanStringArray(linkedList0, 'x');
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Period");
      jSONScanner0.nextIdent();
      jSONScanner0.pos = 110;
      jSONScanner0.isRef();
      jSONScanner0.scanDouble('a');
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" YbEG%I|!A");
      jSONScanner0.longValue();
      jSONScanner0.features = 0;
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      Class<Object> class0 = Object.class;
      boolean boolean0 = jSONScanner0.scanBoolean('8');
      assertFalse(boolean0);
      
      jSONScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      long long0 = jSONReaderScanner0.scanLong('E');
      assertEquals(888888L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" YbEG%I|!A");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" YbEG%I|!A");
      jSONReaderScanner0.scanBoolean('o');
      char char0 = 'i';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - Y, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t3gNZ");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      JSONLexerBase.isWhitespace('2');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(89, 89);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 331);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.tokenName();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      boolean boolean0 = jSONScanner0.isEnabled(2435, (-2945));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextIdent();
      Number number0 = jSONScanner0.integerValue();
      assertEquals(69560, number0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}2|t!+.wM[>rBu");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      jSONScanner0.scanDouble('7');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-=w");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.isRef();
      assertEquals('=', jSONScanner0.getCurrent());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.sub_chars(0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}2|t!+.wM[>rBu");
      jSONScanner0.scanString('B');
      jSONScanner0.nextTokenWithChar('B');
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      char char0 = 'A';
      jSONScanner0.scanFloat('A');
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.properties");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = ' ';
      charArray0[2] = 'r';
      charArray0[3] = 'F';
      charArray0[4] = '[';
      charArray0[5] = 'v';
      charArray0[6] = '';
      charArray0[7] = 'Y';
      charArray0[8] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, (-1902));
      char[] charArray1 = new char[8];
      charArray1[0] = 'Y';
      charArray1[1] = 'v';
      charArray1[2] = 'F';
      charArray1[3] = 'd';
      charArray1[4] = 'E';
      charArray1[5] = 'v';
      charArray1[6] = ' ';
      charArray1[7] = '[';
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 44);
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.isEnabled((-1902));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e@'kgZ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.info();
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.bp = (-2193);
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49, 49);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray1 = new char[5];
      charArray1[0] = 'm';
      charArray1[1] = '!';
      charArray1[2] = 'x';
      charArray1[3] = ':';
      charArray1[4] = 'w';
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.next();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined", 0);
      jSONReaderScanner1.scanStringArray(linkedList0, 'n');
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 6286;
      JSONScanner jSONScanner0 = new JSONScanner("y,", 6286);
      jSONScanner0.tokenName();
      JSONScanner jSONScanner1 = new JSONScanner("Unknown");
      char char0 = '|';
      jSONScanner0.scanString('|');
      char char1 = '8';
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 8 - U, info : pos 0, json : Unknown
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = JSONLexerBase.digits;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", 116);
      jSONReaderScanner0.scanBoolean('a');
      jSONReaderScanner0.scanUUID(')');
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2");
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      JSONScanner jSONScanner1 = new JSONScanner("1PQF#XBjp*N>");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.nio.file.Path");
      char char0 = 'j';
      jSONReaderScanner0.scanBoolean('j');
      char char1 = '2';
      jSONReaderScanner0.scanUUID('2');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1159));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^P");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('a');
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9H.N`");
      jSONScanner0.scanDecimal('7');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-2298);
      char[] charArray0 = null;
      JSONLexerBase.isWhitespace('3');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-2298));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Lf");
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.nextIdent();
      Number number0 = jSONScanner0.integerValue();
      assertEquals(334, number0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      jSONScanner0.scanFieldFloatArray(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals(334L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e@'kgZ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 9, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0nn");
      jSONScanner0.tokenName();
      jSONScanner0.scanDecimal('A');
      jSONScanner0.nextIdent();
      assertEquals('n', jSONScanner0.getCurrent());
      
      jSONScanner0.scanInt('A');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5044, 0);
      jSONReaderScanner0.scanUUID('8');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"d`\"zm<e*");
      jSONReaderScanner1.matchStat();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5");
      jSONScanner0.longValue();
      jSONScanner0.scanFloat('`');
      jSONScanner0.nextIdent();
      double double0 = jSONScanner0.scanDouble('`');
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      JSONScanner jSONScanner1 = new JSONScanner("illegal.char");
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '_';
      charArray0[2] = 'N';
      charArray0[3] = '?';
      charArray0[4] = 'N';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner1.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(18, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Wq.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Wq.");
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '}';
      charArray0[3] = 'n';
      charArray0[4] = 'U';
      jSONReaderScanner0.scanLong('R');
      charArray0[5] = '\'';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.getCalendar();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("me");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(55232, 55232);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("19@0>%`$s6x:)la", (-2298));
      jSONScanner0.np = (-2298);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.pos = (-3512);
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanInt('F');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":", 4096);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      jSONReaderScanner0.scanStringArray(hashSet0, '5');
      jSONReaderScanner0.scanUUID('Q');
      int int0 = JSONLexer.OBJECT;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":");
      char char0 = '^';
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanDecimal('^');
      jSONScanner0.nextTokenWithColon();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('Y', '+', 'L', 'L', '+', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("q9q6^8Yk");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.isRef();
      assertEquals('^', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = (-3774);
      JSONScanner jSONScanner0 = new JSONScanner(":");
      jSONScanner0.scanDecimal('d');
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanUUID('V');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2");
      jSONScanner0.scanFloat('}');
      jSONScanner0.nextIdent();
      jSONScanner0.getCurrent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      float float0 = jSONScanner0.floatValue();
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[3] = 'z';
      charArray0[4] = ':';
      charArray0[5] = 't';
      charArray0[6] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.matchField(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      jSONScanner0.scanFloat('!');
      jSONScanner0.nextIdent();
      char char0 = jSONScanner0.getCurrent();
      assertEquals('P', char0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      jSONScanner0.scanFloat('!');
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";\b", (-2298));
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('k');
      assertEquals((-2298), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"L,ja__{p+,");
      jSONScanner0.scanFloat('w');
      JSONScanner jSONScanner1 = new JSONScanner("TZ>I}HEis{[FHt~Y;Br", (-1));
      jSONScanner1.nextIdent();
      assertEquals('>', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanDecimal('J');
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'j';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      jSONScanner0.matchField2(charArray0);
      assertEquals(';', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0?`$s#x:)la");
      jSONScanner0.scanDecimal('J');
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":", (-3774));
      JSONScanner jSONScanner1 = new JSONScanner(":", (-3774));
      jSONScanner1.scanDate('h');
      jSONScanner1.nextIdent();
      assertEquals(17, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      jSONScanner0.scanBoolean('8');
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanString('B');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7DAYMZTt=:mG(uqRo");
      jSONScanner0.scanDecimal(']');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.nextIdent();
      Number number0 = jSONScanner0.integerValue();
      assertEquals((-88), number0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.features = 26;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanUUID('V');
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.stringVal();
      char[] charArray1 = new char[4];
      charArray1[0] = '\"';
      charArray1[1] = 'K';
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanDate('K');
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("4#WnkVRN<5");
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-223), 1094, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('V');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e@'kgZ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'u';
      charArray0[2] = '2';
      charArray0[3] = 'D';
      charArray0[4] = '(';
      charArray0[5] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.np = (-420);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"L,ja__{p+,");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      jSONReaderScanner0.scanUUID('D');
      jSONScanner0.setTimeZone((TimeZone) null);
      jSONScanner0.stringDefaultValue();
      int int0 = (-285);
      int int1 = 17;
      int int2 = (-503);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-503));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      jSONReaderScanner0.stringDefaultValue = "treeset";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('6');
      jSONScanner0.nextIdent();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("bk5yU");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";\b", (-2298));
      jSONScanner0.scanFloat('b');
      jSONScanner0.nextIdent();
      jSONScanner0.isEnabled((-2114), 26);
      assertEquals('\b', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneRegion");
      Locale locale0 = Locale.KOREA;
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.nextIdent();
      assertEquals(4, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0%`$s#x:)la");
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.longValue();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.matchField(charArray1);
      jSONReaderScanner0.isBlankInput();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanString();
      assertEquals('z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e@'kgZ");
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1PQF#XBjp*N>");
      jSONScanner0.scanFloat('9');
      jSONScanner0.nextIdent();
      assertEquals('P', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = JSONLexerBase.digits;
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanDecimal('W');
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn");
      JSONScanner jSONScanner1 = new JSONScanner("nn", 5474);
      jSONScanner1.nextIdent();
      jSONScanner1.integerValue();
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2");
      jSONScanner0.scanFloat('c');
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0%`$s#x:)la", (-2298));
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextIdent();
      assertEquals(23, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1PQF#XBjp*N>");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn", (-2067));
      jSONScanner0.scanDecimal('A');
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(2355);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"L,ja__{p+,");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanDecimal('K');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eG-< &7G/MI|IfM1`G_");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("eG-< &7G/MI|IfM1`G_");
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'g');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, (-2190));
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = ' ';
      charArray0[2] = '(';
      charArray0[3] = ' ';
      charArray0[4] = 's';
      charArray0[5] = '$';
      charArray0[6] = 'X';
      charArray0[7] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.arrayCopy((-1), charArray0, (-2190), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n2");
      jSONScanner0.scanNumber();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken((-1058));
      jSONScanner0.skipWhitespace();
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eG-< &7G/MI|IfM1`G_");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      JSONScanner jSONScanner1 = new JSONScanner("9$`$KF");
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'p';
      charArray0[2] = 'L';
      charArray0[3] = 'j';
      charArray0[4] = 'S';
      charArray0[5] = 'X';
      charArray0[6] = 'm';
      charArray0[7] = 'P';
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONScanner1.nextIdent();
      assertEquals((-2), jSONScanner1.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0%`$s#x:)la");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals((-2), int0);
      
      int int1 = jSONScanner0.intValue();
      assertEquals(0, int1);
      
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0%`$s#x:)la");
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn");
      jSONScanner0.putChar('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn");
      jSONScanner0.scanBoolean('\"');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1682, 1682, 1082, 123, 9);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.stringDefaultValue = null;
      jSONScanner0.scanString('_');
      jSONScanner0.getLocale();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      TimeZone timeZone0 = TimeZone.getTimeZone(")");
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('5');
      Feature feature0 = Feature.SupportNonPublicField;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nn");
      jSONScanner0.scanString('t');
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("15?@0%`$s#x:)la");
      jSONScanner0.isBlankInput();
      jSONScanner0.sp = (-1111619080);
      jSONScanner0.intValue();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match f - 1, info : pos 0, json : 15?@0%`$s#x:)la
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('a');
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n2");
      jSONScanner0.scanFloat('c');
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      jSONScanner0.nextToken(26085);
      JSONScanner jSONScanner1 = new JSONScanner(")");
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanDecimal(']');
      long long0 = jSONScanner0.longValue();
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = ']';
      long long1 = jSONScanner1.scanFieldLong(charArray0);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3mCmIh<I", 92);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'p';
      jSONReaderScanner0.scanNumber();
      charArray0[2] = 'f';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = '>';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.nextIdent();
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONScanner0.isEnabled(feature0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1462), "scan null error", (-2690), 14, (-1462), 2024, 4, (-2690), (-1791270796), 2354, (-2690), 120, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2690
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">vVW3dbC*S\"");
      jSONScanner0.nextToken(1260);
      JSONScanner jSONScanner1 = new JSONScanner("com.google.common.collect.");
      jSONScanner0.stringVal();
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\u001C';
      JSONScanner jSONScanner0 = new JSONScanner("\"d`\"zm<e*");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('\u001C');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mt");
      SymbolTable symbolTable0 = new SymbolTable(801);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ':');
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = '6';
      charArray0[2] = ',';
      charArray0[3] = 'l';
      charArray0[4] = 'w';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextIdent();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), (-2), (-2), (-2), (-2), (-2));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('a');
      boolean boolean0 = jSONScanner0.isEnabled(87, 87);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      jSONReaderScanner0.next();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError((String) null, objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("LXK#Q#(35Ef{jt\"k", 4765);
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'R';
      charArray0[2] = '\'';
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.config(feature0, true);
      assertEquals(0, jSONScanner0.matchStat);
      
      charArray0[3] = 'U';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(4765, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(295);
      jSONScanner0.scanEnum(class0, symbolTable0, 'c');
      jSONScanner0.longValue();
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.config(feature0, false);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">vVW3dbC*S\"");
      jSONScanner0.ch = 'M';
      jSONScanner0.info();
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.matchStat();
      assertEquals(8, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", 44);
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.nextIdent();
      assertEquals(20, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("treeset");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'A';
      charArray0[2] = 'z';
      charArray0[3] = '#';
      jSONScanner1.scanFieldSymbol(charArray0);
      jSONScanner1.isRef();
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'm');
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.info();
      jSONScanner0.nextIdent();
      jSONScanner0.lexError("new", (Object[]) null);
      jSONScanner0.close();
      jSONScanner0.isEnabled(26, 26);
      jSONScanner0.bytesValue();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      char char0 = '%';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      String string0 = jSONScanner0.scanString('m');
      assertNull(string0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eG-< &7G/MI|IfM1`G_");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";\b", (-2298));
      jSONScanner0.scanDecimal('A');
      jSONScanner0.nextIdent();
      assertEquals('\b', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" :8LdYEu2G6>%E,");
      JSONScanner jSONScanner1 = new JSONScanner("]XY)v9(jU]4/D7jP");
      jSONScanner1.info();
      jSONScanner1.nextIdent();
      jSONScanner1.scanIdent();
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", 44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">v`yVW3dbC*S\"");
      jSONScanner0.info();
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '_';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('S', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("15?@0%`$s#x:)la", 44);
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"L,ja__{p+,");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1260);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dQuoWEz");
      String string0 = jSONScanner0.scanString('^');
      assertNull(string0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%", 115);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      Locale locale0 = new Locale("+S'`%H\"hd/", "=-Dlu0PVuq");
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'p';
      charArray0[2] = 'I';
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONScanner0.scanFieldStringArray(charArray0, 115, symbolTable0);
      jSONScanner0.config(feature0, false);
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}", 0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature0, true);
      jSONScanner0.nextIdent();
      jSONScanner0.getCalendar();
      long long0 = jSONScanner0.longValue();
      assertEquals(13, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("set");
      jSONScanner0.nextToken(39);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"L,ja__{p+,");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      jSONScanner0.scanDecimal('J');
      jSONScanner0.nextIdent();
      assertEquals(';', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      jSONScanner0.getCalendar();
      jSONScanner0.scanLong('~');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VL;BaU");
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = ';';
      charArray0[3] = '';
      charArray0[4] = 'J';
      charArray0[5] = '2';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.nextIdent();
      assertEquals(20, jSONScanner1.token());
      
      boolean boolean0 = jSONScanner0.isEnabled(49);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.scanDecimal('%');
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("y,", 6286);
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      JSONScanner jSONScanner1 = new JSONScanner("illegal state. ");
      jSONScanner1.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner1.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3;S\b");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      char[] charArray0 = new char[1];
      jSONScanner0.nextIdent();
      jSONScanner0.matchField2(charArray0);
      assertEquals('s', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w");
      jSONScanner0.isRef();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 224);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 70;
      int int1 = 8;
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'h';
      charArray0[2] = 'x';
      charArray0[3] = '~';
      charArray0[4] = ')';
      charArray0[5] = 'U';
      charArray0[6] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 8);
      int int2 = 18;
      char[] charArray1 = new char[1];
      charArray1[0] = ')';
      jSONReaderScanner0.scanFieldSymbol(charArray1);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "IoKF";
      JSONScanner jSONScanner0 = new JSONScanner("IoKF");
      jSONScanner0.setToken(123);
      jSONScanner0.close();
      char[] charArray0 = new char[3];
      jSONScanner0.tokenName();
      charArray0[0] = 'C';
      jSONScanner0.sp = (-2323);
      char char0 = 'K';
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[1] = 'K';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) 'C';
      jSONScanner0.lexError("IoKF", objectArray0);
      char char1 = 'T';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextIdent();
      jSONScanner0.scanInt('&');
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%", 70);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(49);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'e');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%", 2085);
      jSONScanner0.scanFloat('3');
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '=';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!.cn|O:TG}]");
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'L';
      charArray0[2] = 'm';
      charArray0[3] = 'K';
      charArray0[4] = '#';
      charArray0[5] = ';';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 5, 5);
      jSONScanner1.nextToken(59);
      JSONScanner jSONScanner2 = new JSONScanner("scan true error", 0);
      jSONScanner2.info();
      jSONScanner2.nextIdent();
      int int0 = jSONScanner1.pos();
      assertEquals('L', jSONScanner1.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'x';
      charArray0[2] = '}';
      charArray0[3] = '~';
      charArray0[4] = 'i';
      charArray0[5] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      jSONReaderScanner0.matchStat = 6;
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      Locale locale0 = Locale.CHINA;
      jSONReaderScanner0.locale = locale0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("V\"d`\"zm<e*");
      jSONScanner0.nextIdent();
      jSONScanner0.skipWhitespace();
      jSONScanner0.info();
      jSONScanner0.scanType("V\"d`\"zm<e*");
      char char0 = jSONScanner0.getCurrent();
      assertEquals('\"', char0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ull");
      jSONScanner0.bytesValue();
      jSONScanner0.scanInt('Q');
      jSONScanner0.indexOf('V', 14);
      jSONScanner0.indexOf('Q', (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.intValue();
      jSONScanner0.scanDate('4');
      jSONScanner0.next();
      jSONScanner0.putChar('4');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.longValue();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}T<|e:]J>uO");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, ']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Eu8D", 102);
      Class<String> class0 = String.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'P');
      jSONScanner0.scanLong('P');
      jSONScanner0.charAt(21);
      jSONScanner0.token();
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = '\u001A';
      charArray0[4] = 'P';
      charArray0[5] = '\u001A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      jSONScanner0.close();
      jSONReaderScanner0.scanFloat('\u001A');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'P');
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("V\"d`\"zm<e*");
      jSONScanner0.nextIdent();
      jSONScanner0.info();
      int int0 = jSONScanner0.scanType("V\"d`\"zm<e*");
      assertEquals(18, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("set");
      jSONScanner0.ch = 'v';
      jSONScanner0.scanDecimal('J');
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '3';
      charArray0[2] = 'p';
      charArray0[3] = '\\';
      charArray0[4] = 'h';
      charArray0[5] = 'l';
      charArray0[6] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 115);
      jSONReaderScanner0.scanLong('=');
      assertEquals(115, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.setToken((-2));
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state. ");
      char char0 = 'p';
      char char1 = '?';
      jSONReaderScanner0.scanDate('?');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sdQuoWEz,?0[b)");
      jSONScanner0.nextToken(39);
      jSONScanner0.stringVal();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextIdent();
      Locale locale0 = jSONScanner0.getLocale();
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(", property ", 0);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('Q');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : pos 2, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{}U<|e:]J>uO");
      jSONScanner0.nextIdent();
      assertEquals('}', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(", ");
      jSONScanner1.nextIdent();
      assertEquals(16, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-4591));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Mt'D|qi:`");
      JSONScanner jSONScanner1 = new JSONScanner("Mt'D|qi:`");
      char[] charArray0 = new char[4];
      jSONScanner1.skipWhitespace();
      jSONScanner1.scanString('6');
      jSONScanner1.isBlankInput();
      charArray0[0] = '@';
      charArray0[1] = 'Y';
      charArray0[2] = 'M';
      charArray0[3] = 'd';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner1.nextIdent();
      assertEquals('\'', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'k';
      charArray0[2] = '3';
      charArray0[3] = 'r';
      charArray0[4] = 'b';
      charArray0[5] = ')';
      charArray0[6] = 'q';
      charArray0[7] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 43);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanFieldUUID(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error");
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(41, 91, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'P';
      char char0 = '{';
      charArray0[1] = '{';
      char char1 = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.UseObjectArray;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("parse number key error");
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'r';
      charArray0[2] = 'S';
      charArray0[3] = '\\';
      charArray0[4] = 'S';
      jSONScanner0.stringVal();
      charArray0[5] = 'J';
      charArray0[6] = ':';
      charArray0[7] = 'R';
      charArray0[8] = 'w';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFieldLong(charArray0);
      JSONLexerBase.isWhitespace('A');
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Mt'D|qi:`");
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '%';
      jSONScanner0.scanFieldFloatArray(charArray0);
      charArray0[2] = '0';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - M, info : pos 0, json : Mt'D|qi:`
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanUUID(':');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('I', '7', '7');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("40l", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'T';
      charArray0[2] = 'j';
      charArray0[3] = '$';
      charArray0[4] = 'k';
      charArray0[5] = ',';
      charArray0[6] = '(';
      charArray0[7] = 'a';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanFloat('Q');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - l, info : pos 2, json : 40l
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("v4t!Tf}");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'V';
      charArray0[2] = 'y';
      charArray0[3] = 'Z';
      charArray0[4] = '&';
      charArray0[5] = 'Y';
      charArray0[6] = 'O';
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONScanner0.scanFieldStringArray(charArray0, 32, symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'i';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("new", objectArray0);
      jSONScanner0.matchStat = 0;
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanUUID(':');
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('I', '7', '7');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('9', 'p', 'A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IoKF?i>", (-62));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanFloat('+');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ?, info : pos 4, json : IoKF?i>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("Mt'D|qi:`");
      jSONScanner0.scanFieldIntArray(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("Set", (-2));
      jSONScanner1.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithChar('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match m - S, info : pos 0, json : Set
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[5];
      int[] intArray0 = JSONLexerBase.digits;
      JSONScanner jSONScanner0 = new JSONScanner("<{Y7i(Y;G4/f>`");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('A', 'S', 'I');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-62));
      char[] charArray1 = new char[2];
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      jSONScanner0.matchField2(charArray1);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(70);
      jSONScanner0.scanFieldIntArray(charArray0);
      char char0 = '\"';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('M', '\"', '\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.getTimeZone();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-2));
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("Mt'D|qi:`");
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.stringDefaultValue();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(1090);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.stringDefaultValue();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '<';
      charArray0[2] = '\\';
      charArray0[3] = '^';
      charArray0[4] = '1';
      charArray0[5] = '&';
      charArray0[6] = ']';
      charArray0[7] = ',';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, 48);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3mCmIh<I", 92);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'p';
      charArray0[2] = 'f';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = '>';
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'V';
      charArray0[2] = 'k';
      charArray0[3] = ':';
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.intValue();
      int int1 = 41;
      int int2 = 78;
      int int3 = 95;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('o', '>', '>');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49, 49);
      jSONReaderScanner0.isBlankInput();
      assertEquals(49, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '#';
      JSONScanner jSONScanner0 = new JSONScanner("x(<!,ArY2", '7');
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(70);
      char[] charArray1 = new char[4];
      charArray1[0] = '7';
      charArray1[1] = '7';
      charArray1[2] = '#';
      charArray1[3] = '#';
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayScript();
      jSONScanner0.locale = locale0;
      jSONScanner0.scanFieldIntArray(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('7', 'n', 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IoKF?i>", (-62));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanUUID('P');
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(96);
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('P', 'M', 'M');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1)M\tm&fPvSMAX+J");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = ']';
      charArray0[2] = 'w';
      charArray0[3] = '{';
      charArray0[4] = 'k';
      charArray0[5] = 'D';
      charArray0[6] = '>';
      jSONScanner0.scanFieldSymbol(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      char char0 = ')';
      JSONLexerBase.isWhitespace(')');
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1190), (-784));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchStat = 0;
      jSONScanner0.matchField2(charArray0);
      char char0 = 'B';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, (-1439154596));
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchStat = (int) '\"';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true");
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IoKF?i>", (-62));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(96);
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('P', 'M', 'M');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.next();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-32), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/c@fXA#*O~4av(HTR");
      char[] charArray0 = new char[26];
      charArray0[0] = 'K';
      charArray0[1] = 'n';
      charArray0[2] = 't';
      charArray0[3] = '*';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[6] = 'r';
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.putChar('*');
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IoKF?i>");
      char[] charArray0 = new char[9];
      jSONScanner0.scanLong('b');
      JSONScanner jSONScanner1 = new JSONScanner("IoKF?i>", 'b');
      jSONScanner1.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1392));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - I, info : pos 0, json : IoKF?i>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26);
      jSONReaderScanner0.stringVal();
      char[] charArray1 = new char[2];
      charArray1[0] = '\"';
      charArray1[1] = 'K';
      jSONReaderScanner0.scanFieldString(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('K');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "]";
      int int0 = (-62);
      JSONScanner jSONScanner0 = new JSONScanner("]", (-62));
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchStat = 0;
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\"', '\"', 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanStringArray((Collection<String>) null, ' ');
      jSONScanner0.scanDouble('j');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 't';
      charArray0[2] = ' ';
      charArray0[3] = '3';
      charArray0[4] = ' ';
      charArray0[5] = '3';
      charArray0[6] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 5);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '\"';
      charArray0[0] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(122);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'M');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFloat('%');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.getFeatures();
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.next();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = " info :";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" info :");
      jSONReaderScanner0.scanDate('p');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = '<';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'A');
      jSONScanner0.matchField2(charArray0);
      int int1 = 9999999;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(9999999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VvWN>", 59);
      int int0 = 2936;
      jSONScanner0.features = 2936;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VvWN>");
      jSONReaderScanner0.close();
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.UseObjectArray;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - P, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanLong('');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.tokenName();
      jSONReaderScanner1.config(feature0, true);
      jSONReaderScanner1.next();
      char char0 = jSONReaderScanner1.getCurrent();
      assertEquals(33757, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("O");
      Feature feature0 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.next();
      assertEquals(132061, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.sp = 0;
      jSONScanner0.putChar('4');
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.indexOf('e', 19);
      SymbolTable symbolTable0 = null;
      char char0 = 'i';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#K n+'5U3g9jTh7");
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'P';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      char[] charArray1 = new char[1];
      charArray1[0] = 'P';
      jSONReaderScanner0.scanFieldString(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('4');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#K n+'5U3g9jTh7");
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'P';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("#K n+'5U3g9jTh7");
      jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanDate('^');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      jSONScanner0.nextToken();
      char char0 = '^';
      char char1 = ':';
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.scanDate('p');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.UseObjectArray;
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanStringArray((Collection<String>) null, ' ');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = '3';
      charArray0[3] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 123, 200);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.indexOf('e', 19);
      SymbolTable symbolTable0 = null;
      char char0 = 'i';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      JSONScanner.charArrayCompare("", 0, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken(0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/c@fXA#*O~4av(HTR", 101);
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[2] = 't';
      charArray0[3] = 'K';
      charArray0[4] = ':';
      jSONScanner0.setToken(1023);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.close();
      jSONScanner0.scanInt('3');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/c@fXA#*O~4av(HTR");
      jSONReaderScanner0.scanString('n');
      jSONScanner0.scanDouble('B');
      assertEquals(1023, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Color", 0);
      jSONScanner0.scanType("java.awt.Color");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanLong('n');
      jSONScanner0.pos = 57344;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      jSONScanner0.matchField(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '/';
      jSONScanner0.scanFieldDecimal(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('=');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match = - j, info : pos 0, json : java.awt.Color
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = (-1978);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.DefaultJSONParser", (-1978));
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.sp = (-1978);
      int int1 = (-1359);
      int int2 = (-115);
      char char0 = 'E';
      jSONReaderScanner0.scanDouble('E');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      jSONReaderScanner0.scanDate('p');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char char0 = 'T';
      char char1 = ',';
      char char2 = 'r';
      int int0 = (-1138);
      JSONScanner.checkDate('q', 'T', ',', 'T', 'r', 'r', 3600, (-1138));
      int int1 = 310;
      JSONScanner jSONScanner0 = new JSONScanner("", 310);
      jSONScanner0.resetStringPosition();
      int int2 = 7;
      jSONScanner0.token = 7;
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.isRef();
      jSONScanner0.info();
      int int0 = (-1579);
      int int1 = 8192;
      int int2 = (-1225);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1225));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      JSONScanner.charArrayCompare("", 0, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.setToken(0);
      jSONScanner0.nextToken(0);
      int int0 = (-894);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-894));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteTabAsSpecial", 97);
      jSONScanner0.nextToken();
      char char0 = '^';
      char char1 = ':';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'D';
      charArray0[2] = '1';
      charArray0[3] = 'h';
      charArray0[4] = 'c';
      charArray0[5] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Class<Integer> class1 = Integer.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.indexOf('e', 19);
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#K n+'5U3g9jTh7");
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = 'P';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      charArray0[4] = '|';
      charArray0[5] = 'P';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('J');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '\'';
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.sub_chars(0, 2389);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(0, 10, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VvWN>", 59);
      jSONScanner0.features = 2936;
      jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('r');
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'r';
      charArray0[3] = 'v';
      charArray0[4] = '>';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      charArray0[7] = 'r';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/c@fXA#*O~4av(HTR", 101);
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'n';
      charArray0[2] = 't';
      charArray0[3] = '*';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[6] = 'r';
      charArray0[7] = ']';
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'F';
      charArray0[2] = '\"';
      charArray0[3] = 'Z';
      charArray0[4] = 'O';
      charArray0[5] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1462, 0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.subString(1462, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]", (-62));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
