/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:14:22 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-705);
      intArray0[2] = 3791;
      intArray0[3] = 103;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      CharClass charClass5 = charClass1.appendTableWithSign(intArray1, 2);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign((int[]) null, 3791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      int int0 = 1196;
      intArray0[0] = 1196;
      intArray0[1] = 66640;
      intArray0[2] = 446;
      int int1 = 1226;
      intArray0[3] = 1226;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1196, 66640, 446, 1226}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral((-16610342), 66640);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1196, 66640, 446, 1226}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1196, 66640, 446, 1226}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {1196, 66640, 446, 1226}, intArray0);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {1196, 66640, 446, 1226}, intArray0);
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1202);
      intArray0[2] = (-1629);
      int int0 = (-2);
      intArray0[3] = (-2);
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1202), (-1629), (-2), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-3641);
      intArray0[2] = (-394);
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[3] = (-1891);
      intArray0[4] = 128557;
      intArray0[5] = 0;
      intArray0[6] = 850;
      intArray0[7] = (-4902);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[1] = 914;
      intArray0[3] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass4 = charClass2.appendFoldedRange(616, 2794);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass6 = charClass2.appendFoldedRange(914, 2147);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
      
      CharClass charClass7 = charClass0.cleanClass();
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      
      CharClass charClass8 = charClass1.negateClass();
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertArrayEquals(new int[] {0, 914, 0, (-2)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-7517);
      intArray0[1] = (-7164410);
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(4, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[2] = 65;
      intArray0[3] = (-2);
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-7517), (-7164410), 65, (-2)}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-7517), (-7164410), 65, (-2)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-475);
      intArray0[1] = (-475);
      intArray0[2] = 2795;
      intArray0[3] = 0;
      intArray0[4] = 65378;
      intArray0[5] = (-1494);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 6912);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass6 = charClass5.appendTableWithSign(intArray1, 2795);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-475), (-475), 2795, 0, 65378, (-1494)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 4046;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, (-1), 1, 4046}, intArray0);
      
      int[][] intArray1 = new int[1][1];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, (-1), 0, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1114111);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2, (-1), 0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral(1114111, 1589);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {2, (-1), 0, 1114111}, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1589;
      intArray2[1] = 2;
      intArray2[2] = 4046;
      intArray2[3] = (-1);
      intArray2[4] = 2;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 124;
      intArray0[1] = 0;
      intArray0[2] = 914;
      intArray0[3] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 124);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass5 = charClass0.appendRange(1114111, (-2784));
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 124, 383, 383, 8490, 8490, 1114111, (-2784)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-684);
      intArray0[1] = 144;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1949);
      intArray0[4] = 66640;
      intArray0[5] = 1470;
      intArray0[6] = (-4393);
      intArray0[7] = 3251;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-684), 144, 0, (-1949), 66640, 1470, (-4393), 3251}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-684), 144, 0, (-1949), 66640, 1470, (-4393), 3251}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(3251, 65307);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-684), 144, 0, (-1949), 66640, 1470, (-4393), 3251}, intArray0);
      
      int[][] intArray1 = new int[9][6];
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1047;
      intArray0[1] = 43189;
      intArray0[2] = 3658;
      intArray0[3] = 1114111;
      intArray0[4] = 315;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1047, 43189, 3658, 1114111, 315}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange((-1357), 1114111);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1047, 43189, 3658, (-1357), 1114111}, intArray0);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1047, 43189, 3658, (-1357), 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {1047, 43189, 3658, (-1357), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2047;
      intArray1[1] = 2916;
      intArray1[2] = 2047;
      intArray1[3] = 93;
      intArray1[4] = 2047;
      intArray1[5] = 2047;
      intArray1[6] = 2047;
      int int0 = (-510);
      intArray1[7] = (-510);
      intArray1[8] = 2047;
      CharClass charClass1 = new CharClass(intArray1);
      assertNotNull(charClass1);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {2047, 2916, 2047, 93, 2047, 2047, 2047, (-510), 2047}, intArray1);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(2047, 8559);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2047;
      intArray0[1] = 2915;
      intArray0[2] = 66639;
      intArray0[3] = 3244;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2047, 2915, 66639, 3244}, intArray0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {2047, 2915, 66639, 3244}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {2047, 2915, 66639, 3244}, intArray0);
      
      int[][] intArray1 = new int[2][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {2047, 2915, 66639, 3244}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 32;
      int int1 = 44003;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[5];
      intArray1[0] = (-292);
      intArray1[1] = 0;
      intArray1[2] = 2452;
      intArray1[3] = (-3706);
      intArray1[4] = 3235;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-292);
      intArray2[1] = (-3706);
      intArray2[2] = 0;
      intArray2[3] = (-292);
      intArray2[4] = (-292);
      intArray2[5] = 3235;
      intArray2[6] = (-186);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-292);
      intArray3[1] = 2452;
      intArray3[2] = 2452;
      intArray3[3] = 0;
      intArray3[4] = 3235;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 3235;
      intArray4[1] = (-3706);
      intArray4[2] = 3235;
      intArray4[3] = (-3706);
      intArray4[5] = (-3706);
      intArray4[6] = 8207;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 3235;
      intArray5[1] = 362;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 2452;
      intArray6[1] = 3235;
      intArray6[2] = (-292);
      intArray6[3] = (-292);
      intArray6[4] = 8207;
      intArray6[5] = 8207;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = (-292);
      intArray7[1] = 4676;
      intArray7[2] = 1240;
      intArray7[3] = (-186);
      intArray7[4] = 0;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 276;
      intArray0[1] = 1418;
      intArray0[2] = 66640;
      intArray0[3] = 32;
      intArray0[4] = 1003;
      intArray0[5] = 78;
      intArray0[6] = 1613;
      intArray0[7] = (-122);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {276, 1418, 66640, 32, 1003, 78, 1613, (-122)}, intArray0);
      
      int[][] intArray1 = new int[9][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[8] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 1613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-475);
      intArray0[1] = 1925;
      intArray0[2] = 2795;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 1925);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass0.appendRange(1925, 2795);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass1.negateClass();
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      String string0 = charClass4.toString();
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertEquals("[0x786-0xaea]", string0);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, (-1547));
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2795;
      intArray2[1] = 1925;
      CharClass charClass7 = charClass5.appendFoldedClass(intArray2);
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2795, 1925}, intArray2);
      
      CharClass charClass8 = charClass3.appendRange(1957, (-1));
      assertNotNull(charClass8);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3598;
      intArray0[1] = 108;
      intArray0[2] = 1369;
      intArray0[3] = 1567;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3598, 108, 1369, 1567}, intArray0);
      
      int int0 = (-209);
      CharClass charClass1 = charClass0.appendLiteral(178, (-209));
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3598, 108, 1369, 1567}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(89, 1065);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3598, 108, 1369, 1567}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 124;
      intArray0[1] = 0;
      intArray0[2] = 914;
      intArray0[3] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedRange(0, 0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      CharClass charClass5 = charClass4.appendRange(0, 0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {124, 0, 914, (-2)}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[5];
      intArray1[0] = (-292);
      intArray1[1] = 0;
      intArray1[2] = 2452;
      intArray1[3] = (-3706);
      intArray1[4] = 3235;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-292);
      intArray2[1] = (-3706);
      intArray2[2] = 0;
      intArray2[3] = (-292);
      intArray2[4] = (-292);
      intArray2[5] = 3235;
      intArray2[6] = (-186);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-292);
      intArray3[1] = 2452;
      intArray3[2] = 2452;
      intArray3[3] = 0;
      intArray3[4] = 3235;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 3235;
      intArray4[1] = (-3706);
      intArray4[2] = 3235;
      intArray4[3] = (-3706);
      intArray4[4] = 4676;
      intArray4[5] = (-3706);
      intArray4[6] = 8207;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 3235;
      intArray5[1] = 362;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 2452;
      intArray6[1] = 3235;
      intArray6[2] = (-292);
      intArray6[3] = (-292);
      intArray6[4] = 8207;
      intArray6[5] = 8207;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      
      intArray7[0] = (-292);
      intArray7[1] = 4676;
      intArray7[2] = 1240;
      intArray7[3] = (-186);
      intArray7[4] = 0;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[3][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 363;
      intArray1[1] = (-3338);
      intArray1[2] = (-2042);
      intArray1[3] = (-1228);
      intArray1[4] = 8624;
      intArray1[5] = (-724);
      intArray1[6] = 3550;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 8624;
      intArray2[1] = 735;
      intArray2[2] = (-3338);
      intArray2[3] = 8624;
      intArray2[4] = (-724);
      intArray2[5] = (-724);
      intArray2[6] = (-3338);
      intArray2[7] = 3550;
      intArray2[8] = (-724);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 8624;
      intArray3[1] = 8624;
      intArray3[2] = 363;
      intArray3[3] = 8624;
      intArray0[2] = intArray3;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray4 = new int[2][6];
      assertFalse(intArray4.equals((Object)intArray0));
      
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-3333);
      intArray5[0] = 315;
      intArray5[2] = (-3346);
      CharClass charClass3 = charClass0.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      intArray5[3] = 1114112;
      intArray5[4] = (-3341);
      intArray4[0] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 315;
      intArray4[1] = intArray6;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 487;
      intArray0[0] = 487;
      int int1 = 64;
      intArray0[1] = 64;
      intArray0[2] = 6099;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {487, 64, 6099}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][4];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 1649;
      intArray1[2] = (-354);
      intArray1[3] = 4154;
      intArray1[4] = 1631;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 4154;
      intArray2[1] = 1;
      intArray2[2] = 1668;
      intArray2[3] = 1;
      intArray2[4] = (-354);
      intArray2[5] = 1649;
      intArray2[6] = 1;
      intArray2[7] = (-797);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1659;
      intArray3[1] = 1671;
      intArray3[2] = 1649;
      intArray3[3] = 1;
      intArray3[4] = 4154;
      intArray3[5] = 1;
      intArray3[6] = (-797);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 1;
      intArray4[1] = (-797);
      intArray4[2] = 1;
      intArray4[3] = (-797);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = 1;
      intArray5[1] = 4154;
      intArray5[2] = (-354);
      intArray5[3] = 1668;
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-354));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 66639;
      intArray0[1] = 1136;
      intArray0[2] = (-2538);
      intArray0[3] = (-1547);
      intArray0[4] = 293;
      intArray0[5] = 2;
      intArray0[6] = 12;
      intArray0[7] = 840;
      intArray0[8] = 4;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 4471;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 4471, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange(0, (-2));
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1, 1114111, 0, (-2), 0, 0}, intArray0);
      
      String string0 = charClass1.toString();
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0x1-0x10ffff 0x0-0xfffffffe]", string0);
      assertArrayEquals(new int[] {1, 1114111, 0, (-2), 0, 0}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1), 1114111, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2724;
      intArray0[1] = 3732;
      intArray0[2] = 0;
      intArray0[3] = 5505;
      intArray0[4] = 68352;
      intArray0[5] = (-1147);
      intArray0[6] = 315;
      intArray0[7] = (-2900);
      intArray0[8] = 3073;
      String string0 = CharClass.charClassToString(intArray0, (-1));
      assertNotNull(string0);
      assertEquals(9, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {2724, 3732, 0, 5505, 68352, (-1147), 315, (-2900), 3073}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2724, 3732, 0, 5505, 68352, (-1147), 315, (-2900), 3073}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 304;
      intArray0[1] = (-89);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(91, 91);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2432);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2022;
      int int0 = 65142;
      intArray0[1] = 65142;
      intArray0[2] = (-1539);
      intArray0[3] = 5942;
      intArray0[4] = (-352);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2022, 65142, (-1539), 5942, (-352)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3791;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3791);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral((-1965), (-1965));
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass5 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
      
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {0, 0, 3791, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-705);
      intArray0[2] = 3791;
      intArray0[3] = 103;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, (-705), 3791, 103}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign((int[]) null, 3791);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-475);
      intArray0[1] = 1925;
      intArray0[2] = 2795;
      intArray0[3] = 0;
      intArray0[4] = 65378;
      intArray0[5] = (-1494);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 6912);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
      
      CharClass charClass6 = charClass5.appendTableWithSign(intArray1, 2795);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {(-475), 1925, 2795, 0, 65378, (-1494)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3134;
      intArray0[1] = 65;
      intArray0[2] = 1449;
      intArray0[3] = (-228);
      intArray0[4] = 2627;
      intArray0[5] = (-2110);
      intArray0[6] = 2829;
      intArray0[7] = 3;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3134, 65, 1449, (-228), 2627, (-2110), 2829, 3}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1449, (-228), 2627, (-2110), 2829, 3}, intArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[22];
      intArray0[1] = 0;
      intArray0[3] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 0);
      assertNotNull(charClass3);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass2.appendFoldedRange((-2), 2794);
      assertNotNull(charClass4);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendFoldedRange((-2), (-2));
      assertNotNull(charClass5);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass5.appendLiteral(914, 914);
      assertNotNull(charClass6);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass0.cleanClass();
      assertNotNull(charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      
      CharClass charClass8 = charClass1.negateClass();
      assertNotNull(charClass8);
      assertEquals(22, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2216;
      intArray0[1] = 12550;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 12550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      int[] intArray1 = new int[9];
      intArray1[0] = 1114111;
      intArray1[1] = 68405;
      intArray1[2] = 65;
      intArray1[3] = 32;
      intArray1[4] = (-2026);
      intArray1[5] = 8461;
      intArray1[6] = 100;
      intArray1[7] = (-284);
      intArray1[8] = 1369;
      CharClass charClass0 = new CharClass(intArray1);
      assertNotNull(charClass0);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {1114111, 68405, 65, 32, (-2026), 8461, 100, (-284), 1369}, intArray1);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 65;
      intArray2[1] = 1369;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray2);
      assertNotNull(charClass1);
      assertEquals(9, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray1, intArray2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1114111, 68405, 65, 32, (-2026), 8461, 100, (-284), 1369}, intArray1);
      assertArrayEquals(new int[] {65, 1369}, intArray2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange(1359, (-1982));
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass2.toString();
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals("[0x0 0x54f-0xfffff842]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 2023);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass0.appendRange(0, 1410);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass4.appendLiteral((-1982), 0);
      assertNotNull(charClass7);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1335;
      intArray0[1] = 543;
      intArray0[2] = 0;
      intArray0[3] = 713;
      intArray0[4] = 91;
      intArray0[5] = 0;
      intArray0[6] = (-398);
      intArray0[7] = 4;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      int int0 = 0;
      CharClass charClass2 = charClass1.appendRange(1335, 0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertEquals("[0x0-0x536 0x2ca-0x536 0x1-0x536 0x2ca-0x10ffff]", string0);
      
      CharClass charClass6 = charClass2.appendClassWithSign(intArray0, (-398));
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertArrayEquals(new int[] {1335, 543, 0, 713, 91, 0, (-398), 4}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 119;
      intArray1[1] = (-1092);
      intArray1[2] = 66640;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 66640;
      intArray2[1] = 93;
      intArray2[2] = 119;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1092);
      intArray3[1] = 119;
      intArray3[2] = 66640;
      intArray3[3] = 93;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 93;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 66640;
      intArray5[1] = 119;
      intArray5[2] = 66640;
      intArray5[3] = (-1092);
      intArray5[4] = 119;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 304;
      intArray0[1] = (-89);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-88), 1114111}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-88), 1114111}, intArray0);
      
      int[][] intArray1 = new int[8][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int1 = 6000;
      intArray2[0] = 6000;
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 8320;
      intArray0[1] = (-3368);
      intArray0[2] = 2;
      intArray0[3] = (-2551);
      intArray0[4] = 154;
      intArray0[5] = (-2176);
      intArray0[6] = 66639;
      intArray0[7] = 4522;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {8320, (-3368), 2, (-2551), 154, (-2176), 66639, 4522}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-3796));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-89);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(91, 91);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2432);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, (-89)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 432;
      intArray0[0] = 432;
      intArray0[1] = 210;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 66000;
      intArray0[3] = 66000;
      intArray0[4] = 32;
      intArray0[5] = 736;
      int int3 = (-1676);
      intArray0[6] = (-1676);
      int int4 = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {432, 210, 0, 66000, 32, 736, (-1676), 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 304;
      intArray0[1] = (-89);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-89), 1);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      CharClass charClass3 = charClass0.appendRange(0, 32);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-1712));
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      
      int[] intArray1 = charClass2.toArray();
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {304, (-89)}, intArray0);
      assertArrayEquals(new int[] {(-89), 32, 304, (-89)}, intArray1);
      
      int int0 = (-1027);
      int[][] intArray2 = new int[3][5];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray2, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange(2, 2);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      int[][] intArray1 = new int[6][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      CharClass charClass5 = charClass4.appendLiteral(115, 1);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {2, (-1), 1, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 95;
      intArray0[1] = 2826;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 95);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {95, 2826}, intArray0);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2826;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 95;
      intArray3[1] = 2826;
      intArray3[2] = 95;
      intArray3[3] = 95;
      intArray3[4] = 2826;
      intArray3[5] = 2826;
      intArray1[6] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-475);
      intArray0[1] = 1925;
      intArray0[2] = 2795;
      intArray0[3] = 0;
      intArray0[4] = 65378;
      CharClass charClass0 = new CharClass();
      int int0 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange(67, 0);
      CharClass charClass2 = charClass1.cleanClass();
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 65378;
      intArray2[2] = (-1494);
      intArray2[3] = 0;
      intArray2[4] = (-1494);
      intArray2[5] = 2795;
      intArray2[6] = 65378;
      intArray2[7] = 1925;
      intArray2[8] = 65378;
      intArray1[1] = intArray2;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = (-292);
      intArray0[1] = 0;
      charClass0.appendRange((-292), 42914);
      charClass0.toString();
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 1048574;
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendFoldedRange(1048574, 1048574);
      intArray0[1] = 149;
      intArray0[2] = (-1094);
      intArray0[3] = 66639;
      intArray0[4] = 1;
      intArray0[5] = 471;
      intArray0[6] = (-1681);
      intArray0[7] = 64;
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 1813;
      CharClass charClass1 = charClass0.appendFoldedRange(1813, 1813);
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[7];
      intArray1[0] = 1813;
      intArray1[1] = 0;
      intArray1[2] = 1813;
      intArray1[3] = 1813;
      intArray1[4] = (-2747);
      intArray1[5] = 1813;
      intArray1[6] = 1813;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1813;
      intArray2[1] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = (-2747);
      intArray3[2] = 0;
      intArray3[3] = 232;
      intArray3[4] = (-2747);
      intArray3[5] = 0;
      intArray3[6] = 119964;
      intArray3[7] = 180;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 64;
      intArray4[1] = 43568;
      intArray4[2] = 1813;
      intArray4[3] = 1813;
      intArray4[4] = 180;
      intArray4[5] = (-1192);
      intArray4[6] = 180;
      intArray4[7] = 119964;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-2747);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 64;
      intArray6[1] = 64;
      intArray6[2] = (-826);
      intArray6[3] = 180;
      intArray6[4] = 119964;
      intArray6[5] = (-2747);
      intArray6[6] = (-2747);
      intArray6[7] = 180;
      intArray6[8] = 1813;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-705);
      intArray0[2] = 3791;
      int int0 = 103;
      intArray0[3] = 103;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[0][1];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.cleanClass();
      int[] intArray2 = null;
      int int1 = 2;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      CharClass charClass2 = charClass1.appendRange(0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      charClass1.toString();
      intArray0[1] = (-662);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      charClass2.appendClassWithSign(intArray0, 1373);
      CharClass charClass3 = charClass0.cleanClass();
      charClass3.appendRange(65, 65);
      CharClass charClass4 = charClass0.appendLiteral((-662), 93);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(0, 0);
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendRange(1359, (-1982));
      charClass1.toString();
      charClass0.appendClassWithSign(intArray0, 2023);
      charClass2.cleanClass();
      int[][] intArray1 = new int[3][8];
      charClass0.appendClass(intArray0);
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1148), (-1148));
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int int0 = (-428);
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, (-428));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-684);
      intArray0[1] = 144;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[4] = 66640;
      intArray0[5] = 66640;
      intArray0[6] = (-4393);
      intArray0[7] = 3251;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      int int1 = 65307;
      CharClass charClass2 = charClass1.appendLiteral(3251, 65307);
      int[][] intArray1 = new int[9][6];
      int[] intArray2 = new int[0];
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(17, 17);
      charClass0.appendRange(2149, 513);
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 43641;
      intArray0[1] = 0;
      intArray0[2] = 3454;
      intArray0[3] = 65;
      intArray0[4] = 0;
      intArray0[5] = (-1853);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4916);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = 221;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 221);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 124;
      intArray0[1] = 0;
      intArray0[2] = 914;
      intArray0[3] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendFoldedRange(124, 0);
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendRange(124, 914);
      int[] intArray1 = charClass5.toArray();
      assertArrayEquals(new int[] {124, 0, 124, 914}, intArray1);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
  }
}
