/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:17:26 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Random;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.Action;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ReliefFAttributeEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.AbstractOutput;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.stemmers.LovinsStemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string0 = Evaluation.makeOptionString(votedPerceptron0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 5.5);
      evaluation0.areaUnderPRC(15);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) (-1);
      testInstances0.setMultiInstance(true);
      evaluation0.updateMargins(doubleArray0, 2, 2);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.unclassified();
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.toClassDetailsString();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      evaluation0.toClassDetailsString("1gt*vSb");
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1647.143));
      evaluation0.weightedFalseNegativeRate();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedPrecision();
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "m7";
      stringArray0[1] = ",0\"%~JC(4Q/v.ZjvChf";
      stringArray0[2] = "\tSets model output file. In case the filename ends with '.xml',\n";
      stringArray0[3] = "-v\n";
      stringArray0[4] = "=I7us)U:L";
      stringArray0[5] = "zero";
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 1188.09000274729);
      evaluation0.numFalsePositives(2848);
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.spliterator();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
      evaluation0.falseNegativeRate((-2459));
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, ".bsi");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.numInstances();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-0.5);
      doubleArray0[3] = (-1940.88498);
      doubleArray0[4] = 300.0;
      doubleArray0[5] = (-292.72912522477714);
      evaluation0.numInstances();
      evaluation0.avgCost();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      XML xML0 = new XML();
      xML0.getHeader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      SGDText sGDText0 = new SGDText();
      evaluation0.trueNegativeRate(824);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.nextDouble();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.m_SumErr;
      evaluation0.SFEntropyGain();
      DenseInstance denseInstance0 = new DenseInstance(1);
      evaluation0.useNoPriors();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedPrecision();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.remove((Object) evaluation0);
      String string0 = ArffLoader.FILE_EXTENSION;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.correct();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.fMeasure(0);
      evaluation0.toClassDetailsString("threshold-file");
      evaluation0.SFMeanEntropyGain();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(47);
      AbstractInstance.s_numericAfterDecimalPoint = 47;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[14];
      evaluation0.numInstances();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 300.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-1327.141));
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(300.0, intArray0, 46);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      SGDText sGDText0 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(regressionByDiscretization0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(836.3315, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 836
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1647.143);
      evaluation0.addNumericTrainClass((-1647.143), (-694.66442558));
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      SGDText sGDText0 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(regressionByDiscretization0);
      instances0.stream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      regressionByDiscretization0.setUseEqualFrequency(false);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      textDirectoryLoader0.setRetrieval(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.toSummaryString(true);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.SFSchemeEntropy();
      evaluation0.getRevision();
      evaluation0.rootMeanPriorSquaredError();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.addNumericTrainClass(0, 1);
      evaluation0.totalCost();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Vector<MultilayerPerceptron> vector0 = new Vector<MultilayerPerceptron>();
      instances0.containsAll(vector0);
      evaluation0.weightedAreaUnderROC();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AbstractOutput.fromCommandline(".arff");
      SGDText sGDText1 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sGDText1);
      evaluation0.errorRate();
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBRelativeInformation();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), (char[]) null, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.SFMeanPriorEntropy();
      evaluation0.totalCost();
      evaluation1.weightedFalsePositiveRate();
      evaluation1.SFMeanPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.remove((Object) evaluation0);
      evaluation0.toSummaryString(false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.correct();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.fMeasure(0);
      evaluation0.toClassDetailsString("threshold-file");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      evaluation0.toClassDetailsString("ARCTAN");
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1119, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1119
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOutputFilename(true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-834.73425);
      textDirectoryLoader0.getDirectory();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumClass = 2437.202278462;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.falsePositiveRate(485);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText0 = new SGDText();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      sGDText0.setDebug(true);
      Integer integer0 = new Integer(1);
      ArffLoader arffLoader0 = new ArffLoader();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.totalCost();
      evaluation0.weightedPrecision();
      evaluation0.toSummaryString();
      evaluation0.areaUnderROC(1249);
      evaluation0.matthewsCorrelationCoefficient(1732);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.addNumericTrainClass(0, 1);
      evaluation0.totalCost();
      evaluation0.sizeOfPredictedRegions();
      Vector<MultilayerPerceptron> vector0 = new Vector<MultilayerPerceptron>();
      instances0.containsAll(vector0);
      evaluation0.weightedAreaUnderROC();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AbstractOutput.fromCommandline(".arff");
      CSV cSV0 = new CSV();
      evaluation0.totalCost();
      evaluation0.SFMeanEntropyGain();
      evaluation0.matthewsCorrelationCoefficient(0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setSeed((-1));
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      evaluation0.areaUnderROC(62);
      ArffLoader arffLoader0 = new ArffLoader();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      arffLoader0.getNextInstance((Instances) null);
      instances0.deleteAttributeType(97);
      evaluation0.weightedPrecision();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation.getGlobalInfo(multiClassClassifierUpdateable1);
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getOptions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getLNorm");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.relativeAbsoluteError();
      evaluation0.SFSchemeEntropy();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.totalCost();
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_Incorrect;
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      multiClassClassifier0.setSeed(84);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedRecall();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass((-2125.50952791), (-2));
      OneR oneR0 = new OneR();
      String string0 = "debugTipText";
      AbstractOutput.fromCommandline("debugTipText");
      CSV cSV0 = new CSV();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.correct();
      evaluation0.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      instances0.enumerateAttributes();
      AbstractOutput.fromCommandline(".arff");
      CSV cSV0 = new CSV();
      SGDText sGDText1 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sGDText1);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.SFSchemeEntropy();
      evaluation0.weightedFMeasure();
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(8);
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.correct();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.numTruePositives(100);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 300.0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.meanAbsoluteError();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      multiClassClassifier0.setSeed(62);
      evaluation0.equals(multiClassClassifier0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.trueNegativeRate((-1));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances0, 1604, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1863.070863852), (-1863.070863852));
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]6[~_h8+");
      textDirectoryLoader0.getRevision();
      evaluation0.KBRelativeInformation();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Environment.getSystemWide();
      evaluation0.kappa();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CzsKB");
      costSensitiveClassifier0.costMatrixSourceTipText();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      instances0.lastIndexOf(attributeSelectedClassifier0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.remove((Object) evaluation0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_SumErr;
      evaluation0.totalCost();
      try { 
        evaluation0.evaluateModelOnce((Classifier) attributeSelectedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      evaluation0.areaUnderROC(4);
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      try { 
        Evaluation.handleCostOption(".arff", 1431655765);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.m_Incorrect;
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      multiClassClassifier0.setSeed(84);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.equals(multiClassClassifierUpdateable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.makeOptionString(decisionStump0, true);
      double double0 = KStarConstants.FLOOR;
      decisionStump0.getCapabilities();
      ArffLoader arffLoader0 = new ArffLoader();
      C45Loader c45Loader0 = new C45Loader();
      c45Loader0.retrieveFile();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", 1431655765);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-834.73425);
      doubleArray0[1] = (-834.73425);
      doubleArray0[2] = (-1647.143);
      evaluation0.m_ClassIsNominal = false;
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanAbsoluteError();
      KStar kStar0 = new KStar();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1647.143));
      evaluation1.setDiscardPredictions(false);
      try { 
        evaluation0.toClassDetailsString("main");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockFile mockFile0 = new MockFile("much");
      double double0 = Evaluation.MIN_SF_PROB;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.getClassPriors();
      evaluation0.addNumericTrainClass(4.9E-324, (-886.67720242969));
      evaluation0.rootRelativeSquaredError();
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Object object0 = testInstances0.clone();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.weightedFalseNegativeRate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      evaluation0.num2ShortID((-2), charArray0, 0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-1525), ((TestInstances) object0).DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      evaluation0.weightedFalseNegativeRate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      evaluation0.num2ShortID((-1), charArray0, 2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      Capabilities capabilities0 = reliefFAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ReliefFAttributeEval reliefFAttributeEval0 = new ReliefFAttributeEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@data", true);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-834.73425);
      textDirectoryLoader0.getDirectory();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.totalCost();
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.m_Unclassified = (double) 1;
      CSV cSV0 = new CSV();
      SGDText sGDText1 = new SGDText();
      evaluation0.trueNegativeRate(1);
      C45Loader c45Loader0 = new C45Loader();
      C45Loader.main(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.areaUnderROC((-2));
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        Evaluation.evaluateModel((Classifier) sGDText1, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SGDText:
         // 
         // -F
         // \tSet the loss function to minimize. 0 = hinge loss (SVM), 1 = log loss (logistic regression)
         // \t(default = 0)
         // -outputProbs
         // \tOutput probabilities for SVMs (fits a logsitic
         // \tmodel to the output of the SVM)
         // -L
         // \tThe learning rate (default = 0.01).
         // -R <double>
         // \tThe lambda regularization constant (default = 0.0001)
         // -E <integer>
         // \tThe number of epochs to perform (batch learning only, default = 500)
         // -W
         // \tUse word frequencies instead of binary bag of words.
         // -P <# instances>
         // \tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)
         // -M <double>
         // \tMinimum word frequency. Words with less than this frequence are ignored.
         // \tIf periodic pruning is turned on then this is also used to determine which
         // \twords to remove from the dictionary (default = 3).
         // -normalize
         // \tNormalize document length (use in conjunction with -norm and -lnorm)
         // -norm <num>
         // \tSpecify the norm that each instance must have (default 1.0)
         // -lnorm <num>
         // \tSpecify L-norm to use (default 2.0)
         // -lowercase
         // \tConvert all tokens to lowercase before adding to the dictionary.
         // -stoplist
         // \tIgnore words that are in the stoplist.
         // -stopwords <file>
         // \tA file containing stopwords to override the default ones.
         // \tUsing this option automatically sets the flag ('-stoplist') to use the
         // \tstoplist if the file exists.
         // \tFormat: one stopword per line, lines starting with '#'
         // \tare interpreted as comments and ignored.
         // -tokenizer <spec>
         // \tThe tokenizing algorihtm (classname plus parameters) to use.
         // \t(default: weka.core.tokenizers.WordTokenizer)
         // -stemmer <spec>
         // \tThe stemmering algorihtm (classname plus parameters) to use.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText0 = new SGDText();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      sGDText0.setDebug(true);
      Integer integer0 = new Integer(1);
      ArffLoader arffLoader0 = new ArffLoader();
      MockRandom mockRandom0 = new MockRandom((-267L));
      UnaryOperator.identity();
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.addNumericTrainClass(0.0, 100.0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_SumClassPredicted;
      ArffLoader arffLoader0 = new ArffLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.addNumericTrainClass(100.0, 100.0);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-834.73425);
      textDirectoryLoader0.getDirectory();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.7976931348623157E308);
      evaluation0.weightedFalseNegativeRate();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifier0.setSeed(1);
      char[] charArray0 = new char[2];
      evaluation0.num2ShortID(727, charArray0, 2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Environment environment0 = new Environment();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = ScrollPaneConstants.VIEWPORT;
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      MockFile mockFile0 = new MockFile(".arff");
      double double0 = Evaluation.MIN_SF_PROB;
      OneR oneR0 = new OneR();
      REPTree rEPTree0 = new REPTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      evaluation0.weightedTrueNegativeRate();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("@relation");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("threshold-file");
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vector<MultilayerPerceptron> vector0 = new Vector<MultilayerPerceptron>();
      evaluation0.toMatrixString("Index out of range");
      AbstractOutput.fromCommandline("@relation");
      CSV cSV0 = new CSV();
      SGDText sGDText0 = new SGDText();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Vector<MultilayerPerceptron> vector0 = new Vector<MultilayerPerceptron>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CSV cSV0 = new CSV();
      SGDText sGDText1 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sGDText0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.priorEntropy();
      evaluation0.numTruePositives(106);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Byte byte0 = new Byte((byte) (-100));
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      BallTree ballTree0 = new BallTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.addNumericTrainClass((-2), 16.0);
      double double0 = evaluation0.m_MinTarget;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      evaluation0.areaUnderROC((-166));
      ArffLoader arffLoader0 = new ArffLoader();
      IBk iBk0 = new IBk((-166));
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.totalCost();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      C45Loader c45Loader0 = new C45Loader();
      MockFile mockFile0 = new MockFile(".bsi", ".bsi");
      c45Loader0.getRevision();
      c45Loader0.retrieveFile();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(1329);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      evaluation0.weightedPrecision();
      CostMatrix costMatrix0 = new CostMatrix(16);
      evaluation0.relativeAbsoluteError();
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-292.72912522477714);
      doubleArray0[1] = (-1863.070863852);
      evaluation0.updateMargins(doubleArray0, 2, (-292.72912522477714));
      evaluation0.SFEntropyGain();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement((Instances) null);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.getClassPriors();
      evaluation0.addNumericTrainClass(0.0, 100.0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFEntropyGain();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.totalCost();
      evaluation0.KBMeanInformation();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      C45Loader c45Loader0 = new C45Loader();
      String string0 = Action.NAME;
      c45Loader0.retrieveFile();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.trueNegativeRate((-905));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      double double0 = evaluation0.m_SumErr;
      evaluation0.SFEntropyGain();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.shouldAllThrowIOExceptions();
      regressionByDiscretization0.getTechnicalInformation();
      regressionByDiscretization0.setDeleteEmptyBins(false);
      SGDText sGDText0 = new SGDText();
      textDirectoryLoader0.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Environment environment0 = Environment.getSystemWide();
      databaseLoader0.setEnvironment(environment0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      CSV cSV0 = new CSV();
      SGDText sGDText1 = new SGDText();
      evaluation0.errorRate();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(111);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.addNumericTrainClass((-2), 16.0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.areaUnderROC((-166));
      ArffLoader arffLoader0 = new ArffLoader();
      IBk iBk0 = new IBk((-166));
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.totalCost();
      evaluation0.confusionMatrix();
      evaluation0.pctIncorrect();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.trueNegativeRate(813);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function<Container, DenseInstance> function0 = (Function<Container, DenseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Container, ? extends Instance>) function0);
      evaluation0.setDiscardPredictions(true);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Function<Object, MockJapaneseDate> function1 = (Function<Object, MockJapaneseDate>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Instance, ? extends MockJapaneseDate>) function1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instances0.replaceAll(unaryOperator0);
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.kappa();
      evaluation0.relativeAbsoluteError();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.m_ConfLevel;
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Byte byte0 = new Byte((byte) (-100));
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      BallTree ballTree0 = new BallTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      C45Loader c45Loader0 = new C45Loader();
      C45Loader.main(testInstances0.DEFAULT_WORDS);
      c45Loader0.retrieveFile();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4408.2598817, (-333.319271));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      databaseLoader0.setPassword("evaluatorTipText");
      evaluation0.unweightedMacroFmeasure();
      Environment environment0 = Environment.getSystemWide();
      environment0.removeVariable(" ");
      databaseLoader0.setEnvironment(environment0);
      evaluation0.areaUnderROC((-2));
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.addNumericTrainClass(0.95, 0.95);
      arffLoader0.getNextInstance(instances0);
      evaluation0.equals((Object) null);
      evaluation0.weightedTrueNegativeRate();
      instances0.parallelStream();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.relativeAbsoluteError();
      SMO sMO0 = new SMO();
      try { 
        evaluation0.evaluateModelOnce((Classifier) sMO0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getTechnicalInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.remove((Object) evaluation0);
      evaluation0.toSummaryString(false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.fMeasure(0);
      evaluation0.toClassDetailsString("threshold-file");
      evaluation0.SFMeanEntropyGain();
      IBk iBk0 = new IBk(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) iBk0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Environment environment0 = new Environment();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String string0 = ScrollPaneConstants.VIEWPORT;
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 1530.252440376);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double double0 = KStarConstants.INITIAL_STEP;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.nextDouble();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("Ky{g ");
      Evaluation.handleCostOption((String) null, 67);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[2] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      C45Loader c45Loader0 = new C45Loader();
      MockFile mockFile0 = new MockFile(".bsi", ".bsi");
      c45Loader0.getRevision();
      c45Loader0.retrieveFile();
      c45Loader0.setUseRelativePath(true);
      C45Loader.main(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AbstractOutput.fromCommandline((String) null);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      SGDText sGDText0 = new SGDText();
      AdditiveRegression additiveRegression1 = new AdditiveRegression(additiveRegression0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) additiveRegression0, instances0, objectArray0);
      evaluation0.rootRelativeSquaredError();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CSV cSV0 = new CSV();
      SGDText sGDText0 = new SGDText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multilayerPerceptron0);
      evaluation0.trueNegativeRate((-1846926013));
      C45Loader c45Loader0 = new C45Loader();
      C45Loader.main(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      AbstractOutput.fromCommandline("qR`M7M`TGo9Rqvl3'J");
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      SGDText sGDText1 = new SGDText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      evaluation0.m_ClassPriors = doubleArray0;
      AdditiveRegression additiveRegression2 = new AdditiveRegression(additiveRegression0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSV0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) sGDText1;
      objectArray0[3] = (Object) cSV0;
      try { 
        evaluation1.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Buffer is null!
         //
         verifyException("weka.classifiers.evaluation.output.prediction.AbstractOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) (-1);
      C45Loader c45Loader0 = new C45Loader();
      MockFile mockFile0 = new MockFile("threshold-file", " ");
      c45Loader0.getRevision();
      c45Loader0.retrieveFile();
      c45Loader0.setUseRelativePath(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      binarySparseInstance0.setWeight((-1373.467501));
      evaluation0.SFPriorEntropy();
      Integer integer0 = new Integer(47);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_WithClass;
      UnaryOperator.identity();
      Function.identity();
      evaluation0.setDiscardPredictions(true);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      evaluation0.updatePriors(binarySparseInstance0);
      evaluation0.toSummaryString();
      evaluation0.trueNegativeRate(1);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      sGDText0.setUseStopList(false);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      SGDText sGDText1 = new SGDText();
      double[] doubleArray0 = new double[18];
      C45Loader c45Loader0 = new C45Loader();
      MockFile mockFile0 = new MockFile("threshold-file", " ");
      c45Loader0.getRevision();
      c45Loader0.retrieveFile();
      c45Loader0.setUseRelativePath(true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      Integer integer0 = new Integer(47);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_WithClass;
      UnaryOperator.identity();
      Function.identity();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.updatePriors(binarySparseInstance0);
      evaluation0.toSummaryString();
      evaluation0.trueNegativeRate(1);
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.m_Unclassified = (double) 1;
      CSV cSV0 = new CSV();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString(false);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      C45Loader.main(testInstances0.DEFAULT_WORDS);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      SGDText sGDText1 = new SGDText();
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[9];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      instances0.listIterator(0);
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      M5P m5P0 = new M5P();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate();
          SGDText sGDText0 = new SGDText();
          NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
          RandomCommittee randomCommittee0 = new RandomCommittee();
          MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
          TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
          SGDText sGDText1 = new SGDText();
          AdditiveRegression additiveRegression0 = new AdditiveRegression(multilayerPerceptron0);
          C45Loader c45Loader0 = new C45Loader();
          C45Loader.main(testInstances0.DEFAULT_WORDS);
          DatabaseLoader databaseLoader0 = new DatabaseLoader();
          CSV cSV0 = new CSV();
          AdditiveRegression additiveRegression1 = new AdditiveRegression();
          SGDText sGDText2 = new SGDText();
          double[] doubleArray0 = new double[5];
          doubleArray0[1] = (double) (-1);
          doubleArray0[3] = (double) 0;
          doubleArray0[4] = (double) (-1);
          AdditiveRegression additiveRegression2 = new AdditiveRegression(additiveRegression0);
          instances0.stream();
          Evaluation evaluation0 = new Evaluation(instances0);
          Object[] objectArray0 = new Object[9];
          Object object0 = Image.UndefinedProperty;
          objectArray0[1] = object0;
          objectArray0[2] = (Object) sGDText2;
          evaluation0.evaluateModel((Classifier) sGDText1, instances0, objectArray0);
          double double0 = KStarConstants.EPSILON;
          evaluation0.truePositiveRate(0);
          try { 
            Evaluation.handleCostOption("@data", 1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't open file null.
             //
             verifyException("weka.classifiers.Evaluation", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) 0;
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[9];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      instances0.listIterator();
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.toClassDetailsString();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      sGDText1.setStemmer(lovinsStemmer0);
      sGDText1.setLambda(345.1172);
      double[] doubleArray0 = new double[18];
      doubleArray0[16] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[11];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.toSummaryString(".arff", true);
      M5P m5P0 = new M5P();
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      sGDText1.setStemmer(lovinsStemmer0);
      sGDText1.setLambda(345.1172);
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      sGDText0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[11];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.toSummaryString(".arff", false);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      sGDText1.setStemmer(lovinsStemmer0);
      sGDText1.setLambda(345.1172);
      double[] doubleArray0 = new double[18];
      doubleArray0[16] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[11];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.toSummaryString(".arff", true);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      evaluation0.trueNegativeRate((-2));
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LinearRegression linearRegression0 = new LinearRegression();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SelectedTag selectedTag0 = hierarchicalClusterer0.getLinkType();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      System.setCurrentTimeMillis(0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.useNoPriors();
      evaluation0.setDiscardPredictions(false);
      String[] stringArray0 = null;
      Instances.main((String[]) null);
      evaluation0.KBMeanInformation();
      MockRandom mockRandom1 = new MockRandom(137L);
      // Undeclared exception!
      try { 
        mockRandom1.ints((-1081), (-1081));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "useStopListTipText");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1863.070863852), (-1863.070863852));
      double double0 = KStarConstants.INITIAL_STEP;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Classifier not incremental, or no test file provided: can't use both train and model file.";
      stringArray0[0] = ".arff";
      Instances.test(stringArray0);
      evaluation0.addNumericTrainClass(18.866445149855924, 100.0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = NimbusStyle.LARGE_SCALE;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'u';
      intArray0[1] = (int) 'b';
      intArray0[2] = (int) 'D';
      evaluation0.setNumericPriorsFromBuffer();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.05, intArray0, 4);
      instances0.add((Instance) binarySparseInstance0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      intArray0[2] = (int) 'D';
      charArray0[2] = 'u';
      charArray0[3] = 'D';
      evaluation0.num2ShortID(1374, charArray0, 1374);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[2] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      C45Loader c45Loader0 = new C45Loader();
      MockFile mockFile0 = new MockFile(".bsi", ".bsi");
      c45Loader0.getRevision();
      c45Loader0.retrieveFile();
      c45Loader0.setUseRelativePath(true);
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      binarySparseInstance0.setDataset(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      binarySparseInstance0.setWeight(0.0);
      evaluation0.SFPriorEntropy();
      Integer integer0 = new Integer((-1));
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_WithClass;
      UnaryOperator.identity();
      Function.identity();
      evaluation0.setDiscardPredictions(true);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation0.updateStatsForPredictor(47, binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SGDText sGDText0 = new SGDText();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SGDText sGDText1 = new SGDText();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      sGDText1.setStemmer(lovinsStemmer0);
      sGDText1.setLambda(345.1172);
      double[] doubleArray0 = new double[18];
      doubleArray0[16] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[11];
      Object object0 = Image.UndefinedProperty;
      objectArray0[1] = object0;
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.toSummaryString(".arff", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.SFSchemeEntropy();
      evaluation0.falseNegativeRate(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootMeanSquaredError();
      evaluation1.setDiscardPredictions(true);
  }
}
