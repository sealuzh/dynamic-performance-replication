/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 23:35:22 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      byte[] byteArray0 = new byte[1];
      stringReader0.close();
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte)25, (-178));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 96);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 96. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringReader0.read(charBuffer0);
      jVCParserTokenManager0.jjnewStateCnt = 11;
      jVCParserTokenManager0.SwitchTo(0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("IN_EXPR2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      stringReader0.skip(780L);
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 1);
      jVCParserTokenManager1.ReInit(simpleCharStream2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 40, (-1669));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 7, (int) (byte) (-96));
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(7, token0.endLine);
      assertEquals("\uFFFD", token0.toString());
      assertEquals(16, token0.kind);
      assertEquals(7, token0.beginLine);
      assertEquals((-96), token0.endColumn);
      assertEquals((-96), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-12));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -12. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(1, token0.kind);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = null;
      try {
        jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 24. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.debugStream = jVCParserTokenManager0.debugStream;
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(14, simpleCharStream0.getBeginLine());
      assertEquals(17, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(34, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&tD_c");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(34, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(318);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 318. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_CODE");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(34, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(40, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0000");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1030, 1030);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      Token token0 = jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      token0.endColumn = (int) (byte) (-116);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)92;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)92, (int) (byte)92);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(92, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(14, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "com.pmdesigns.jvc.tools.JVCParserConstants";
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.available = 2;
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      MockFile mockFile0 = new MockFile("<EOF> ", "");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockFile0, "c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // c
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, pushbackInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 93, 1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(93, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.available = 2;
      PrintStream printStream0 = jVCParserTokenManager0.debugStream;
      jVCParserTokenManager0.setDebugStream(printStream0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1663, 70, 1663);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, mockFileInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager0.defaultLexState = 70;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 30, (-3318));
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals((-3310), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("5/");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 2, 2);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.setTabSize(3972);
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals("", token1.toString());
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(14, token1.beginLine);
      assertEquals(14, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      jVCParserTokenManager0.getNextToken();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(34, simpleCharStream0.getBeginLine());
      assertEquals(34, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      StringReader stringReader0 = new StringReader("Ov~8");
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '/';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = '`';
      stringReader0.read(charArray0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      int int0 = 15;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[,i");
      StringReader stringReader1 = new StringReader("8\"[,i");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      simpleCharStream0.setTabSize(1);
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 105, (int) (byte) (-128));
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals((-128), token0.endColumn);
      assertEquals("\uFFFD", token0.toString());
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals((-128), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager1.getNextToken();
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager2.getNextToken();
      assertEquals(14, simpleCharStream0.getBeginLine());
      assertEquals(19, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte) (-122), (int) (byte)0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals((-122), token0.endLine);
      assertEquals("\u0000", token0.toString());
      assertEquals((-122), token0.beginLine);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      Token token0 = jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      token0.endColumn = (int) (byte) (-99);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (-2147483647), (-2147483647));
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals("\t", token1.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-1));
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 33. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte) (-117), 40);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-117), token0.beginLine);
      assertEquals((-117), token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals("\uFFFD", token0.toString());
      assertEquals(40, token0.endColumn);
      assertEquals(40, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 34. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      Token token0 = jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      token0.endColumn = (int) (byte) (-116);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 1489, (-2807));
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1489, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "\"[[\"";
      StringReader stringReader0 = new StringReader("\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager((SimpleCharStream) null, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)14, 2);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals("\uFFFD", token0.toString());
      assertEquals(14, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.available = 2604;
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[,i");
      StringReader stringReader1 = new StringReader("8\"[,i");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte) (-128), 16);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals("\uFFFD", token0.toString());
      
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(16, token1.beginColumn);
      assertEquals(16, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals((-128), token1.endLine);
      assertEquals((-128), token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&tD_c");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte) (-128), (int) (byte)1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, (int) (byte)1);
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals("[", token0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager2.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.skip(34);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(34, simpleCharStream0.getBeginLine());
      assertEquals(41, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 34, (int) (byte)5);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(34, token0.endLine);
      assertEquals(5, token0.beginColumn);
      assertEquals(34, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals("\uFFFD", token0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '/';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 347);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 347. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 55, 748, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 5);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 1000);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1000. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager0.jjmatchedKind = 65;
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(105, simpleCharStream0.getBeginLine());
      assertEquals(105, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, (-786), 10);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.bufpos = 0;
      jVCParserTokenManager0.jjnewStateCnt = 0;
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.curLexState = 0;
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'R';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[2] = 'm';
      charArray0[3] = '^';
      charArray0[4] = '#';
      charArray0[5] = 'T';
      stringReader0.read(charArray0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 10. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("iZWe0Ee(1-HxS");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, token1.beginColumn);
      
      Token token2 = jVCParserTokenManager2.getNextToken();
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals("W", token2.toString());
      assertEquals(1, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(18, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 0);
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W m@ooZTfpwpC^/Z");
      PrintStream printStream0 = mockPrintStream0.format("W m@ooZTfpwpC^/Z", (Object[]) jVCParserTokenManager0.lexStateNames);
      jVCParserTokenManager0.setDebugStream(printStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.jjround = 3;
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager2.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 188, 17, 188);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 97, (-3013));
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(97, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 35, (int) (byte)92);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(35, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[6&t*D_c~");
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      simpleCharStream0.setTabSize(1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '`';
      stringReader0.read(charArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 5, (-1293));
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-1292), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.available = 2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      simpleCharStream1.setTabSize(2);
      int int0 = 0;
      simpleCharStream1.ReInit((InputStream) pipedInputStream0, 1, 1, 0);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      int int1 = 4703;
      simpleCharStream0.backup(4703);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[=");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1704, 17, 17);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2834);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2834. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 55, 748, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 5);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(55, simpleCharStream0.getEndLine());
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(751, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0vg#h_5ts1]/yC#(,n");
      StringReader stringReader1 = new StringReader("0vg#h_5ts1]/yC#(,n");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 34, 34, 34);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("0", token0.toString());
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(34, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      jVCParserTokenManager1.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager2.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(14, simpleCharStream0.getBeginLine());
      assertEquals("B", token0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager1.getNextToken();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 110. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[,i");
      StringReader stringReader1 = new StringReader("8\"[,i");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.jjround = 3;
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 2222);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2222. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vFl24a},hM~E)");
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 166, 4096);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      int int0 = 61;
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '`';
      charArray0[2] = 'l';
      stringReader0.read(charArray0);
      jVCParserTokenManager0.defaultLexState = 61;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-2185));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2185. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.jjround = 3;
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("[[!");
      StringReader stringReader1 = new StringReader("#iZWe0Ee(1-HxS");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager2 = null;
      try {
        jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-950), 15);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager2.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(18, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 105, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 49, 1242);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(6, token0.kind);
      
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertEquals(6, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(50, token1.beginLine);
      assertEquals("\r", token1.toString());
      assertEquals(50, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 3, (int) (byte)25);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, token0.beginLine);
      assertEquals("\u0000", token0.toString());
      assertEquals(25, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(25, token0.beginColumn);
      assertEquals(3, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&tD_c");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      simpleCharStream0.GetImage();
      jVCParserTokenManager0.jjmatchedKind = 1;
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      PrintStream printStream0 = mockPrintStream0.format("QT{iZ]u7zx jC;9N.:", (Object[]) jVCParserTokenManager0.lexStateNames);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '@';
      simpleCharStream0.buffer = charArray0;
      jVCParserTokenManager0.setDebugStream(printStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(2048);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2048. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 40, (-1669));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 7, (int) (byte)10);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]!4e/|VrXf ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2435), (-2435), 15);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2435), token0.beginColumn);
      assertEquals((-2435), token0.beginLine);
      assertEquals((-2435), token0.endColumn);
      assertEquals("]", token0.toString());
      assertEquals((-2435), token0.endLine);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)92;
      byteArray0[6] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)92, (int) (byte)92);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals("\t", token0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0vg#h_5ts1]/yC#(,n");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 35, (int) (byte)14);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(18, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, mockFileInputStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(14, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AT:yv@3JMv");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0);
      int int0 = 0;
      stringReader0.read();
      simpleCharStream0.setTabSize(0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte)25, (-178));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(25, token1.endLine);
      assertEquals(25, token1.beginLine);
      assertEquals((-178), token1.endColumn);
      assertEquals((-178), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-1530), 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      jVCParserTokenManager0.defaultLexState = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "", (-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.JVCParserConstants");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[6&t*D_c~");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte) (-122), (int) (byte)63);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-122), simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 188, 17, 188);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 17, 15, 2383);
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager2.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"[[==\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 5, 0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 318);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 318. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[[!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 188, 17, 188);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 97, (-3013));
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager2.jjnewStateCnt = 17;
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager2.getNextToken();
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_CODE");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 40, 40);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.getNextToken();
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(41, token1.beginColumn);
      assertEquals(34, token1.beginLine);
      assertEquals("N", token1.toString());
      assertEquals(41, token1.endColumn);
      assertEquals(34, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[mB[\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.readChar();
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      simpleCharStream0.setTabSize((-3318));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      jVCParserTokenManager1.jjFillToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0);
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(14, simpleCharStream0.getBeginLine());
      assertEquals("m", token0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, 8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 8. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, mockFileInputStream0);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, 41, (-1669));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 7, (int) (byte)10);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(7, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[[\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 14, 14, 14);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.getNextToken();
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(14, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8\"[,i");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      simpleCharStream0.setTabSize(1);
      jVCParserTokenManager1.jjFillToken();
      jVCParserTokenManager1.getNextToken();
      jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream1, 10, 10);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 52, 5);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.adjustBeginLineColumn(100, 0);
      jVCParserTokenManager0.curLexState = (-1);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(52);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 52. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 10;
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4, 6);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      StringReader stringReader1 = new StringReader("DEFAULT");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '`';
      charArray0[2] = ';';
      charArray0[3] = 'l';
      stringReader1.read(charArray0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[&tD_c");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 34, 34, 34);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte) (-117), 34);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-117));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -117. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
