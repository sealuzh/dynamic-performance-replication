/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:39:27 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.log.LogFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("4{/@KEx-%)Jn%y5.");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("4{/@KEx-%)Jn%y5.", "4{/@KEx-%)Jn%y5.", "4{/@KEx-%)Jn%y5.");
      assertEquals("'4{/@KEx-%)Jn%y5.'", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(" REFERENCES ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("+T&T)");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesStructure("constraint");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "constraint";
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[8] = "constraint";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[1] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[2] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[3] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[4] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[5] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[6] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[7] = "AC]BOhCTE'7uaWA3Yl";
      stringArray0[8] = "AC]BOhCTE'7uaWA3Yl";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AC]BOhCTE'7uaWA3Yl", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT AC]BOhCTE'7uaWA3Yl ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.removeComments("truncate$");
      String string0 = SQLUtil.normalize("truncate$", true);
      assertEquals("truncate $", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.isProcedureCall("(, , , , , )");
      SQLUtil.normalize("(, , , , , )", false);
      DBSchema dBSchema0 = new DBSchema("(, , , , , )");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(,,,,,)", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "(,,,,,)", false, stringArray0);
      String string0 = Optimizer.USE_STATISTICS;
      dBSchema0.getTable("exec");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$Hl<G+NO3]W+";
      stringArray0[1] = "drop index";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "XSDA6.S", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ($Hl<G+NO3]W+, drop index)", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("] key: ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "seSe-t into";
      stringArray0[1] = "seSe-t into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "] key: ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (seSe-t into, seSe-t into)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'2$+Th1p4T,C";
      stringArray0[1] = "'2$+Th1p4T,C";
      stringArray0[2] = "'2$+Th1p4T,C";
      String string0 = SQLUtil.renderColumnListWithTableName("'2$+Th1p4T,C", stringArray0);
      assertEquals("'2$+Th1p4T,C.'2$+Th1p4T,C, '2$+Th1p4T,C.'2$+Th1p4T,C, '2$+Th1p4T,C.'2$+Th1p4T,C", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "amd4dJ6RxWM\"LqU";
      String string0 = LogFactory.RT_READONLY;
      SQLUtil.leftJoin("readonly", stringArray0, "5vuSUuW3>/7 fc)O", "readonly", stringArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("5vuSUuW3>/7 fc)O", stringArray0[2], mockThaiBuddhistDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#l:";
      stringArray0[1] = "#l:";
      stringArray0[2] = "#l:";
      stringArray0[3] = "#l:";
      stringArray0[4] = "#l:";
      String string0 = SQLUtil.innerJoin("#l:", stringArray0, "#l:", "execgu3nowp-wv*q{", stringArray0);
      assertEquals("#l: as execgu3nowp-wv*q{ on #l:.#l: = execgu3nowp-wv*q{.#l: and #l:.#l: = execgu3nowp-wv*q{.#l: and #l:.#l: = execgu3nowp-wv*q{.#l: and #l:.#l: = execgu3nowp-wv*q{.#l: and #l:.#l: = execgu3nowp-wv*q{.#l:", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = null;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
      
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("()");
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM () WHERE ", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = new Boolean(" REFERENCES ");
      DBPackage dBPackage0 = new DBPackage("create unique index+t&\t)", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("create unique index+t&\t)", dBPackage0);
      List<DBProcedure> list0 = new ArrayList<DBProcedure>();
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("create unique index+t&\t).create unique index+t&\t)", string0);
      
      String string1 = SQLUtil.renderValue(dBProcedure0);
      assertEquals("create unique index+t&\t)", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&C*`q/r";
      stringArray0[1] = "&C*`q/r";
      String string0 = SQLUtil.join("&C*`q/r", "[s*M* /Sr", stringArray0, "ar7</> xIA^N,l", "closeActivationAction", stringArray0);
      assertEquals("&C*`q/r join ar7</> xIA^N,l as closeActivationAction on [s*M* /Sr.&C*`q/r = closeActivationAction.&C*`q/r and [s*M* /Sr.&C*`q/r = closeActivationAction.&C*`q/r", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3Nfe(ZDYV;*");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&C*`q/r", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT &C*`q/r ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("IcZvm[W%M\"Z", dBCatalog0);
      dBSchema0.getDatabase();
      DBCatalog dBCatalog1 = new DBCatalog("IcZvm[W%M\"Z", (Database) null);
      String string0 = SQLUtil.typeAndName(dBCatalog1);
      assertEquals("catalog IcZvm[W%M\"Z", string0);
      assertNotNull(string0);
      
      Boolean boolean0 = new Boolean("i#KM0");
      String string1 = RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER;
      String string2 = SQLUtil.ownerDotComponent(dBCatalog1);
      assertEquals("IcZvm[W%M\"Z", string2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, (-2063), "alter index");
      defaultDBTable0.getColumns();
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setDefaultValue("alter index");
      DBDataType.getInstance((-2063), "creae unique indexhr}");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBTable0);
      MockFile mockFile0 = new MockFile("A!rg2XU_m");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("alter index");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
      
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BigDecimal", (DBSchema) null);
      defaultDBTable0.setSchema((DBSchema) null);
      String[] stringArray0 = new String[20];
      stringArray0[0] = "BigDecimal";
      stringArray0[1] = "''";
      stringArray0[2] = "BigDecimal";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "BigDecimal", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (BigDecimal, '', BigDecimal, , , , , , , , , , , , , , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      jdbcClob jdbcClob0 = new jdbcClob("()");
      StringReader stringReader0 = new StringReader("()");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IcZvm[W%M\"Z");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("B33Q:<%jKTj#Wg ");
      defaultDBTable1.getPrimaryKeyConstraint();
      TableContainer tableContainer0 = new TableContainer("B33Q:<%jKTj#Wg ");
      MockFile mockFile0 = new MockFile("fNpL.", "fNpL.");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-4), " join ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fNpL.", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Boolean boolean0 = new Boolean("()");
      SQLUtil.removeComments("create unique indexh9sr}");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      jdbcClob jdbcClob0 = new jdbcClob("()");
      StringReader stringReader0 = new StringReader("()");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IcZvm[W%M\"Z");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("B33Q:<%jKTj#Wg ");
      defaultDBTable1.getPrimaryKeyConstraint();
      TableContainer tableContainer0 = new TableContainer("B33Q:<%jKTj#Wg ");
      tableContainer0.getSchema();
      MockFile mockFile0 = new MockFile("fNpL.", "fNpL.");
      DBColumn[] dBColumnArray0 = new DBColumn[14];
      DBDataType dBDataType0 = DBDataType.getInstance(1514, " join ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fNpL.", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rename";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "PRIMARY KEY ";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "_/L1Wb";
      stringArray0[8] = null;
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(rename, , , PRIMARY KEY , , , , _/L1Wb, )", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique index");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "create unique index";
      stringArray0[4] = "create unique index";
      System.setCurrentTimeMillis(1640L);
      SQLUtil sQLUtil0 = new SQLUtil();
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create materialized view()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = TypeId.REAL_NAME;
      jdbcClob jdbcClob0 = new jdbcClob("REAL");
      StringReader stringReader0 = new StringReader("REAL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "closeActivationAction";
      String string1 = SQLUtil.join((String) null, "closeActivationAction", stringArray0, (String) null, "create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null", stringArray0);
      assertEquals("null as create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null on closeActivationAction.null = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.null and closeActivationAction.closeActivationAction = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.closeActivationAction", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("REAL");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null as create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null on closeActivationAction.null = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.null and closeActivationAction.closeActivationAction = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.closeActivationAction", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"null as create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null on closeActivationAction.null = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.null and closeActivationAction.closeActivationAction = create table/;,6d~i)%#^*\" q] /;,6d~i)%#^*\" q] null.closeActivationAction\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.normalize("vEou%V0zk33T*1x\u0003", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("N+A^V6^Sp#-\"z4 ", false);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("rename", 13);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N + A ^ V6 ^ S  p # - \"z4 \"");
      defaultDBTable0.getPrimaryKeyConstraint();
      MockFile mockFile0 = new MockFile("N+A^V6^Sp#-\"z4 ", "N+A^V6^Sp#-\"z4 ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">A@*)*)wy^E]");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.normalize("Le'gth is not available.", true);
      SQLUtil.isProcedureCall("Le 'gth is not available.'");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = TypeId.TIME_NAME;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil.normalize("knr(t", true);
      DBSchema dBSchema0 = new DBSchema("selectjpw7dq=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view", dBSchema0);
      String string0 = SchemaDescriptor.STD_SYSTEM_DIAG_SCHEMA_NAME;
      SQLUtil.ownerDotComponent(dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder(")Q4D_4c;Ny/RCi.");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "updatetimesta";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "updatetimesta = 'updatetimesta'");
      StringBuilder stringBuilder1 = stringBuilder0.append('H');
      SQLUtil.addRequiredCondition("updatetimesta = 'updatetimesta'", stringBuilder1);
      SQLUtil.isDDL("updatetimesta");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = PermDescriptor.UDT_TYPE;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("TYPE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TYPE", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "TYPE", true, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("W|", dBSchema0);
      dBSchema0.isIdentical(defaultDBTable1);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable((String) null);
      dBUniqueConstraint0.addColumnName("W|");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT TYPE UNIQUE (, , , , W|)", defaultDBTable2, 90022, "CONSTRAINT TYPE UNIQUE (, , , , W|)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("org.firebirdsql.jdbc.field.FBField", true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter sessionorg.hsql.library.", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType.getInstance(1398, "/;,6d~i)%#^*\" q]");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/;,6d~i)%#^*\" q]", (DBTable) null, 1398, "/;,6d~i)%#^*\" q]");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = FBConnectionProperties.DEFAULT_HOLDABLE_RS_PROPERTY;
      SQLUtil.normalize("/;,6d~i)%#^*\" q] /;,6D~I)%#^*\" Q] NULL", true);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materia~ized view");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("/;,6d~i)%#^*\" q] /;,6D~I)%#^*\" Q] NULL", true, (DBTable) null, "create materia~ized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("{Hx,ew[qBWN~Qbm7Xf");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", ", dBSchema0);
      String string0 = SchemaDescriptor.STD_SYSTEM_DIAG_SCHEMA_NAME;
      SQLUtil.mutatesDataOrStructure("insert4hmbxquwz/b");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "{Hx,ew[qBWN~Qbm7Xf");
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("4hMBxqUwz/B%M!]&L'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("'", stringBuilder0);
      assertEquals("'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      SQLUtil.join("CLOB", "()", stringArray0, "()", "()", stringArray0);
      SQLUtil.substituteMarkers("CDzg", "insertexec", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "k36eD~", true, stringArray0);
      File file0 = FileUtil.canonicalFile("kCHZ=ye]|<}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("CWW(!Rh);o)U '+w");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      MockFile mockFile0 = new MockFile((String) null, " /* a~E9E ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" /* a~E9E ", false, defaultDBTable0, "- 0");
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      assertEquals("CHECK - 0", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_STRING;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Boolean boolean1 = new Boolean(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F", defaultDBTable0, (-2040), "F");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.isQuery("F");
      String string1 = RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER;
      MockFile.createTempFile("derby.storage.streamFileBufferSize", "5Q:,J.{XcGU~r0sS");
      defaultDBTable0.getPrimaryKeyConstraint();
      String string2 = RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER;
      MockFile.createTempFile("5Q:,J.{XcGU~r0sS", "F");
      MockFile mockFile0 = new MockFile("F");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("N+A^V6^Sp#-\"z4 ", false);
      assertEquals("N + A ^ V6 ^ S  p # - \"z4 \"", string0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("rename", 13);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N + A ^ V6 ^ S  p # - \"z4 \"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "N+A^V6^Sp#-\"z4 ", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("left", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      defaultDBTable0.equals("N + A ^ V6 ^ S  p # - \"z4 \"");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.firebirdsql.jdbc.field.FBField";
      stringArray0[1] = "left";
      stringArray0[2] = "org.firebirdsql.jdbc.field.FBField";
      defaultDBTable0.getUniqueConstraint("org.firebirdsql.jdbc.field.FBField");
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"N+A^V6^Sp#-\"z4 \" ", string1);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("N+A^V6^Sp#-\"z4 ");
      mockPrintWriter0.write("E");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isProcedureCall("CONSTRAINT \"N+A^V6^Sp#-\"z4 \" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = "setShort(String,short)";
      MockFile mockFile0 = new MockFile((String) null, "setShort(String,short)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      SQLUtil.substituteMarkers("CDzg", "insertexec", (Object) null);
      SQLUtil.mutatesDataOrStructure("SELECT* FROM ");
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT* FROM ");
      String string0 = "ALTER TABLE ";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("ALTER TABLE ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      SQLUtil.mutatesDataOrStructure("create unique index4hmbxquwz/b%m!]&l'");
      String string0 = Dependable.CONSTRAINT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("N+A^V6^Sp#-\"z4 ", false);
      assertEquals("N + A ^ V6 ^ S  p # - \"z4 \"", string0);
      
      DBSchema dBSchema0 = new DBSchema("N + A ^ V6 ^ S  p # - \"z4 \"");
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jdbc.field.FBField", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("org.firebirdsql.jdbc.field.FBField");
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "org.firebirdsql.jdbc.field.FBField");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null ORG.FIREBIRDSQL.JDBC.FIELD.FBFIELD(3) NULL", string1);
      
      String string2 = SQLUtil.renderValue(defaultDBTable0);
      assertEquals("org.firebirdsql.jdbc.field.FBField", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBDataType dBDataType0 = DBDataType.getInstance((-2159), "READ_BLOB_DB");
      DBDataType.getInstance((-2159), "READ_BLOB_DB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("READ_BLOB_DB", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("<missing ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(";");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      stringArray0[2] = "alter session";
      stringArray0[3] = "alter session";
      stringArray0[4] = "alter session";
      stringArray0[5] = "alter session";
      stringArray0[6] = "alter session";
      stringArray0[7] = "alter session";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "D^?K1<2";
      stringArray1[1] = "D^?K1<2";
      stringArray1[2] = "create materialized view";
      stringArray1[3] = "D^?K1<2";
      stringArray1[4] = "D^?K1<2";
      stringArray1[5] = "alter session";
      stringArray1[6] = "alter session";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter session", stringArray0, "D^?K1<2", "alter session", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_STRING;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Boolean boolean1 = new Boolean(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("F", defaultDBTable0, (-2040), "F");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      Character character0 = Character.valueOf('`');
      SQLUtil.renderValue(character0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jdbc.field.FBField");
      StringBuilder stringBuilder0 = new StringBuilder(1036);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("- ", 47);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      FBClob fBClob0 = new FBClob();
      defaultDBTable0.toString();
      try { 
        fBClob0.getSubString(3600000L, (-785));
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("4hMBxqUwz/B%M!]&L'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q]nkW.f{M I", dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("CLOB", stringBuilder0);
      SQLUtil.addOptionalCondition("'", stringBuilder0);
      assertEquals("CLOB or '", stringBuilder0.toString());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "constr";
      stringArray0[1] = null;
      stringArray0[2] = "CLOB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("4hMBxqUwz/B%M!]&L'", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = FBConnectionProperties.ISOLATION_PROPERTY;
      DBTable dBTable0 = null;
      DBDataType.getInstance(1375, "/;,6d~i)%#^*\" q]");
      Integer integer0 = RawTransaction.ABORT;
      String string1 = "^+[a$(Kk<.=wC7t";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("3_k>Io_;ZFkD*,}E", (DBTable) null, 1444, "^+[a$(Kk<.=wC7t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ^+[a$(Kk<.=wC7t
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_STRING;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Boolean boolean1 = new Boolean(true);
      Integer integer0 = RawTransaction.COMMIT;
      String string1 = "delete";
      DBDataType.getInstance((-2040), "delete");
      MockFile mockFile0 = new MockFile("FOREGN Kq ");
      String string2 = Dependable.DEFAULT;
      FileUtil.canonicalFile("CREATE_BUILD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Default", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", true, stringArray0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = TypeId.BINARY_NAME;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BINARY", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      Boolean boolean1 = new Boolean("getHb");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CLOB", (DBTable) null, (-1499223122), "truncate");
      String string1 = BTree.PROPERTY_MAX_ROWS_PER_PAGE_PARAMETER;
      SQLUtil.isDDL("h9SR}");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType1 = DBDataType.getInstance((-1499223122), "/;,6d~i)%#^*\" q]");
      defaultDBColumn1.setType(dBDataType1);
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType.getInstance((-1), "/;,6d~i)%#^*\" q]");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringBuilder stringBuilder0 = new StringBuilder(1375);
      MockFile mockFile0 = new MockFile((File) null, "column BINARY");
      URI uRI0 = mockFile0.toURI();
      MockURI.normalize(uRI0);
      MockFile mockFile1 = new MockFile("getHb");
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.databene.jdbacl.SQLUtil", 32);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isQuery("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eu>JC~4G", defaultDBTable0, (-1165), "CHARACTER");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("7_fs+`et5m", defaultDBTable0, 3880, "m");
      defaultDBTable0.getColumns();
      String string0 = SchemaDescriptor.DEFAULT_SCHEMA_UUID;
      defaultDBTable0.getPrimaryKeyConstraint();
      TableContainer tableContainer0 = new TableContainer("t*N>VS?s;Pc,!z8}G");
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getSchema();
      MockFile mockFile0 = new MockFile("-", "eu>JC~4G");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3880);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('f');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("fcreate table null (\n\teu>JC~4G CHARACTER NULL,\n\t7_fs+`et5m M NULL\n)", charArrayWriter1.toString());
      assertEquals(67, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-2040);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", defaultDBTable0, (-2040), "alter index");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CHARACTER", defaultDBTable0, (-1168), "insertv}nal@#vywjkk^|");
      List<DBColumn> list1 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list1);
      TableContainer tableContainer0 = new TableContainer("into");
      TableContainer tableContainer1 = new TableContainer("insertv}nal@#vywjkk^|");
      tableContainer1.addTable(defaultDBTable0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "eu>Je~4{";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eu>Je~4{", defaultDBTable0, (-1165), "/;,6d~i)%#^*\" q] /;");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      TableContainer tableContainer0 = new TableContainer("eu>Je~4{");
      tableContainer0.getSchema();
      String string1 = "*/";
      MockFile mockFile0 = new MockFile("fNpL.", "*/");
      SQLUtil.normalize("*/", true);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[15];
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = Dependable.DEFAULT;
      StringReader stringReader0 = new StringReader("Default");
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(, , , , , , , , , , , , , , )");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Default", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("(, , , , , , , , , , , , , , )", "Default");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LATIN2");
      String string1 = PermDescriptor.UDT_TYPE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      mockPrintWriter0.write(2408);
      String string2 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      SQLUtil.normalize("Default", true);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("Default", true, defaultDBTable0, "CACHE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown token type (112)
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|w", defaultDBTable0, 534, "alter index");
      MockFile mockFile0 = new MockFile("|w", "null");
      DBDataType.getInstance(534, "null");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      defaultDBTable0.getPrimaryKeyConstraint();
      TableContainer tableContainer0 = new TableContainer("ID~");
      tableContainer0.getSchema();
      MockFile mockFile1 = new MockFile("M E_x.;.EK~&\"f/", "$d@[");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("derby.storage.strea", false, defaultDBTable0, "executeexec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.normalize("N+A^V6^Sp#-\"z4 ", true);
      DBSchema dBSchema0 = new DBSchema("N + A ^ V6 ^ S  p # - \"z4 \"");
      MockFile mockFile0 = new MockFile("N + A ^ V6 ^ S  p # - \"z4 \"");
      mockFile0.getParentFile();
      MockFile mockFile1 = new MockFile((File) null, "N+A^V6^Sp#-\"z4 ");
      mockFile0.toPath();
      String string0 = Dependable.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.firebirdsql.jdbc.field.FBField");
      MockFile mockFile2 = new MockFile("aOW]m8aKC{\"q<&>Mvt");
      FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("NoPadding");
      DBSchema dBSchema1 = new DBSchema("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", dBSchema1);
      SQLUtil.mutatesDataOrStructure("select into");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("X\"wu");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      String string1 = "where";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("org.firebirdsql.jdbc.field.FBField", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
