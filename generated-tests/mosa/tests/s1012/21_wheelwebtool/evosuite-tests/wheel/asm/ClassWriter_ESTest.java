/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:16:03 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1140);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1140, "", "", "", "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      String string0 = "2e%\\u[D,d2IKTfjW T";
      classWriter0.newField(string0, string0, string0);
      String[] stringArray0 = new String[0];
      classWriter0.visit(4, 4, "%Gt", "%Gt", "%Gt", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1380));
      classWriter0.visitInnerClass("value ", "value ", "RuntimeVisibleAnnotations", (-1380));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1380), (-1380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newConst(classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "34=@he;Kv5|A";
      classWriter0.visit(28, (-2538), "vS?WCi<jH", "34=@he;Kv5|A", "34=@he;Kv5|A", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      int int0 = classWriter0.newMethod("JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-282);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1331));
      int int0 = classWriter0.newConst(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Character character0 = new Character('o');
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      Item item0 = classWriter0.newInteger(16);
      int int0 = classWriter0.newConst("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(3, int0);
      
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanReadFileFilter", (-2413));
      Item item1 = classWriter0.newConstItem("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(57);
      classWriter0.visitInnerClass((String) null, "I8@rA(", "SourceFile", 168);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3853));
      classWriter0.toByteArray();
      classWriter0.visitInnerClass((String) null, (String) null, "", (-3798));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1395));
      classWriter0.threshold = (-1395);
      int int0 = classWriter0.newField("8p", "8p", "8p");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1087));
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFloat(8);
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(927, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      classWriter0.visit(23, 23, "f%N)xp", "lo#-KJYLl+l<x#/", "", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1578));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong((-1578));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        classWriter0.visit((-1578), (-1578), "M]Vr<b(|hR+", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(833);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Type type0 = Type.SHORT_TYPE;
      assertEquals(4, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(5, Type.INT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertNotNull(type0);
      
      Item item0 = classWriter0.newConstItem(type0);
      assertEquals(4, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(5, Type.INT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5513);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("E+", "E+", "E+");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass("java/la.g/ClasC", "", (String) null, 2314);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("", "wheel.asm.ClassWriter", "", 36);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(183);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Item item0 = classWriter0.newFloat(183);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      String string0 = classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string0);
      
      Item item1 = classWriter0.newInteger(65);
      assertFalse(item1.equals((Object)item0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newDouble(1609.19951);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item2);
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      
      Item item3 = classWriter0.newInteger(65);
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item3);
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      assertSame(item3, item1);
      
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(2, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1307));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      classWriter0.visitInnerClass("EnclosingMethod", "EnclosingMethod", (String) null, 2646);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(43);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      classWriter0.visitOuterClass(":9vx", (String) null, ":9vx");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1309);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1140);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertEquals("wheel.asm.ClassWriter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string0);
      
      classWriter0.visitOuterClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Class");
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(string0);
      
      Item item0 = classWriter0.newDouble(1189);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      int int0 = classWriter0.addType("wheel.asm.ClassWriter");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      int int1 = classWriter0.getMergedType(1, 1);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong(183);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newDouble(1.0);
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newDouble(1.0);
      assertFalse(item2.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertNotSame(item2, item0);
      assertSame(item2, item1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1512);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1812, "", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1181);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("java/lang/Class");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1238);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Boolean boolean0 = Boolean.valueOf("wheel.asm.Label");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = classWriter0.newConst(byte0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newDouble((byte)92);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(287);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(287, "", "", "", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(fieldVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-289));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      classWriter0.visitOuterClass("", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Boolean boolean0 = Boolean.valueOf("Class not found");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2422));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Type type0 = Type.getObjectType("h2lDT0J");
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getDimensions());
      assertEquals(10, type0.getSort());
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertNotNull(type0);
      
      Item item0 = classWriter0.newConstItem(type0);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getDimensions());
      assertEquals(10, type0.getSort());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1424);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Item item0 = classWriter0.newConstItem(double0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1135, 1135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Long long0 = new Long((-1291L));
      assertEquals((-1291L), (long)long0);
      assertNotNull(long0);
      
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation(">CMi{ qr};4", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      int int0 = classWriter0.addType("org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item[] itemArray0 = new Item[2];
      classWriter0.typeTable = itemArray0;
      int int1 = classWriter0.addUninitializedType("SourceDebugEqtension", 1);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-791));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Float float0 = new Float((double) (-791));
      assertEquals((-791.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newLong(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(0L);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertSame(item1, item0);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("E", "E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'E.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Short short0 = new Short((short)20);
      assertEquals((short)20, (short)short0);
      assertNotNull(short0);
      
      Item item0 = classWriter0.newConstItem(short0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-289));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFloat((-289));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newFloat((-289));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4461);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      classWriter0.visitInnerClass("t9npde!ro^/vV8<", "keCz_tq^)", "t9npde!ro^/vV8<", 99);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(false, false);
      assertFalse(boolean1);
      
      Item item0 = classWriter0.newConstItem(boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1040);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("(s", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1420));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newMethod("m}}gK", "m}}gK", "m}}gK", true);
      assertEquals(4, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newMethodItem("m}}gK", "m}}gK", "m}}gK", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addUninitializedType(" *o+#$]!H[7Os", 8);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addUninitializedType(" *o+#$]!H[7Os", 8);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1395));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit((-1589), (-1395), "Synthetic", "Synthetic", "Synthetic", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1589), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      classWriter0.visit((-1), (-1), "", "Label offset position has not been resolved yet", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      String string0 = classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = Float.BYTES;
      assertEquals(4, int0);
      
      Item item1 = classWriter0.newFieldItem("java/lang/Object", "java/lang/Object", "java/lang/Object");
      assertFalse(item1.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item1);
      assertNotSame(item1, item0);
      
      Item item2 = classWriter0.newInteger((-4));
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      
      Item item3 = classWriter0.newDouble(956.9506573274591);
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item3);
      assertNotSame(item3, item2);
      assertNotSame(item3, item0);
      assertNotSame(item3, item1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java/lang/Object";
      stringArray0[1] = "java/lang/Object";
      classWriter0.visit(168, 168, "java/lang/Object", "java/lang/Object", "java/lang/Object", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Float.BYTES;
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      
      int int2 = classWriter0.newField("java/lang/Object", "java/lang/Object", "java/lang/Object");
      assertEquals(4, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(188);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("java/lang/String");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Class");
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string0);
      
      String string1 = classWriter0.getCommonSuperClass("java/lang/Class", "java/lang/Object");
      assertEquals("java/lang/Object", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M'qw;lnJ>~.VRwb>";
      stringArray0[1] = "RuntimeVisibleAnnotations";
      stringArray0[2] = "RuntimeVisibleAnnotations";
      stringArray0[3] = "M'qw;lnJ>~.VRwb>";
      classWriter0.visit(0, 5365, "M'qw;lnJ>~.VRwb>", "M'qw;lnJ>~.VRwb>", "RuntimeVisibleAnnotations", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      ClassWriter classWriter1 = new ClassWriter(65466);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(65466, (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Class");
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(string0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      int int1 = classWriter0.newConst("wheel.asm.ClassWriter");
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }
}
