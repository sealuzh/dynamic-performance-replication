/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:42:00 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.function.BiConsumer;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-428), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -428
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1987217119), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1987217119
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals(Integer.MAX_VALUE, cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      boolean boolean0 = cacheControl0.isPrivate();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.FORCE_CACHE.toString();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(1061, timeUnit0);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      assertEquals(1, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(Integer.MAX_VALUE, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      int int0 = cacheControl0.sMaxAgeSeconds();
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      int int0 = cacheControl0.minFreshSeconds();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      String string0 = cacheControl0.toString();
      assertEquals("no-transform", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-store", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(65, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("min-fresh=3900", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(80, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      String string0 = cacheControl0.toString();
      assertEquals("max-age=4800", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.build();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder0.maxAge(Integer.MAX_VALUE, timeUnit0);
      boolean boolean0 = cacheControl_Builder0.noStore;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "source == null");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", ",;");
      Headers headers0 = new Headers(headers_Builder1);
      headers_Builder0.add("no-cache", "no-cache");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      boolean boolean0 = cacheControl0.noStore();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "private, ");
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      boolean boolean0 = cacheControl0.isPrivate();
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      CacheControl.parse(headers0);
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      boolean boolean1 = cacheControl2.noStore();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      cacheControl0.noStore();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Qo/cache";
      stringArray0[1] = "Qo/cache";
      stringArray0[2] = "pragma";
      stringArray0[3] = "max-stale=2147483647, only-if-cached";
      stringArray0[4] = "pragma";
      stringArray0[5] = "pragma";
      stringArray0[6] = "pragma";
      stringArray0[7] = "max-stale=2147483647, only-if-cached";
      cacheControl0.noStore();
      stringArray0[3] = "no-cache";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.isPrivate());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertTrue(cacheControl1.noCache());
      assertTrue(cacheControl1.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "okioUkoil";
      stringArray0[1] = "okioUkoil";
      stringArray0[2] = "pragma";
      stringArray0[3] = "okioUkoil";
      stringArray0[4] = "pragma";
      stringArray0[5] = "pragma";
      stringArray0[6] = "pragma";
      stringArray0[7] = "max-stale=2147483647, only-if-cached";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      int int0 = MockThread.MIN_PRIORITY;
      CacheControl.parse(headers0);
      headers0.toString();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      boolean boolean0 = cacheControl1.mustRevalidate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      int int0 = MockThread.MAX_PRIORITY;
      headers_Builder0.addLenient("pragma", "min-fresh=");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      cacheControl1.toString();
      CacheControl.parse(headers0);
      cacheControl1.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noTransform());
      
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl2.toString();
      headers_Builder0.addLenient("pragma");
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "no-transform");
      Headers headers1 = headers_Builder1.build();
      CacheControl cacheControl3 = CacheControl.FORCE_NETWORK;
      cacheControl3.toString();
      headers1.toMultimap();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      String string0 = cacheControl2.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      CacheControl cacheControl4 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl5 = CacheControl.parse(headers1);
      assertFalse(cacheControl5.onlyIfCached());
      assertFalse(cacheControl5.noCache());
      assertEquals((-1), cacheControl5.sMaxAgeSeconds());
      assertFalse(cacheControl5.isPrivate());
      assertEquals((-1), cacheControl5.maxStaleSeconds());
      assertEquals((-1), cacheControl5.maxAgeSeconds());
      assertFalse(cacheControl5.isPublic());
      assertFalse(cacheControl5.mustRevalidate());
      assertFalse(cacheControl5.noStore());
      assertTrue(cacheControl5.noTransform());
      assertEquals((-1), cacheControl5.minFreshSeconds());
      
      String string1 = cacheControl4.toString();
      assertEquals("no-cache", string1);
      assertNotNull(string1);
      
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl6 = cacheControl_Builder0.build();
      cacheControl6.mustRevalidate();
      assertEquals((-1), cacheControl6.sMaxAgeSeconds());
      assertEquals((-1), cacheControl6.maxAgeSeconds());
      assertEquals((-1), cacheControl6.maxStaleSeconds());
      assertEquals((-1), cacheControl6.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "private, ");
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_NETWORK;
      cacheControl1.isPrivate();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      cacheControl3.toString();
      cacheControl0.noTransform();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      headers0.toString();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-3960), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -3960
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("pragma", "max-age");
      Headers.Builder headers_Builder1 = headers_Builder0.add("max-age", "pragma");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      Headers.Builder headers_Builder2 = new Headers.Builder();
      headers_Builder2.add("max-age", "");
      cacheControl0.noTransform();
      boolean boolean0 = cacheControl0.isPublic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "s-maxage");
      Headers headers0 = headers_Builder1.build();
      int int0 = MockThread.NORM_PRIORITY;
      String[] stringArray0 = new String[0];
      Headers headers1 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      headers1.toString();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.parse(headers1);
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      String string0 = cacheControl1.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      
      cacheControl1.noCache();
      boolean boolean0 = cacheControl_Builder1.noCache;
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.maxAgeSeconds();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cache-control";
      stringArray0[1] = "6nQ=3";
      stringArray0[2] = "6nQ=3";
      stringArray0[3] = "#o'cache";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.isPrivate());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = new Headers.Builder();
      Headers.Builder headers_Builder2 = headers_Builder0.add("#o'c(che", "#o'c(che");
      Headers headers0 = new Headers(headers_Builder2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      cacheControl0.noStore();
      cacheControl0.FORCE_NETWORK.headerValue = "max-stale=2147483647, only-if-cached";
      headers_Builder0.removeAll("max-stale=2147483647, only-if-cached");
      Headers.Builder headers_Builder3 = headers_Builder0.add("Cache-Control", "max-stale=2147483647, only-if-cached");
      headers_Builder3.addLenient("Cache-Control", "#o'c(che");
      Headers.Builder headers_Builder4 = headers_Builder3.add("zpr:vm", "Cache-Control");
      headers_Builder4.addLenient(">q$aDun6. ");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      cacheControl0.noStore();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      int int1 = ObjectStreamConstants.baseWireHandle;
      cacheControl0.minFreshSeconds();
      Headers headers1 = headers_Builder4.build();
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      boolean boolean0 = cacheControl1.onlyIfCached();
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertTrue(boolean0);
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertEquals(Integer.MAX_VALUE, cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.noTransform());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "pragma";
      stringArray0[2] = "pragma";
      stringArray0[3] = "public";
      stringArray0[4] = "pragma";
      stringArray0[5] = "public";
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.headerValue;
      String string1 = cacheControl0.toString();
      assertNotNull(string1);
      assertEquals("public", string1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace((String) null, "public", "public");
      Headers.of((Map<String, String>) hashMap0);
      int int0 = MockThread.MIN_PRIORITY;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(1, timeUnit0);
      cacheControl_Builder1.onlyIfCached();
      CacheControl cacheControl1 = cacheControl_Builder0.build();
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertEquals(86400, cacheControl1.maxAgeSeconds());
      
      cacheControl0.noCache();
      boolean boolean0 = cacheControl_Builder0.noCache;
      cacheControl0.maxStaleSeconds();
      int int1 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("pragma");
      Headers.Builder headers_Builder2 = headers_Builder0.add("pragma", "pragma");
      headers_Builder2.add("cache-control", "no-store");
      headers_Builder1.addLenient("6a[s'){", "no-store");
      Headers headers0 = headers_Builder2.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[0];
      Headers headers1 = Headers.of(stringArray0);
      Headers.Builder headers_Builder3 = new Headers.Builder();
      Headers headers2 = new Headers(headers_Builder2);
      headers1.toMultimap();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.onlyIfCached();
      int int0 = cacheControl1.minFreshSeconds();
      assertEquals((-1), int0);
      
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertTrue(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("pragma", "pragma");
      headers_Builder1.set("pragma", "4aa,");
      headers_Builder1.set("pragma", "AC~k[U=%jIms`");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pragma";
      stringArray0[1] = "AC~k[U=%jIms`";
      stringArray0[2] = "pragma";
      stringArray0[3] = "AC~k[U=%jIms`";
      stringArray0[4] = "pragma";
      stringArray0[5] = "must-revalidate";
      int int0 = MockThread.NORM_PRIORITY;
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      cacheControl1.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      cacheControl_Builder0.noCache();
      headers0.toString();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl1.isPrivate();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(5, timeUnit0);
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-10), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -10
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }
}
