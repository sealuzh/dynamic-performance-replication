/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:03:52 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]Njrt;e^mq]le9nf";
      stringArray0[1] = "]Njrt;e^mq]le9nf";
      stringArray0[2] = "]Njrt;e^mq]le9nf";
      stringArray0[3] = "]Njrt;e^mq]le9nf";
      classWriter0.visit(74, (-2488), "O@z", "O@z", "]Njrt;e^mq]le9nf", stringArray0);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "", "Ha#x~DN_{C*U", "");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      classWriter0.index = (-112);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "", "Ha#x~DN_{C*U", "");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]Njrt;e^mq]le9nf";
      stringArray0[1] = "]Njrt;e^mq]le9nf";
      stringArray0[2] = "]Njrt;e^mq]le9nf";
      stringArray0[3] = "]Njrt;e^mq]le9nf";
      classWriter0.visit(74, (-2488), "O@z", "O@z", "]Njrt;e^mq]le9nf", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "", "Ha#x~DN_{C*U", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      classWriter0.index = (-112);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "", "Ha#x~DN_{C*U", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(86);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "!heel.FsmHandler", "!heel.FsmHandler", "GWZ>", "GWZ>");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 74, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(103);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ")", ")", ")", ")");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 2755;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Rm}=gMa3", "", "Rm}=gMa3", "");
      byteVector0.length = (-1622);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1622
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 0, "", "", "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(84);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "jE>%NG=", "jE>%NG=", "jE>%NG=", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 67;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "jE>%NG=", "jE>%NG=", "E[rUuzEx2s*$'>-]hb!", classWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "RuntimeVisibleAnnotations", "]>_^O,5$CWzM'", "n", "n");
      Attribute attribute0 = new Attribute("]>_^O,5$CWzM'");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 74, "", "", "", "");
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(76);
      ByteVector byteVector0 = new ByteVector(76);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 36, "", "Ha#x~DN_{C*U", (String) null, "Ha#x~DN_{C*U");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The size must]be noy-egative";
      stringArray0[1] = "The size must]be noy-egative";
      classWriter0.visit(49, (-4289), "The size must]be noy-egative", "9raB>srk&z", "The size must]be noy-egative", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "9raB>srk&z", "The size must]be noy-egative", "9raB>srk&z", "9raB>srk&z");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "wheel.asm.Handler", "z>His9dGl", "", (Object) null);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 74, "", "", "", "");
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 36, "", "Ha#x~DN_{C*U", (String) null, "Ha#x~DN_{C*U");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The size must]be noy-egative";
      stringArray0[1] = "The size must]be noy-egative";
      classWriter0.visit(49, (-4289), "The size must]be noy-egative", "9raB>srk&z", "The size must]be noy-egative", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "9raB>srk&z", "The size must]be noy-egative", "9raB>srk&z", "9raB>srk&z");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "wheel.asm.Handler", "z>His9dGl", "", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 74, "", "", "", "");
      fieldWriter0.visitAnnotation("z", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "", "Ha#x~DN_{C*U", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 36, "", "Ha#x~DN_{C*U", (String) null, "Ha#x~DN_{C*U");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 74, "", "", "", "");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1622), "Ha#x~DN_{C*U", "ee+KIvl[{|QR +Gi", "Ha#x~DN_{C*U", "");
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
