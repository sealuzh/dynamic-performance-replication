/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:46:44 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1585.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1585", string0);
      assertEquals(1585.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(0.0, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483648L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-2.14748365E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      long long0 = rationalNumber0.longValue();
      assertEquals((-1L), long0);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836222248905E9);
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2147483622L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1406.00083301));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-3969L), 17L);
      assertEquals((-233.47058823529412), rationalNumber1.doubleValue(), 0.01);
      assertEquals(17, rationalNumber1.divisor);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-1406.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2652.5));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2,652.5", string0);
      assertEquals((-5305), rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(200.75);
      int int0 = rationalNumber0.intValue();
      assertEquals(200, int0);
      assertEquals(803, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.06818181818198354);
      assertEquals(3, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = new RationalNumber(3, 3);
      String string0 = rationalNumber1.toString();
      assertEquals("1", string0);
      assertEquals(1.0, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2187, (-428));
      String string0 = rationalNumber0.toString();
      assertEquals("2187/-428 (-5.11)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2109669L, 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1125515559106134E-8);
      String string0 = rationalNumber0.toString();
      assertEquals(2.112551549690709E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals("1/47336123 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 1257L);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1708419L, rationalNumber1.longValue());
      
      String string0 = rationalNumber0.toString();
      assertEquals("-2147483648/-1257 (1,708,419.768)", string0);
      
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1708419.7677008752);
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1,708,419.768", string1);
      assertEquals((-1257), rationalNumber0.divisor);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(805, (-1L));
      String string2 = rationalNumber3.toDisplayString();
      assertEquals("-805", string2);
      
      rationalNumber2.longValue();
      assertEquals(1375277913, rationalNumber2.numerator);
      
      RationalNumber rationalNumber4 = new RationalNumber(1375277913, Integer.MIN_VALUE);
      long long0 = rationalNumber4.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483662L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483662, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(23L, 2147483655L);
      rationalNumber0.toString();
      String string0 = rationalNumber0.toString();
      assertEquals("11/1073741827 (0)", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0244548292147326E-8, double0, 0.01);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483658L), (-2147483658L));
      rationalNumber0.longValue();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483658L), 1);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1, (-2147483658L));
      assertEquals(1, rationalNumber2.numerator);
      assertEquals((short)0, rationalNumber2.shortValue());
      
      rationalNumber0.intValue();
      int int0 = rationalNumber1.intValue();
      assertEquals(2147483638, int0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber1.toDisplayString();
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(2.147483638E9, rationalNumber1.doubleValue(), 0.01);
      assertEquals("2147483638", string1);
      assertEquals(2147483638L, rationalNumber1.longValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(863L, (-2147483662L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals((-4.014000270424409E-7), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-0", string0);
      assertEquals(431, rationalNumber0.numerator);
  }
}
