/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:13:04 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 91;
      regexp0.flags = 91;
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.flags = 3;
      regexpArray0[0] = regexp0;
      regexp0.reinit();
      regexp0.min = 3;
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.max = 531;
      Regexp[] regexpArray0 = new Regexp[7];
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.reinit();
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[3] = regexpArray0[1];
      regexpArray0[4] = regexpArray0[3];
      regexp0.min = 2;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp1, regexp0);
      
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexp2.max = 90;
      regexp2.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexpArray0[3] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 571;
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexp3.subs = regexp0.subs;
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp regexp5 = Simplify.simplify(regexp4);
      assertNotSame(regexp4, regexp3);
      assertSame(regexp4, regexp5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.max = 569;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexp1.reinit();
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 531;
      Regexp regexp3 = Simplify.simplify(regexp0);
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.max = 1;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertSame(regexp2, regexp1);
      assertNotNull(regexp2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.cap = 519;
      regexp0.max = 531;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexp0.max = 2;
      regexpArray0[2] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexp2.cap = 2;
      Simplify.simplify(regexp2);
      regexp2.op = regexp_Op0;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexpArray0[1];
      regexp0.max = (-1);
      regexpArray0[2] = regexpArray0[3];
      regexpArray0[5] = regexp0;
      regexp0.min = 2;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotSame(regexp0, regexp2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexp0.max = 531;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp0.max = 531;
      regexpArray0[3] = regexp0;
      regexp0.max = (-4873);
      regexpArray0[4] = regexp0;
      regexp1.reinit();
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.max = 531;
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp1;
      regexp0.max = 2;
      regexpArray0[4] = regexp0;
      regexpArray0[6] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.min = 1;
      Simplify.simplify(regexp0);
      Simplify.simplify(regexpArray0[2]);
      Simplify.simplify((Regexp) null);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      assertSame(regexp3, regexp2);
  }
}
