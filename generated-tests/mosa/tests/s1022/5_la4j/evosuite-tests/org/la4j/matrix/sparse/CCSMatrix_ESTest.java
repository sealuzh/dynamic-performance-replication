/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:35:11 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 5124, (double[]) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(5, 2672, doubleArray0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("z{?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-2147483642));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483641
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 1406);
      cCSMatrix0.toRowVector();
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1000, 1183, (double) 1000, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, 2623.7086, (Random) mockRandom0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.manhattanNorm();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(1269, 1269, (-2427.140491367), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      Double double0 = new Double(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-535.89195258178);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.rank();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      Double double0 = new Double(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2500.000381001402, (double)4, (double)4, (double)4, (double)4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.min();
      CCSMatrix.identity(621);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3999, 504.668097669403);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.power(32);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 3998, 1);
      cCSMatrix0.removeFirstRow();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4, 4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(2456, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)48, (-547.309530311));
      cCSMatrix0.power((byte)48);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4004);
      Integer integer0 = new Integer(4004);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4004);
      Integer integer0 = new Integer(4);
      cCSMatrix0.rowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(4, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(2934.800781804202);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1649, 4004);
      cCSMatrix0.toColumnVector();
      cCSMatrix0.product();
      cCSMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 4004;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4004);
      Integer integer0 = new Integer(4004);
      cCSMatrix0.rowMajorIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix(4004, 32, 4004);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
      cCSMatrix2.getColumn(int0);
      cCSMatrix0.getColumn(int0);
      int int1 = 3967;
      Matrix.unit(int1, int1);
      CCSMatrix.block(cCSMatrix2, cCSMatrix0, cCSMatrix2, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(33, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4004);
      Integer integer0 = new Integer(4004);
      cCSMatrix0.rowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32, 1711.9621506, (double)4004, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(4004);
      cCSMatrix1.rowMajorIterator();
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextInt();
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.setAll(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3989, 3.944177081054355E21);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.power(3989);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2456);
      cCSMatrix0.copyOfColumns(1532);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow((-138), vectorProcedure0);
      cCSMatrix0.minInColumn(2073);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.copyOfColumns(3);
      cCSMatrix0.multiplyByItsTranspose();
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      cCSMatrix0.setAll(4);
      cCSMatrix0.power(3080);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2456);
      cCSMatrix0.copyOfColumns(2456);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      cCSMatrix0.minInColumn(17);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SparseVector.zero(2407, 2417);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2417, 2456, 2456);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2417, vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.zero(2407, 2407);
      cCSMatrix0.select((int[]) null, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 227.856031346);
      Matrix matrix0 = cCSMatrix0.power(4);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Matrix matrix1 = cCSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(4004);
      cCSMatrix1.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1711.9621506, (double)4004, (double)0, (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(0, vectorFunction0);
      cCSMatrix1.minInColumn(0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 227.856031346);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(227.856031346, (-432.64992368389), (double)7, 227.856031346, (-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(7);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(7, 2073.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInRow(658, vectorProcedure0);
      CCSMatrix cCSMatrix2 = new CCSMatrix(2, 76, 8);
      cCSMatrix0.minInColumn(3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 227.856031346);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      mockRandom0.setSeed(798L);
      mockRandom0.longs(798L, 9991L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1000, 1000, 0.0, (Random) mockRandom0);
      cCSMatrix0.eachInColumn(996, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4004);
      cCSMatrix0.maxInRow(0);
      cCSMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1711.9621506, (double)4004, (double)0, (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      cCSMatrix0.maxInColumn(1165);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1974, 1677.845206999819);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = (-388);
      Integer integer0 = new Integer(int0);
      int int1 = 61;
      CCSMatrix.zero(int0, int1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      Matrix matrix1 = cCSMatrix0.subtract(331.9644362);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix1, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      SparseMatrix.diagonal(87, 87);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 4, 4);
      cCSMatrix0.multiplyByItsTranspose();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix1.foldNonZero(matrixAccumulator0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix0 = new CCSMatrix(2133, 11);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      SparseVector.zero(0, 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      cCSMatrix0.multiplyByItsTranspose();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 0;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.power(665);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(0, 1);
      CCSMatrix.randomSymmetric(0, 1.506932514843698, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Integer integer0 = new Integer(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(37, 1000, (double) 0, (Random) mockRandom0);
      CCSMatrix.zero(32, 1000, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(32, 32, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      SparseVector.zero(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(3, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 0;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 0.0);
      cCSMatrix0.copyOfShape(0, 7);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix.randomSymmetric(3, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[6] = (byte)1;
      CCSMatrix.random((int) (byte)53, 4, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4, 4);
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn((-260), vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -260
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)7;
      byteArray0[0] = (byte)7;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity((byte)0);
      SparseVector sparseVector0 = SparseVector.zero(432, (int) (byte)7);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, columnMajorSparseMatrix0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)45;
      doubleArray0[1] = (double) 1168;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) (byte)7;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)7;
      intArray0[5] = (int) (byte)7;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)7;
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)45, (byte)7, 0, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, cCSMatrix0, cCSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getColumn(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(80.728750945898, (double)4, 80.728750945898, (-3072.125855839512), 80.728750945898).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.add((Matrix) cCSMatrix1);
      CompressedVector compressedVector1 = (CompressedVector)SparseVector.zero(0, 0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector1, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(4, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1471, 597, 1471);
      int[] intArray0 = new int[2];
      intArray0[0] = 597;
      intArray0[1] = 597;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
