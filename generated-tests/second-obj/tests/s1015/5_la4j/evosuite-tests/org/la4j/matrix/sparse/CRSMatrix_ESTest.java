/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:00:05 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(184);
      double double0 = new Integer(184);
      cRSMatrix0.setRow(184, 184);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll((-1003));
      cRSMatrix0.rowMajorIterator();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 220;
      CRSMatrix cRSMatrix0 = new CRSMatrix(220, 1908);
      cRSMatrix0.toColumnVector();
      Matrix.diagonal(0, (-969.0003311));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(0, vectorProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      matrix0.setAll(11);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 1276);
      cRSMatrix0.sum();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = cRSMatrix0.to(matrixFactory0);
      assertEquals(0, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns(4);
      Locale locale0 = Locale.ROOT;
      locale0.hasExtensions();
      NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.columnMajorIterator();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 745;
      int int1 = (-2550);
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroAt((-2550), (-1729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2550
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.setAll(0);
      cRSMatrix1.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      cRSMatrix1.setAll(0);
      cRSMatrix1.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1805;
      doubleArray0[1] = (double) 1805;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      cRSMatrix0.nonZeroColumnMajorIterator();
      CRSMatrix.block(sparseMatrix0, sparseMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1793;
      doubleArray0[1] = (-29.7654633197045);
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      doubleArray0[5] = (double) 1793;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1793, 0, doubleArray0);
      Matrix.zero(4341, 4341);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      ((CRSMatrix) sparseMatrix0).copyOfShape(0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2222;
      CRSMatrix.from1DArray(2222, 2222, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(364, (double) 0, (Random) mockRandom0);
      cRSMatrix0.nonZeroAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2334, Integer.MAX_VALUE);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.nonZeroAt(853, 1501);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SparseMatrix.zero(42, 42);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4906;
      doubleArray1[1] = (-4679.152545362439);
      doubleArray1[2] = (double) 4906;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.zero(4906, Integer.MAX_VALUE, (-1099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 0;
      double[][] doubleArray1 = new double[4][5];
      doubleArray1[1] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 136;
      double double0 = (-819.67024354);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(136, 136, (-819.67024354), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1805;
      doubleArray0[1] = (double) 1805;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.nonZeroColumnMajorIterator();
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2334;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2334, (-2147483628));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      int int1 = 853;
      double double0 = 1210.954;
      double double1 = 371.45513027653;
      cRSMatrix0.foldRows(vectorAccumulator0);
      double double2 = 12.129650251524563;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double0, (double)int0, double1, double2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(int1, vectorFunction0);
      int int2 = 1501;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int2, vectorProcedure0);
      CRSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1805;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.update(matrixFunction0);
      int int1 = 1532;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1532, 833);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1532
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix.identity(191);
      int int0 = 5;
      int int1 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 1370, 6);
      rowMajorSparseMatrix0.rotate();
      CRSMatrix cRSMatrix0 = CRSMatrix.fromMatrixMarket("");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn(int1, vectorFunction0);
      Matrix matrix0 = null;
      cRSMatrix0.infinityNorm();
      int int2 = 1109;
      cRSMatrix0.insert(matrix0, int2, int0);
      int int3 = (-735);
      cRSMatrix0.nonZeroIteratorOfRow(int3);
      int int4 = 32;
      int int5 = 226;
      CRSMatrix.zero(int4, int5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(40, 40, 40);
      Integer integer0 = new Integer(40);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-111);
      CRSMatrix.fromBinary(byteArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1126.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt((byte)2, (byte)8, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(40, 40, 40);
      double double0 = new Integer(40);
      cRSMatrix0.multiplyByItsTranspose();
      SparseMatrix.zero(40, 51);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-111);
      CRSMatrix.fromBinary(byteArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt((byte)2, (byte)8, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4, 4);
      cRSMatrix0.setAll(4);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(191);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      int[] intArray1 = new int[4];
      intArray0[0] = 5;
      intArray1[1] = 191;
      int int0 = 2;
      intArray1[2] = 2;
      intArray1[3] = 5;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray1);
      int int1 = 1000;
      cRSMatrix0.blankOfRows(int1);
      int int2 = 178;
      cRSMatrix0.copyOfShape(int2, intArray0[0]);
      cRSMatrix0.nonZeroIterator();
      int int3 = 8;
      cRSMatrix0.equals(matrix0, (double) int3);
      double double0 = new Integer(int0);
      cRSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.iterator();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(811, (-886.854469));
      MockRandom mockRandom0 = new MockRandom();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn(853, vectorFunction0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.nextInt(853);
      cRSMatrix1.nonZeroAt(565, 5);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      cRSMatrix0.toString();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.setAll(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      int int1 = 0;
      CRSMatrix cRSMatrix1 = new CRSMatrix(0, 4341, 0);
      int int2 = 1793;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 4, 4);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      Locale locale0 = Locale.ROOT;
      locale0.hasExtensions();
      NumberFormat.getNumberInstance(locale0);
      cRSMatrix1.columnMajorIterator();
      int int1 = 645;
      SparseMatrix.zero(645, 140);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1132;
      int int1 = Integer.MAX_VALUE;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2334, Integer.MAX_VALUE);
      int int2 = 853;
      MockRandom mockRandom0 = new MockRandom(256L);
      mockRandom0.doubles();
      MockRandom mockRandom1 = new MockRandom(453L);
      mockRandom1.doubles(1L, (double) 1L, (double) Integer.MAX_VALUE);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(853, (double) 1L, (Random) mockRandom1);
      int int3 = 4;
      cRSMatrix1.minInRow(int2);
      int int4 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int3;
      int[] intArray0 = new int[7];
      int int5 = (-1346);
      double double0 = 3439.9735176;
      RowMajorSparseMatrix.randomSymmetric(int5, double0, (Random) mockRandom0);
      intArray0[0] = int1;
      intArray0[1] = int4;
      intArray0[2] = int3;
      intArray0[3] = int0;
      intArray0[4] = int1;
      int int6 = 32;
      cRSMatrix1.nonZeroIteratorOfRow(int6);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom(4);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(4, 4, 0.0, (Random) mockRandom0);
      cRSMatrix0.nonZeroRowMajorIterator();
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      numberFormat0.clone();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).each(matrixProcedure0);
      int int1 = 1314;
      sparseMatrix0.getColumn(1314);
      sparseMatrix0.infinityNorm();
      sparseMatrix0.blankOfRows(163);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) sparseMatrix0).eachInRow(4, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 191;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(191);
      int int1 = 5;
      double double0 = (-1275.53151462922);
      cRSMatrix0.getColumn(5);
      cRSMatrix0.divide((-748.191927115732));
      cRSMatrix0.determinant();
      int int2 = (-2147483625);
      cRSMatrix0.sliceBottomRight(int2, int0);
      cRSMatrix0.setRow(int1, double0);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      int int3 = (-1053);
      double double1 = (-3369.0);
      cRSMatrix0.setRow(int3, double1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      int int4 = 185;
      int int5 = (-4572);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int4, int5, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2816, 2816);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.setRow(199, (double) 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2334, Integer.MAX_VALUE);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 853;
      int[] intArray0 = new int[1];
      intArray0[0] = 853;
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(853, 0.0);
      cRSMatrix1.toSparseMatrix();
      cRSMatrix0.set(7, 853, 1397.389329134);
      cRSMatrix0.minInRow(Integer.MAX_VALUE);
      long long0 = 43L;
      MockRandom mockRandom0 = new MockRandom(long0);
      String string0 = "No rows or columns selected.";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket(string0);
      rowMajorSparseMatrix0.nonZeroRowMajorIterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateColumn(int0, vectorFunction0);
      int int1 = 181;
      int int2 = 0;
      double double0 = (-966.0);
      MockRandom mockRandom1 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int2, int1, double0, (Random) mockRandom1);
      int int3 = 21;
      cRSMatrix2.nonZeroAt(intArray0[0], int3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      int int0 = 2330;
      int int1 = 154;
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 2330, 154);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 4341, 0);
      int int0 = 1793;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1793;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      doubleArray0[1] = (-29.7654633197045);
      doubleArray0[2] = 230.62;
      doubleArray0[3] = (double) 1793;
      doubleArray0[5] = (double) 1793;
      rowMajorSparseMatrix0.nonZeroRowMajorIterator();
      int int1 = 1405;
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.copyOfColumns(1405);
      cRSMatrix1.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix1.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      int int1 = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
      int int0 = (-1155);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfColumns((-1155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1155
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom(4);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(4, 4, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(36, 4, doubleArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, sparseMatrix0, cRSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(41);
      double[] doubleArray0 = new double[0];
      DenseMatrix.from1DArray(32, 41, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.toBinary();
      SparseMatrix.fromCSV("PP~.YzUajT>BAwuZt$8");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (-3057.081774213907));
      cRSMatrix0.product();
      int int0 = 0;
      SparseMatrix.zero(8, 0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.iterator();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(190, 0.0);
      cRSMatrix0.blank();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[7];
      Matrix matrix0 = ((CRSMatrix) sparseMatrix0).select(intArray0, intArray0);
      int int0 = 0;
      CRSMatrix cRSMatrix1 = (CRSMatrix)matrix0.blankOfRows(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInRow(6, vectorProcedure0);
      sparseMatrix0.nonZeroIteratorOfColumn(834);
      CRSMatrix cRSMatrix2 = (CRSMatrix)((CRSMatrix) sparseMatrix0).copyOfShape(0, 689);
      ((CRSMatrix) sparseMatrix0).minInRow(5);
      cRSMatrix1.nonZeroRowMajorIterator();
      cRSMatrix2.divide(30.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)190).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      cRSMatrix2.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, 1.0, (double)4, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.transform(matrixFunction0);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket(".4,NB+BDmciJ(U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(11, 11);
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(11, 11);
      Matrix matrix0 = cRSMatrix1.select(intArray0, intArray0);
      matrix0.product();
      int int0 = 5;
      SparseMatrix.zero(11, 5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.is(matrixPredicate0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        matrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      CRSMatrix.zero(4, 4);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4);
      Matrix matrix0 = cRSMatrix1.copyOfColumns(4);
      cRSMatrix0.blank();
      matrix0.add(1283.7041872);
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      int[] intArray1 = new int[8];
      intArray1[0] = (-1379);
      intArray1[1] = 4;
      intArray1[2] = 51;
      intArray1[3] = 4;
      cRSMatrix1.rotate();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("lYEQP>=_'&[a\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 4341;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4341, 0, 0);
      int int2 = 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1793;
      double double0 = (-29.7654633197045);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.setAll(4);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(40, 40, 40);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(40);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(312, 40);
      double double0 = new Integer(312);
      cRSMatrix1.norm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)312, 312, 1671.30944623, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateColumn(12, vectorFunction0);
      cRSMatrix0.copy();
      int int0 = 3;
      cRSMatrix0.multiplyByItsTranspose();
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(3, (-1422), doubleArray0);
      MockRandom mockRandom0 = new MockRandom(int0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = "APk";
      String string1 = "mI`&/xg]$mw<C";
      cRSMatrix1.mkString(numberFormat0, string0, string1);
      cRSMatrix1.infinityNorm();
      int int1 = (-1450);
      int int2 = 3;
      cRSMatrix1.insert((Matrix) cRSMatrix0, int2, int1);
      int int3 = 18;
      cRSMatrix2.nonZeroIteratorOfRow(int3);
      int int4 = (-433);
      cRSMatrix3.iteratorOfRow(int4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom(4);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 4);
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1901, 4, doubleArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2837, 2837);
      int int0 = 853;
      CRSMatrix cRSMatrix1 = new CRSMatrix(853, 853, 2837);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.setRow(199, (double) 853);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      Locale locale0 = Locale.ROOT;
      locale0.hasExtensions();
      locale0.getUnicodeLocaleAttributes();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.toCSV(numberFormat0);
      cRSMatrix0.columnMajorIterator();
      cRSMatrix1.toBinary();
      String string0 = "\"pz} e9t@CF}^\\&*lZ";
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV(string0);
      cRSMatrix2.rowMajorIterator();
      cRSMatrix1.maxInRow(int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.diagonalProduct();
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      SparseMatrix.zero(4, 51);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        matrix0.updateAt(2308, 4, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2308
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      double double0 = 618.0839105;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 618.0839105, (Random) mockRandom0);
      long long0 = (-1906L);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(0, vectorFunction0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1906L), 32, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.setAll((-2325.1817));
      CRSMatrix cRSMatrix1 = new CRSMatrix(4, 4, 4);
      MockRandom mockRandom0 = new MockRandom(1793);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      denseMatrix0.transform(matrixFunction0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("No rows or columns selected.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      int int1 = 4341;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 4341, 0);
      cRSMatrix0.toColumnVector();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(170);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInRow(0, vectorProcedure0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(0, 170);
      cRSMatrix2.diagonalProduct();
      int int2 = cRSMatrix2.rank();
      RowMajorSparseMatrix.fromCSV("Q");
      int int3 = 2160;
      int int4 = 184;
      cRSMatrix1.blankOfShape(int3, int4);
      cRSMatrix0.minInRow(int1);
      cRSMatrix2.nonZeroRowMajorIterator();
      MockRandom mockRandom0 = new MockRandom(int0);
      int int5 = (-752);
      double double0 = 0.0;
      CRSMatrix cRSMatrix3 = CRSMatrix.randomSymmetric(int5, double0, (Random) mockRandom0);
      int int6 = mockRandom0.nextInt(int5);
      cRSMatrix3.nonZeroAt(int2, int6);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      int int0 = 0;
      cRSMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
      cRSMatrix0.blankOfShape(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      mockRandom0.nextDouble();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int1 = 32;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(0, 32, doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.toMatrixMarket();
      cRSMatrix0.updateColumn(0, vectorFunction0);
      int int2 = 4302;
      CRSMatrix cRSMatrix3 = CRSMatrix.from1DArray(0, 4302, doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix2, cRSMatrix1, cRSMatrix2, cRSMatrix3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(190, 0.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = (CRSMatrix)((CRSMatrix) sparseMatrix0).copyOfShape(0, 689);
      cRSMatrix0.nonZeroIterator();
      ((CRSMatrix) sparseMatrix0).rowMajorIterator();
      cRSMatrix0.setRow(633, (double) 633);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(4);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      Locale locale0 = Locale.ROOT;
      locale0.hasExtensions();
      NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.columnMajorIterator();
      SparseMatrix.zero(4, 51);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2837;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2837, 2837);
      CRSMatrix cRSMatrix1 = new CRSMatrix(853, 853, 2837);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      Locale locale0 = Locale.ROOT;
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      int int1 = 1;
      int int2 = (-2897);
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int2, int0);
      int int3 = 898;
      cRSMatrix2.nonZeroAt(int3, int2);
      int int4 = (-1994091957);
      int int5 = (-1789569705);
      int int6 = 1335;
      CRSMatrix cRSMatrix3 = CRSMatrix.zero(int4, int5, int6);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.forEach(consumer0);
      int int7 = 6;
      double double0 = (-1764.872399725);
      cRSMatrix3.setColumn(int7, double0);
      MatrixFunction matrixFunction1 = null;
      cRSMatrix2.update(matrixFunction1);
      int int8 = (-3026);
      cRSMatrix2.getColumn(int8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.random(6, 471, 1.0, (Random) mockRandom0);
      cRSMatrix0.set(Integer.MAX_VALUE, (-2026), Double.POSITIVE_INFINITY);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int int0 = (-1301);
      double double0 = 895.0;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int0, double0);
      MockRandom mockRandom1 = new MockRandom();
      double double1 = 2840.2169466862;
      cRSMatrix1.divide(double1);
      DenseMatrix denseMatrix0 = cRSMatrix1.toDenseMatrix();
      int int1 = (-173);
      denseMatrix0.getColumn(int1);
      Vector vector0 = null;
      cRSMatrix1.multiply(vector0);
      int int2 = 166;
      int int3 = 155;
      double double2 = 3528.153304176;
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int2, int3, double2, (Random) mockRandom1);
      cRSMatrix2.removeFirstRow();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (-3057.081774213907));
      cRSMatrix0.setRow(5, (-781.47));
      cRSMatrix0.setAll(1671.30944623);
      int int1 = 5;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) 5, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (-3057.081774213907));
      int int1 = 5;
      double double0 = (-781.47);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      cRSMatrix0.min();
      doubleArray0[3] = (double) 1288;
      doubleArray0[4] = (-3057.081774213907);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1288, (-161), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1288x-161
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2837;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2837, 2837);
      int int1 = 853;
      CRSMatrix cRSMatrix1 = new CRSMatrix(853, 853, 2837);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
      cRSMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.copyOfColumns(2351);
      cRSMatrix0.power(853);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      Locale locale0 = Locale.ROOT;
      locale0.hasExtensions();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getUnicodeLocaleAttributes();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale1);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      numberFormat0.setRoundingMode(roundingMode0);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      cRSMatrix1.columnMajorIterator();
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      cRSMatrix1.rowMajorIterator();
      cRSMatrix0.iteratorOfRow(int0);
      String string0 = "%%MatrixMarket matrix coordinate real general ";
      CRSMatrix cRSMatrix2 = CRSMatrix.fromMatrixMarket(string0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateAt(int1, int0, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(190, 0.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(190, 190, 190);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.964).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn(32, vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 190);
      cRSMatrix1.copyOfShape(2915, 0);
      cRSMatrix1.nonZeroIterator();
      ((CRSMatrix) sparseMatrix0).minInRow(32);
      double double0 = new Integer(0);
      cRSMatrix1.rowMajorIterator();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator1).accumulate();
      cRSMatrix1.foldColumns(vectorAccumulator1);
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix1.rank();
      ((CRSMatrix) sparseMatrix0).maxInRow(0);
      cRSMatrix1.each(matrixProcedure0);
      cRSMatrix1.maxInRow((-2318));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(40);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.min();
      int int0 = Double.MAX_EXPONENT;
      SparseMatrix.zero(40, 51);
      cRSMatrix0.maxInRow(10);
      int[] intArray0 = new int[2];
      intArray0[0] = 28;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-1L));
      CRSMatrix.random(40, 28, (double) 10, (Random) mockRandom0);
  }
}
