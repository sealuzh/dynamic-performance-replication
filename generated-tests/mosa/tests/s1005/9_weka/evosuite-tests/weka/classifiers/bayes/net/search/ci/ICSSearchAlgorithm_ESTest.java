/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:51:33 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.core.Attribute;
import weka.core.Instances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setOptions((String[]) null);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(3450);
      assertFalse(boolean0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[2] = (-106);
      intArray0[3] = (-2967);
      intArray0[4] = (-231);
      intArray0[5] = (-29);
      intArray0[7] = 114;
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(1347);
      assertFalse(boolean0);
      
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Attribute attribute0 = new Attribute("4{~1tX;tAc+");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("4{~1tX;tAc+", arrayList0, 2);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("?tE>d", arrayList0, 0);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("npK`5*=}VNxw;u6", instances0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[][] booleanArray0 = new boolean[2][8];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = true;
      arrayList0.add(attribute0);
      booleanArray1[2] = true;
      booleanArray1[4] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[1];
      iCSSearchAlgorithm0.existsSepSet(0, 0, 2, booleanArray0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 549);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[5];
      arrayList0.add(attribute0);
      attribute0.name();
      booleanArray0[1] = true;
      booleanArray0[0] = true;
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[0] = booleanArray0;
      booleanArray1[2] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray1);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      int int0 = iCSSearchAlgorithm0.next(2, 2, 3, booleanArray1);
      assertEquals(3, int0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 570);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 570);
      arrayList0.add(attribute0);
      attribute0.name();
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[4];
      arrayList0.add(attribute0);
      boolean[][] booleanArray1 = new boolean[5][6];
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray0[3] = true;
      booleanArray2[7] = true;
      booleanArray1[1] = booleanArray2;
      boolean[][] booleanArray3 = new boolean[3][5];
      booleanArray3[0] = booleanArray2;
      booleanArray3[2] = booleanArray2;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray3);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 570);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 570);
      arrayList0.add(attribute0);
      attribute0.name();
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[4];
      arrayList0.add(attribute0);
      boolean[][] booleanArray1 = new boolean[5][6];
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray0[3] = true;
      booleanArray2[7] = true;
      booleanArray1[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[2];
      boolean[][] booleanArray4 = new boolean[3][5];
      booleanArray4[0] = booleanArray2;
      booleanArray4[2] = booleanArray3;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray4);
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 549);
      arrayList0.add(attribute0);
      attribute0.name();
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[5];
      attribute0.indexOfValue("relational");
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray1 = new boolean[5][6];
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray1[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[2];
      booleanArray3[0] = true;
      boolean[][] booleanArray4 = new boolean[4][5];
      booleanArray4[1] = booleanArray0;
      booleanArray4[2] = booleanArray3;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray4);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 549);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[5];
      arrayList0.add(attribute0);
      attribute0.name();
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[5] = booleanArray0;
      booleanArray1[2] = booleanArray0;
      MockRandom mockRandom0 = new MockRandom(0);
      instances0.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray1);
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.next(2, 2, 3, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 549);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[5];
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) null);
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[0] = booleanArray0;
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      boolean[][] booleanArray2 = new boolean[8][2];
      booleanArray2[0] = booleanArray0;
      booleanArray2[1] = booleanArray0;
      booleanArray2[2] = booleanArray0;
      booleanArray2[3] = booleanArray0;
      booleanArray2[4] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 549);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      boolean[] booleanArray0 = new boolean[5];
      arrayList0.add(attribute0);
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[0] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray1);
      boolean[][] booleanArray2 = new boolean[8][2];
      booleanArray2[0] = booleanArray0;
      booleanArray2[1] = booleanArray0;
      booleanArray2[2] = booleanArray0;
      booleanArray2[3] = booleanArray0;
      booleanArray2[4] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 549);
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      boolean[] booleanArray0 = new boolean[5];
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray1 = new boolean[7][7];
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][1];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray1, booleanArray1, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tWhen determining whether an edge exists a search is performed \n\tfor a set Z that separates the nodes. MaxCardinality determines \n\tthe maximum size of the set Z. This greatly influences the \n\tlength of the search. (default 2)", arrayList0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      Attribute attribute0 = new Attribute("@relation", instances0, 0);
      arrayList0.add(attribute0);
      attribute0.name();
      boolean[][] booleanArray0 = new boolean[2][8];
      arrayList0.add(attribute0);
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      boolean[][] booleanArray1 = new boolean[8][4];
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray1[0] = booleanArray2;
      boolean[] booleanArray3 = new boolean[5];
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray1[1] = booleanArray3;
      boolean[] booleanArray4 = new boolean[8];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray4[4] = true;
      booleanArray4[5] = true;
      booleanArray4[6] = true;
      booleanArray4[7] = true;
      booleanArray1[2] = booleanArray4;
      boolean[] booleanArray5 = new boolean[3];
      booleanArray5[0] = true;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray1[3] = booleanArray5;
      boolean[] booleanArray6 = new boolean[2];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray1[4] = booleanArray6;
      boolean[] booleanArray7 = new boolean[1];
      booleanArray7[0] = true;
      booleanArray1[5] = booleanArray7;
      boolean[] booleanArray8 = new boolean[8];
      booleanArray8[0] = true;
      booleanArray8[1] = false;
      booleanArray8[2] = true;
      booleanArray8[4] = true;
      booleanArray8[5] = true;
      booleanArray8[6] = true;
      booleanArray8[7] = true;
      booleanArray1[6] = booleanArray8;
      boolean[] booleanArray9 = new boolean[5];
      booleanArray9[0] = true;
      booleanArray9[1] = true;
      booleanArray9[2] = true;
      booleanArray9[3] = true;
      booleanArray9[4] = true;
      booleanArray1[7] = booleanArray9;
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][7];
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray1, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
  }
}
