/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:26:15 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(731, 5);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(12, 673);
      assertNotNull(denseMatrix0);
      assertEquals(673, denseMatrix0.columns());
      assertEquals(12, denseMatrix0.rows());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(673, denseMatrix0.columns());
      assertEquals(12, denseMatrix0.rows());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(673, denseMatrix0.columns());
      assertEquals(12, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(12, 12);
      assertNotNull(denseMatrix0);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      
      denseMatrix0.setColumn(4, (double) 12);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(12, denseMatrix0.rows());
      assertEquals(12, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 100.0;
      doubleArray0[1] = 100.0;
      doubleArray0[1] = 100.0;
      doubleArray0[5] = (-2038.88);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertNotNull(denseVector0);
      assertEquals(9, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 100.0, (-2038.88), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct1);
      assertFalse(ooPlaceOuterProduct1.equals((Object)ooPlaceOuterProduct0));
      
      Matrix matrix0 = ooPlaceOuterProduct1.apply(denseVector0, denseVector0);
      assertNotNull(matrix0);
      assertFalse(ooPlaceOuterProduct1.equals((Object)ooPlaceOuterProduct0));
      assertNotSame(ooPlaceOuterProduct1, ooPlaceOuterProduct0);
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 100.0, (-2038.88), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      assertFalse(ooPlaceOuterProduct1.equals((Object)ooPlaceOuterProduct0));
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 100.0, (-2038.88), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertFalse(ooPlaceOuterProduct1.equals((Object)ooPlaceOuterProduct0));
      assertNotSame(ooPlaceOuterProduct1, ooPlaceOuterProduct0);
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 100.0, 0.0, 0.0, 100.0, (-2038.88), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 101.45743632762421;
      doubleArray0[1] = 101.45743632762421;
      doubleArray0[2] = 24.979991993593593;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertNotNull(denseVector0);
      assertEquals(9, denseVector0.length());
      assertArrayEquals(new double[] {101.45743632762421, 101.45743632762421, 24.979991993593593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertNotNull(matrix0);
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {101.45743632762421, 101.45743632762421, 24.979991993593593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      assertNotNull(singularValueDecompositor0);
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {101.45743632762421, 101.45743632762421, 24.979991993593593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
      assertEquals(9, denseVector0.length());
      assertEquals(9, matrix0.columns());
      assertEquals(9, matrix0.rows());
      assertArrayEquals(new double[] {101.45743632762421, 101.45743632762421, 24.979991993593593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
