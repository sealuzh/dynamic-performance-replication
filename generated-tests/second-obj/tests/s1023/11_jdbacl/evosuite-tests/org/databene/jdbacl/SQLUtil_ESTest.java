/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:34:03 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.time.Clock;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import javax.transaction.xa.XAResource;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.store.raw.xact.TransactionFactory;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.store.access.btree.ControlRow;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.table.Table;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(8);
      Integer.divideUnsigned(8, 296);
      Integer.max((-2208), (-1088615954));
      String string0 = SQLUtil.substituteMarkers("JFJ1", "JFJ1", integer0);
      assertEquals("8", string0);
      
      SQLUtil.parseColumnTypeAndSize("8");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("drop materialized viewview", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.14);
      int int0 = 2042;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(2042, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2042
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("cv#f{O(+n!G}{ib;4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cv#f{O(+n!G}{ib;4", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2474, "execgetmiscresultset");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("cv#f{O(+n!G}{ib;4", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXECGETMISCRESULTSET", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.parseColumnTypeAndSize("K&y}#]v");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K&y}#]v";
      stringArray0[1] = "(";
      String string0 = SQLUtil.innerJoin("(", stringArray0, "", "", stringArray0);
      assertEquals(" as  on (.K&y}#]v = .K&y}#]v and (.( = .(", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.isDML("alter tablenull");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("alter tablenull", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = SQLUtil.renderColumnListWithTableName("wE|[w-+a*yIBW^=E>", stringArray0);
      assertEquals("wE|[w-+a*yIBW^=E>.null, wE|[w-+a*yIBW^=E>.null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer.max((-2208), (-1088615954));
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("JFJ1");
      SQLUtil.typeAndName(dBCatalog0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Disconnect called while not connected", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"Disconnect called while not connected\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("0", "0", "0");
      assertEquals("'0'", string0);
      
      String string1 = SQLUtil.removeComments("0");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.normalize(",S%/$4MBj", false);
      String string0 = DataFactory.DB_EX_LOCKFILE_NAME;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(",S%/$4MBj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.normalize(",S%/$4MBj", true);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(",S%/$4MBj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM null WHERE ", true, stringArray0);
      boolean boolean1 = SQLUtil.isDDL(" WHERE ");
      assertFalse(boolean1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")J7,qF-~^!";
      stringArray0[1] = "STRINGDECODE(";
      stringArray0[2] = "create tabletruncatej's;_%#cc%@wp%{f@ table null null";
      stringArray0[3] = "drop index";
      stringArray0[4] = "truncatej's;_%#cc%@wp";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(")J7,qF-~^! = ')J7,qF-~^!' AND STRINGDECODE( = 'STRINGDECODE(' AND create tabletruncatej's;_%#cc%@wp%{f@ table null null = 'create tabletruncatej's;_%#cc%@wp%{f@ table null null' AND drop index = 'drop index' AND truncatej's;_%#cc%@wp = 'truncatej's;_%#cc%@wp'", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("CURRENT", "CURRENT");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CURRENT");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Disconnect called while not connected", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"Disconnect called while not connected\" PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isDML("^3CG.Q'{Ll&]Qd");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^3CG.Q'{Ll&]Qd";
      stringArray0[1] = "^3CG.Q'{Ll&]Qd";
      stringArray0[2] = "^3CG.Q'{Ll&]Qd";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBDataType dBDataType0 = DBDataType.getInstance((-77844374), "update");
      MockFile mockFile0 = new MockFile("update", "update");
      MockFile.createTempFile(" WHERE ", "update");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "update");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", true, stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.removeComments("CONSTRAINT update PRIMARY KEY ()");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec1, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("*/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "throwIfMissingParms";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*/", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (throwIfMissingParms)", string0);
      
      boolean boolean0 = SQLUtil.isQuery(".,&+g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = TransactionFactory.MODULE;
      DBDataType dBDataType0 = DBDataType.getInstance(42101, "org.databene.jdbacl.SQLUtil");
      Integer integer0 = new Integer(42101);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.store.raw.xact.TransactionFactory", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isQuery("truncate");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Disconnect called while not connected", true, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Disconnect called while not connected");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint Disconnect called while not connected", string0);
      
      String string1 = SQLUtil.normalize("RrY,cr!T[&4xvG1B|#", false);
      assertEquals("RrY, cr ! T [ & 4xvG1B | #", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "<St";
      StringBuilder stringBuilder0 = new StringBuilder("<St");
      SQLUtil.addOptionalCondition(")E)0c", stringBuilder0);
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")E)0c", (DBSchema) null);
      DBSchema dBSchema0 = new DBSchema(")E)0c");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("<St", true, defaultDBTable1, "isc_tpb_mapping");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.mutatesStructure("callnv,yk&tqyptbubbkh");
      VersionNumber versionNumber0 = VersionNumber.valueOf("MismatchedNotSetException(");
      assertNotNull(versionNumber0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create materialized view*/");
      tableContainer0.getTable("throwIfMissingParms");
      tableContainer0.toString();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("o*U$n(a", (DBTable) null, (-441), "o*U$n(a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: o*U$n(a
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = NoPutResultSet.NEXT;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-1251), "next");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("next", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("next", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Clock clock0 = MockClock.systemDefaultZone();
      MockThaiBuddhistDate.now(clock0);
      SQLUtil.renderValue(mockThaiBuddhistDate0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z#2bB");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@4b165000";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@4b165000", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "pgv");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%63&rOCgu", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Disconnect called while not connected";
      stringArray0[1] = "Disconnect called while not connected";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Disconnect called while not connected, Disconnect called while not connected, create materialized view, )", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("kD*'(oamhi`?d5r", true);
      assertEquals("kD * '(oamhi`?d5r'", string0);
      
      DBSequence dBSequence0 = new DBSequence(";VgK", "kD*'(oamhi`?d5r", "kD*'(oamhi`?d5r");
      String string1 = SQLUtil.renderValue("kD*'(oamhi`?d5r");
      assertEquals("'kD*'(oamhi`?d5r'", string1);
      
      DBSchema dBSchema0 = new DBSchema("delete");
      dBSchema0.addTable(defaultDBTable0);
      SQLUtil.removeComments("kD*'(oamhi`?d5r");
      StringBuilder stringBuilder0 = new StringBuilder(336);
      stringBuilder0.append((-1934.4955));
      StringBuilder stringBuilder1 = new StringBuilder(336);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized viewnv,yk&}=qyptbubbkh");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = FBConnectionProperties.USE_STREAM_BLOBS_PROPERTY;
      SQLUtil.mutatesStructure("alter tablecallnv,yk&tqyptbubbkh");
      // Undeclared exception!
      try { 
        SQLUtil.join(":r28BoD3Rg*VR<e*cZ", (String) null, (String[]) null, (String) null, ":r28BoD3Rg*VR<e*cZ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create materialized view*/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(3110);
      SQLUtil.mutatesDataOrStructure("create materialized view*/");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("VR`K,m];~g5i!", stringBuilder0);
      SQLUtil.isDDL("s}l[C^^G");
      DBCatalog dBCatalog0 = new DBCatalog("}EJVyilxdx");
      DBSchema dBSchema0 = new DBSchema("ud[muIcQms}", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("getType", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("VR`K,m];~g5i!", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "INDEXES";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("truncatedpu^kw", "truncatedpu^kw", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("INDEXES", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("truncatedpu^kw", dBCatalog0);
      dBSchema0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(2272, "truncatedpu^kw");
      int int0 = (-2028836007);
      Integer integer0 = new Integer((-2028836007));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncatedpu^kw", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBSchema dBSchema1 = new DBSchema("INDEXES");
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "ab+i^_%S(!f8`Ydn;";
      stringArray0[2] = "GROUP";
      stringArray0[4] = "";
      stringArray0[5] = "ab+i^_%S(!f8`Ydn;";
      String string0 = SQLUtil.join("", "ab+i^_%S(!f8`Ydn;", stringArray0, stringArray0[3], "", stringArray0);
      assertEquals("null as  on ab+i^_%S(!f8`Ydn;. = . and ab+i^_%S(!f8`Ydn;.ab+i^_%S(!f8`Ydn; = .ab+i^_%S(!f8`Ydn; and ab+i^_%S(!f8`Ydn;.GROUP = .GROUP and ab+i^_%S(!f8`Ydn;.null = .null and ab+i^_%S(!f8`Ydn;. = . and ab+i^_%S(!f8`Ydn;.ab+i^_%S(!f8`Ydn; = .ab+i^_%S(!f8`Ydn;", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null as  on ab+i^_%S(!f8`Ydn;. = . and ab+i^_%S(!f8`Ydn;.ab+i^_%S(!f8`Ydn; = .ab+i^_%S(!f8`Ydn; and ab+i^_%S(!f8`Ydn;.GROUP = .GROUP and ab+i^_%S(!f8`Ydn;.null = .null and ab+i^_%S(!f8`Ydn;. = . and ab+i^_%S(!f8`Ydn;.ab+i^_%S(!f8`Ydn; = .ab+i^_%S(!f8`Ydn;");
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, ab+i^_%S(!f8`Ydn;, GROUP, , , ab+i^_%S(!f8`Ydn;)", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", true, stringArray0);
      dBPrimaryKeyConstraint0.equals("update");
      dBPrimaryKeyConstraint0.equals("update");
      String string0 = Table.VIEW;
      String string1 = SchemaDescriptor.STD_DEFAULT_SCHEMA_NAME;
      String string2 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.update", string2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("required (...)+ loop did not match anything at input ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("required (...) + loop did not match anything at input");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_FUNCTION_AS_STRING;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(":?EjX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("update", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = DataDictionary.CORE_DATA_DICTIONARY_VERSION;
      defaultDBTable0.getForeignKeyConstraints();
      DBCatalog dBCatalog0 = new DBCatalog("1#m");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Collection<DBTable> collection0 = defaultDBTable0.getReferrers();
      StringReader stringReader0 = new StringReader("1#m");
      DBDataType.getInstance("CLOB");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "DataDictionaryVersion", true, (String[]) null);
      boolean boolean0 = SQLUtil.isDML("update");
      String string1 = SQLUtil.substituteMarkers("%#r(", "CLOB", collection0);
      assertEquals("%#r(", string1);
      
      boolean boolean1 = SQLUtil.isQuery("28v-j");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCatalog dBCatalog1 = new DBCatalog(", ");
      SQLUtil.mutatesDataOrStructure("truncateunique_index_name");
      VersionNumber.valueOf("select");
      String string0 = Page.DIAG_BYTES_FREE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      SQLUtil.innerJoin("z+)cgpF~=", stringArray0, "truncateunique_index_name", "z+)cgpF~=", stringArray0);
      DBSchema dBSchema0 = new DBSchema("bytesFree", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncateunique_index_name", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("z+)cgpF~=", defaultDBTable0, (-491), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.mutatesDataOrStructure("dpu^kw");
      SQLUtil.parseColumnTypeAndSize("dpu^kw");
      StringBuilder stringBuilder0 = new StringBuilder(122);
      stringBuilder0.append((-3));
      SQLUtil.addRequiredCondition("dpu^kw", stringBuilder0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBDataType dBDataType0 = DBDataType.getInstance(16, "dpu^kw");
      assertFalse(dBDataType0.isTemporal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("CU4REvT", "CU4REvT");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableContainer tableContainer0 = new TableContainer("CU4REvT");
      SQLUtil.normalize("org.apache.derby.impl.sql.compile.ProjctRestrictNode", false);
      DBCatalog dBCatalog0 = new DBCatalog("CU4REvT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("pdZ&,SgPa>Z*)H&_)U&");
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = "selectt\"o?7}sk+bqcg?";
      SQLUtil.normalize("selectt\"o?7}sk+bqcg?", true);
      String string1 = "selectselect into";
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile("CU4REvT");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      Boolean boolean1 = new Boolean(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = SchemaDescriptor.DEFAULT_USER_NAME;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      StringReader stringReader0 = new StringReader("TK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.normalize("E5)ayJ[aJV`Rcglh", true);
      assertEquals("E5) ayJ [ aJV ` Rcgl  h ", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
      
      boolean boolean2 = SQLUtil.isDDL("TK");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Nv,yk&}=QypTBubbkH");
      SQLUtil.normalize("Nv,yk&}=QypTBubbkH", false);
      DBSequence dBSequence0 = new DBSequence("EJ9(LD&1R}", "exec", "kD*'(oamhi`?d5r");
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = ">^!g,B";
      String string1 = null;
      Character character0 = Character.valueOf('0');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(">^!g,B", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLUtil.isQuery("select");
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer.toString((-145));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.mutatesStructure("nv,y");
      SQLUtil.ownerDotComponent(dBCatalog0);
      StringBuilder stringBuilder0 = new StringBuilder("drop tablenv,yk&}=qyptbubbkh");
      StringBuilder stringBuilder1 = stringBuilder0.append("-145");
      SQLUtil.mutatesDataOrStructure("drop tablenv,yk&}=qyptbubbkh");
      SQLUtil.addOptionalCondition(" NOT", stringBuilder0);
      SQLUtil.isDDL("[CaCBm_4rA");
      DBSchema dBSchema0 = new DBSchema("create unique index43y55.u", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select", true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("drop tablenv,yk&}=qyptbubbkh-145 or  NOTCONSTRAINT select ", stringBuilder1.toString());
      assertEquals("drop tablenv,yk&}=qyptbubbkh-145 or  NOTCONSTRAINT select ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("6t");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m(iGp*Q", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6t";
      stringArray0[1] = "m(iGp*Q";
      stringArray0[2] = "m(iGp*Q";
      stringArray0[3] = "table nu";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table nu", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"table nu\" ", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create materialized view*/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(3110);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view*/");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("s}l[C^^G");
      assertFalse(boolean1);
      
      DBCatalog dBCatalog0 = new DBCatalog("}EJVyilxdx");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.getForeignKeyConstraints();
      DBSequence dBSequence0 = new DBSequence(";VgK", "exec", "exec");
      SQLUtil.renderValue("exec");
      BigInteger bigInteger0 = BigInteger.ZERO;
      DBSchema dBSchema0 = new DBSchema("delete");
      dBSchema0.setDoc("exec");
      dBSchema0.addTable(defaultDBTable0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "delete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "OrR\fS", true, stringArray0);
      SQLUtil.removeComments("kD*'(oamhi`?d5r");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "exec", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delete");
      Locale locale0 = Locale.ENGLISH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "O'Ku/BxuJ.p'L", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("update", 45);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.substituteMarkers("update", "R^<h@G9~/*4qa{6kz", evoSuiteRemoteAddress0);
      defaultDBTable0.getForeignKeyConstraints();
      DBCatalog dBCatalog0 = new DBCatalog("1#m");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = RawStoreFactory.ENCRYPTED_KEY;
      defaultDBTable0.getReferrers();
      StringReader stringReader0 = new StringReader("eI#vm");
      DBDataType.getInstance("CLOB");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "encryptedBootPassword", false, (String[]) null);
      dBPrimaryKeyConstraint0.setDoc("");
      dBPrimaryKeyConstraint0.setName("into");
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBPrimaryKeyConstraint0.setName("R^<h@G9~/*4qa{6kz");
      dBPrimaryKeyConstraint0.toString();
      defaultDBTable1.getUniqueConstraint("update");
      SQLUtil.removeComments("R^<h@G9~/*4qa{6kz");
      SQLUtil.typeAndName(defaultDBTable1);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("R^<h@G9~/*4qa{6kz");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("kD*'(oamhi`?d5r", true);
      DBSequence dBSequence0 = new DBSequence(";VgK", "kD*'(oamhi`?d5r", "kD*'(oamhi`?d5r");
      SQLUtil.renderValue("kD*'(oamhi`?d5r");
      String[] stringArray0 = new String[8];
      stringArray0[2] = "delete";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-VQg>.Fsdw)^|o'\"", true, stringArray0);
      SQLUtil.removeComments("kD*'(oamhi`?d5r");
      dBPrimaryKeyConstraint0.setName("kD*'(oamhi`?d5r");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";VgK", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT kD*'(oamhi`?d5r UNIQUE (, , delete, , , , , )", defaultDBTable0, (-636), "CONSTRAINT kD*'(oamhi`?d5r UNIQUE (, , delete, , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oamhi`?d5r UNIQUE (\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("yxbk~rye", 46);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBDataType dBDataType0 = DBDataType.getInstance((-77844374), "update");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ControlRow.SPLIT_FLAG_FIRST_ON_PAGE;
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      Integer integer1 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("@", dBCatalog1);
      dBCatalog1.getSchemas();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("drop tablenv,yk&}=qyptbubbkh", dBSchema0);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      int int1 = XAResource.TMENDRSCAN;
      Integer integer3 = RawTransaction.COMMIT;
      defaultDBTable1.equals((Object) null);
      Integer integer4 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create tablenv,yk&}=qyptbubbkh", defaultDBTable0, dBDataType0, integer4);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("UPDATE(0,0)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop tablenv,yk&}=qyptbubbkh");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer integer5 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("7{F=k/\"nM5f'", defaultDBTable1, dBDataType0, integer5);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string1 = SQLUtil.renderColumnNames(list0);
      assertEquals("update, create tablenv,yk&}=qyptbubbkh", string1);
      
      boolean boolean1 = SQLUtil.isDML("create tablenv,yk&}=qyptbubbkh");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "--";
      SQLUtil.normalize("--", false);
      DBSequence dBSequence0 = new DBSequence(" NULL", "--", "o+0-#couE5A/");
      SQLUtil.renderValue(";VgK");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(981);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 981, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("kD*'(oamhi`?d5r", true);
      assertEquals("kD * '(oamhi`?d5r'", string0);
      
      DBSequence dBSequence0 = new DBSequence(";VgK", "kD * '(oamhi`?d5r'", "kD * '(oamhi`?d5r'");
      String string1 = SQLUtil.renderValue("kD*'(oamhi`?d5r");
      assertEquals("'kD*'(oamhi`?d5r'", string1);
      
      DBDataType.getInstance("CLOB");
      defaultDBTable0.getPrimaryKeyConstraint();
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("a.E_@/VZJZw");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique index", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";VgK", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("CU4REvT");
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      mockFile0.setWritable(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      mockPrintWriter0.println(charArray0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      mockPrintWriter0.println((Object) valueDecimal0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "CU4REvT");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      TableContainer tableContainer0 = new TableContainer("CU4REvT");
      DBSchema dBSchema0 = new DBSchema("'o;Y|!B", (DBCatalog) null);
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      SQLUtil.typeAndName((DBObject) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'o;Y|!B";
      String string0 = SQLUtil.leftJoin("[UoYJvk", stringArray0, "isc_info_sql_sub_type ", "H$-QRASi9jTWp63", stringArray0);
      assertEquals("left join isc_info_sql_sub_type  as H$-QRASi9jTWp63 on [UoYJvk.'o;Y|!B = H$-QRASi9jTWp63.'o;Y|!B", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(90, "'o;Y|!B");
      Integer.getInteger("[UoYJvk");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("isc_info_sql_sub_type ", defaultDBTable0, dBDataType0, (Integer) 17, (Integer) null);
      QueryTreeNode.formatNodeString("'o;Y|!B", 14);
      String string1 = SQLUtil.normalize("H$-QRASi9jTWp63", false);
      assertEquals("H $ - QRASi9jTWp63", string1);
      
      boolean boolean2 = SQLUtil.isDML("isc_info_sql_sub_type ");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "w.i53ciiduMYd^0$";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = "t$bB?\\ORUP[=Nrdb&k?";
      VersionNumber versionNumber0 = VersionNumber.valueOf("setCharacteStream(long)");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select", "w.i53ciiduMYd^0$", versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t$bB?ORUP[=Nrdb&k?");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t$bB?ORUP[=Nrdb&k?";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w.i53ciiduMYd^0$", false, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setCharacteStream(long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("update", 45);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.substituteMarkers("update", "R^<h@G9~/*4qa{6kz", evoSuiteRemoteAddress0);
      DBCatalog dBCatalog0 = new DBCatalog("1#m");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SchemaDescriptor.IBM_SYSTEM_SCHEMA_NAME;
      String string1 = RawStoreFactory.ENCRYPTED_KEY;
      defaultDBTable0.getReferrers();
      StringReader stringReader0 = new StringReader("Perm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "mismatched tree node: ", true, (String[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBPrimaryKeyConstraint0.setName("R^<h@G9~/*4qa{6kz");
      dBPrimaryKeyConstraint0.toString();
      Integer integer0 = new Integer((-851));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CONSTRAINT R^<h@G9~/*4qa{6kz PRIMARY KEY ()", defaultDBTable1, 930, "d<VF%6G'' pgG2Ft");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StringReader stringReader0 = new StringReader("<EOR>");
      stringReader0.markSupported();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", true, (String[]) null);
      Boolean boolean1 = new Boolean(false);
      dBPrimaryKeyConstraint0.setName("CLOB");
      SQLUtil sQLUtil0 = new SQLUtil();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte)34);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dynamicByteArrayOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("update", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = DataDictionary.CORE_DATA_DICTIONARY_VERSION;
      defaultDBTable0.getForeignKeyConstraints();
      DBCatalog dBCatalog0 = new DBCatalog("update");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string1 = RawStoreFactory.ENCRYPTED_KEY;
      defaultDBTable0.getReferrers();
      StringReader stringReader0 = new StringReader("Perm");
      DBDataType.getInstance("CLOB");
      DBDataType.getInstance(2931, "alter tablegetmiscresultset");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "encryptedBootPassword", true, (String[]) null);
      SQLUtil.isDML("update");
      defaultDBTable1.setPrimaryKey(dBPrimaryKeyConstraint0);
      String string2 = SQLUtil.normalize("CLOB", true);
      DBCatalog dBCatalog1 = new DBCatalog("CLOB");
      SQLUtil.mutatesDataOrStructure("select into");
      VersionNumber.valueOf("DataDictionaryVersion");
      String string3 = SQLUtil.removeComments("encryptedBootPassword");
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      CompositeDBObject<DefaultDatabase> compositeDBObject0 = (CompositeDBObject<DefaultDatabase>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      StringReader stringReader0 = new StringReader("<EOR>");
      stringReader0.markSupported();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(4);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dynamicByteArrayOutputStream0, charset0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName((DBObject) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = LogToFile.TEST_LOG_FULL;
      String string1 = "po\\n}3}W^&";
      StringReader stringReader0 = new StringReader("po\n}3}W^&");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance(1918, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("EWAdP");
      dBDataType0.isAlpha();
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "po\n}3}W^&");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
