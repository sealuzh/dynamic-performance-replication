/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:53:57 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Deprecated;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.MethodParameters;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      try { 
        Utility.methodSignatureArgumentTypes("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.isJavaIdentifierPart('5');
      try { 
        Utility.methodSignatureReturnType("Dont call getValueChar() on a non CHAR ElementValue", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non CHAR ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("T* f$W02c_a", stringArray0);
      Utility.searchOpcode("");
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("VUT?}\"L=2]lJ0CrZ4Dr");
      assertEquals((byte)12, byte0);
      
      String string0 = "V&xoVz/";
      boolean boolean0 = true;
      Utility.signatureToString("V&xoVz/", true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("dup2");
      assertEquals((short)92, short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 447, 191, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.decode(",", false);
      try { 
        Utility.methodSignatureReturnType("6c|)MZGrdQV#I&u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MZGrdQV#I&u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte byte0 = Utility.typeOfSignature("[59}S");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(1954);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("fstore_3");
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)101;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", low = ", "", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L=9^3rigx_<e$UU;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L=9^3rigx_<e$UU;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)85;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L=9^3rigx_<e$UU;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L=9^3rigx_<e$UU;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("putstatic");
      assertEquals("putstatic", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W9,ZVvAi1z4k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W9,ZVvAi1z4k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "The ofzset cannot be negative";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The ofzset cannot be negative", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The ofzset cannot be negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s'^pv", "s'^pv", "h\"<-cpI)2@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s'^pv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (-2657), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    fconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)101;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)40, false);
      try { 
        Utility.methodSignatureArgumentTypes("\"dtc>U$@P*,%]i#`L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"dtc>U$@P*,%]i#`L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q%x%=?C_A]B+2(!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q%x%=?C_A]B+2(!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
      
      Utility.decode("H]'V;cxTeaI1!2Mx", false);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("CTTO\"!N^@TmUPB");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.accessToString(324, true);
      try { 
        Utility.typeOfMethodSignature("protected volatile native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected volatile native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-:cAuZY;vx n,7iH1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -:cAuZY;vx n,7iH1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1294), (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lastore
         // 1:    fload_3
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)40;
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "\"p<P\\5lFA";
      try { 
        Utility.typeOfSignature("\"p<P\u0005lFA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"p<P\u0005lFA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("( H7,\"Vny$f&+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ( H7,\"Vny$f&+G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E|b0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E|b0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(2507, (-44), true, 'b');
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)123;
      byteArray0[7] = (byte)123;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)123;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte)123);
      try { 
        Utility.typeOfMethodSignature("0:    l2d\n1:    lshr\n2:    nop\n3:    l2d\n4:    if_icmpne\t\t#-24412\n7:    lshr\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2d
         // 1:    lshr
         // 2:    nop
         // 3:    l2d
         // 4:    if_icmpne\t\t#-24412
         // 7:    lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence3, constantPool0, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName(">\t");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, ">\t", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.ParameterAnnotationEntry", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ParameterAnnotationEntry'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Eun]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Eun]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      Utility.accessToString(1803, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-722));
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit((-722), 4);
      assertEquals((-722), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("93", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.accessToString((-32768));
      Utility.convertString("");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("faload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: faload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte) (-99);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(xHr,\"ny$f&+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xHr,\"ny$f&+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G2t%?xwyDu4()", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G2t%?xwyDu4()'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-85);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$f9$A$Au$ab$A", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      Utility.getSignature(">");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(":", (String) null, ":", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.getSignature(">");
      assertEquals("L>;", string0);
      
      ConstantUtf8.getCachedInstance(">");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-126);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1676), 137);
      assertEquals("0:    faload\n1:    ixor\n", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantUtf8.getCachedInstance("4`Z):Y2Zgr");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte)78;
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.classOrInterface((-2565));
      try { 
        Utility.typeOfSignature("4`Z):Y2Zgr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4`Z):Y2Zgr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) "Kd.";
      objectArray0[1] = (Object) "Kd.";
      objectArray0[2] = (Object) "Kd.";
      objectArray0[3] = (Object) "Kd.";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("Kd., Kd., Kd., Kd., null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)84;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) (byte)84;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.getSignature("z]H!>o");
      assertEquals("Lz]H!>o;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifeq\t\t#-15164", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("48 00", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      Utility.replace("g", "g", "g");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('U');
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.isJavaIdentifierPart('$');
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-64);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("KbM#Oi\"[-s6uhc2*;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KbM#Oi\"[-s6uhc2*;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("wide\t(wide)", string0);
      
      String string1 = Utility.compactClassName("0vDDl/");
      assertEquals("0vDDl.", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.getSignature(" (");
      assertEquals("L(;", string0);
      
      String string1 = Utility.signatureToString("F4,BC");
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      MockFile mockFile0 = new MockFile("k,gS]OLq4m", "k,gS]OLq4m");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFileWriter0.getEncoding();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("lookupswitch", "W__^@a$7x#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"W__^@a$7x#\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("( Hr,$\"ny$f&+", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (-4293), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "J";
      stringArray0[1] = "~aS";
      stringArray0[2] = "J";
      String string0 = Utility.signatureToString("J", true);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature(":JAuZY;vx n,7iH1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :JAuZY;vx n,7iH1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aaload", "aaload", "aaload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.compactClassName("Z]FT7");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The array of prefixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("V2<[k>13");
      mockPrintStream0.write(60);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "V2<[k>13";
      objectArray0[3] = (Object) "V2<[k>13";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "V2<[k>13";
      objectArray0[6] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a5", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("VUT?}\"L=2]lJ0CrZ4Dr");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)48;
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("ZC$c5C$A$8a$3a0$A");
      Utility.signatureToString("ZC$c5C$A$8a$3a0$A", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("java.lang.public");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S-aC,qe~*  ");
      try { 
        Utility.typeOfSignature("/@g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte) (-89), (byte)34, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.searchOpcode("Hr+Ra`%s@;wF~ve<W{");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      byte[] byteArray1 = new byte[0];
      Utility.toHexString(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BTr/',UsX&]qIuft&\"Q");
      assertEquals("byte", string0);
      
      String string1 = Utility.compactClassName("BTr/',UsX&]qIuft&\"Q");
      assertEquals("BTr.',UsX&]qIuft&\"Q", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SourceFile: ");
      assertEquals((byte)9, byte0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("java.lang.public");
      assertEquals("public", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "5uV~m";
      try { 
        Utility.typeOfSignature("5uV~m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5uV~m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "}a=+";
      try { 
        Utility.methodSignatureToString("}a=+", "}a=+", "}a=+", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }a=+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("swap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: swap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Utility.isJavaIdentifierPart('J');
      Utility.format(216, (-1807), true, 'D');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-1807), true, 'J');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, 189, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      Utility.accessToString(0, true);
      Utility.accessToString(0, true);
      String string1 = "8[(>ORh4i~";
      Utility.compactClassName("8[(>ORh4i~", ")3X u", true);
      Utility.getSignature(")3X u");
      try { 
        Utility.typeOfMethodSignature("Rd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("( xHr,\"ny$f&+", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%k?51(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %k?51(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      Utility.signatureToString("Invalid StackMap frame_type: ", true);
      try { 
        Utility.typeOfMethodSignature("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      Utility.accessToString(1803, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)64;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">5;$$");
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte)11, true);
      try { 
        Utility.typeOfSignature("Un!IHr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Un!IHr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      String string0 = "UF@V:+2Qv";
      // Undeclared exception!
      try { 
        Utility.signatureToString("UF@V:+2Qv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UF@V:+2Qv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_0zG5HhQ3j";
      stringArray0[1] = "char";
      stringArray0[2] = "=9^3rigx_<e$UU";
      Utility.methodTypeToSignature("E", stringArray0);
      ConstantUtf8.getCachedInstance("`<5~*E");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte) (-45));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      Utility.format((byte)0, (byte)0, true, 'u');
      Utility.isSet((byte)0, 0);
      boolean boolean0 = Utility.isSet((-888), 0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(65536);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte) (-104);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-104), 60, false);
      assertEquals("0:    dcmpg\n1:    dcmpg\n", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7a", string0);
      
      String string1 = Utility.compactClassName("g$/|{lRY");
      assertEquals("g$.|{lRY", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.signatureToString("Signature");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("dup_x2");
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("4`Z):Y2Zgr");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 31425. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("G/Uk63+zlgUBX ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G/Uk63+zlgUBX 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".?s#N`V6^\"R/t`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .?s#N`V6^\"R/t`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      byteSequence0.close();
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@36c7b29b\", \"java.lang.Object@68bce9f4\", \"java.lang.Object@424ca004\", \"java.lang.Object@9c13f2f\", \"java.lang.Object@29907e6\", \"java.lang.Object@d65bd08\", \"java.lang.Object@2a0e7020\", \"java.lang.Object@2a360a09\", \"java.lang.Object@605a9e9e\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@36c7b29b\", \"java.lang.Object@68bce9f4\", \"java.lang.Object@424ca004\", \"java.lang.Object@9c13f2f\", \"java.lang.Object@29907e6\", \"java.lang.Object@d65bd08\", \"java.lang.Object@2a0e7020\", \"java.lang.Object@2a360a09\", \"java.lang.Object@605a9e9e\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.accessToString(158, true);
      assertEquals("private protected static final transient", string0);
      
      String string1 = Utility.compactClassName(",-.JNl9jDxR", "]-?g8S{|#FT", true);
      assertEquals(",-.JNl9jDxR", string1);
      
      short short0 = Utility.searchOpcode("o[nOOS,");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Constant pool at index ");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skip(1L);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.clearBit(1415, (-32768));
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.convertString("java.lang.Object@7b3acebd, java.lang.Object@4cfa14fe, java.lang.Object@1d8254cc, java.lang.Object@62ddf7fd");
      try { 
        Utility.typeOfSignature("java.lang.Object@7b3acebd, java.lang.Object@4cfa14fe, java.lang.Object@1d8254cc, java.lang.Object@62ddf7fd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@7b3acebd, java.lang.Object@4cfa14fe, java.lang.Object@1d8254cc, java.lang.Object@62ddf7fd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)24;
      Utility.equals(byteArray0, byteArray1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@&Msq_FE$~");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[H}A'S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [H}A'S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("java.lang.", true);
      assertEquals("", string0);
      
      int int0 = Utility.setBit(40, 40);
      assertEquals(296, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("4|=JiY+YWM\"z", (-153), false, '$');
      assertEquals("4|=JiY+YWM\"z", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)18;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)18;
      byteArray1[7] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A$A$A$A$Sr$A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A$A$A$A$Sr$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E|b0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E|b0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      try { 
        Utility.methodSignatureArgumentTypes("^t_dmK`ePd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^t_dmK`ePd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, 2240);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.compactClassName(">33oUXW,V, S");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.signatureToString("ZFmTDPA-)");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Na6vn($wzYXgh0U;Ze";
      String string0 = Utility.methodTypeToSignature("\n", stringArray0);
      assertEquals("(LNa6vn($wzYXgh0U;Ze;)L;", string0);
      
      String string1 = Utility.accessToString(60);
      assertEquals("protected static final synchronized", string1);
      
      String string2 = Utility.compactClassName("1]$M]i\"52LK", false);
      assertEquals("1]$M]i\"52LK", string2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ":JAuZY;vx n,7iH1?";
      try { 
        Utility.typeOfSignature(":JAuZY;vx n,7iH1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :JAuZY;vx n,7iH1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.format((-5281), (-5281), false, ':');
      Utility.decode("h?T@TJv]&k#Q'", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 215, 2123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QT?szHMDD#kv&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QT?szHMDD#kv&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = Utility.setBit(511, (-970));
      assertEquals(4194815, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload\t\t%217", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("2Kf9#3>hxhnFX$8Mp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Kf9#3>hxhnFX$8Mp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("ifnull");
      assertEquals((short)198, short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.getSignature("\n     ");
      assertEquals("L;", string0);
      
      Utility.clearBit(1, 672);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;", "L;", "?,575AdNtm+UB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("java.lang.public");
      assertEquals("public", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t#", "\t\t#", ".fbqR.eN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      Utility.setBit(511, 511);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X/2Q&A=*6DDrH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X/2Q&A=*6DDrH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "'^{[0oqXw(:[NFRh6";
      // Undeclared exception!
      try { 
        Utility.getSignature("'^{[0oqXw(:[NFRh6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[0oqXw(:[NFRh6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "A' 6Pu`\\W=N`p7?";
      String string1 = "D";
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)56, 75, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",:4T?!rFH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,:4T?!rFH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "3=-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)76);
      Constant[] constantArray0 = new Constant[13];
      byteSequence0.mark(3);
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      short short0 = Utility.searchOpcode("astore_1");
      assertEquals((short)76, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Utility.setBit(39, 2);
      assertEquals(39, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "~aS";
      stringArray0[2] = "{";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.convertString("):\n");
      assertEquals("):\\n", string0);
      
      String string1 = Utility.format((byte)74, (byte) (-26), true, 'q');
      assertEquals("74", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      int int0 = Utility.clearBit((-676), (-676));
      assertEquals((-268436132), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Utility.isSet(54, 54);
      boolean boolean1 = Utility.isJavaIdentifierPart('');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q%x%=?C_A]B+2(!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q%x%=?C_A]B+2(!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M.W!~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M.W!~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("areturn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[1] = (Object) "n1]Fzu$&|}})30*[";
      mockFileWriter0.getEncoding();
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[4] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[5] = (Object) mockFileWriter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      mockPrintWriter0.flush();
      objectArray0[7] = (Object) "n1]Fzu$&|}})30*[";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("n1]Fzu$&|}})30*[", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)33);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.typeOfSignature("D9F*:");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "D9F*:";
      Utility.printArray(objectArray0);
      Utility.accessToString(412, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2601, (-3768), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.getSignature("bqM\n,wo");
      String string0 = Utility.methodTypeToSignature("bqM\n,wo", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";yb8Jf'JM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;yb8Jf'JM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.signatureToString("L`>^\"'qPZoV`L;V", false);
      assertEquals("`>^\"'qPZoV`L", string0);
      
      String string1 = Utility.accessToString(163, false);
      assertEquals("public private synchronized transient", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.convertString("3\u0003qA4G@F(6e4q=");
      assertEquals("3\u0003qA4G@F(6e4q=", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A%xd70ob8&|!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A%xd70ob8&|!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "}:If:JA@O", "}:If:JA@O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("s_B@@?=kw");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", "java.lang.boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-56), (int) (byte) (-120), false);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short short0 = Utility.searchOpcode("Hr+Ra`%s@;wF~ve<W{");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lstore\t\t%163", string0);
      
      String string1 = Utility.getSignature("invokespecial");
      assertEquals("Linvokespecial;", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.clearBit((-2249), (-2249));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-118);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 1197);
      try { 
        Utility.typeOfMethodSignature("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4801, 256, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.compactClassName("ifE YbG[_vwzD;:.%/", "ifE YbG[_vwzD;:.%/", true);
      assertEquals("ifE YbG[_vwzD;:.%.", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Na6vn($wzYXgh0U;Ze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Na6vn($wzYXgh0U;Ze'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-11), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2l
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isJavaIdentifierPart('s');
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 573, (-568));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readChar();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[2/QIFd~<e$'Hrf");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-69);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantUtf8.getCachedInstance("4`Z):Y2Zgr");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.compactClassName("long");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)43, (byte)43);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("ifnonnull");
      assertEquals("ifnonnull", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isJavaIdentifierPart('v');
      Utility.format(65, (-637), false, 'v');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "65";
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool2, false);
      String string0 = Utility.compactClassName("Pattern is missing");
      assertEquals("Pattern is missing", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.classOrInterface(39);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "class", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.accessToString(0);
      Utility.accessToString(0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1598, 177);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("wH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "J/D+?";
      Utility.typeOfSignature("J/D+?");
      String string1 = "char";
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Z";
      objectArray0[1] = (Object) "Z";
      objectArray0[2] = (Object) "Z";
      objectArray0[3] = (Object) "Z";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{Z, Z, Z, Z}", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = new Integer(1954);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("baload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `baload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.classOrInterface(1883);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.Short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1608, (byte)18);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 43, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R`-'7sv<(AP-Xcyi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R`-'7sv<(AP-Xcyi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName(">\t", false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("Visiting non-standard PMGClass object", "Visiting non-standard PMGClass object", ">\t", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Visiting non-standard PMGClass object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)30, (byte) (-11));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a9$k$f5$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.format(1654, 242, false, 't');
      byte[] byteArray1 = Utility.decode(" hRv37o", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 84, (-556), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "Hr+Ra`%s@;wF~ve<W{";
      try { 
        Utility.typeOfSignature("Hr+Ra`%s@;wF~ve<W{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hr+Ra`%s@;wF~ve<W{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)74;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-73);
      byteArray0[7] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1968), 160, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ldiv
         // 1:    lconst_1
         // 2:    caload
         // 3:    dup
         // 4:    pop2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.accessToString(103);
      String string0 = "RJSD7D%+LJsGwUdE`";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected synchronized volatile", "RJSD7D%+LJsGwUdE`", "`NyN(lnyJdAc2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected synchronized volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence4, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 236, 14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.classOrInterface(2);
      Utility.format((-5281), (-5281), false, ':');
      byte[] byteArray0 = Utility.decode("h?T@TJv]&k#Q'", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2, (-5281));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.typeOfMethodSignature("-5281");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -5281
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.replace("[0):c9E!=WRlMQ", "-70-b<CD FLHB", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-1545), true);
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "LvF_6 9";
      Utility.typeOfSignature("LvF_6 9");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, 1329);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.clearBit(220, 1767);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string0 = "_0zG5H\\hQ3j";
      stringArray0[7] = "_0zG5HhQ3j";
      stringArray0[8] = "char";
      Utility.methodTypeToSignature("", stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("(L;L;L;L;L;L;L;L_0zG5HhQ3j;C)L;", "null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // null
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.isJavaIdentifierPart('f');
      try { 
        Utility.methodSignatureReturnType("PTB'p!g6H l1VS~b4m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PTB'p!g6H l1VS~b4m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.convertString("iaload");
      assertEquals("iaload", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)48;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte)65;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.typeOfSignature("lstore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString(")\n");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('6');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(1803, false);
      assertEquals("public private static native interface abstract", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-100);
      ConstantUtf8.getCachedInstance("");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), 1803);
      assertEquals("0:    fmul\n1:    fstore_2\n2:    monitorenter\n3:    ifge\t\t#3\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[8] = (byte) (-118);
      byteArray0[1] = (byte)123;
      byteArray0[7] = (byte)123;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)123;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)123);
      try { 
        Utility.typeOfSignature("0:    nop\n1:    lshr\n2:    nop\n3:    l2d\n4:    if_icmpne\t\t#-24412\n7:    lshr\n8:    l2d\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    lshr
         // 2:    nop
         // 3:    l2d
         // 4:    if_icmpne\t\t#-24412
         // 7:    lshr
         // 8:    l2d
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         // 17:   nop
         // 18:   nop
         // 19:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.accessToString(1, false);
      try { 
        Utility.typeOfSignature("+9;}]C:2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9;}]C:2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload\t\t%23", string0);
      
      short short0 = Utility.searchOpcode("fload\t\t%23");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3hp}8!Ij");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3hp}8!Ij
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte) (-67);
      byteArray1[6] = (byte) (-67);
      byteArray1[7] = (byte) (-67);
      byteArray1[8] = (byte) (-67);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.clearBit(95, 95);
      // Undeclared exception!
      try { 
        Utility.compactClassName("'", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)23;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("N7D9;Na$RpYW;O`KO[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      String string1 = "instanceOf";
      try { 
        Utility.methodSignatureToString("", "instanceOf", "\t\t", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.printArray(objectArray0);
      String string0 = "]`qnF93HZY0#\"s";
      Utility.replace("", "]`qnF93HZY0#\"s", "]`qnF93HZY0#\"s");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      String string1 = "Q\\6_zYtiB{M5s9OT";
      try { 
        Utility.typeOfMethodSignature("Q\u0006_zYtiB{M5s9OT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q\u0006_zYtiB{M5s9OT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.accessToString(1, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-122);
      byte byte0 = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("public");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("public");
      String string0 = "y";
      String string1 = "7|Eq6vmB@=WD<\"]z8\\7";
      int int0 = 8;
      int int1 = (-946);
      int int2 = 97;
      Attribute[] attributeArray0 = new Attribute[7];
      int int3 = 95;
      Deprecated deprecated0 = new Deprecated(95, (byte)65, byteArray0, constantPool0);
      attributeArray0[0] = (Attribute) deprecated0;
      MethodParameters methodParameters0 = null;
      try {
        methodParameters0 = new MethodParameters((byte)65, (-946), byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.getSignature("");
      String string0 = "";
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "dload_3";
      try { 
        Utility.methodSignatureReturnType("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.searchOpcode("Hr+Ra`%s@;wF~ve<W{");
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-80);
      byteArray0[3] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-97);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-27);
      byteArray0[0] = (byte)111;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.replace("D9WF*:", "D9WF*:", "D9WF*:");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("'^{[0oqXw(:[NFRh6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[0oqXw(:[NFRh6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Utility.replace("||4Mib'|DYWVm5", "||4Mib'|DYWVm5", "( Hr,$\"ny$f&+");
      try { 
        Utility.methodSignatureArgumentTypes("( Hr,$\"ny$f&+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` Hr,$\"ny$f&+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.compactClassName("CONSTANT_Double", "?@", true);
      assertEquals("CONSTANT_Double", string0);
      
      String string1 = Utility.getSignature("CONSTANT_Double");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence2, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.convertString("long");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-118));
      try { 
        Utility.typeOfMethodSignature("pOhmI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pOhmI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LvF_6 9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LvF_6 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lxor
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore\t\t%167", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.isJavaIdentifierPart('I');
      // Undeclared exception!
      try { 
        Utility.signatureToString("s`MzztEqc7ui%MAs<<)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s`MzztEqc7ui%MAs<<)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("new", "new", "new");
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable(32, (-688), byteSequence0, (ConstantPool) null);
      localVariableTypeTable0.getLocalVariable((-688));
      localVariableArray0[0] = null;
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      LocalVariable localVariable0 = new LocalVariable((-1896), 81, (-594), 89, 32, constantPool0);
      localVariableArray0[1] = localVariable0;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(728, 40, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("new", "?@m;%J>#W<bUSS0v", "?@m;%J>#W<bUSS0v", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream.readUTF((DataInput) byteSequence0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.searchOpcode("Hr+Ra`%s@;wF~ve<W{");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("lushr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lushr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(1482L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-21));
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2d", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)45;
      try { 
        Utility.typeOfSignature("XE$\"40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XE$\"40
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = Utility.convertString("long");
      assertEquals("long", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload\t\t%109", string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "The ofzset cannot be negative";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(69, 69);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (-3135), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte) (-99);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Illegally nested brackets:");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      int int0 = 48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 160, 48);
      byteArrayInputStream0.mark((byte)10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifle");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1257), (-2469));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2469), (-1257));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)82;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray1 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("if_icmple\t\t#115", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = Utility.clearBit(99, 99);
      assertEquals(99, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Unreachable default case reached!");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("goto\t\t#-22784", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D/[^waw0=|A4#=");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("D/[^waw0=|A4#=", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&pW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &pW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-73);
      byteArray0[7] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("V", "V", "&", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9kzw6aW1,]c%>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9kzw6aW1,]c%>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = Utility.fillup("\t", 77, false, 'a');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.reset();
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)83;
      byte byte0 = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-735), (int) (byte)83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    sipush\t\t21400
         // 4:    lushr
         // 5:    <illegal opcode>
         // 6:    monitorexit
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.replace("Hr+Ra`%s@;wF~ve<W{", "Hr+Ra`%s@;wF~ve<W{", "Hr+Ra`%s@;wF~ve<W{");
      assertEquals("Hr+Ra`%s@;wF~ve<W{", string0);
      
      byte byte0 = Utility.typeOfSignature("Bq58;");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface(126);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = Utility.fillup("TWAqF[2jPpQOJ&GFQ7", 88, false, '\"');
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"TWAqF[2jPpQOJ&GFQ7", string0);
      
      String string1 = Utility.classOrInterface(88);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("TWAqF[2jPpQOJ&GFQ7", false);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)14;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("8d 58 0e", string3);
      
      String string4 = Utility.convertString("TWAqF[2jPpQOJ&GFQ7");
      assertTrue(string4.equals((Object)string2));
      
      Utility.printArray((Object[]) null, false, false);
      Utility.compactClassName("");
      String string5 = Utility.fillup("", (byte) (-115), true, 'Y');
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1239));
      int int0 = (-4681);
      Utility.format((-1239), (-4681), false, 'h');
      Utility.compactClassName("boolean", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      Utility.format((byte)67, 185, false, 'H');
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)90;
      String string0 = Utility.encode(byteArray1, false);
      String string1 = Utility.signatureToString("S9nI*(I $@", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Utility.typeOfSignature("D/[^waw0=|A4#=");
      ConstantUtf8.getCachedInstance("D/[^waw0=|A4#=");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The ofzset cannot be negative");
      assertEquals((byte)14, byte0);
      
      MockFile mockFile0 = new MockFile("The ofzset cannot be negative", "`njmxPpDE\"63]Gl");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(3L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      String string0 = Utility.signatureToString("Bn(hT", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "U.3h";
      Utility.compactClassName("U.3h");
      String string1 = "Z";
      try { 
        Utility.methodSignatureArgumentTypes("Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)20;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.typeOfSignature("D/[^waw0=|A4#=");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('c');
      assertTrue(boolean0);
      
      String string0 = Utility.format(139, 139, true, '4');
      assertEquals("1394444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)122;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("e5 6a 7a", string1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-69);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)78;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)83;
      byteArray0[7] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("anewarray", "I~", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)71, 156, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      Utility.clearBit(2059, 20);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-87), (byte) (-11));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("p;HSL GjkQW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p;HSL GjkQW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.setBit((-724), (-724));
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dq\"s");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_1", string0);
      
      try { 
        Utility.decode("B+b}4OJg} )Vq4E*'_", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("4`Z):Y2Zgr");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = Utility.isSet(54, 54);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(">\t", false);
      assertEquals(">\t", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#bWzt5yT5^RXa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #bWzt5yT5^RXa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("");
      String string0 = Utility.compactClassName("f2i");
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("int", "", "u\"!;*N:C,MFua");
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int int0 = 2;
      Utility.setBit(39, 2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)32;
      Utility.typeOfSignature("![<x~K");
      try { 
        Utility.typeOfMethodSignature("4lu*#Mo=.#G[@O'MU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4lu*#Mo=.#G[@O'MU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.compactClassName("", "", true);
      try { 
        Utility.methodSignatureArgumentTypes("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("eEyg))+'*(ubzZ7_");
      Utility.searchOpcode("rL.0~N=p_");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.replace("Na6vn($wzYXgh0U;Ze", "Na6vn($wzYXgh0U;Ze", "Na6vn($wzYXgh0U;Ze");
      Utility.setBit(511, (-970));
      // Undeclared exception!
      try { 
        Utility.signatureToString("Na6vn($wzYXgh0U;Ze", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Na6vn($wzYXgh0U;Ze'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType(" fKzu)Ju9");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readFloat();
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1413, true, 'n');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1`~<VpV4w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1`~<VpV4w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.typeOfSignature("dsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)43;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (-2101), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      short short0 = Utility.searchOpcode("Hr+Ra`%s@;wF~ve<W{");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence1, constantPool0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.typeOfSignature("LvF_6 9");
      Utility.compactClassName("LvF_6 9", false);
      try { 
        Utility.typeOfSignature("cl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "O~@:lSZW";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char char0 = '\\';
      Utility.isJavaIdentifierPart('\\');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantUtf8.getCachedInstance("plm$L5jsDgduw");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)112, (byte) (-97));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-88), 172);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("jsr\t\t#-24581", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.format((byte)0, (byte)0, true, 'u');
      assertEquals("0", string2);
      
      boolean boolean0 = Utility.isSet((byte)0, (-12));
      boolean boolean1 = Utility.isSet((-888), (-12));
      assertTrue(boolean1);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Utility.equals(byteArray1, byteArray0);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      
      String string3 = Utility.getSignature("%");
      assertEquals("L%;", string3);
      
      int int0 = Utility.setBit(57, 189);
      assertEquals(536870969, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)33);
      Utility.compactClassName("", "", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Lpublic;V", false);
      assertEquals("public", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ke6 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ke6 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DF*:");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.compactClassName("\r", "\r", false);
      Utility.classOrInterface(357);
      Utility.compactClassName("ab0Se<qd");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) fileSystemHandling0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.encode(byteArray0, false);
      Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifnonnull", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(652);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("caload");
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Integer integer0 = new Integer(1954);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("sipush\t\t18534", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.methodTypeToSignature("CONSTANT_Float", (String[]) null);
      Utility.compactClassName("Jj4@AG0bn/8lrg:T", "CONSTANT_Float", false);
      Utility.format(2272, 0, true, '$');
      Utility.classOrInterface(2185);
      Utility.setBit(0, 2272);
      Utility.fillup("2272", 2185, false, '$');
      Utility.format(2185, 1, false, '$');
      Utility.printArray((Object[]) null);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      int int0 = Utility.setBit(93, (byte) (-66));
      assertEquals(1073741917, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.available();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@66713707, java.lang.Object@2bb8c3e4, java.lang.Object@259d7b50, java.lang.Object@229a6110, java.lang.Object@4dbca34b, java.lang.Object@20f6fefb", 256, false, '{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      byte byte0 = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "Unreachable default case reached!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ow4*:y1_fD~<qi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ow4*:y1_fD~<qi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      boolean boolean1 = Utility.isSet((-1), (-1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ConstantUtf8.getCachedInstance("(anonymous)");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 196, (int) (byte)105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = ";i4pi4|mil2F7{=,-7";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, ";i4pi4|mil2F7{=,-7", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'%fN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '%fN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('$');
      assertFalse(boolean0);
      
      String string0 = Utility.replace("ikwFd", "iconst_5", (String) null);
      assertNotNull(string0);
      assertEquals("ikwFd", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("*ud(C3P*9");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("L;V");
      Deprecated deprecated0 = new Deprecated((byte)100, (byte)100, byteArray0, constantPool0);
      Utility.getSignature("if_icmpeq");
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((short) (-1), 122, localVariableArray0, constantPool1);
      try { 
        Utility.methodSignatureToString("Lif_icmpeq;", "*ud(C3P*9", "D)r:Cw,1", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lif_icmpeq;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)24;
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (-107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(39, 2);
      String string0 = "{";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, (int) (byte)60, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*{mn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {mn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bipush\t\t96", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      Utility.accessToString(1587, true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-43);
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dq\"s");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      MockFile mockFile0 = new MockFile("k,gS]OLq4m", "k,gS]OLq4m");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFileWriter0.getEncoding();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.toHexString(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 14
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.getSignature("long");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('s');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("D9F*:");
      assertEquals("double", string0);
      
      String string1 = Utility.getSignature("double");
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("if_acmpne\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">~rRD` 89W [la");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >~rRD` 89W [la
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(uAFS@?#", "(uAFS@?#", "(uAFS@?#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uAFS@?#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("2Kf9H#3>hxhnF<X8Mp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Kf9H#3>hxhnF<X8Mp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@14152155, java.lang.Object@5a9b1a32", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@14152155, java.lang.Object@5a9b1a32'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.accessToString((-991), false);
      assertEquals("public synchronized abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.compactClassName("|QHQ", "public synchronized abstract strictfp synthetic annotation enum", false);
      assertEquals("|QHQ", string1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      try { 
        Utility.typeOfSignature("=9^3rigx_<e$UU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =9^3rigx_<e$UU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$A$A$A", false);
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = "U.3h";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U.3h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U.3h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ,god?nT,f";
      objectArray0[1] = (Object) " ,god?nT,f";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{ ,god?nT,f,  ,god?nT,f}", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.replace(" ,god?nT,f", ">\t", " ,god?nT,f");
      assertEquals(" ,god?nT,f", string1);
      
      String string2 = Utility.accessToString(65536);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.replace("", "arraylength", "BAhv9n;pP");
      // Undeclared exception!
      try { 
        Utility.signatureToString("arraylength", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.compactClassName("", "", false);
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.classOrInterface((byte)0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The offset cannot be negative");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = "Uy";
      Utility.searchOpcode("Uy");
      Utility.clearBit((short) (-1), (short) (-1));
      try { 
        Utility.methodSignatureArgumentTypes("Uy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.compactClassName("");
      Utility.replace("KC_)1*&Km#0|3r<u=", "%Z(", "qEzp");
      Utility.accessToString(1091);
      try { 
        Utility.methodSignatureArgumentTypes("KC_)1*&Km#0|3r<u=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KC_)1*&Km#0|3r<u=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.isJavaIdentifierPart('g');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 105, (int) (byte)18, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 208, (int) (byte) (-91), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("-:cAuZY;vx n,7iH1?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -:cAuZY;vx n,7iH1?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byte byte0 = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      String string0 = Utility.accessToString(1803, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7Wrfda>K$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Wrfda>K$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 99, (-464), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.compactClassName("Mb");
      assertEquals("Mb", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = Utility.getSignature(">");
      assertEquals("L>;", string0);
      
      String string1 = Utility.signatureToString("L>;");
      assertEquals(">", string1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfSignature(" ,god?nT,f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  ,god?nT,f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)127;
      byteArray0[7] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Na6vn($wzYXgh0U;Ze");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Na6vn($wzYXgh0U;Ze
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("java.lang.Object@4b09315a, java.lang.Object@7b1a056a, java.lang.Object@384cca16, java.lang.Object@383f0f96, java.lang.Object@3a3e7a2a, java.lang.Object@11241952", 256, false, '{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.printArray(objectArray0, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = Utility.fillup(";Qc'e}h94(Ui.)-{F", 83, false, '7');
      assertEquals("777777777777777777777777777777777777777777777777777777777777777777;Qc'e}h94(Ui.)-{F", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.typeOfSignature("LvF_6 9");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LvF_6 9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LvF_6 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Utility.classOrInterface(39);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2c
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.fillup("\t", 77, false, 'a');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnull");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      int int0 = Utility.clearBit(3225, 3225);
      assertEquals(3225, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = ">";
      stringArray0[3] = "\t<";
      stringArray0[4] = ">";
      stringArray0[5] = ">";
      stringArray0[6] = ">";
      stringArray0[7] = ">";
      stringArray0[8] = ">";
      String string0 = Utility.methodTypeToSignature(">", stringArray0);
      assertEquals("(L>;L>;L>;L<;L>;L>;L>;L>;L>;)L>;", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("", false);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.getSignature("");
      Utility.accessToString(0, true);
      Utility.accessToString(0, true);
      Utility.compactClassName("", ")3X u", true);
      Utility.getSignature(")3X u");
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("l2i", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Utility.getSignature(">");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte)76, false);
      String string0 = "goto";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L>;", "xu0]D.v", "goto", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L>;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-60);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte) (-18);
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte) (-60);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 14, 165, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@.Bz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @.Bz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.format((byte)48, 35, false, 'Q');
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ48", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.isJavaIdentifierPart('P');
      Utility.fillup("monitorenter", 111, true, '\\');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)4;
      byte byte0 = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("v:KsEc8{3l!&En");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(73, 1169);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifeq\t\t#-15184", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("istore_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "D/[^waw0=|A4#=";
      objectArray0[1] = (Object) "D/[^waw0=|A4#=";
      objectArray0[2] = (Object) "D/[^waw0=|A4#=";
      objectArray0[3] = (Object) "D/[^waw0=|A4#=";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("D/[^waw0=|A4#=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[^waw0=|A4#=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.setBit(39, 2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "~aS";
      stringArray0[2] = "{";
      Utility.methodTypeToSignature("{", stringArray0);
      Utility.setBit(49, (-89));
      Utility.searchOpcode("~aS");
      Utility.convertString("Warning: Padding byte != 0 in ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(190, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.decode("o-d1D[Q*5$aH1$#(", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"aH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-50);
      byteArray0[5] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-50), 215, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(237);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.format((-743), 60, true, 'g');
      assertEquals("-743gggggggggggggggggggggggggggggggggggggggggggggggggggggggg", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      int int0 = Utility.clearBit(64, 0);
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+V");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantUtf8.getCachedInstance("+V");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 324, 210);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Constant$1", false);
      assertEquals(34, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = "ACC_SUPER flag\t\t";
      Utility.convertString("ACC_SUPER flag\t\t");
      Utility.clearBit(166, (-3002));
      Utility.accessToString(166);
      String string1 = "org.apache.bcel.classfile.Utility";
      Utility.compactClassName("ACC_SUPER flag\t\t", "org.apache.bcel.classfile.Utility", true);
      char char0 = '8';
      Utility.isJavaIdentifierPart('8');
      MockFile mockFile0 = new MockFile("java.lang.String");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "java.lang.String");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.lang.String
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(970);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref((byte) (-103), (byte)7);
      constantArray0[3] = (Constant) constantMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(65536);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.convertString("");
      Utility.convertString("");
      String string0 = Utility.fillup("", 190, false, '_');
      assertEquals("______________________________________________________________________________________________________________________________________________________________________________________________", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-84);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(uAFS@?#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (uAFS@?#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.getSignature(">\t");
      assertEquals("L>;", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("( Hr,\"ny$f&+G", "( Hr,\"ny$f&+G", "( Hr,\"ny$f&+G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` Hr,\"ny$f&+G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.classOrInterface(1996);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)102;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[7] = (byte)17;
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = ";#71S9 q]{liO2?q";
      stringArray0[6] = null;
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      Utility.format((-1302), 185, false, 'H');
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)90;
      byteArray1[6] = (byte) (-59);
      byteArray1[7] = (byte)90;
      byteArray1[8] = (byte)90;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH-1302", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH-1302'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)78;
      byteArray1[5] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = constantPool0.copy();
      byteSequence0.readBoolean();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.printArray((Object[]) constantArray0);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Utility.compactClassName("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(154, byteArrayOutputStream0.size());
      
      Object[] objectArray1 = new Object[0];
      String string0 = Utility.printArray(objectArray1);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DOYTWB`<dn=NEj4o(I");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.format((byte)7, (byte)7, false, 'z');
      assertEquals("zzzzzz7", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)34, (byte)34, byteSequence1, constantPool0);
      try { 
        Utility.methodSignatureToString("fload_0", "void", "if_icmpeq", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.compactClassName("dreturn", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L7z\"_ynm2iT$ 1op03E", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[59}S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `59}S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-50);
      byteArray0[5] = (byte)48;
      byteArray0[4] = (byte) (-18);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("wide\t(wide)", string0);
      
      String string1 = Utility.compactClassName("0vDDl/");
      assertEquals("0vDDl.", string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Hr+Ra`%s@;wF~ve<W{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hr+Ra`%s@;wF~ve<W{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("&pW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &pW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = Utility.signatureToString("CONSTANT_Double", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = Utility.convertString("addres\"s");
      assertEquals("addres\\\"s", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Integer integer0 = new Integer(1954);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.getSignature("<illegal opcode>");
      assertEquals("L<illegal;", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[59}S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `59}S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)2;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantInvokeDynamic");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)30, (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R1`mJ;^iX;'&7Kw3M0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R1`mJ;^iX;'&7Kw3M0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.typeOfSignature("D/[^waw0=|A4#=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)22;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 2628, (-1974));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, 14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.replace("[0):c9E!=WRlMQ", "-70-b<CD FLHB", "");
      Utility.isSet(1783, (-1545));
      Utility.accessToString((-1545), false);
      try { 
        Utility.typeOfSignature("6$e99.gH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6$e99.gH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XLF!2/^<p;<LE1Pkj_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XLF!2/^<p;<LE1Pkj_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DPE");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R]Dh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R]Dh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.setBit(576, 576);
      String string0 = "2UA-c.l/g";
      try { 
        Utility.typeOfSignature("2UA-c.l/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2UA-c.l/g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KdF ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KdF '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)15;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6f 0f", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\u001F');
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("`M1bj>Dg#G");
      assertEquals("L`M1bj>Dg#G;", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.clearBit((-14), (-880));
      try { 
        Utility.methodSignatureReturnType("OBm<s@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OBm<s@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("fstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte) (-99);
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)22;
      byteArray1[6] = (byte)22;
      Utility.encode(byteArray1, false);
      Utility.toHexString(byteArray0);
      Utility.decode("$Wy$G$9d$W$W$W", false);
      String string0 = "Q/Kd(I04q:2";
      try { 
        Utility.methodSignatureReturnType("$Wy$G$9d$W$W$W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$Wy$G$9d$W$W$W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.format(742, 4, false, 'y');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
