/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:52:57 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[7];
      String string0 = SQLUtil.join((String) null, "sd", stringArray0, "sd", "`^Po'Q.a#q6}e?/*", stringArray1);
      assertEquals("sd as `^Po'Q.a#q6}e?/* on sd.null = `^Po'Q.a#q6}e?/*.null and sd.null = `^Po'Q.a#q6}e?/*.null and sd.null = `^Po'Q.a#q6}e?/*.null and sd.null = `^Po'Q.a#q6}e?/*.null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("A<tOl/#)`SmyV");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin("`k/c{t", stringArray0, "`k/c{t", "`k/c{t", stringArray0);
      assertEquals("left join `k/c{t as `k/c{t on `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null and `k/c{t.null = `k/c{t.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "43Y54.U", "Tbzx{-f!3v|!<N_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}\u0005/7H:q[F+u`Z{)");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("@mv[a8?XTc6", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SS,U&", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("SS,U&");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("SS,U&CONSTRAINT SS,U& ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8A!e*S#)", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("`bh`(L", "CONSTRAINT callmqdr-p.`/,~p& ", stringArray0, "CONSTRAINT callmqdr-p.`/,~p& PRIMARY KEY (callmqdr-p.`/,~p&, callmqdr-p.`/,~p&)", "*rHl!9J8|\"UD}wv#5", stringArray0);
      assertEquals("`bh`(L join CONSTRAINT callmqdr-p.`/,~p& PRIMARY KEY (callmqdr-p.`/,~p&, callmqdr-p.`/,~p&) as *rHl!9J8|\"UD}wv#5 on CONSTRAINT callmqdr-p.`/,~p& .null = *rHl!9J8|\"UD}wv#5.null and CONSTRAINT callmqdr-p.`/,~p& .null = *rHl!9J8|\"UD}wv#5.null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("call=~o*2(&'<$y`q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("( (one phase) , create materialized view*z$pd^~zf, create materialized view*z$pd^~zf, }\u0005/7H:q[F+u`Z{))");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("[ ydl ^ s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intoic_o_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("PRIMARY KEY (|XAResource.TMRESUME, |XAResource.TMRESUME, |XAResource.TMRESUME)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("LTc/xHwow~VGiIB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|XAResource.TMRESUME");
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executedoes not start with", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnListWithTableName("%]", stringArray0);
      assertEquals("%].null, %].null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("create table");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize(",l'n#", false);
      assertEquals(", l 'n#'", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize(".*K[ig7", true);
      assertEquals(".* K [ ig7", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("1e}E@--5<Q}", false);
      assertEquals("1e } E @ -- 5 < Q }", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("CUiu:m4gGupr8v(glo\"", true);
      assertEquals("CUiu : m4gGupr8v (glo \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , null as FILTER_CONDITION ", false);
      assertEquals("NULL as TABLE_CAT, NULL as TABLE_SCHEM, ind.RDB $ RELATION_NAME AS TABLE_NAME, ind.RDB $ UNIQUE_FLAG AS NON_UNIQUE, NULL as INDEX_QUALIFIER, ind.RDB $ INDEX_NAME as INDEX_NAME, NULL as ITYPE, ise.rdb $ field_position + 1 as ORDINAL_POSITION, ise.rdb $ field_name as COLUMN_NAME, ind.RDB $ INDEX_TYPE as ASC_OR_DESC, 0 as CARDINALITY, 0 as IPAGES, null as FILTER_CONDITION", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("_bc+8BiP[Z&g`&)", true);
      assertEquals("_bc + 8BiP [ Z & g ` &)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize(")B-zNO |8/0;d", false);
      assertEquals(") B - zNO | 8 / 0 ; d", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.removeComments(" or ");
      assertEquals(" or ", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("callmqdr-p.`/,~p&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s", dBSchema0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table s", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("callmqdr-p.`/,~p&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s", dBSchema0);
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callmqdr-p.`/,~p&", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT callmqdr-p.`/,~p& ", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.hsqldb.Select@", false, "]) (w3.GkPh", "t");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "t");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("tCONSTRAINT org.hsqldb.Select@ ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      String[] stringArray0 = new String[8];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "false", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT false ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("end");
      DBSchema dBSchema0 = new DBSchema("end", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("I", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("end.I", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "t");
      SQLUtil.addOptionalCondition("}WNWO}ZU=}~]P", stringBuilder0);
      assertEquals("t or }WNWO}ZU=}~]P", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8A!e*S#)", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("delete43x37.u", stringBuilder0);
      assertEquals("delete43x37.u", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(".=&W?pk8v?&e6dU!y");
      SQLUtil.addRequiredCondition("\"my;mN/zrvd{(-O/QP", stringBuilder0);
      assertEquals(".=&W?pk8v?&e6dU!y and \"my;mN/zrvd{(-O/QP", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Tyl(|,aH?+", stringBuilder0);
      assertEquals("Tyl(|,aH?+", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncatei)h,m?q", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncatei)h,m?q FOREIGN KEY (, , , , , , , , ) REFERENCES null(, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XF9731_?] a5>1~q", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"XF9731_?] a5>1~q\" PRIMARY KEY (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callcall=~o*2(&'<$y`q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select@c");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop table2=tcj");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionklf");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Klf");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Character character0 = new Character('%');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'%'", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " or ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE  or  = ' or '", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(322, "execn &3<l[");
      Integer integer0 = new Integer(48);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(tru", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXECN &3<L[(48,48)", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-537), ")]\"!w*Y8sXeD?U");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p5", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("p5 )]\"!W*Y8SXED?U NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Klf", defaultDBTable0, (-3611), "VHZHTI~dm'|[+");
      defaultDBColumn0.setDefaultValue("--");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Klf VHZHTI~DM'|[+ DEFAULT -- NULL", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A$nkIGW;nk&FT{*h3|V", (DBTable) null, 32, "DELETE FROM ");
      columnDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("A$nkIGW;nk&FT{*h3|V", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1184), "drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("drop table, drop table, drop table", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized view*z$pd^~zf");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|XAResource.TMRESUME");
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|XAResource.TMRESUME", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" NOT");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("|XAResource.TMRESUME", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|XAResource.TMRESUME");
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executedoes not start with", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" NOT");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop indexdrop index80000058-00d0-fd77-3ed8-000a0a0b1900", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("taqQ8y=x*w&rm", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("taqQ8y=x*w&rm", defaultDBTable0, (-1790090910), "taqQ8y=x*w&rm");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("taqQ8y=x*w&rm TAQQ8Y=X*W&RM NULL", "p$ 5,h{gR;TK`", "taqQ8y=x*w&rm", true, "drop indexdrop index80000058-00d0-fd77-3ed8-000a0a0b1900");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("taqQ8y=x*w&rm", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop materialized viewprimary key (|xaresource.tmresume, |xaresource.tmresume, |xaresource.tmresume)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|xaresource.tmresume\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("!.SYX&Bhsx-6", defaultDBTable0, 23, "Am/gl.(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Am/gl.(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 9, "Calling setReadOnly(boolean) method is not allowed when transaction is already started.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"boolean\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.hsqldb.Select@", false, "]) (w3.GkPh", "t");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK t", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|XAResource.TMRESUME");
      DBDataType dBDataType0 = DBDataType.getInstance(48, "SELECT * FROM |XAResource.TMRESUME WHERE |XAResource.TMRESUME = '|XAResource.TMRESUME' AND |XAResource.TMRESUME = '|XAResource.TMRESUME' AND |XAResource.TMRESUME = '|XAResource.TMRESUME'");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nlYuB/1p6B", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SELECT * FROM |XARESOURCE.TMRESUME WHERE |XARESOURCE.TMRESUME = '|XARESOURCE.TMRESUME' AND |XARESOURCE.TMRESUME = '|XARESOURCE.TMRESUME' AND |XARESOURCE.TMRESUME = '|XARESOURCE.TMRESUME'(3)", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.innerJoin("call=~o*2(&'<$y`q", stringArray0, "z@'dt/:ep,V4", "z@'dt/:ep,V4", stringArray0);
      assertEquals("z@'dt/:ep,V4 as z@'dt/:ep,V4 on call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null and call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null and call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null and call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null and call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null and call=~o*2(&'<$y`q.null = z@'dt/:ep,V4.null", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("callmqdr-p.`/,~p&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s", dBSchema0);
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callmqdr-p.`/,~p&", true, stringArray0);
      String string0 = SQLUtil.substituteMarkers("s", "s", dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT callmqdr-p.`/,~p& PRIMARY KEY (, )", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"]:V");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2*WkB$.7UHDP}v#?Y", defaultDBTable0, (-3), "\"]:V");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, " and ", false, "2*WkB$.7UHDP}v#?Y");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("2*WkB$.7UHDP}v#?Y NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" or ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(277);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(" or ", dBForeignKeyConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" columns=", (DBSchema) null);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LBxJZ| QgQJS", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"LBxJZ| QgQJS\" UNIQUE (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
