/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:24:47 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBCachedBlob;
import org.firebirdsql.jdbc.FBSQLException;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("h<O+R2XlIkw(byH%");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema h<O+R2XlIkw(byH%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      DBDataType.getInstance(272, "");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("//pQ>Q/]M/NCUrPS", false);
      assertEquals("/ / pQ > Q / ] M / NCUrPS", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure(" CALLED ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("=a-dxN%/NFPO_Du", true);
      assertEquals("= a - dxN % / NFPO_Du", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join("= a - dxN % / NFPO_Du", "= a - dxN % / NFPO_Du", stringArray0, "ICSXbPm", "=a-dxN%/NFPO_Du", stringArray0);
      assertEquals("= a - dxN % / NFPO_Du join ICSXbPm as =a-dxN%/NFPO_Du on ", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A[(HOT";
      stringArray0[1] = "A[(HOT";
      String string0 = SQLUtil.join("A[(HOT", "A[(HOT", stringArray0, "A[(HOT", "2", stringArray0);
      assertEquals("A[(HOT join A[(HOT as 2 on A[(HOT.A[(HOT = 2.A[(HOT and A[(HOT.A[(HOT = 2.A[(HOT", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesStructure("SyscolumnsIndex2Identifier");
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("//pQ>Q/]M/NCUrPS", false);
      assertEquals("/ / pQ > Q / ] M / NCUrPS", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/ / pQ > Q / ] M / NCUrPS";
      String string1 = SQLUtil.renderColumnListWithTableName("Hf^L\"", stringArray0);
      assertEquals("Hf^L\"./ / pQ > Q / ] M / NCUrPS", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("=-xN%/N<FPODu", true);
      assertEquals("= - xN % / N < FPODu", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=-xN%/N<FPODu";
      stringArray0[1] = "=-xN%/N<FPODu";
      stringArray0[2] = "= - xN % / N < FPODu";
      stringArray0[3] = "= - xN % / N < FPODu";
      stringArray0[4] = "= - xN % / N < FPODu";
      String string1 = SQLUtil.renderColumnListWithTableName("= - xN % / N < FPODu", stringArray0);
      assertEquals("= - xN % / N < FPODu.=-xN%/N<FPODu, = - xN % / N < FPODu.=-xN%/N<FPODu, = - xN % / N < FPODu.= - xN % / N < FPODu, = - xN % / N < FPODu.= - xN % / N < FPODu, = - xN % / N < FPODu.= - xN % / N < FPODu", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.substituteMarkers("table null", "table null", "table null");
      assertEquals("'table null'", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("SOURCE");
      assertFalse(boolean0);
      
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = SQLUtil.substituteMarkers("-LZ9FtD3_QJZkg@cZ", "C", mockJapaneseDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", true, defaultDBTable0, " NULL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("updateby", true, "updateby", "updateby");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0);
      SQLUtil.addOptionalCondition("updateby", stringBuilder1);
      assertEquals("1.0 or updateby", stringBuilder1.toString());
      assertEquals("1.0 or updateby", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "table null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"table null\" UNIQUE (table null)", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("NCLOB");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", false, (String[]) null);
      dBPrimaryKeyConstraint0.equals(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("NCLOBCONSTRAINT NCLOB ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2058005160), "djLh1LTf@");
      Integer integer0 = new Integer(15);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("djLh1LTf@", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DJLH1LTF@(15,15)", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("djLh1LTf@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType.getInstance(272, "");
      Integer.getInteger("", 218);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "*,m.KY(<YCp(GPRWhmq";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "G^Pa6Ypzbm", stringArray0, "", "G^Pa6Ypzbm", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.normalize("y!d0v^Go[{Mqis1", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "y ! d0v ^ Go [ { Mqis1");
      SQLUtil.addOptionalCondition("y ! d0v ^ Go [ { Mqis1", stringBuilder0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      assertFalse(valueDecimal0.isFileBased());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " on ");
      StringBuilder stringBuilder1 = stringBuilder0.append((-1264L));
      SQLUtil.addRequiredCondition(" on ", stringBuilder1);
      assertEquals(" on -1264 and  on ", stringBuilder1.toString());
      assertEquals(" on -1264 and  on ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("y!d0v^Go[{Mqis1", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y!d0v^Go[{Mqis1");
      DBDataType dBDataType0 = DBDataType.getInstance((-2783), "y ! d0v ^ Go [ { Mqis1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y ! d0v ^ Go [ { Mqis1", defaultDBTable0, dBDataType0);
      DBSequence dBSequence0 = new DBSequence("E", "y!d0v^Go[{Mqis1", "$y(|cAl0iU#O1");
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "k|`P`h", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Y ! D0V ^ GO [ { MQIS1", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.isIdentical(defaultDBTable1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addOptionalCondition("", stringBuilder0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      char[] charArray0 = new char[0];
      stringBuilder1.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) " on ", (-2058012427), 41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2058012427, end 41, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'");
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).toString();
      tableContainer0.setOwner(compositeDBObject0);
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-171093461), "");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("  NULL", false, defaultDBTable0, "  NULL");
      SQLUtil.constraintName(dBCheckConstraint0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize("//pQ>Q/]M/NCUrPS", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      tableContainer0.getTable("");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DBDataType.getInstance(272, "");
      Integer.getInteger("", 218);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", (DBTable) null, 218, "table null");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("TABLE NULL", string1);
      
      SQLUtil.removeComments("TABLE NULL");
      Character character0 = Character.valueOf('r');
      String string2 = SQLUtil.renderValue(character0);
      assertEquals("'r'", string2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.firebirdsql.jca.FBManagedConnectionFactory", false);
      assertEquals("org.firebirdsql.jca.FBManagedConnectionFactory", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("drop index_l&kkwjh@5xk13j[*i>");
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = SQLUtil.isDML("drop index_l&kkwjh@5xk13j[*i>");
      assertFalse(boolean2);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getTime(String)");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.equals((Object) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize(" CGIR[,@$I", false);
      assertEquals("CGIR [, @ $ I", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("D_p82-nfi");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Locale locale0 = Locale.FRENCH;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D_p82-nfi";
      stringArray0[1] = "D_p82-nfi";
      stringArray0[2] = "9,6f/{(In8";
      stringArray0[3] = "9,6f/{(In8";
      stringArray0[4] = ".";
      stringArray0[5] = "D_p82-nfi";
      stringArray0[6] = "D_p82-nfi";
      stringArray0[7] = "9,6f/{(In8";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9,6f/{(In8", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(".", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.isProcedureCall("updateTime(");
      SQLUtil.mutatesDataOrStructure("updateTime(");
      Boolean boolean0 = new Boolean(false);
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("excuteselec`t", (DBTable) null, 2120, "select");
      DBDataType dBDataType0 = DBDataType.getInstance(617, "&}m30o!");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("&}m30o!", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("&}m30o! &}M30O!(0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-178), "");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("  NULL", string0);
      
      SQLUtil.mutatesStructure("");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("  NULL");
      assertNull(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("H:n7^QV75p)k_t}", defaultDBTable0, (-178), "SBg6sr");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , H:n7^QV75p)k_t}", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("M\"(;6/D3zl", false);
      assertEquals("M \"(;6/D3zl\"", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("7*~3_/mH", true);
      assertEquals("7 * ~ 3_ / mH", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectk;o5&y(z;]|c@*", false);
      assertEquals("selectk ; o5 & y (z ; ] | c @ *", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.mutatesStructure("drop materialized view(");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop materialized view(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop materialized view(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("csHS9R{ld4')d0`p(K", true);
      assertEquals("csHS9R { ld4 ')d0`p(K'", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("0W8zT)D Nf");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("0W8zT)D Nf", false);
      assertEquals("0W8zT) D Nf", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "je");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectexcu");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("bZ*/Xi1H|q#L", true);
      assertEquals("bZ */ Xi1H | q # L", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Lc0w*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Lc0w* FOREIGN KEY (, , ) REFERENCES null(, , )", string0);
      
      String string1 = SQLUtil.normalize("p7YnVsN!+P>]", true);
      assertEquals("p7YnVsN ! + P > ]", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("execyg3c$:", true);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("y!d0v^Go[{Mqis1", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y!d0v^Go[{Mqis1");
      DBDataType dBDataType0 = DBDataType.getInstance((-2783), "y ! d0v ^ Go [ { Mqis1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y ! d0v ^ Go [ { Mqis1", defaultDBTable0, dBDataType0);
      DBSequence dBSequence0 = new DBSequence("E", "y!d0v^Go[{Mqis1", "$y(|cAl0iU#O1");
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.store.raw.xact.Xact", defaultDBTable0, 2901, "^j<n`pi`OvvINa");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("y ! d0v ^ Go [ { Mqis1", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("select i,to", defaultDBTable0, 4, "t3u(AaS#ErPj)&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"AaS#ErPj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "&}m30o!";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&}m30o!", true, stringArray0);
      String string0 = "Lc0w*";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Lc0w*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("&}m30o!", defaultDBTable0, (-1143), "CONSTRAINT Lc0w* FOREIGN KEY (, , &}m30o!) REFERENCES null(, , &}m30o!)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "&}m30o!";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&}m30o!", true, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Lc0w*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      SQLUtil.renderValue(mockMinguoDate0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("Yy|.QN^oj@Kcr");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drdaSecTokenIn", false, "drdaSecTokenIn", "drdaSecTokenIn");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CHECK drdaSecTokenIn";
      stringArray0[1] = "CHECK drdaSecTokenIn";
      stringArray0[2] = "CHECK drdaSecTokenIn";
      stringArray0[3] = "drdaSecTokenIn";
      stringArray0[4] = "drdaSecTokenIn";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized view//pq>q/]m/ncurps", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FBCachedBlob fBCachedBlob0 = new FBCachedBlob(byteArray0);
      try { 
        fBCachedBlob0.setBinaryStream(3815L);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // Blob in auto-commit mode is read-only.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedBlob", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("NCLOB", defaultDBTable0);
      tableContainer0.getTable("LT0RD[");
      DBDataType dBDataType0 = DBDataType.getInstance((-511900141), "NCLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indextable null", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NCLOB", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create unique indextable null";
      stringArray0[1] = "c";
      stringArray0[2] = "LT0RD[";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = "LT0RD[";
      stringArray0[6] = ".lob.db";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("create unique indextable null = 'create unique indextable null' AND c = 'c' AND LT0RD[ = 'LT0RD[' AND NCLOB = 'NCLOB' AND NCLOB = 'NCLOB' AND LT0RD[ = 'LT0RD[' AND .lob.db = '.lob.db'", string1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "djLh1LTf@", false, (String[]) null);
      dBPrimaryKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT djLh1LTf@ PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("Yy|.QN^oj@Kcr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Locale locale0 = Locale.FRENCH;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xP";
      stringArray0[1] = "Yy|.QN^oj@Kcr";
      stringArray0[2] = "xP";
      stringArray0[3] = "Yy|.QN^oj@Kcr";
      stringArray0[4] = "truncate";
      stringArray0[5] = "xP";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "xP", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.join("Yy|.QN^oj@Kcr", "UNIQUE ", stringArray0, "i3", "xP", stringArray0);
      assertEquals("Yy|.QN^oj@Kcr join i3 as xP on UNIQUE .xP = xP.xP and UNIQUE .Yy|.QN^oj@Kcr = xP.Yy|.QN^oj@Kcr and UNIQUE .xP = xP.xP and UNIQUE .Yy|.QN^oj@Kcr = xP.Yy|.QN^oj@Kcr and UNIQUE .truncate = xP.truncate and UNIQUE .xP = xP.xP", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", defaultDBTable0, (-178), ".");
      defaultDBColumn0.setDoc("alter index");
      defaultDBColumn0.setDefaultValue("alter index");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(". . DEFAULT alter index NULL", string0);
  }
}
