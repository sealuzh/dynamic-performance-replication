/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:42:57 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(27L);
      Buffer buffer0 = pipe0.buffer;
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("`qJVln8V)&OQ");
      ByteString byteString0 = buffer1.snapshot(3);
      assertEquals(12L, buffer0.size());
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort(32);
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(5458L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer1.readString(charset0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(2L);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = buffer1.readFrom((InputStream) sequenceInputStream0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)12);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeHexadecimalUnsignedLong(10000000000000000L);
      assertEquals(14L, buffer0.size());
      
      byte[] byteArray0 = buffer_UnsafeCursor0.buffer.readByteArray();
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(2218L);
      byte byte0 = buffer0.readByte();
      assertEquals(7L, buffer0.size());
      assertEquals((byte) (-86), byte0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = buffer0.read(realBufferedSource0.buffer, 2147483647L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      ByteString byteString0 = ByteString.encodeUtf8("inflater == null");
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writeDecimalLong(4278190080L);
      Buffer buffer1 = realBufferedSource0.buffer.emitCompleteSegments();
      assertEquals(10L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(184L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeInt(961);
      Buffer buffer1 = realBufferedSource0.buffer.buffer();
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint((-351));
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8("");
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((-2506));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-269L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(0);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-264
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-2720L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2720
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.rangeEquals(1L, (ByteString) null, 1736, 1736);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = realBufferedSink0.buffer.rangeEquals(1329L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer0.write(realBufferedSource0.buffer, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        buffer0.readFully(realBufferedSource0.buffer, (-1927L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1927
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        buffer0.readFrom((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Pipe pipe0 = new Pipe(398L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByteArray(398L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=398
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)38, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=38 byteCount=32
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(255L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      GzipSink gzipSink0 = new GzipSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.rangeEquals(255L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(184L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte((-245L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-245 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("|jxg7&", charset0);
      boolean boolean0 = buffer0.rangeEquals(10000000000000000L, byteString0, 40, 40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte)71, (long) (byte)71, 9223372036854775807L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write(buffer0, 9223372036854770830L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-269L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      int int0 = buffer0.read(byteArray0, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("E#%O\"]!KPgAC:o");
      int int0 = buffer0.readInt();
      assertEquals(10L, buffer0.size());
      assertEquals(1159931215, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(1428L);
      short short0 = buffer0.readShort();
      assertFalse(buffer0.exhausted());
      assertEquals((short)13625, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1290L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(10000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeInt((byte)5);
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      int int0 = buffer_UnsafeCursor0.seek((-1L));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1007L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1007 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.offset = 4L;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=4 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeLongLe(3L);
      Buffer buffer1 = buffer0.clone();
      assertEquals(8L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Pipe pipe0 = new Pipe(776L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(1135L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.buffer.writeString("43eA~J YeL7TOp=", charset0);
      realBufferedSource0.buffer.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.buffer.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(4606L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.equals(pipe0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pipe pipe0 = new Pipe(885L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLong((-1L));
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink0.buffer.hmacSha512(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = buffer0.rangeEquals(0L, byteString0, (int) (byte) (-32), (int) (byte)12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer_UnsafeCursor1.buffer.rangeEquals((-1L), byteString0, (-1), 8192);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertFalse(boolean0);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(1274L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe((-1717986917));
      ByteString byteString0 = buffer0.sha256();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(4L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(203L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.buffer.writeIntLe(61);
      ByteString byteString0 = ByteString.encodeUtf8("");
      long long0 = realBufferedSink0.buffer.indexOfElement(byteString0, (long) 61);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha1();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(72);
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-3302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLongLe((byte)105);
      long long0 = buffer0.indexOf((byte)105);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Pipe pipe0 = new Pipe(67232L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      Segment segment0 = new Segment(byteArray0, (-3425), 1311, false, false);
      buffer0.head = segment0;
      long long0 = buffer0.indexOf((byte)113, 100000000000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)80, 1095216660480L, 7177L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1095216660480 toIndex=7177
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(3419L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)38, (-3164L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-3164 toIndex=-1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(84L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-1329L));
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 3L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.read(buffer_UnsafeCursor0.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)12);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      buffer0.writeShortLe((-1));
      // Undeclared exception!
      realBufferedSource0.buffer.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 159L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(67232L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      Segment segment0 = new Segment(byteArray0, (-3425), 1311, false, false);
      buffer0.head = segment0;
      segment0.prev = segment0;
      // Undeclared exception!
      try { 
        buffer0.writeShortLe(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(100000L);
      assertEquals(98304L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2141832375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writableSegment((-997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(9223372036854770830L);
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 9223372036854770830L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeDecimalLong(100000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(16L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      ByteString byteString0 = ByteString.encodeUtf8("inflater == null");
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(4278190080L);
      assertEquals(10L, buffer1.size());
      
      List<Integer> list0 = realBufferedSource0.buffer.segmentSizes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-298L));
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeDecimalLong((-1));
      assertEquals(2L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(71776119061217280L);
      assertEquals(17L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.write((Source) buffer0, 692L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) hashingSource0, (-858L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Pipe pipe0 = new Pipe(1135L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, (-2147483647), 3490);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString(".inputStream()", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("Xs?>l^A|Dw%06z", 20, (int) (byte)25, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 25 > 14
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("=", 10, (-1294), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1294 < 10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("Ww`ks7t\"", (-2712), 14, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2712
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, (-150), (-150), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeUtf8CodePoint(2144384825);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fd0b739
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1167);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(6097);
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 65533, 65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 65533 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(1618L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(" text=", 38, (-332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -332 < 38
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("o:)NhK9ZV0-}dBr8NX[", (-2146805137), (-1858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2146805137
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(4606L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 65536, 65536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Pipe pipe0 = new Pipe(459L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong(692L);
      try { 
        realBufferedSource0.buffer.skip(4294967295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(74L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      byte[] byteArray1 = new byte[2];
      buffer0.readFully(byteArray1);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-229L));
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(15L, buffer0.size());
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Pipe pipe0 = new Pipe(2554L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8Line(2554L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2553 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(17);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertEquals("\u0011\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("E#%O\"]!KPgAC:o");
      buffer1.readUtf8();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeShortLe((-44));
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha1();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSink0, byteString0);
      long long0 = buffer0.readAll(hashingSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Pipe pipe0 = new Pipe(776L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, 776L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      buffer0.writeUtf8("E#%O\"]!KPgAC:o");
      buffer0.readFully(realBufferedSource0.buffer, 9L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(1274L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.buffer.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[5];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8("`qJVln8V)&OQ");
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("T");
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x54
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(15L);
      assertEquals(2L, buffer0.size());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(21L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Pipe pipe0 = new Pipe(52L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeShort(2145747606);
      buffer0.readShort();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffe3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong(3128L);
      byte[] byteArray0 = new byte[4];
      Buffer buffer2 = buffer1.write(byteArray0);
      long long0 = buffer2.readDecimalLong();
      assertFalse(buffer0.exhausted());
      assertEquals(3128L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("base64 == null");
      buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x62
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(3128L);
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer0.readDecimalLong();
      assertEquals(3128L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Pipe pipe0 = new Pipe(1669L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      ByteString byteString0 = ByteString.encodeUtf8("+{T#F>e]");
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeLongLe(532L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = realBufferedSource0.buffer.readLong();
      assertEquals(1441714830711980032L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("resizeBuffer() only permitted for read/write buffers");
      long long0 = buffer1.readLong();
      assertEquals(44L, buffer0.size());
      assertEquals(8243121589833777781L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-229L));
      int int0 = buffer1.readIntLe();
      assertEquals(12L, buffer0.size());
      assertEquals(1717986918, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.write(byteString0);
      short short0 = buffer0.readShortLe();
      assertEquals(30L, buffer0.size());
      assertEquals((short) (-20253), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(71L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShortLe((-4627));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 3: 2 (to read code point prefixed 0xffffffed)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Pipe pipe0 = new Pipe(500L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeShort(120);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      byte byte0 = realBufferedSink0.buffer.readByte();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(500L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint(120);
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte byte0 = realBufferedSink0.buffer.readByte();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals((byte)120, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Pipe pipe0 = new Pipe(885L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLong((-1L));
      Buffer buffer1 = realBufferedSink0.buffer();
      long long0 = buffer0.writeAll(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0, 101);
      try { 
        buffer0.readFrom((InputStream) bufferedInputStream0, 1000000000000001L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)12);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      buffer0.writeShortLe((-1));
      // Undeclared exception!
      try { 
        buffer0.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-5237L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -5237
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, 2329L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Pipe pipe0 = new Pipe(74L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.writeTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(pipe_PipeSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) null, (-517L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(515L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(1994091958);
      try { 
        buffer0.readUtf8LineStrict((long) 1994091958);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=b6\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(2348L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 2348L, 2348L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.buffer.request((-51L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.request(885);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.require(1882L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-351L));
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Pipe pipe0 = new Pipe(515L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(1994091958);
      boolean boolean0 = buffer0.exhausted();
      assertEquals(1L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Pipe pipe0 = new Pipe(184L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.buffer();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(5458L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Pipe pipe0 = new Pipe(5458L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.md5();
      boolean boolean0 = buffer0.rangeEquals(1L, byteString0, (int) (byte)49, (-4819));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.flush();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      long long0 = realBufferedSource0.buffer.indexOf((byte)5);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha1();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer_UnsafeCursor0.buffer.selectPrefix(options0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, int0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      ByteString byteString0 = ByteString.encodeUtf8("inflater == null");
      HashingSource hashingSource0 = HashingSource.hmacSha1(inflaterSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer.emitCompleteSegments();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.clear();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(2L);
      ByteString byteString0 = ByteString.decodeBase64("MD5");
      buffer0.indexOfElement(byteString0, 2L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Pipe pipe0 = new Pipe(74L);
      Buffer buffer0 = pipe0.buffer;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer1 = buffer0.writeTo((OutputStream) pipedOutputStream0);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      String string0 = realBufferedSource0.buffer.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pipe pipe0 = new Pipe(1450L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[9];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Pipe pipe0 = new Pipe(1274L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe((-44));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      buffer1.copyTo((OutputStream) mockPrintStream0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("MD5");
      boolean boolean0 = buffer0.rangeEquals(27L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = realBufferedSink0.buffer.hmacSha256(byteString0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Pipe pipe0 = new Pipe(1274L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe((-1717986917));
      ByteString byteString0 = buffer0.sha256();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8(3557L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=3557
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(0L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      OutputStream outputStream0 = buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.writeTo(outputStream0, 2794L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2794
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.close();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = (Buffer)realBufferedSource0.buffer.emit();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }
}
