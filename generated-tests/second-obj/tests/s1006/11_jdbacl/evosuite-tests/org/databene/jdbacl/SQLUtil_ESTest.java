/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:43:14 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.util.List;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.tools.Recover;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.normalize("EH_9$G+^'X2*", true);
      assertEquals("EH_9 $ G + ^ 'X2*'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.mutatesDataOrStructure("alter materia");
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.mutatesDataOrStructure("create materialized viewselectorg.apcche.derbyfimpl.sql.compile.varbitconstantnode");
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SchemaDescriptor.SYSCS_UTIL_SCHEMA_UUID;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("alter table", stringArray0, "alter table", "alter table", stringArray0);
      assertEquals("left join alter table as alter table on ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("left join alter table as alter table on ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.leftJoin("B&o5t", stringArray0, "I#}", (String) null, stringArray0);
      assertEquals("left join I#} as null on B&o5t.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "om~]-K.~tj-H}|?vp/";
      stringArray0[1] = "om~]-K.~tj-H}|?vp/";
      stringArray0[2] = "om~]-K.~tj-H}|?vp/";
      String string0 = SQLUtil.leftJoin("om~]-K.~tj-H}|?vp/", stringArray0, "om~]-K.~tj-H}|?vp/", "]", stringArray0);
      assertEquals("left join om~]-K.~tj-H}|?vp/ as ] on om~]-K.~tj-H}|?vp/.om~]-K.~tj-H}|?vp/ = ].om~]-K.~tj-H}|?vp/ and om~]-K.~tj-H}|?vp/.om~]-K.~tj-H}|?vp/ = ].om~]-K.~tj-H}|?vp/ and om~]-K.~tj-H}|?vp/.om~]-K.~tj-H}|?vp/ = ].om~]-K.~tj-H}|?vp/", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) stringBuilder0);
      SQLUtil.addOptionalCondition("{3rOp*13l,5", stringBuilder3);
      assertEquals("0000 or {3rOp*13l,5", stringBuilder3.toString());
      assertEquals("0000 or {3rOp*13l,5", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.substituteMarkers("\n]", "\n]", "\n]");
      assertEquals("'\n]'", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isProcedureCall("alter tableorg.apache.derby.impl.sql.compile.varbitconstantnode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " NULL";
      stringArray0[1] = " NULL";
      stringArray0[2] = " NULL";
      stringArray0[3] = " NULL";
      stringArray0[4] = " NULL";
      stringArray0[5] = " NULL";
      stringArray0[6] = " NULL";
      String string0 = SQLUtil.renderColumnListWithTableName(" NULL", stringArray0);
      assertEquals(" NULL. NULL,  NULL. NULL,  NULL. NULL,  NULL. NULL,  NULL. NULL,  NULL. NULL,  NULL. NULL", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-183793001), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~*SAV}o:";
      stringArray0[1] = "alter session";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("~*SAV}o: = '~*SAV}o:' AND alter session = 'alter session'", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("null = null", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = FBConnectionProperties.BUFFERS_NUMBER_PROPERTY;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null");
      defaultDBTable0.setDoc("null = null");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("null = null", defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "SMALLDATETIME";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("SMALLDATETIME", stringBuilder0);
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-631), (double) (-631));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -631
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nke?");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "nke?", true, (String[]) null);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VersionNumber.valueOf("C9kiu^?");
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view\" UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",~EM'X`>c&`O2M}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint Q", string0);
      
      Class<DBProcedure> class0 = DBProcedure.class;
      TypedPropertyMutator typedPropertyMutator0 = new TypedPropertyMutator(class0, "Q", false);
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8f and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.removeComments("8f and ");
      // Undeclared exception!
      try { 
        Recover.readBlob((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.store.fs.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g!bD9_qlM{");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g!bD9_qlM{";
      stringArray0[1] = "g!bD9_qlM{";
      stringArray0[2] = "g!bD9_qlM{";
      stringArray0[3] = "g!bD9_qlM{";
      stringArray0[4] = "g!bD9_qlM{";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g!bD9_qlM{", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g!bD9_qlM{", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "g!bD9_qlM{", false, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      dBUniqueConstraint0.setOwner(dBTable0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addOptionalCondition("g!bD9_qlM{", stringBuilder1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "g!bD9_qlM{", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder0);
      assertEquals("g!bD9_qlM{CONSTRAINT g!bD9_qlM{ ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">)J";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ">)J";
      stringArray0[4] = "";
      stringArray0[5] = ">)J";
      String string0 = SQLUtil.join("", ">)J", stringArray0, ";XM", ">)J", stringArray0);
      assertEquals(";XM as >)J on >)J.>)J = >)J.>)J and >)J. = >)J. and >)J. = >)J. and >)J.>)J = >)J.>)J and >)J. = >)J. and >)J.>)J = >)J.>)J", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      ErrorMessages errorMessages0 = new ErrorMessages();
      String string1 = TypeId.XML_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CB#;xY-%$R*, cmF[");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexreferences", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop indexreferences", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop indexreferences", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES CB#;xY-%$R*, cmF[()", string2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery("seect into");
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      SQLUtil.ownerDotComponent(dBCatalog0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SQLUtil.renderValue("XSCB3w.");
      String string0 = SchemaDescriptor.NULLID_SCHEMA_UUID;
      assertEquals("c013800d-00fb-2647-07ec-000000134f30", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8f and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"8f and \" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint 8f and ", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-183793001), "LKu");
      Integer integer0 = RawTransaction.ABORT;
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8f and ", defaultDBTable0, dBDataType0, integer0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = SQLUtil.isProcedureCall("8f and ");
      assertFalse(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("LKu");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"8f and \" ", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      SQLUtil.mutatesDataOrStructure("call8f and");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "call8f and");
      String string0 = SchemaDescriptor.STD_DECLARED_GLOBAL_TEMPORARY_TABLES_SCHEMA_NAME;
      SQLUtil.removeComments("alter session8f and");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      char[] charArray0 = new char[1];
      Random.setNextRandom(328);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("drop materialized viewnncqxhr@xq*(-1566,3)", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rename", true, stringArray0);
      dBPrimaryKeyConstraint0.setName("drop materialized viewnncqxhr@xq*(-1566,3)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u");
      mockPrintWriter0.println((-408L));
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData((-3412));
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedReader pipedReader0 = new PipedReader();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("drop materialized viewnncqxhr@xq*(-1566,3)");
      defaultDBTable1.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-183793001), "drop tableselectorg.apcche.derbyfimpl.sql.compile.varbitconstantnode");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setDefaultValue("create unique index");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized viewselectorg.apache.derby.impl.sql.compile.varbitconstantnode", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      defaultDBColumn1.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8f and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-183793001), "8f and ");
      Integer integer0 = new Integer((-183793001));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Pcall", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("8f and ", true, dBPrimaryKeyConstraint0);
      dBDataType0.isAlpha();
      // Undeclared exception!
      try { 
        DBDataType.jdbcTypeFor("Pcall");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("Q#hoPjUK#P!za:I");
      DBSchema dBSchema0 = new DBSchema("REVOKE role", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("REVOKE role", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("Q#hoPjUK#P!za:I", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject0);
      String string0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = " and ";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop in";
      stringArray0[1] = ",~EM'X`>c&`O2M}";
      stringArray0[2] = " and ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "82Gb5", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "NULL", false, stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      String string1 = TypeId.DECIMAL_NAME;
      dBPrimaryKeyConstraint1.setName((String) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setName(" and ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "-- ERROR [", true, stringArray0);
      dBPrimaryKeyConstraint2.setName(",~EM'X`>c&`O2M}");
      TableContainer tableContainer0 = new TableContainer("NULL");
      dBPrimaryKeyConstraint0.equals("NULL");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("82Gb5", false, defaultDBTable0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("nnCQXhr@xq*", false);
      DBSchema dBSchema0 = new DBSchema("update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nnCQXhr@xq*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("nnCQXhr @ xq *", defaultDBTable0, 201, "nnCQXhr @ xq *");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(201);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      hsqlProperties0.setFileName("h( oF:$'3");
      assertEquals(1, HsqlProperties.NO_VALUE_FOR_KEY);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBCatalog dBCatalog0 = new DBCatalog("[)%<VPcS");
      dBCatalog0.getTable("Dz/l", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-836343824), "[)%<VPcS");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[)%<VPcS", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Dz/l", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("[)%<VPcS, Dz/l", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8f and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"8f and \" ", stringBuilder0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("exec");
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      DBSchema dBSchema0 = new DBSchema("exec");
      dBSchema0.getTable("@y'4'E0#\"7=BVffRu");
      boolean boolean0 = SQLUtil.isDML("truncatelizpl#@iz\"svs0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<");
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_SWITCH_TO_NEWKEY;
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "";
      DBDataType dBDataType0 = DBDataType.getInstance((-4336), "");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-1764));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("GXDGeo~k6+$y\u0001!", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn(" NOT NULL", defaultDBTable0, (-1764), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      String string0 = "Illegal column type format: ";
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Illegal column type format: ");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("!fIz<P\"HNLT`}/m]@h5");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "!fIz<P\"HNLT`}/m]@h5", false, stringArray0);
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("`^@,n)++0@)Qd(", (DBTable) null, (-7), "`^@,n)++0@)Qd(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: `^@,n)++0@)Qd(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.normalize("/Z*j", false);
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = LogToFile.TEST_LOG_INCOMPLETE_LOG_WRITE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("cc{_oDDuw-2(Yhj)r\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.normalize("-infinity", false);
      SQLUtil.removeComments("-infinity");
      try { 
        Recover.readBlob("-infinity");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("selectorg.apache.derby.impl.sql.compile.varbitconstantnode");
      boolean boolean0 = new Boolean(true);
      String string0 = SQLUtil.removeComments("drop table");
      assertEquals("drop table", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.isQuery("select into");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      SQLUtil.normalize("derby.storage.initialPages", false);
      String string1 = ".CsG@qhLb";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(".CsG@qhLb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", true, stringArray0);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y(j", defaultDBTable0, (-183793001), "_{)Ssjm=D)oH1B");
      defaultDBTable0.getPrimaryKeyConstraint();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder0);
      assertEquals("CONSTRAINT \" and \" CONSTRAINT \"drop index\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.normalize("/**/", false);
      DBSchema dBSchema0 = new DBSchema("4I|cVOW_]1sp_VY+");
      StringBuilder stringBuilder0 = new StringBuilder("");
      GDSType.getType((String) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "S";
      SQLUtil.normalize("S", false);
      SQLUtil.removeComments("/**/");
      // Undeclared exception!
      try { 
        Recover.readBlob((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.store.fs.FileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setLoginTimeout(45);
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.normalize("drop tablel^`<rv;yylsq#y:q\"pp", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-1588), "drop tablel^`<rv;yylsq#y:q\"pp");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      // Undeclared exception!
      try { 
        rowOutputBinary0.writeDouble(458.8113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      String string0 = SQLUtil.normalize("select intoalter index()", true);
      assertEquals("select intoalter index ()", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter materialized view");
      tableContainer0.getTable("alter materialized view");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      DBDataType dBDataType0 = DBDataType.getInstance((-77893317), " ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ", (DBTable) null, dBDataType0);
      defaultDBColumn0.setDefaultValue(" ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("y{", (DBTable) null, dBDataType0, integer1, integer2);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder("alter materialized view");
      SQLUtil.addRequiredCondition("    DEFAULT   NULL", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2712, 3320.7527F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2712
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      SQLUtil.removeComments("truncate8f and");
      rowOutputBinary0.writeChars("truncate8f and");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      rowOutputBinary0.writeIntData(95);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 298);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*", defaultDBTable0, 298, "*");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(7);
      defaultDBColumn0.setNullable(true);
      defaultDBTable0.setDoc("*");
      SQLUtil.removeComments("c%,$5ma|2oeYm1");
      rowOutputBinary0.writeChars("/&m[~(_1$>p1<o{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      rowOutputBinary0.writeIntData(298);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBColumn0.setDefaultValue((String) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "/&m[~(_1$>p1<o{";
      stringArray0[2] = "c%,$5ma|2oeYm1";
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 3376);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer0.nval = 9.223372036854776E18;
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("call");
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g!bD9_qlM{");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g!bD9_qlM{";
      stringArray0[3] = "g!bD9_qlM{";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "g!bD9_qlM{", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g!bD9_qlM{", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, stringArray0[1], true, stringArray0);
      Boolean boolean0 = new Boolean(true);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBUniqueConstraint0.setOwner(dBTable0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addOptionalCondition(stringArray0[2], stringBuilder1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[2], true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("g!bD9_qlM{", true, defaultDBTable0, "SJ2td9E#<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("nnCQXhr@xq*", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nnCQXhr @ xq *");
      DBDataType dBDataType0 = DBDataType.getInstance((-1588), "nnCQXhr@xq*");
      Integer integer0 = new Integer((-1588));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vE<o!`b&dl{#P\"b)Hf", defaultDBTable0, dBDataType0, integer0, integer1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesStructure("NNCQXHR@XQ*(-1588,3)");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("NNCQXHR@XQ*(-1588,3)");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("nnCQXhr@xq*");
      String string0 = SQLUtil.normalize("nnCQXhr@xq*", false);
      assertEquals("nnCQXhr @ xq *", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("nnCQXhr @ xq *");
      DBDataType dBDataType0 = DBDataType.getInstance((-1588), "nnCQXhr@xq*");
      Integer integer0 = new Integer((-1588));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vE<o!`b&dl{#P\"b)Hf", defaultDBTable0, dBDataType0, integer0, integer1);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("nnCQXhr@xq*", defaultDBTable0, dBDataType0, integer2, (Integer) 1);
      dBDataType0.isAlpha();
      defaultDBColumn1.getNotNullConstraint();
      defaultDBColumn1.isUnique();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "\"", false, stringArray0);
      defaultDBColumn1.addUkConstraint(dBUniqueConstraint0);
      dBDataType0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
      
      boolean boolean1 = SQLUtil.isDDL("UNIQUE ()");
      assertTrue(boolean1 == boolean0);
      
      String string2 = SQLUtil.normalize("2axr", false);
      assertEquals("2axr", string2);
      
      String string3 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "alter session42xa4";
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      rowOutputBinary0.writeIntData(493);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 2301);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      String string0 = RawStoreFactory.PAGE_SIZE_STRING;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Timestamp has neither date nor time";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("alter session42xa4");
      SQLUtil.isDML("Timestamp has neither date nor time");
      SQLUtil.typeAndName(defaultDBTable1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Timestamp has neither date nor time");
      SQLUtil.addRequiredCondition("Timestamp has neither date nor time", stringBuilder0);
      assertEquals("Timestamp has neither date nor time and Timestamp has neither date nor time", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8f and ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-183793001), "LKu");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Pcall", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("LKu", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("LKu", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.addIndex(dBUniqueIndex0);
      defaultDBColumn1.setDoc("COALESCE");
      defaultDBColumn0.getNotNullConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Pcall");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Pcall", defaultDBTable1, dBDataType0, (Integer) null);
      SQLUtil.innerJoin("COALESCE", stringArray0, (String) null, " as ", stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT \"8f and \" PRIMARY KEY ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*", defaultDBTable0, 278, "*");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      SQLUtil.removeComments("c%,$5ma|C26eYm1");
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBColumn0.setNullable(false);
      rowOutputBinary0.writeChars("/&m[~(_1$>p1<o{");
      rowOutputBinary0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      rowOutputBinary0.writeIntData(90057);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("c%,$5ma|C26eYm1");
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      defaultDBTable1.equals(dBNotNullConstraint0);
      TableContainer tableContainer0 = new TableContainer("K<AOR(8*O+11:j5v", defaultDBTable1);
      SQLUtil.ownerDotComponent(tableContainer0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      ValueDecimal valueDecimal1 = (ValueDecimal)ValueDecimal.ZERO;
      SQLUtil.renderValue(valueDecimal1);
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      SQLUtil.isDDL("#");
      Random.setNextRandom((-1));
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = constraintDescriptorList0.getSubList((-1085));
      ConstraintDescriptorList constraintDescriptorList2 = constraintDescriptorList1.getConstraintDescriptorList(false);
      ConstraintDescriptorList constraintDescriptorList3 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList2);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
