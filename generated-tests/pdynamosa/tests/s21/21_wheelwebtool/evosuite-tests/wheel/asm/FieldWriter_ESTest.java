/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:56:07 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1304);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9C";
      stringArray0[1] = "9C";
      classWriter0.visit(59, 1304, "9C", "9C", "9C", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "9C", "9C", "9C", "9C");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3504));
      classWriter0.index = (-3503);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3504), "RfH{*?([9pT", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3504));
      classWriter0.index = (-3504);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3504), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 320, "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 134, "RuntimeVisibleAnnotations", "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "SN9+Q$\"$2;%!.=h42", "SN9+Q$\"$2;%!.=h42", "SN9+Q$\"$2;%!.=h42");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "ConstantValue", "RuntimeInvisibleAnnotations", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@1a229430
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("cP/oR8@Gu<|4");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 336, "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "uG", "uG");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2711);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2481), "", "+5>)f|',Nbpm", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1304);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9C";
      stringArray0[1] = "9C";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "9C", "9C", "9C", "9C");
      ByteVector byteVector0 = new ByteVector();
      classWriter0.visit(49, (byte)8, "", "Qycl}ann7.Y", "9C", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3504));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3504), "", "", "", "");
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3504));
      classWriter0.version = (-3504);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3504), "RuntieVsbleAnnotations", "RuntieVsbleAnnotations", "RuntieVsbleAnnotations", "RuntieVsbleAnnotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 336, "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2710);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 336, "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2711);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2481), "", "+5>)f|',Nbpm", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1304);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "9C", "9C", "9C", "9C");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-952), "Deprecated", "9C", "(u^00<}6'm]H-:1^\"", "9C");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1905));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "*.y9/{-", "*.y9/{-", "*.y9/{-", "*.y9/{-");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3504));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3168), "n,MeevyD/#kaF82**@v", "n,MeevyD/#kaF82**@v", "", (Object) null);
      Attribute attribute0 = new Attribute("/TfS*NX:'\"o@m;w.o!s");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
