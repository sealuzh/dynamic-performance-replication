/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:20:22 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1671));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wheel.asm.FieldWriter";
      stringArray0[1] = "wheel.asm.FieldWriter";
      stringArray0[2] = "wheel.asm.FieldWriter";
      stringArray0[3] = "wheel.asm.FieldWriter";
      stringArray0[4] = "wheel.asm.FieldWriter";
      stringArray0[5] = "wheel.asm.FieldWriter";
      stringArray0[6] = "Synthetic";
      stringArray0[7] = "wheel.asm.FieldWriter";
      stringArray0[8] = "wheel.asm.FieldWriter";
      classWriter0.visit(49, 62, "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1671), "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(");
      ByteVector byteVector0 = new ByteVector(49);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-514));
      classWriter0.index = (-514);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-514), "`<x", "`<x", "`<x", "`<x");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1671));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wheel.asm.FieldWriter";
      stringArray0[1] = "wheel.asm.FieldWriter";
      stringArray0[2] = "wheel.asm.FieldWriter";
      stringArray0[3] = "wheel.asm.FieldWriter";
      stringArray0[4] = "wheel.asm.FieldWriter";
      stringArray0[5] = "wheel.asm.FieldWriter";
      stringArray0[6] = "Synthetic";
      stringArray0[7] = "wheel.asm.FieldWriter";
      stringArray0[8] = "wheel.asm.FieldWriter";
      classWriter0.visit(49, 62, "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1671), "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(", "@EAsaOQl%mfZ(");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      classWriter0.index = (-1025);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1656), "", "F", "%Kom~6>`L19KH&[8ORi", "F");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "P$TL ~", "P$TL ~", "P$TL ~", "P$TL ~");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "%W", "U[Y ^C4e", "U[Y ^C4e", "%W");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "P$TL ~", "P$TL ~", "P$TL ~", "P$TL ~");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1656), "", "F", "", "F");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
      byte[] byteArray0 = new byte[3];
      byteVector0.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 5, "mORcJDnq[6G2{M", (String) null, "wheel.asm.FieldWriter", "YV1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 291, "RuntimeVisibleAnnotations", "", "t", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@5b82329d
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "P$TL ~", "P$TL ~", "P$TL ~", "P$TL ~");
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("P$TL ~");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(8, "V=.!2\"]iuLM^1J4", "", "mORcJDnq[6G2{M", "V=.!2\"]iuLM^1J4");
      fieldWriter0.visitAnnotation("mORcJDnq[6G2{M", false);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1656), "", "", "%Kom~6>`L19KH&[8ORi", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "%W", "_>4YW<<g1PQzI", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(2829);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      classWriter0.version = (-1656);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1656), "", "", "%Kom~6>`L19KH&[8ORi", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(8, "V=.!2\"]iuLM^1J4", "", "mORcJDnq[6G2{M", "V=.!2\"]iuLM^1J4");
      fieldWriter0.visitAnnotation("E3%+^&)", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      classWriter0.version = (-1656);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1656), "", "", "%Kom~6>`L19KH&[8ORi", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1706), "", "The FileFilter must not be null", ";)~!", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(8, "V=.!2\"]iuLM^1J4", "", "mORcJDnq[6G2{M", "V=.!2\"]iuLM^1J4");
      fieldWriter0.visitAnnotation("mORcJDnq[6G2{M", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "%W", "_>4YW<<g1PQzI", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1656), "P$TL ~", "P$TL ~", "4<D!Iw", "4<D!Iw");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "%Kom~6>`L19KH&[8ORi", "", "4<D!Iw", "%Kom~6>`L19KH&[8ORi");
      assertFalse(fieldWriter0.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(8, "V=.!2\"]iuLM^1J4", "", "mORcJDnq[6G2{M", "V=.!2\"]iuLM^1J4");
      fieldVisitor0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1656));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-1656), "P$TL ~", "P$TL ~", "4<D!Iw", "4<D!Iw");
      Attribute attribute0 = new Attribute("P$TL ~");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
