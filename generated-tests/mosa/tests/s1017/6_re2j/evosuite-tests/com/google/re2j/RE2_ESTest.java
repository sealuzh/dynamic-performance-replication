/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:40:54 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("!t#Nl1bU&C+.t~z8'");
      int[] intArray0 = rE2_0.findIndex("!t#Nl1bU&C+.t~z8'");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("IS}Mt=+4Xq");
      String[] stringArray0 = rE2_0.findSubmatch("IS}Mt=+4Xq");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      RE2 rE2_0 = new RE2(":");
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("Gujarati");
      List<int[]> list0 = rE2_0.findAllIndex("Gujarati", 1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("mP]j2Iz0@");
      String string0 = rE2_0.replaceAll("mP]j2Iz0@", "mP]j2Iz0@");
      assertEquals("mP]j2Iz0@", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-346));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("~G");
      List<String[]> list0 = rE2_0.findAllSubmatch("~G", 119);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Bamum");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("W+dwCs%$5n5u3y");
      List<int[]> list0 = rE2_0.findAllIndex("W+dwCs%$5n5u3y", 32);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("d{x*U-VsQx:+n?q");
      List<String[]> list0 = rE2_0.findAllSubmatch("d{x*U-VsQx:+n?q", (-1));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("sj5r");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("|");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 2372);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 119);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("");
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile(":8'\"wj");
      assertEquals(":8'\"wj", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 273);
      assertEquals(":8'\"wj", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1007);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Z*");
      assertEquals("Z*", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("Z*", (-1816));
      assertEquals("Z*", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-78));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RE2 rE2_0 = RE2.compilePOSIX("Lydian");
      assertEquals("Lydian", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("Lydian", rE2_0.toString());
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("}#dH8K]");
      assertEquals("}#dH8K]", rE2_0.toString());
      assertNotNull(rE2_0);
      
      // Undeclared exception!
      try { 
        rE2_0.match("}#dH8K]", 667, 667, 667, (int[]) null, 667);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.toString();
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("!t#Nl1bU&C+n.t~z8'v");
      assertEquals("!t#Nl1bU&C+n.t~z8'v", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("!t#Nl1bU&C+n.t~z8'v");
      assertEquals("!t#Nl1bU&C+n.t~z8'v", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("2Hoz*&MLX08z ZjU");
      assertEquals("2Hoz*&MLX08z ZjU", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("2Hoz*&MLX08z ZjU");
      assertEquals("2Hoz*&MLX08z ZjU", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = RE2.match("$io/.-", "*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("$");
      assertEquals("$", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("$", "$");
      assertEquals("$", rE2_0.toString());
      assertEquals("$$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("]j2Iz0@");
      assertEquals("]j2Iz0@", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("]j2Iz0@", "]j2Iz0@");
      assertEquals("]j2Iz0@", rE2_0.toString());
      assertEquals("]j2Iz0@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|");
      assertEquals("|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("|", "|");
      assertEquals("|", rE2_0.toString());
      assertEquals("|||", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("\f");
      assertEquals("\f", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("\f", 119982);
      assertEquals("\f", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertEquals("", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = rE2_0.match("", (-846), (-846), (-846), intArray0, 2);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("Hyphen");
      assertEquals("Hyphen", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("Hyphen");
      assertEquals("Hyphen", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertEquals("", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[4] = 0;
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 1657);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("}#dH8K]");
      assertEquals("}#dH8K]", rE2_0.toString());
      assertNotNull(rE2_0);
      
      RE2 rE2_1 = RE2.compile("}#dH8K]");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("}#dH8K]", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(rE2_1);
      
      boolean boolean0 = rE2_0.match("}#dH8K]", 667, 281, 281, (int[]) null, 281);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("}#dH8K]", rE2_0.toString());
      assertNotSame(rE2_0, rE2_1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("^");
      assertEquals("^", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("^", rE2_0.toString());
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("<]XMm");
      assertEquals("<]XMm", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("<]XMm", rE2_0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)10);
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", (-2582));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("_Q3k`TO3uSs3_\"-rS2");
      assertEquals("_Q3k`TO3uSs3_\"-rS2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("^{A1Urvyx\"UNq!Jo", (-1400));
      assertEquals("_Q3k`TO3uSs3_\"-rS2", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = RE2.quoteMeta("com.google.re2j.RE2");
      assertEquals("com\\.google\\.re2j\\.RE2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      RE2 rE2_1 = RE2.compilePOSIX("");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(rE2_1);
      
      String[] stringArray0 = rE2_1.findSubmatch("");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(stringArray0);
      
      String string0 = rE2_0.replaceAll("", "");
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("", rE2_0.toString());
      assertNotSame(rE2_0, rE2_1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      assertEquals("", stringBuilder0.toString());
      assertEquals("", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      boolean boolean0 = rE2_0.match(stringBuilder0, 0, 0, 0, (int[]) null, 892);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("", rE2_0.toString());
      assertEquals("", stringBuilder0.toString());
      assertNotSame(rE2_0, rE2_1);
      assertSame(stringBuilder0, stringBuilder1);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[4] = (byte) (-26);
      byteArray0[6] = (byte)65;
      List<byte[][]> list0 = rE2_1.findAllUTF8Submatch(byteArray0, (-94));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)0, (byte) (-26), (byte)0, (byte)65}, byteArray0);
      
      int[] intArray0 = rE2_1.findIndex("qtB<{igs@yA");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[] intArray1 = rE2_1.findSubmatchIndex(".YTTNb=%)p2bN$F\"Ch");
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }
}
