/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:01:35 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>(0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("@H", (Map<Object, String>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Integer integer0 = new Integer((-2892));
      Object object0 = new Object();
      doubleKeyMap0.put((Object) integer0, object0, "");
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      doubleKeyMap1.newMap();
      doubleKeyMap1.newMap();
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class1);
      Map<Object, Map<Object, Object>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(map1);
      doubleKeyMap3.get((Object) class1, (Object) class1);
      Object object1 = new Object();
      doubleKeyMap3.get(object1);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null);
      doubleKeyMap4.put((String) null, (Object) "", integer0);
      Map<Map<String, Integer>, Map<Object, Object>> map2 = doubleKeyMap4.newMap();
      DoubleKeyMap<Map<String, Integer>, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Map<String, Integer>, Object, Object>(map2, class1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      doubleKeyMap5.remove((Map<String, Integer>) hashMap1, (Object) class1);
      DoubleKeyMap<Integer, Map<String, Integer>, Object> doubleKeyMap6 = new DoubleKeyMap<Integer, Map<String, Integer>, Object>();
      Integer integer1 = new Integer(1);
      doubleKeyMap6.get(integer1, (Map<String, Integer>) hashMap1);
      Map<Object, Map<Map<String, Integer>, Object>> map3 = doubleKeyMap3.newMap();
      DoubleKeyMap<Object, Map<String, Integer>, Object> doubleKeyMap7 = new DoubleKeyMap<Object, Map<String, Integer>, Object>(map3, class1);
      Object object2 = new Object();
      Object object3 = doubleKeyMap7.get(object2, (Map<String, Integer>) hashMap1);
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put("wrong proto type map ", "N&n`bSOr", integer0);
      doubleKeyMap0.remove("wrong proto type map ", "0LYs[9>29otJ");
      doubleKeyMap0.remove("N&n`bSOr");
      Integer integer1 = doubleKeyMap0.get("", "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      String string0 = "";
      doubleKeyMap0.remove("", "");
      doubleKeyMap0.put("", "", (Integer) null);
      doubleKeyMap0.get("", "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      doubleKeyMap0.remove("HJRVA sC=j|<");
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>();
      doubleKeyMap1.put((String) null, "", integer0);
      doubleKeyMap1.put((String) null, (String) null, integer0);
      doubleKeyMap1.get("", "");
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Integer, Object, Map<String, Integer>> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Map<String, Integer>>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
