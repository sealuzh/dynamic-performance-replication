/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:17:49 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Double@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Double@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("XmG", (-38489319));
      assertEquals((-38489319), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      boolean boolean0 = jSONObject1.has("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.put("13P", true);
      String string0 = jSONObject0.getString("13P");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Mmu8#0%)%>", "Mmu8#0%)%>");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Mmu8#0%)%>");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(3174);
      String string0 = JSONObject.valueToString(integer0, 419, (-2560));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-458));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, "0");
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("'", (long) 391);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", (-701));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      long long0 = jSONObject0.optLong("zzd8<k<8E9L9Vy$", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-360L));
      assertEquals((-360L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("uV;;FgPA?", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer((-1320));
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      Short short0 = new Short((short) (-2094));
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble("|Fx-}vR", (-705.8476663138819));
      assertEquals((-705.8476663138819), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, (-3710), 741);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      Double double0 = new Double((-534.0F));
      hashMap0.put((Float) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 1553, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Double double0 = new Double((byte)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"dlA0%auS+D", double0);
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.quote("&gj`x/Lzrx{j>oB");
      assertEquals("\"&gj`x/Lzrx{j>oB\"", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.quote("\"dlA0%auS+D");
      assertEquals("\"\\\"dlA0%auS+D\"", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.quote("w-JBzzk?@&+I\\y~E`");
      assertEquals("\"w-JBzzk?@&+I\\\\y~E`\"", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString("QGm!5X<0zz", "\"\"dlA0%auS+D\"");
      assertEquals("\"\"dlA0%auS+D\"", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 3738.769033);
      double double0 = jSONObject1.optDouble("gettoString", 3738.769033);
      assertEquals(3738.769033, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Object object0 = jSONObject0.opt("bpyZ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Double double0 = new Double((byte)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"dlA0%auS+D", double0);
      jSONObject0.optInt("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}", (Object) byte0);
      Float float0 = new Float(0.0F);
      jSONObject2.append("7(3upjQmlD", float0);
      jSONObject2.optLong("n5&{C", 1905L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(391);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("x1{;i\"~V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x1{;i\\\"~V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(87);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("Unclosed comment", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1");
      jSONObject0.toString(3156, (-1456));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1803, 10);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 132, 132);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Unterminated string", "Unterminated string");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("\"java.lang.Object@0000000001\"", object0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("lo", object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble("T", 0.0);
      assertEquals(8, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSONObject.quote("KJlJ(IQGP[nD</");
      assertEquals("\"KJlJ(IQGP[nD<\\/\"", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      boolean boolean0 = jSONObject0.optBoolean("#5,,B!xgOVQ0R^vm4", true);
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("O/`MGVgb,*");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null pointer");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Null pointer";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("toO", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((-1320));
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short) (-2094));
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Q9O$et.]A", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 3738.769033);
      String string0 = jSONObject1.optString("gettoString");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("islongValue", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("islongValue");
      assertNotSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", "] is not a JSONArray.");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] is not a JSONArray.");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("PfqF0");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (-1111L));
      double double0 = jSONObject1.optDouble("Expected '");
      assertEquals((-1111.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Double double0 = new Double((byte)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"dlA0%auS+D", double0);
      jSONObject0.optInt("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}", (Object) byte0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject3 = jSONObject2.append("7(3upjQmlD", float0);
      jSONObject2.optLong("n5&{C", 1905L);
      jSONObject3.toString((int) (byte)0, 46);
      assertEquals(3, jSONObject2.length());
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      jSONObject0.put("wheel.json.JSONObject", (-451L));
      String string0 = jSONObject0.toString(10);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Double double0 = new Double((byte)0);
      jSONObject0.accumulate("\"dlA0%auS+D", double0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Cgv*7~;oqC8%wu|o9", 1470.09477);
      long long0 = jSONObject1.optLong("Cgv*7~;oqC8%wu|o9");
      assertEquals(1470L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", false);
      long long0 = jSONObject1.optLong("iscompare");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      jSONObject0.put("get", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("get");
      assertNotSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Unterminated string", "Unterminated string");
      try { 
        jSONObject0.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("Mmu8#0%)%>", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Mmu8#0%)%>");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Cgv*7~;oqC8%wu|o9", 1470.09477);
      int int0 = jSONObject1.optInt("Cgv*7~;oqC8%wu|o9", (-562));
      assertEquals(1470, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bcZEiN[~-EiXB", (-2465.8448));
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject0.getDouble("bcZEiN[~-EiXB");
      assertEquals((-2465.8448), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&~>gGV_RI}AU", true);
      boolean boolean0 = jSONObject1.optBoolean("&~>gGV_RI}AU");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("l`hk~WsB_", "rs9.");
      boolean boolean0 = jSONObject1.optBoolean("l`hk~WsB_", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", false);
      boolean boolean0 = jSONObject1.optBoolean("iscompare");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.put("d2pHsxE", false);
      try { 
        jSONObject0.getInt("d2pHsxE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d2pHsxE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1137.02);
      assertEquals("1137.02", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-38489319));
      assertEquals("-3.8489319E7", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("Mmu8#0%)%>", (Collection) linkedList0);
      jSONObject1.append("Mmu8#0%)%>", "Mmu8#0%)%>");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      try { 
        jSONObject1.append("{}", "is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("Expected '", (Collection) linkedList0);
      jSONObject0.accumulate("Expected '", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)120);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("wyK=(]`VAk_", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.accumulate("istrim", linkedList0);
      jSONObject0.toString(1144, 1144);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Unterminated string");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("s(|$iE,Wi*x", (Map) null);
      jSONObject0.toString(35);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{6I9/\"m|h[$ ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {6I9/\"m|h[$ 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{3=`8rt5t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {3=`8rt5t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Float float0 = new Float(0.0F);
      jSONObject0.append("7(3upjQmlD", float0);
      boolean boolean0 = jSONObject0.isNull("7(3upjQmlD");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1144, 1144);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-Ines*F2,Gum", 76);
      jSONObject1.accumulate("-Ines*F2,Gum", "+HFsQO-Pzc9xnw");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Expected '", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("toO");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("A JSONObject text must begin with '{'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000005\":[java.lang.Byte@0000000049,java.lang.Byte@0000000050,java.lang.Byte@0000000051,java.lang.Byte@0000000052,java.lang.Byte@0000000053,java.lang.Byte@0000000054,java.lang.Byte@0000000055,java.lang.Byte@0000000056,java.lang.Byte@0000000057,java.lang.Byte@0000000058,java.lang.Byte@0000000059,java.lang.Byte@0000000060,java.lang.Byte@0000000061,java.lang.Byte@0000000062,java.lang.Byte@0000000063,java.lang.Byte@0000000064,java.lang.Byte@0000000065,java.lang.Byte@0000000066,java.lang.Byte@0000000067],\"java.lang.String@0000000046\":\"java.lang.Class@0000000047\",\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("+HFsQO-Pzc9xnw", 0.0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("Unterminated string");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (-1111L));
      boolean boolean0 = jSONObject0.optBoolean("Expected '", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("issplit");
      assertFalse(boolean0);
  }
}
