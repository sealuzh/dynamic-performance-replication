/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:29:46 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass("sh");
      TypeUtils.getCollectionItemType((Type) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("ljava.awt.Point");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ljava.awt.Point\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = File.pathSeparator;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType(")Rt+r", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. )Rt+r
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass("java.");
      long long0 = TypeUtils.fnv1a_64("must > ");
      assertEquals(2119507340396477046L, long0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToFloat((Object) null);
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.unwrapOptional(class0);
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "L";
      TypeUtils.loadClass("L");
      TypeUtils.castToSqlDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.isNumber("r/f>");
      boolean boolean0 = true;
      TreeMap<IllegalThreadStateException, SQLClientInfoException> treeMap0 = new TreeMap<IllegalThreadStateException, SQLClientInfoException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getParserFeatures(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class0 = Boolean.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      TypeUtils.unwrapOptional(class0);
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(linkedHashMap0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_SHORT_EDGE;
      Class<Object> class0 = Object.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = File.pathSeparator;
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      Class<Byte> class1 = Byte.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class1);
      TypeUtils.isNumber(":");
      Class<?> class2 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Double> class1 = Double.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.unwrapOptional(class0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      linkedHashMap1.clear();
      linkedHashMap1.replace("long", "B", "Y8~gEL'BfNZE");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isNumber("Y8~gEL'BfNZE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JG-v;cZ$");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(1, list0.size());
      
      TypeUtils.decapitalize("3W,\"PK{{-HZuS],,})");
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.higherKey("K*Jg(TEW");
      ParserConfig.getGlobalInstance();
      Class<TimeZone> class0 = TimeZone.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig parserConfig1 = ParserConfig.global;
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("file relative path not support.");
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalAccessException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isNumber("r/f>");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.isNumber("r$].;h0Uc.A5n*");
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.isNumber("r/f>");
      String string0 = "6'~";
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("6'~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException>();
      TypeUtils.castToBigDecimal(identityHashMap0);
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.castToJavaBean((Object) "", class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, true, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        parserConfig1.getDeserializer((Class<?>) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<JSONObject> class0 = JSONObject.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.lang.SecurityException");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getRawClass(class0);
      Constructor<SQLWarning>[] constructorArray0 = (Constructor<SQLWarning>[]) Array.newInstance(Constructor.class, 1);
      constructorArray0[0] = (Constructor<SQLWarning>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeUtils0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.fnv1a_64("java.");
      TypeUtils.fnv1a_64_lower("java.");
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "islongValue");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("java.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      TypeUtils.isNumber("^8[%J+46[im/<oY");
      Class<?> class1 = TypeUtils.getClassFromMapping("com.alibaba.fastjson.serializer.BeforeFilter");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.unwrapOptional(class0);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("applyLabel");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("org.springframework.security.web.authentication.WebAuthenticationDetails", (ClassLoader) aSMClassLoader0);
      MockException mockException0 = new MockException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.springframework.security.web.authentication.WebAuthenticationDetails", "aeW", (-562), mockException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.springframework.security.web.authentication.WebAuthenticationDetails", sQLTransientConnectionException0);
      InterruptedException interruptedException0 = new InterruptedException("isshortValue");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("isshortValue", "org.springframework.security.web.authentication.WebAuthenticationDetails", (Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLTransactionRollbackException: isshortValue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "L";
      TypeUtils.loadClass("L");
      int int0 = Calendar.APRIL;
      SQLTransientException sQLTransientException0 = new SQLTransientException("L");
      sQLTransientException0.fillInStackTrace();
      sQLTransientException0.getSuppressed();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("L", sQLTransientException0);
      sQLTransientException0.fillInStackTrace();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      IllegalAccessError illegalAccessError0 = new IllegalAccessError(".000000000");
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "org.springframework.security.core.authority.SimpleGrantedAuthority");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("7KL$N+iU(K.WzA!p/", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalAccessError: .000000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.castToSqlDate("");
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getSerializeFeatures(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("", sQLTimeoutException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      ThreadGroup threadGroup0 = new ThreadGroup("Z");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, (JavaBeanInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "L";
      TypeUtils.loadClass("L");
      int int0 = Calendar.APRIL;
      SQLTransientException sQLTransientException0 = new SQLTransientException("L");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("L", sQLTransientException0);
      sQLTransientException0.fillInStackTrace();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.TypeNotPresentException: Type L not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(939L);
      TypeUtils.castToFloat(bigDecimal0);
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.loadClass("java.");
      TypeUtils.fnv1a_64("must > ");
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64_lower("java.");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = true;
      TypeUtils.computeGetters(class1, map0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      JSONObject jSONObject0 = new JSONObject();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException>();
      SecurityException securityException0 = new SecurityException("getDateFormatSymbols");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(securityException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.clear();
      boolean boolean0 = TypeUtils.isNumber("+.-5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_SHORT_EDGE;
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(type0);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      TypeUtils.isHibernateInitialized(jobAttributes_SidesType0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(class0);
      ConcurrentHashMap<EnumDeserializer, RenderingHints> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, RenderingHints>();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      TypeUtils.isHibernateInitialized(jSONPDeserializer0);
      TypeUtils.loadClass("unclosed.str");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      Class<?> class1 = TypeUtils.loadClass("java.util.concurrent.ConcurrentSkipListSet", classLoader0, true);
      assertEquals("class java.util.concurrent.ConcurrentSkipListSet", class1.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isProxy(class0);
      Class<Double> class1 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      int int0 = DateFormat.WEEK_OF_MONTH_FIELD;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        hashtable0.put((String) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(class0);
      ConcurrentHashMap<EnumDeserializer, RenderingHints> concurrentHashMap0 = new ConcurrentHashMap<EnumDeserializer, RenderingHints>();
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      TypeUtils.isHibernateInitialized(jSONPDeserializer0);
      TypeUtils.loadClass("unclosed.str");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig0 = ParserConfig.global;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = type0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@ef90095e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.isProxy(class0);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass("sh");
      TypeUtils.getCollectionItemType((Type) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "sh", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "detailMessage");
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2679), "j", (-2162), 5, 73, 73, 21, 885, (-3745), 152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2162
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = true;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) null, (PropertyNamingStrategy) null);
      hashMap1.put("Tm(;N{J*[@N&& zR>", "wTGY!:%7i");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.decapitalize("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      TypeUtils.decapitalize("port is not int");
      TypeUtils.isKotlin(class0);
      Class<ClassLoader> class1 = ClassLoader.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToDouble((Object) null);
      Class<Short> class0 = Short.TYPE;
      Hashtable<Dimension, InterruptedException> hashtable0 = new Hashtable<Dimension, InterruptedException>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Class<Locale> class1 = Locale.class;
      ParserConfig.getGlobalInstance();
      Class<Byte> class2 = Byte.TYPE;
      TypeUtils.unwrapOptional(class1);
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.castToJavaBean((Object) "", class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Character> class1 = Character.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      java.util.IdentityHashMap<Long, IllegalStateException> identityHashMap0 = new java.util.IdentityHashMap<Long, IllegalStateException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("toString", false);
      TypeUtils.loadClass("toString", classLoader0, true);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      classLoader0.getParent();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, type0);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      TreeSet<JobAttributes> treeSet0 = new TreeSet<JobAttributes>();
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      JSONObject jSONObject0 = new JSONObject();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      FieldInfo fieldInfo0 = new FieldInfo("j", class1, class1, class0, (Field) null, 37, 37, 37);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.OptionalInt");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      Insets insets0 = new Insets(417, 2334, 2770, 37);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(34, 37, 34, 417, 37, 417, 34, 2770, insets0, 116, 34);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, fieldInfo0.fieldType, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = null;
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "|";
      TypeUtils.decapitalize("|");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : |
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.loadClass("", (ClassLoader) null, true);
      System.setCurrentTimeMillis(2161L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getGenericParamType((Type) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("kotlin.reflect.KParameter", "kotlin.reflect.KParameter", 1491);
      Class<Throwable> class1 = Throwable.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLSyntaxErrorException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<TimeUnit> class0 = TimeUnit.class;
          Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
          FieldInfo fieldInfo0 = new FieldInfo("j", class1, class1, class0, (Field) null, 37, 37, 37);
          BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
          JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
          java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
          Class<MockMinguoDate> class2 = MockMinguoDate.class;
          FieldInfo.getFieldType(class2, class1, class1);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.OptionalInt");
          GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(genericArrayType0).toString();
          doReturn(fieldInfo0.fieldClass).when(genericArrayType0).getGenericComponentType();
          TypeUtils.checkPrimitiveArray(genericArrayType0);
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          classLoader0.setClassAssertionStatus("j", false);
          classLoader0.getParent();
          Type[] typeArray0 = new Type[5];
          typeArray0[0] = (Type) class0;
          typeArray0[1] = (Type) class0;
          typeArray0[2] = (Type) class0;
          typeArray0[3] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
          ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
          parserConfig0.setAutoTypeSupport(false);
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) jSONType0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.annotation.JSONType$$EnhancerByMockitoWithCGLIB$$10ffa21c, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class java.lang.Class
             //
             verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wAbxa", "NgKg;`eHwC4oWyhF");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      linkedHashMap0.replace("!5llrvhoN", "Ljava/lang/Object;Ljava/lang/Object;)", "B");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy1);
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToTimestamp(mockDate0);
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[8], typeArray0[2]);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, null, public com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "applyLabel";
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getClass((Type) class1);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      Class<MockGregorianCalendar> class3 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class2, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("getgetSigners");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "getgetSigners");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.setClassAssertionStatus("nXZpW Y!(=2m97h]", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("nXZpW Y!(=2m97h]", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      aSMDeserializerFactory0.classLoader.getParent();
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      Class<Double> class1 = Double.TYPE;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) genericArrayType0;
      typeArray0[3] = (Type) genericArrayType0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class1);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig.getGlobalInstance();
      InterruptedException interruptedException0 = new InterruptedException();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isPath(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      imageCapabilities0.clone();
      TypeUtils.castToString(imageCapabilities0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentClear();
      jSONObject0.getShort("y}<|yk6]");
      TypeUtils.unwrapOptional(class1);
      TypeUtils.isNumber("%IPePTm h");
      TypeUtils.fnv1a_64("@type");
      TypeUtils.isPath(class0);
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_SHORT_EDGE;
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getCollectionItemType(type0);
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      TypeUtils.isHibernateInitialized(jobAttributes_SidesType0);
      TypeUtils.loadClass("unclosed.str");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.cast((Object) null, type0, parserConfig0);
      // Undeclared exception!
      try { 
        JSON.parseObject("org.springframework.cglib.proxy.Factory");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : org.springframework.cglib.proxy.Factory
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wAbxa", "NgKg;`eHwC4oWyhF");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      linkedHashMap0.replace("!5llrvhoN", "Ljava/lang/Object;Ljava/lang/Object;)", "B");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToTimestamp(mockDate0);
      Type[] typeArray0 = new Type[9];
      TypeUtils.loadClass("NgKg;`eHwC4oWyhF");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[7]);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "NgKg;`eHwC4oWyhF", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@7b1a55f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_SHORT_EDGE;
      JobAttributes jobAttributes0 = new JobAttributes();
      jobAttributes0.setFileName("zP2l(c1o->J\"zFbAb3");
      jobAttributes0.setSides(jobAttributes_SidesType0);
      jobAttributes0.setPrinter("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      parserConfig0.checkAutoType("OYb3 UU", class0, (-3161));
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) null;
      Class<Character> class1 = Character.TYPE;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) null;
      typeArray0[6] = (Type) null;
      typeArray0[7] = (Type) null;
      typeArray0[8] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[7]);
      TypeUtils.cast((Object) "", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.JSONPathException");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "c7OZc\\08";
      String string1 = "STW";
      String string2 = "o";
      StackTraceElement stackTraceElement0 = new StackTraceElement("STW", "o", "o", 1467);
      hashMap0.remove((Object) class0, (Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.springframework.security.web.savedrequest.SavedCookie");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException>();
      TypeUtils.castToBigDecimal(identityHashMap0);
      TypeUtils.toLocale("MKQ");
      TypeUtils.getGenericParamType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.isGenericParamType((Type) null);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLException> class1 = SQLException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "_&", fieldArray0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class0, (Class<?>) null, (Type) null, (Field) null, 4180, 4180, 1125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)91;
      Insets insets0 = new Insets((byte) (-86), (byte) (-86), (byte)121, (byte)26);
      insets0.top = (int) (byte)26;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-1908874352), (byte)84, (-2065), (byte)26, (byte)121, (-86), (byte)84, (-4566), insets0, (byte)95, 26);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) insets0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Insets[top=26,left=-86,bottom=121,right=26]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.decapitalize("");
      StackTraceElement stackTraceElement0 = new StackTraceElement("port is not int", "Y:AQ0!Vm)IRXg:Y+", "c7OZc\u00008", 1571);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "Y:AQ0!Vm)IRXg:Y+");
      Object object0 = new Object();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setPackageAssertionStatus("port is not int", true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("", classLoader0, true);
      TypeUtils.castToBytes("c7OZc\u00008");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.isGenericParamType(class2);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig.global = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "floatValue");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fH(h PB\"D`y");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException> identityHashMap0 = new java.util.IdentityHashMap<SQLIntegrityConstraintViolationException, InstantiationException>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("fH(h PB\"D`y");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(noClassDefFoundError0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      InstantiationException instantiationException0 = new InstantiationException("fH(h PB\"D`y");
      identityHashMap0.put(sQLIntegrityConstraintViolationException0, instantiationException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<TimeUnit> class0 = TimeUnit.class;
          PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
          TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
          Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
          FieldInfo fieldInfo0 = new FieldInfo("j", class1, class1, class0, (Field) null, 37, 37, 37);
          BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
          JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
          java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
          Class<MockMinguoDate> class2 = MockMinguoDate.class;
          FieldInfo.getFieldType(class2, class1, class1);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.OptionalInt");
          GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
          doReturn((String) null).when(genericArrayType0).toString();
          doReturn(fieldInfo0.fieldClass).when(genericArrayType0).getGenericComponentType();
          TypeUtils.checkPrimitiveArray(genericArrayType0);
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          classLoader0.setClassAssertionStatus("j", false);
          classLoader0.getParent();
          Type[] typeArray0 = new Type[5];
          typeArray0[0] = (Type) class0;
          typeArray0[1] = (Type) class0;
          typeArray0[2] = (Type) class0;
          typeArray0[3] = (Type) class0;
          typeArray0[4] = (Type) class1;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
          ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
          parserConfig0.setAutoTypeSupport(false);
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) jSONType0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.annotation.JSONType$$EnhancerByMockitoWithCGLIB$$10ffa21c, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class org.evosuite.shaded.org.mockito.internal.creation.settings.CreationSettings
             //
             verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      TypeUtils.getSerializeFeatures(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.springframework.security.web.authentication.WebAuthenticationDetails");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("Ljava.util.concurrent.ConcurrentSkipListMap", sQLTransientException0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getGlobalInstance();
      Class<SQLDataException> class2 = SQLDataException.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) linkedHashMap0, false);
      TypeUtils.isProxy(class1);
      Class<Rectangle> class3 = Rectangle.class;
      Class<Field> class4 = Field.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      int int0 = Calendar.TUESDAY;
      JSONObject jSONObject0 = new JSONObject(false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass((String) null);
      TypeUtils.getCollectionItemType((Type) null);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException(".000000000");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.isNumber("r$].;h0Uc.A5n*");
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      boolean boolean0 = new Boolean(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("r$].;h0Uc.A5n*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r$].;h0Uc.A5n*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String string0 = "OD.BRZoh1VGgRs";
      TypeUtils.getClassFromMapping("OD.BRZoh1VGgRs");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("toS", "8w,P[cF%_-geeCn)", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("OD.BRZoh1VGgRs", sQLClientInfoException0);
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.NORMAL;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToDouble((Object) null);
      Class<Short> class0 = Short.TYPE;
      Hashtable<Dimension, InterruptedException> hashtable0 = new Hashtable<Dimension, InterruptedException>();
      TypeUtils.castToString(hashtable0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getGenericParamType(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLWarning0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "fastjson.parser.deny", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      Class<OutOfMemoryError> class1 = OutOfMemoryError.class;
      FieldInfo fieldInfo0 = new FieldInfo("j", class1, class1, class0, (Field) null, 37, 37, 37);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.OptionalInt");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(fieldInfo0.fieldClass).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("j", false);
      classLoader0.getParent();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[1]);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONType0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.annotation.JSONType$$EnhancerByMockitoWithCGLIB$$10ffa21c, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class org.evosuite.shaded.org.mockito.internal.creation.settings.CreationSettings
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.getClassFromMapping("ha");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5r(-<#Qwbq", (Throwable) null);
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.NORMAL;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      TypeUtils.castToShort((Object) null);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(pageAttributes_PrintQualityType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : normal
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig.global = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "floatValue");
      Byte byte0 = Byte.valueOf((byte)49);
      Byte.toUnsignedInt((byte)49);
      TypeUtils.castToShort(byte0);
      TypeUtils.castToBigDecimal((Object) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      try { 
        aSMClassLoader0.loadClass("fastjson.parser.deny");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // fastjson.parser.deny
         //
         verifyException("java.lang.ClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Class<Short> class0 = Short.TYPE;
      Hashtable<Dimension, InterruptedException> hashtable0 = new Hashtable<Dimension, InterruptedException>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Class<Locale> class1 = Locale.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class2 = Byte.TYPE;
      TypeUtils.unwrapOptional(class1);
      TypeUtils.isKotlin(class1);
      TypeUtils.castToString(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.decapitalize("");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.castToJavaBean((Object) "", class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Character> class1 = Character.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      java.util.IdentityHashMap<Long, IllegalStateException> identityHashMap0 = new java.util.IdentityHashMap<Long, IllegalStateException>();
      TypeUtils.fnv1a_64_lower("");
      Insets insets0 = new Insets(28, 727, 28, 1530);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-207), (-1846284153), (-1969469238), (-207), (-1846284153), 1993, (-1631996908), 1993, insets0, (-2207), 51);
      Float float0 = new Float((float) 727);
      TypeUtils.castToSqlDate(float0);
      TypeUtils.toLocale("Sz<s");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Character> class0 = Character.TYPE;
      Class<Long> class1 = Long.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      java.util.IdentityHashMap<Long, IllegalStateException> identityHashMap0 = new java.util.IdentityHashMap<Long, IllegalStateException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("fastjson.parser.autoTypeAccept");
      TypeUtils.castToLong((Object) null);
      TypeUtils.loadClass("");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(noSuchMethodException0);
      Long long0 = new Long((-1038L));
      identityHashMap0.replace(long0, (IllegalStateException) mockIllegalStateException0);
      ClassLoader.getSystemClassLoader();
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isPath(class0);
      Locale locale0 = TypeUtils.toLocale("&_Bc-HHn}p5r");
      locale0.getLanguage();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.isNumber("F");
      TypeUtils.fnv1a_64("&_Bc-HHn}p5r");
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      TypeUtils.isPath(class2);
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.loadClass("&", classLoader0);
      LinkedHashMap<NoSuchMethodException, NoSuchFieldException> linkedHashMap1 = new LinkedHashMap<NoSuchMethodException, NoSuchFieldException>();
      WeakHashMap<NoSuchMethodException, NoSuchFieldException> weakHashMap0 = new WeakHashMap<NoSuchMethodException, NoSuchFieldException>(linkedHashMap1);
      Class<Insets> class3 = Insets.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.decapitalize("");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap1 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Locale> class0 = Locale.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      ParserConfig.getGlobalInstance();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)54;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.isNumber("r$].;h0Uc.A5n*");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.bitLength();
      bigInteger1.getLowestSetBit();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("r$].;h0Uc.A5n*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r$].;h0Uc.A5n*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToDouble((Object) null);
      Class<Short> class0 = Short.TYPE;
      Hashtable<Dimension, InterruptedException> hashtable0 = new Hashtable<Dimension, InterruptedException>();
      TypeUtils.castToString((Object) null);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getGenericParamType(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SecurityException> class0 = SecurityException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.clearAssertionStatus();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", (String) null);
      TypeUtils.isHibernateInitialized((Object) null);
      Class<Character> class1 = Character.TYPE;
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [B@640d5f9e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpCookie httpCookie0 = new HttpCookie("B", "ha");
      TypeUtils.isHibernateInitialized(httpCookie0);
      Class<Character> class0 = Character.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getRawClass(class0);
      TypeUtils.isHibernateInitialized("B");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.loadClass("java.");
      String string0 = "must > ";
      TypeUtils.fnv1a_64("must > ");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("must > ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"must > \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Ljava.awt.Rectangle", "4nTdk;`Pvg8bU/^II'");
      hashMap0.remove((Object) null, (Object) propertyNamingStrategy0);
      String string0 = "0b]p2u?8i";
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy1);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("0b]p2u?8i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0b]p2u?8i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.loadClass("ZF~|f");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)54;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Class<Locale> class0 = Locale.class;
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigDecimal0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Byte> class0 = Byte.TYPE;
      hashMap0.replace("B", "B");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.fnv1a_64("TD*}");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.loadClass("B", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("TD*}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : TD*}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("context is null");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "context is null");
      MockThread mockThread0 = new MockThread(threadGroup1, "(Ub)P");
      mockThread0.getContextClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(treeMap0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.isNumber("java.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.decapitalize("");
      StackTraceElement stackTraceElement0 = new StackTraceElement("port is not int", "Y:AQ0!Vm)IRXg:Y+", "c7OZc\u00008", 1571);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "Y:AQ0!Vm)IRXg:Y+");
      Object object0 = new Object();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setPackageAssertionStatus("port is not int", true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("", classLoader0, true);
      TypeUtils.castToBytes("c7OZc\u00008");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("h~*6yi0&i6S.{1>", "h~*6yi0&i6S.{1>", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      sQLIntegrityConstraintViolationException0.setNextException(sQLDataException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLIntegrityConstraintViolationException0.spliterator();
      DataTruncation dataTruncation0 = new DataTruncation(1049, true, false, (-1441649794), 48, sQLIntegrityConstraintViolationException0);
      dataTruncation0.getNextWarning();
      TypeUtils.castToDate((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getClass((Type) class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.decapitalize("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "port is not int";
      StackTraceElement stackTraceElement0 = new StackTraceElement("port is not int", "Y:AQ0!Vm)IRXg:Y+", "c7OZc\u00008", 1571);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string1 = ParserConfig.DENY_PROPERTY;
      Object object0 = new Object();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      hashMap0.put("o4", "");
      hashMap0.remove(object0, (Object) javaObjectDeserializer0);
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      TypeUtils.castToBytes("");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.setAsmEnable(false);
      ParserConfig.getGlobalInstance();
      ConcurrentHashMap<Long, Long> concurrentHashMap0 = new ConcurrentHashMap<Long, Long>();
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      TypeUtils.cast((Object) concurrentHashMap0, class1, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("o4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : o4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isNumber("[double");
      TypeUtils.fnv1a_64("TD*}");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.loadClass("B", (ClassLoader) null);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], (Type) null);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.compatibleWithJavaBean = false;
      ParserConfig parserConfig1 = new ParserConfig();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      ArrayList<ClassLoader> arrayList0 = new ArrayList<ClassLoader>();
      Class<Byte> class1 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wAbxa", "NgKg;`eHwC4oWyhF");
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "wAbxa");
      MockThread mockThread0 = new MockThread(threadGroup1, "B");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      aSMClassLoader0.setDefaultAssertionStatus(true);
      parserConfig0.setAsmEnable(true);
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", concurrentHashMap0);
      Class<Float> class1 = Float.class;
      Class<FieldInfo> class2 = FieldInfo.class;
      TypeUtils.isProxy(class2);
      TypeUtils.getGenericParamType(class1);
      Float float0 = new Float(0.0F);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Integer> class3 = Integer.TYPE;
      TypeUtils.getGenericParamType(class0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("wAbxa");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NegativeArraySizeException: wAbxa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Object object0 = null;
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToDouble((Object) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      String string0 = null;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException((String) null);
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ParserConfig.DENY_PROPERTY;
      TypeUtils.castToByte("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SecurityException> class0 = SecurityException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.clearAssertionStatus();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.deny", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.autoTypeAccept", (String) null);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getGenericParamType(class0);
      Class<Integer> class2 = Integer.TYPE;
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLTransactionRollbackException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.isGenericParamType(class1);
      Class<OptionalCodec> class2 = OptionalCodec.class;
      Class<SQLException> class3 = SQLException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class3, "&", fieldArray0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class2, class1, class1, (Field) null, 4180, 4180, 1125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("java?");
      ParserConfig.getGlobalInstance();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      MockUUID.fromString("Jj?T6`GW&/&-(j:C4");
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("java?");
      PrintStream printStream0 = mockPrintStream0.format("UW<W6:Ubd |D/aFyI", (Object[]) null);
      indexOutOfBoundsException0.printStackTrace(printStream0);
      MockThrowable mockThrowable0 = new MockThrowable("gettoLocaleString", indexOutOfBoundsException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(indexOutOfBoundsException0);
      TypeUtils.loadClass("org.springframework.security.web.authentication.WebAuthenticationDetails", (ClassLoader) null);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToSqlTime((Object) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isNumber("java?");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.decapitalize("");
      StackTraceElement stackTraceElement0 = new StackTraceElement("port is not int", "Y:AQ0!Vm)IRXg:Y+", "c7OZc\u00008", 1571);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "Y:AQ0!Vm)IRXg:Y+");
      Object object0 = new Object();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setPackageAssertionStatus("port is not int", true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      Class<Boolean> class1 = Boolean.TYPE;
      TypeUtils.unwrapOptional(class1);
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      TypeUtils.isKotlin(class2);
      TypeUtils.unwrapOptional(class2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SecurityException> class0 = SecurityException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.clearAssertionStatus();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TypeUtils.loadClass("u <OVoa");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.loadClass("java.nio.file.Path", (ClassLoader) aSMDeserializerFactory0.classLoader);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.fnv1a_64("java.");
      TypeUtils.fnv1a_64_lower("java.");
      Class<Boolean> class0 = Boolean.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<BigDecimal> class1 = BigDecimal.class;
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      TimeZone.getAvailableIDs();
      Class<Float> class3 = Float.TYPE;
      TypeUtils.getCollectionItemClass(class2);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.math.BigDecimal
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wAbxa", "sh");
      Class<TimeZone> class0 = TimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      linkedHashMap1.replace("!E[i7bz1@7~\"-", "wAbxa", (String) null);
      Class<TimeZone> class1 = TimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      MockDate mockDate0 = new MockDate();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1860181533), 378, 508, 12, (-1860181533), (-1860181533));
      TypeUtils.castToTimestamp(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isNumber("[double");
      TypeUtils.fnv1a_64("TD*}");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      SQLTransientException sQLTransientException0 = new SQLTransientException("Lorg.springframework.util.LinkedMultiValueMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("wAbx)a", "NgKg;`eHwC4oWyhF");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(illegalThreadStateException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Class<Timestamp> class0 = Timestamp.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      TypeUtils.isProxy(class2);
      Long long0 = new Long((-1476L));
      hashMap0.replace("6\"}\"", "'ox..V", "lNky:vRsJPZ");
      TypeUtils.castToLong(long0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isPath(class0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(identityHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      identityHashMap1.entrySet();
      linkedHashMap0.clear();
      linkedHashMap0.replace("s0a ^6\"vdqtBU5>", "Ljava/lang/Object;Ljava/lang/Object;)", "Ljava/lang/Object;Ljava/lang/Object;)");
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToTimestamp((Object) null);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) linkedHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("to");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "to");
      MockThread mockThread0 = new MockThread(threadGroup1, "to");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setAsmEnable(false);
      TypeUtils.getClassFromMapping("gettoString");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      byte[] byteArray0 = new byte[9];
      Class<SQLException> class0 = SQLException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u <OVoa", indexOutOfBoundsException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", "fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      TypeUtils.loadClass("s");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.loadClass("wKC+lmk/e[5", classLoader0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.decapitalize("");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      linkedHashMap0.replace("", "LZF~|f", "valueOf");
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isNumber("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToChar((Object) null);
      Class<NumberFormatException> class1 = NumberFormatException.class;
      TypeUtils.isPath(class1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      renderingHints0.remove((Object) null, (Object) class1);
      // Undeclared exception!
      try { 
        renderingHints0.put(class1, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
          DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
          ClassLoader.getSystemClassLoader();
          java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
          identityHashMap0.entrySet();
          LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
          linkedHashMap0.clear();
          linkedHashMap0.replace("{UH@DTNqnV", "Ljava/lang/Object;Ljava/lang/Object;)", (String) null);
          PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
          JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
          TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
          MockDate mockDate0 = new MockDate();
          TypeUtils.castToTimestamp(mockDate0);
          Type[] typeArray0 = new Type[1];
          typeArray0[0] = (Type) class0;
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
          NumberDeserializer numberDeserializer0 = new NumberDeserializer();
          ParserConfig parserConfig0 = new ParserConfig();
          TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
          TreeMap<String, ClientInfoStatus> treeMap1 = new TreeMap<String, ClientInfoStatus>((SortedMap<String, ? extends ClientInfoStatus>) treeMap0);
          SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.springframework.util.LinkedMultiValueMap", "[float", 16, treeMap1);
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) sQLClientInfoException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // type not match. java.sql.SQLClientInfoException -> java.time.chrono.ChronoLocalDate
             //
             verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.isNumber("[double");
      TypeUtils.fnv1a_64("TD*}");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      TypeUtils.isProxy(class1);
      TypeUtils.clearClassMapping();
      TypeUtils.castToBigDecimal(hashMap0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Byte> class0 = Byte.TYPE;
      hashMap0.replace("B", "B");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.fnv1a_64("TD*}");
      LinkedList<JSONPDeserializer> linkedList0 = new LinkedList<JSONPDeserializer>();
      TypeUtils.unwrapOptional(class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.isProxy(class1);
      Long long0 = new Long(1750198187477523072L);
      hashMap0.replace("getgetFastMatchToken", "Layw`XeoiLy.3Y", "getclone");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
