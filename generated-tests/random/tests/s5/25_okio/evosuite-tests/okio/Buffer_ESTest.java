/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:54:15 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string == null");
      Pipe pipe0 = new Pipe(10L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      long long0 = (-857L);
      buffer0.writeLongLe((-857L));
      buffer0.md5();
      buffer0.readLongLe();
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.decodeBase64("MD");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.utf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      HashingSink.sha1(bufferedSink0);
      Buffer buffer1 = buffer0.write(byteString1);
      buffer1.indexOf(byteString0, 100000000L);
      buffer0.request(10000000000000L);
      buffer0.sha512();
      buffer1.readLongLe();
      buffer0.rangeEquals((-1380L), byteString1);
      buffer1.readIntLe();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      buffer1.indexOf(byteString0);
      assertEquals(20L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2013L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -2013
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.rangeEquals(4L, byteString0);
      buffer0.request((byte)100);
      Buffer buffer1 = buffer0.writeUtf8("?Kl}N\",i)");
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer1.readByteArray((long) (byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=0 byteCount=118
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 3362L;
      Pipe pipe0 = new Pipe(3362L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(3362L);
      byte byte0 = (byte)29;
      buffer_UnsafeCursor0.buffer.indexOf((byte)29);
      Options options0 = null;
      buffer_UnsafeCursor0.resizeBuffer((byte)29);
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeInt(255);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeUtf8("(!", (-1431655764), 2751);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1431655764
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(16711680L);
      buffer_UnsafeCursor0.next();
      Inflater inflater0 = new Inflater(true);
      pipe0.sinkClosed = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflaterSource0.refill();
      SegmentPool.byteCount = 10L;
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer0.readFrom(inputStream0, 1047L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: invalid stored block lengths
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      inflater0.reset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)12;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      inflaterSource0.refill();
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      String string0 = " content=";
      Buffer buffer2 = buffer1.writeUtf8(" content=");
      int int0 = 65533;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString(" content=", 65533, 65533, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 65533 > 9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Pipe pipe0 = new Pipe(865L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(10000000000L);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1789569706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 6aaaaaaa
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(73L);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(99);
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        buffer1.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = (-395);
      Buffer buffer1 = buffer0.writeIntLe((-395));
      Buffer buffer2 = buffer1.writeDecimalLong(9223372036854775807L);
      ByteString.decodeBase64("b*Y#v");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.readWrite = false;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.seek(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=9223372036854775807 > size=23
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2058005162);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      realBufferedSink0.write(byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(673L);
      realBufferedSink0.writeShortLe((-828));
      Buffer buffer2 = buffer1.writeLongLe(2147483647L);
      buffer2.size();
      buffer2.readInt();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-54);
      byte byte0 = (byte)121;
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer2, (long) (byte)29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "lwMP3NM|w\"((";
      buffer0.writeUtf8("lwMP3NM|w\"((");
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{T/kq;{|I}");
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$]=O14nCwL8?");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      InputStream inputStream0 = realBufferedSink0.buffer.inputStream();
      // Undeclared exception!
      buffer1.readFrom(inputStream0, 100000000000000000L);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3h~GG4:B5'oL");
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Buffer buffer3 = buffer2.writeDecimalLong(10000000000000L);
      buffer1.readByteArray();
      ByteString byteString0 = ByteString.encodeUtf8("3h~GG4:B5'oL");
      buffer3.hmacSha1(byteString0);
      assertEquals(14L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-108);
      pipe0.sourceClosed = false;
      byte byte0 = (byte) (-75);
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeIntLe((-1115));
      buffer1.hashCode();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.decodeBase64("MD");
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.utf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      HashingSink.sha1(bufferedSink0);
      Buffer buffer1 = buffer0.write(byteString1);
      buffer1.indexOf(byteString0, 100000000L);
      buffer0.request(10000000000000L);
      buffer0.sha512();
      buffer1.readLongLe();
      buffer0.rangeEquals((-1380L), byteString1);
      buffer1.readIntLe();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo((OutputStream) bufferedOutputStream0, 255L, (-2520892330908195202L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=255 byteCount=-2520892330908195202
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      buffer0.readUtf8Line();
      buffer0.flush();
      buffer1.segmentSizes();
      long long0 = 100000000000000L;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.readByteArray(1470L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 3500L;
      realBufferedSink0.closed = true;
      buffer0.writeShortLe(36);
      try { 
        realBufferedSink0.buffer.write((Source) buffer0, 21474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(214748L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.sha1();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        realBufferedSource0.buffer.readFrom(inputStream0, 214748L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-82);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      long long0 = buffer0.readAll(bufferedSink0);
      assertEquals(0L, long0);
      
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      assertEquals(8L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      Buffer buffer1 = buffer0.writeByte((-3682));
      buffer1.readByte();
      buffer0.sha256();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.size();
      Buffer buffer2 = buffer0.writeUtf8("Y9ebHY=jGtq<\"Wf\"Z");
      buffer2.readByteString(4L);
      buffer0.readUtf8Line(0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.write(buffer_UnsafeCursor0.buffer);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeInt((-1));
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(1121L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.seek((-1));
      // Undeclared exception!
      try { 
        buffer1.readByteArray(100L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(70);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775788L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOf(byteString0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("/fY0cg_0;1-&b[", charset0);
      byteString1.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3064L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=3064 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 255L;
      Pipe pipe0 = new Pipe(255L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.read(buffer0, (-3165L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3165
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 100L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.next();
      buffer2.readString(charset0);
      realBufferedSink0.writeUtf8CodePoint(0);
      buffer_UnsafeCursor0.resizeBuffer(111L);
      int int0 = buffer0.read(buffer_UnsafeCursor0.data);
      assertEquals(111, buffer_UnsafeCursor0.end);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(1L);
      Buffer buffer1 = buffer0.writeInt(102);
      buffer1.readAndWriteUnsafe();
      buffer0.toString();
      try { 
        buffer0.readUtf8LineStrict(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=3100000066\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (-1380L);
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.timeout();
      Buffer buffer1 = buffer0.writeUtf8("POV=8ZfVGnyih");
      Buffer buffer2 = buffer1.writeInt((-89));
      Buffer buffer3 = buffer0.buffer();
      buffer2.readAndWriteUnsafe();
      buffer3.indexOf((byte)43, 255L, 100000000L);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("POV=8ZfVGnyih");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: POV=8ZfVGnyih
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer1 = buffer0.writeShort(10);
      ByteString byteString0 = buffer1.sha512();
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-88);
      buffer0.hmacSha1(byteString0);
      HashingSource.hmacSha256(buffer0, byteString0);
      byteArray0[9] = (byte) (-77);
      realBufferedSource0.buffer.writeDecimalLong(100000000000L);
      byteArray0[7] = (byte)55;
      byteArray0[6] = (byte)14;
      HashingSource.sha1(hashingSource1);
      byteArray0[7] = (byte) (-58);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      HashingSource.md5(pipe_PipeSource0);
      realBufferedSource0.buffer.readUtf8();
      String string0 = realBufferedSource0.buffer.readUtf8Line();
      assertNull(string0);
      
      Buffer buffer0 = realBufferedSource0.buffer;
      Object object0 = new Object();
      boolean boolean0 = buffer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      int int0 = 99;
      int int1 = (-926);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString(";O*77uU", 99, (-926), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -926 < 99
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeIntLe((-42));
      buffer1.writeUtf8("lz,1NhyPZuws~");
      buffer0.readShort();
      buffer0.request((short) (-10497));
      buffer1.outputStream();
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[6];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)2;
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray0[1] = byteString1;
      ByteString.decodeBase64("Ed67ze\"IP@J|kwmd2");
      byteStringArray0[2] = null;
      ByteString.decodeBase64("Ed67ze\"IP@J|kwmd2");
      byteStringArray0[3] = null;
      ByteString.decodeBase64("Ed67ze\"IP@J|kwmd2");
      byteStringArray0[4] = null;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString(")@<s`N(*qJnm6nyY", charset0);
      byteStringArray0[5] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer buffer1 = realBufferedSink0.buffer;
      boolean boolean0 = buffer1.exhausted();
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      try { 
        buffer0.require(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, 100000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong(2147483647L);
      assertEquals(10L, buffer1.size());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(142929835591L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 157L;
      Pipe pipe0 = new Pipe(157L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 157L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S!;ZQ");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("");
      buffer1.size = 6671L;
      // Undeclared exception!
      try { 
        buffer0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOfElement((ByteString) null);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-47L));
      buffer0.outputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)30;
      byte byte0 = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-125);
      buffer1.read(byteArray0);
      buffer0.writableSegment(1092);
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) (byte) (-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=11 offset=0 byteCount=-125
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(65280);
      buffer1.indexOf((byte)0);
      String string0 = "[${me3C_Z";
      int int0 = (-1651);
      int int1 = (-650);
      // Undeclared exception!
      try { 
        Charset.forName("[${me3C_Z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [${me3C_Z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.writeIntLe(25);
      buffer0.readUtf8(1L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=66 byteCount=66
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      MockFile mockFile0 = new MockFile("z!44GC*v;5xW|W\"", "#bTFiaOJq/+Uj{.>ra?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      realBufferedSink0.buffer.copyTo((OutputStream) mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("#X\"B@W(5-&^mRXvRI", charset0);
      realBufferedSink0.buffer.hmacSha1(byteString0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Segment segment0 = buffer1.head;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.head = null;
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(318L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.indexOf((byte)24);
      Buffer buffer0 = realBufferedSource0.buffer;
      pipe_PipeSource0.close();
      buffer0.write(byteString0);
      realBufferedSource0.buffer.indexOfElement(byteString0, 64L);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      boolean boolean0 = buffer0.equals(buffer1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-672L);
      int int0 = 10;
      Buffer buffer1 = buffer0.writeIntLe(10);
      buffer1.readInt();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-672L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-672
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(587L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      String string0 = "";
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("", 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 15 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer_UnsafeCursor2.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong((-1));
      realBufferedSink0.writeByte((-4076));
      realBufferedSink0.buffer.toString();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readLong();
      buffer_UnsafeCursor0.next();
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=9 content=666666666666666614\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byte byte0 = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byte byte1 = (byte)78;
      byteArray0[2] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0, 1L);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)78, (int) (byte) (-107));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=78 byteCount=-107
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShortLe(98);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, (long) 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString byteString0 = buffer1.readByteString();
      buffer1.writeDecimalLong(2103L);
      buffer1.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      ByteString byteString0 = ByteString.encodeUtf8("J--");
      byteString0.utf8();
      int int0 = (-2971);
      buffer2.rangeEquals(100000L, byteString0, 0, (-2971));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.snapshot((-2971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2971
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HmacSHA1");
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=9223372036854775807 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j0DWYFz;t]\"");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(100000L);
      buffer2.readLongLe();
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(1860L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.indexOf((byte)121, (long) (byte)121, (long) (byte)121);
      buffer0.writeIntLe((-357));
      buffer0.readUtf8CodePoint();
      buffer0.sha512();
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readUtf8();
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(3008L);
      buffer1.emit();
      boolean boolean0 = buffer1.request(32L);
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.toString();
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.emitCompleteSegments();
      buffer0.sha256();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = realBufferedSink0.buffer.writeString("", charset0);
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(3423L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " zz`I+[jBE8");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeString("y#K315?R3!a<85%zMC", 11, 11, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "Nq< \\g@Puso-+&b";
      int int0 = 1610612736;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("Nq< g@Puso-+&b", (-650), 1610612736, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -650
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(526L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2830);
      // Undeclared exception!
      try { 
        buffer1.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      realBufferedSink0.buffer.toString();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = realBufferedSink0.buffer.writeLongLe((-816L));
      buffer2.clear();
      Buffer buffer3 = buffer1.writeShortLe(57);
      realBufferedSink0.buffer.inputStream();
      realBufferedSink0.buffer.writeLongLe((-1));
      long long0 = 100000000000000000L;
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer3, 1091L, 100000000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=1091 byteCount=100000000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-61);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[2] = (byte) (-117);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha256(byteString0);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)82;
      int int0 = 9;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=9 byteCount=9
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSink0.writeIntLe(102);
      buffer0.writeUtf8CodePoint(14);
      realBufferedSource0.buffer.segmentSizes();
      // Undeclared exception!
      buffer1.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      long long0 = 1380L;
      buffer0.writeHexadecimalUnsignedLong(1380L);
      try { 
        inflaterSource0.read(buffer0, 32L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      String string0 = "ky[L<sW0y7";
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)43;
      buffer0.indexOf((byte)43, (long) (byte)43, (long) (byte)43);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Charset.forName("z. B G");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // z. B G
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(2147483647L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.Segment");
      Buffer buffer0 = pipe0.buffer;
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(8L);
      long long0 = 1854L;
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = true;
      Buffer buffer2 = buffer1.writeUtf8("");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-1467L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1467 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.require((-1067L));
      assertTrue(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = 421L;
      Pipe pipe0 = new Pipe(421L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.clone();
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.start = (-1884);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      Buffer buffer2 = buffer1.writeLong((-5771L));
      ByteString[] byteStringArray0 = new ByteString[5];
      ByteString byteString0 = ByteString.encodeUtf8("@+ -");
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.encodeUtf8(",KhI>zRX+&KA");
      byteStringArray0[1] = byteString1;
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      ByteString.decodeBase64("<+bf");
      byteStringArray0[3] = null;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteStringArray0[4] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((-1884));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1884
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      byte[] byteArray1 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray1);
      boolean boolean0 = buffer0.rangeEquals(1387L, byteString0);
      assertFalse(buffer0.exhausted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-118);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      String string0 = buffer2.readUtf8Line();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertNull(string0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(285);
      Buffer buffer2 = buffer0.writeIntLe(1);
      buffer1.writeUtf8("b7uANIp0;nxg&o+[jf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b7uANIp0;nxg&o+[jf");
      // Undeclared exception!
      try { 
        buffer2.copyTo((OutputStream) mockFileOutputStream0, (long) 285, 15L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=285 byteCount=15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = pipe0.buffer;
      buffer0.hashCode();
      buffer0.completeSegmentByteCount();
      buffer0.clear();
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.encodeString("QwFhmO}", charset0);
      buffer0.rangeEquals((-1277L), byteString0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("QwFhmO}");
      mockPrintStream0.print('p');
      mockPrintStream0.close();
      SegmentPool.byteCount = 0L;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) mockPrintStream0, 280375465082880L, 280375465082880L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=280375465082880 byteCount=280375465082880
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeByte((-1));
      // Undeclared exception!
      try { 
        buffer1.readByteString(5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentPool.byteCount = 4L;
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeUtf8CodePoint(27);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 2013265920, 2013265920, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Segment segment0 = buffer0.head;
      buffer0.head = null;
      gzipSink0.flush();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-101);
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, (int) (byte)22, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("/fY0cg_0;1-&b[", charset0);
      byteString0.sha1();
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-3471L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint((-3682));
      String string0 = "?J4\\'oK_zI]E}";
      File file0 = MockFile.createTempFile("?J4'oK_zI]E}", "?J4'oK_zI]E}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      buffer0.copyTo((OutputStream) mockPrintStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((byte[]) null, 1147, 1147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = 1114111;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@!;GI=p&&Z;.[}-Di.");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1095216660480L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      hashingSink0.flush();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeShort((-16777216));
      realBufferedSink0.writeShortLe((-758));
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.segmentSizes();
      Buffer buffer2 = buffer1.writeByte(4467);
      buffer2.sha512();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("DOdt", (-156), (-2144883787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -156
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      boolean boolean0 = buffer1.request(1000000000L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.buffer.rangeEquals(4278190080L, byteString0, (-2133071005), 4116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-116);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(2549L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Segment segment0 = buffer1.writableSegment(65);
      buffer0.hashCode();
      SegmentPool.next = segment0;
      realBufferedSink0.buffer.readUnsafe();
      realBufferedSink0.buffer.request((-1));
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-3903L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-3903
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      buffer0.writeShort((-9));
      ByteString byteString0 = realBufferedSource0.buffer.sha512();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-88);
      buffer0.hmacSha1(byteString0);
      HashingSource.hmacSha256(buffer0, byteString0);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)14;
      HashingSource.sha1(hashingSource1);
      byteArray0[7] = (byte) (-58);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XVaI+]16Zp4Tv'_5*<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer1.outputStream();
      realBufferedSink0.emit();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      realBufferedSink0.buffer.toString();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      Buffer buffer2 = buffer1.write(byteString0);
      int int0 = 2500;
      buffer2.writableSegment(2500);
      // Undeclared exception!
      try { 
        buffer2.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 2146641167, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 10 < 2146641167
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.emit();
      int int0 = (-1230);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 4, (-1230));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      long long0 = (-825L);
      buffer0.size = (-825L);
      buffer0.writeShortLe(7);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: -823
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(102L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=101 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Pipe pipe0 = new Pipe(516L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      HashingSink.sha1(realBufferedSink0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      pipe_PipeSink0.flush();
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)102;
      ByteString byteString0 = ByteString.encodeUtf8("inflater == null");
      byteString0.asByteBuffer();
      realBufferedSink0.buffer.indexOf(byteString0);
      buffer0.indexOf(byteString0);
      HashingSink.md5(buffer0);
      buffer0.flush();
      realBufferedSink0.buffer.indexOf((byte) (-127), 0L, (long) (byte)102);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read(byteArray0, 102, 192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=102 byteCount=192
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeAll(hashingSource0);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2037L));
      Buffer buffer2 = buffer0.emitCompleteSegments();
      buffer2.sha1();
      buffer1.snapshot();
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.seek(0L);
      assertEquals(8L, buffer0.size());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte) (-34));
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-44), (-79L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-79 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(4736L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      try { 
        buffer0.write((Source) hashingSource0, 4736L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(1823L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      buffer0.inputStream();
      // Undeclared exception!
      try { 
        buffer0.snapshot(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=101
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(2549L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeByte((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 2549L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 77;
      realBufferedSink0.writeShortLe(77);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = buffer0.writeTo(outputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      realBufferedSource0.buffer();
      long long0 = 255L;
      try { 
        realBufferedSource0.readAll(buffer1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, (-715L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -715
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1431655765;
      Buffer buffer1 = buffer0.writeShortLe(1431655765);
      Buffer buffer2 = buffer1.writeShort(1968526677);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe(2147483647L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.snapshot();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)122);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)122);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, (int) (byte)122, (int) (byte)35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      pipe0.sourceClosed = false;
      pipe0.sinkClosed = false;
      Buffer buffer1 = buffer0.buffer();
      buffer0.readAll(buffer1);
      int int0 = 1539;
      Buffer buffer2 = buffer1.writeIntLe(1539);
      long long0 = (-72057594037927936L);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)124, 0L, (-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=0 toIndex=-72057594037927936
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.writableSegment(1116);
      buffer0.sha1();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        buffer0.require(1381L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      hashingSource1.hash();
      String string0 = "J #cLwxCrJOp";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J #cLwxCrJOp");
      HashingSource.md5(hashingSource1);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      MockFile mockFile0 = new MockFile("pclhAw");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "Unexpected code point: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Unexpected code point: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Pipe pipe0 = new Pipe(1132L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 1132L, 1132L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-2708L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2708
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.size = (-1L);
      Segment segment0 = buffer0.head;
      SegmentPool.next = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      buffer1.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 1380L;
      try { 
        buffer0.readUtf8LineStrict(1380L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      inflaterSource0.close();
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.toString();
      buffer1.writeUtf8CodePoint((-2498));
      String string0 = "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      int int0 = (-83);
      // Undeclared exception!
      try { 
        Charset.forName("q");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readByteString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      byte[] byteArray0 = new byte[2];
      realBufferedSource0.readByteString();
      byte byte0 = (byte)9;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("");
      buffer_UnsafeCursor0.buffer.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readAll(buffer0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2580));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte) (-63);
      buffer1.read(byteArray0);
      // Undeclared exception!
      try { 
        Charset.forName("|egjqIJbN3/TV@xc$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |egjqIJbN3/TV@xc$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 48;
      Buffer buffer1 = buffer0.writeInt(48);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[4];
      inflater0.setInput(byteArray0);
      byteArray0[0] = (byte)16;
      byte byte0 = (byte)99;
      byteArray0[1] = (byte)99;
      byte byte1 = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)56;
      buffer1.read(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: unknown compression method
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource0.readByteString(9223372036854775807L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = 1692L;
      Pipe pipe0 = new Pipe(1692L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("7E_,S:xv", (-2800), 3861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2800
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) null, 9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      BufferedSink bufferedSink0 = buffer0.emit();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      long long0 = (-1352L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1352L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1352
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer_UnsafeCursor0.buffer, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      deflaterSink0.timeout();
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.sha1();
      buffer_UnsafeCursor0.close();
      buffer0.writeLongLe((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(10L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(516L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha1(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      HashingSink.sha1(realBufferedSink0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      pipe_PipeSink0.flush();
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)102;
      byteArray0[4] = (byte)102;
      ByteString byteString0 = ByteString.encodeUtf8("inflater == null");
      byteString0.asByteBuffer();
      realBufferedSink0.buffer.indexOf(byteString0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 0, (int) (byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=85
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      long long0 = 2L;
      buffer0.outputStream();
      buffer_UnsafeCursor0.buffer.size = 0L;
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("d`Tks<Bwh-290KB^");
      buffer0.indexOfElement(byteString0);
      realBufferedSink0.writeShort(0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.clear();
      realBufferedSink0.buffer.sha1();
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.end = 10;
      buffer_UnsafeCursor0.offset = (long) 10;
      long long0 = 16711680L;
      int int0 = 2;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = 100000000L;
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer1 = buffer0.writeLongLe(100000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      pipe0.sinkClosed = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.rangeEquals((long) (-1), byteString0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      Buffer buffer1 = buffer0.writeInt(95);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)92;
      buffer1.write(byteArray0);
      buffer1.readUtf8CodePoint();
      buffer1.readIntLe();
      buffer1.readAndWriteUnsafe();
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(6L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort(2045);
      ByteString byteString0 = buffer0.sha512();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      pipe0.sinkClosed = true;
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      buffer1.write(byteString1);
      buffer1.readUtf8CodePoint();
      buffer1.readLongLe();
      buffer1.readUtf8Line();
      buffer1.exhausted();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-887), 55);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream1);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) sequenceInputStream0, 175L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.segmentSizes();
      realBufferedSource0.timeout();
      buffer1.write((Source) buffer0, (-1380L));
      long long0 = 987L;
      try { 
        buffer1.skip(987L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      int int0 = (-550);
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-550));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }
}
