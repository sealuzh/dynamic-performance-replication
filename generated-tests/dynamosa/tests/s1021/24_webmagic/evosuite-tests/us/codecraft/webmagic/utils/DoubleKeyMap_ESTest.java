/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 08:04:13 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0);
      Map<Object, Integer> map1 = doubleKeyMap1.remove((Map<HashMap<Integer, Object>, String>) hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("", (Object) "", "");
      Map<Object, String> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, String> hashMap0 = new HashMap<HashMap<Integer, Object>, String>();
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap1 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap1);
      Integer integer0 = doubleKeyMap0.remove((Map<HashMap<Integer, Object>, String>) hashMap0, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap1.remove((Map<HashMap<Integer, Object>, String>) hashMap1, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<String, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<String, Object>, Object>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.remove((Map<HashMap<Integer, Object>, String>) null, hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Map<HashMap<Integer, Object>, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<HashMap<Integer, Object>, String>>();
      Map<Object, Map<HashMap<String, Object>, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, Integer>(map0, class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      HashMap<HashMap<Integer, Object>, String> hashMap0 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object>();
      Object object0 = doubleKeyMap1.put((Map<HashMap<Integer, Object>, String>) hashMap0, (HashMap<Object, Integer>) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.put("", object0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      Object object0 = doubleKeyMap0.put((Object) null, (Object) null, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<Integer, Object>, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<Integer, Object>, String>, Object>();
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap0);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(class0);
      Integer integer0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, String>();
      Map<Object, String> map0 = doubleKeyMap0.get((Map<HashMap<Integer, Object>, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Map<Object, Map<Map<HashMap<Integer, Object>, String>, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<HashMap<Integer, Object>, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<HashMap<Integer, Object>, String>, String>(map0, class0);
      HashMap<HashMap<Integer, Object>, String> hashMap0 = new HashMap<HashMap<Integer, Object>, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) class0, (Map<HashMap<Integer, Object>, String>) hashMap0, "us.codecraft.webmagic.utils.DoubleKeyMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>((Map<Object, Map<Integer, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<Integer, Object>, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Map<HashMap<Integer, Object>, String>, Object>();
      DoubleKeyMap<Object, HashMap<String, Map<HashMap<Integer, Object>, String>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Map<HashMap<Integer, Object>, String>>, Integer>();
      Map<HashMap<String, Map<HashMap<Integer, Object>, String>>, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put((Map<HashMap<Integer, Object>, String>) hashMap1, (Object) integer0, integer0);
      doubleKeyMap0.remove((Map<HashMap<Integer, Object>, String>) hashMap1, (Object) hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, HashMap<Object, Integer>, Object>();
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap1.put((Map<HashMap<Integer, Object>, String>) hashMap1, (Object) integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<HashMap<Integer, Object>, String>, Map<Object, Integer>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Integer, Object>, String>, Object, Integer>(hashMap0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove((Map<HashMap<Integer, Object>, String>) hashMap1, (Object) "");
      HashMap<Object, Map<Integer, Integer>> hashMap2 = new HashMap<Object, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap2, class0);
      Integer integer1 = doubleKeyMap1.get(object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>((Map<HashMap<Object, Object>, Map<Object, Object>>) null);
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap1, (Object) null);
      Object object0 = doubleKeyMap0.get(hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<HashMap<Integer, Object>, String>>, Map<HashMap<Integer, Object>, String>, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<HashMap<Integer, Object>, String>>, Map<HashMap<Integer, Object>, String>, Map<Integer, Integer>>();
      HashMap<Object, Map<HashMap<Integer, Object>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Integer, Object>, String>>();
      HashMap<HashMap<Integer, Object>, String> hashMap1 = new HashMap<HashMap<Integer, Object>, String>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(hashMap0, (Map<HashMap<Integer, Object>, String>) hashMap1, (Map<Integer, Integer>) hashMap2);
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(hashMap0, (Map<HashMap<Integer, Object>, String>) hashMap1);
      assertEquals(0, map0.size());
  }
}
