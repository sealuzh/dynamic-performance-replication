/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:35:38 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.get();
      List<int[]> list0 = rE2_0.findAllIndex("D;Q#a[mQ", 92);
      assertEquals(9, list0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      rE2_0.findIndex("");
      rE2_0.get();
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      List<int[]> list1 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      assertNull(list1);
      
      byte[] byteArray1 = new byte[0];
      List<int[]> list2 = rE2_0.findAllUTF8Index(byteArray1, (byte)76);
      assertNotNull(list2);
      
      String string0 = rE2_0.replaceAll("C]L{@4l}9zuo<^g", "1ZF<Z0vGZgv)");
      assertEquals("1ZF<Z0vGZgv)C1ZF<Z0vGZgv)]1ZF<Z0vGZgv)L1ZF<Z0vGZgv){1ZF<Z0vGZgv)@1ZF<Z0vGZgv)41ZF<Z0vGZgv)l1ZF<Z0vGZgv)}1ZF<Z0vGZgv)91ZF<Z0vGZgv)z1ZF<Z0vGZgv)u1ZF<Z0vGZgv)o1ZF<Z0vGZgv)<1ZF<Z0vGZgv)^1ZF<Z0vGZgv)g1ZF<Z0vGZgv)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 4);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("j00^hvU{K`Q9A}s|qd~");
      List<int[]> list0 = rE2_0.findAllIndex(".+*?()|[]{}^$", 3274);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("1#_he;`/");
      rE2_0.numberOfCapturingGroups();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)93);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      rE2_0.prefixUTF8 = byteArray0;
      byteArray0[1] = (byte)0;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.find("[^x00-x{10FFFF}]");
      int int0 = (-2153);
      rE2_0.findAllIndex("", (-2153));
      rE2_0.findAllIndex("", 2659);
      Machine machine0 = new Machine(rE2_0);
      machine0.init((byte)0);
      // Undeclared exception!
      try { 
        machine0.init((-1013));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("6T{~}]=N3=");
      rE2_0.find("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)95;
      rE2_0.replaceAll(".+*?()|[]{}^$", "*\"$hQ^'gnie7?c`$qAt");
      byteArray0[3] = (byte)1;
      rE2_0.prefixComplete = true;
      byteArray0[4] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, 1582);
      rE2_0.findSubmatchIndex("");
      RE2 rE2_1 = RE2.compilePOSIX("");
      rE2_1.longest = true;
      rE2_1.findSubmatchIndex("{SI3~>MBO");
      rE2_0.replaceFirst("6T{~}]=N3=", "");
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      rE2_1.findUTF8Submatch(byteArray0);
      rE2_1.findAllUTF8(byteArray0, 951);
      rE2_1.numberOfCapturingGroups();
      String[] stringArray0 = rE2_0.findSubmatch("EMPTY_WIDTH");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compileImpl("7ST0tfr", (-232), true);
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 845);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 16);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("qU&AAK^#");
      rE2_0.reset();
      rE2_0.match("qU&AAK^#");
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1274);
      intArray0[4] = 0;
      rE2_0.match("qU&AAK^#", 0, 0, 0, intArray0, 4);
      rE2_0.findSubmatchIndex("qU&AAK^#");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-1);
      rE2_0.findAllUTF8Submatch(byteArray0, 8);
      rE2_0.find("(WoK6dhj`}dF]P");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-39);
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      int[] intArray1 = rE2_0.findUTF8Index(byteArray1);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("`7B60!G}HZGD&");
      // Undeclared exception!
      try { 
        rE2_0.match("`7B60!G}HZGD&", (-577), (-577), (-577), (int[]) null, (-577));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[6];
      rE2_0.findUTF8Submatch(byteArray0);
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      String string0 = RE2.quoteMeta("'");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("|%+sN>(*q", (-1), true);
      rE2_0.find("a8TPop?F8$6CL");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)0;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byteArray0[2] = (byte)5;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.longest = true;
      int[] intArray0 = rE2_0.findSubmatchIndex("|%+sN>(*q");
      assertArrayEquals(new int[] {0, 9}, intArray0);
      assertNotNull(intArray0);
      
      byte[] byteArray1 = new byte[0];
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      String string0 = RE2.quoteMeta("a8TPop?F8$6CL");
      assertEquals("a8TPop\\?F8\\$6CL", string0);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray1, (-2026));
      assertNull(list0);
      
      List<int[]> list1 = rE2_0.findAllSubmatchIndex("|%+sN>(*q", (-1454));
      assertNotNull(list1);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.replaceAll("", "");
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("<:#AQxujh6:evFl2");
      rE2_0.findAll("<:#AQxujh6:evFl2", 45);
      RE2.match("5dBq'0]YVTMN ^&5", "5dBq'0]YVTMN ^&5");
      rE2_0.findSubmatch("5dBq'0]YVTMN ^&5");
      rE2_0.numberOfCapturingGroups();
      try { 
        RE2.match(".+*?()|[]{}^$", "<:#AQxujh6:evFl2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String> list0 = rE2_0.findAll("", 1076);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[2];
      intArray0[0] = 2562;
      intArray0[1] = 2562;
      RE2.match("com.google.re2j.RE2", "com.google.re2j.RE2");
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 2562, intArray0, 2562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      rE2_0.findUTF8(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.match("", 18, 18, (-1919), (int[]) null, 128);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.Parser");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      rE2_0.find("n!!F<");
      rE2_0.prefix = "u\"ZpId\"JWWh";
      int[] intArray0 = new int[2];
      intArray0[0] = 44;
      intArray0[1] = (-791);
      rE2_0.match("can't happen", 130, 44, (-791), intArray0, (-127));
      rE2_0.replaceFirst("n!!F<", "-t.]]");
      byte[] byteArray0 = new byte[1];
      rE2_0.longest = false;
      byteArray0[0] = (byte) (-126);
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.toString();
      rE2_0.findAllUTF8(byteArray0, (-791));
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-126));
      rE2_0.match("");
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findUTF8Index(byteArray0);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findAllSubmatch("", 0);
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "j<{";
      RE2 rE2_0 = RE2.compilePOSIX("j<{");
      RE2.ReplaceFunc rE2_ReplaceFunc0 = null;
      rE2_0.findIndex("j<{");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)66;
      rE2_0.findAllUTF8Index(byteArray0, 265);
      rE2_0.findAllSubmatch("%]d`J0[c^.", 535);
      // Undeclared exception!
      try { 
        rE2_0.find((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-3244));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.get();
      rE2_0.findAllSubmatchIndex("", 92);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-148));
      assertEquals(4, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.find("");
      byte[] byteArray0 = new byte[0];
      rE2_0.prefixUTF8 = byteArray0;
      boolean boolean0 = RE2.match("WZHe", "");
      boolean boolean1 = rE2_0.match("WZHe", 0, 0, 0, (int[]) null, 127278);
      assertFalse(boolean1 == boolean0);
      
      String string0 = rE2_0.replaceAll(".+*?()|[]{}^$", "");
      assertEquals(".+*?()|[]{}^$", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("z K|");
      rE2_0.replaceAll("z K|", "UTF-8");
      rE2_0.find("Lt");
      rE2_0.replaceAll("Batak", "com.google.re2j.RE2");
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch((byte[]) null, (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findIndex("");
      rE2_0.get();
      byte[] byteArray0 = new byte[5];
      RE2 rE2_1 = RE2.compile(";S!/cEFQH|");
      rE2_1.findAllSubmatch(";S!/cEFQH|", (-2775));
      rE2_1.replaceFirst("", ";S!/cEFQH|");
      rE2_1.findAllSubmatchIndex("", (-2775));
      rE2_1.findSubmatch("EI.SN-B<8;0XR?d<yN");
      rE2_1.get();
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-2681));
      rE2_0.findIndex("");
      rE2_1.findAllUTF8Submatch(byteArray0, 649);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }
}
