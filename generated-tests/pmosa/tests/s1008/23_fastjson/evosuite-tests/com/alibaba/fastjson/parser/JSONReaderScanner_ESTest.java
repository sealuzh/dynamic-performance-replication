/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:16:25 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", (-1014));
      char[] charArray0 = new char[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1014));
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" e)e>,ha%.vzg@*]", (-3317));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) " e)e>,ha%.vzg@*]";
      objectArray0[2] = (Object) "aE]";
      objectArray0[3] = (Object) "aE]";
      objectArray0[4] = (Object) "aE]";
      objectArray0[5] = (Object) "aE]";
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '-';
      charArray0[2] = 'k';
      charArray0[3] = '*';
      charArray0[4] = '1';
      charArray0[5] = 'Y';
      charArray0[6] = '@';
      charArray0[7] = '`';
      charArray0[8] = '\'';
      JSONLexerBase.readString(charArray0, 0);
      objectArray0[6] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("aE]", objectArray0);
      jSONReaderScanner0.putChar('g');
      char[] charArray1 = new char[2];
      charArray1[0] = 'm';
      charArray1[1] = '4';
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.bytesValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("![U_[F.3757T?z%{[KC");
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.close();
      char char0 = jSONReaderScanner0.charAt(87);
      assertEquals('\u001A', char0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xwLAR1*_ET{");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      assertEquals('u', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toJSON error");
      char[] charArray0 = new char[3];
      char char0 = 'x';
      charArray0[0] = 'x';
      char char1 = '$';
      charArray0[1] = '$';
      char char2 = '|';
      charArray0[2] = '|';
      jSONReaderScanner0.matchStat = 0;
      JSONLexerBase.readString(charArray0, 0);
      char char3 = '8';
      char[] charArray1 = new char[4];
      charArray1[0] = '8';
      char char4 = '5';
      charArray1[1] = '5';
      charArray1[2] = '8';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", (-1014));
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      char char0 = jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EG");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'E';
      charArray0[2] = 'x';
      charArray0[3] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-272), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal stat, textLength is zero", 999999999);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(999999999, 999999999);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("![U_[F.3757T?z%{[KC", (-4427));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(26, (-6317));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -6317
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '|';
      charArray0[2] = 'E';
      charArray0[3] = 'Z';
      charArray0[4] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3104, 794);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-1911), 3104, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|;/,B S~b");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'U';
      charArray0[2] = '^';
      charArray0[3] = '0';
      charArray0[4] = 'Y';
      charArray0[5] = 'Q';
      charArray0[6] = 'M';
      charArray0[7] = 'W';
      charArray0[8] = 'V';
      char[] charArray1 = new char[7];
      charArray1[0] = 'U';
      charArray1[1] = '^';
      charArray1[2] = '^';
      charArray1[3] = 'Y';
      charArray1[4] = 'V';
      charArray1[5] = 'W';
      charArray1[6] = 'V';
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.indexOf('$', 17);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NonStringKeyAsString", 14);
      jSONReaderScanner0.putChar('f');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 2753;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2753);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      PushbackReader pushbackReader0 = new PushbackReader(inputStreamReader0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pushbackReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("illegal stat, textLength is zero");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'y';
      charArray0[2] = '2';
      int int0 = 111;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 111, 111);
      Class<String> class0 = String.class;
      jSONReaderScanner0.features = 111;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'Y';
      charArray0[2] = '>';
      charArray0[3] = '7';
      charArray0[4] = '0';
      charArray0[5] = '$';
      charArray0[6] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(83, (char[]) null, 83, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-4427);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("![U_[F.3757T?z%{[KC", (-4427));
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.putChar('f');
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int1 = (-4429);
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      int int2 = (-1036);
      jSONReaderScanner0.setToken((-1036));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 2307);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.putChar('f');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanString('f');
      jSONReaderScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 34, 26);
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner0.isEOF();
      int int0 = 16384;
      jSONReaderScanner1.setToken(16384);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("&0<cS/|G-qtKz");
      jSONReaderScanner0.stringVal();
      assertEquals('&', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.next();
      jSONReaderScanner0.charAt(57344);
      assertEquals('0', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 105, 105);
      jSONReaderScanner0.bp = 105;
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '=';
      charArray0[2] = '0';
      charArray0[3] = '=';
      charArray0[4] = 'V';
      charArray0[5] = 'O';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87, (-95));
      assertEquals('', jSONReaderScanner0.getCurrent());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.charAt(87);
      char char0 = jSONReaderScanner0.charAt(205);
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '=';
      charArray0[2] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1, 116);
      jSONReaderScanner0.np = 26;
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.next();
      jSONReaderScanner0.indexOf('N', 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1, charArray0, 1, (-1665));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      jSONReaderScanner0.indexOf('w', 3);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 52429);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(52429, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1053), 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NonStringKeyAsString");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = 0;
      char[] charArray1 = jSONReaderScanner0.sub_chars(26, 0);
      jSONReaderScanner0.pos = 70;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArray1;
      jSONReaderScanner0.lexError("4=wF3", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-1038), 0, 7, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*EX|1IDAXTkL-+`9&", 3581);
      jSONReaderScanner0.bp = 3581;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NonStriVgKeyAsString", (-1014));
      jSONReaderScanner0.putChar('q');
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      jSONReaderScanner0.locale = null;
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[1] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'q';
      charArray0[8] = 'q';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 304, 0);
      jSONReaderScanner1.isRef();
      jSONReaderScanner1.scanFieldString(charArray0);
      jSONReaderScanner1.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanFieldInt(charArray0);
      jSONReaderScanner1.close();
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Dp&sv>|,mE(}cv=8");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("L{<Y");
      jSONReaderScanner1.putChar('l');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.putChar(' ');
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      jSONReaderScanner0.isBlankInput();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FO<abj5");
      jSONReaderScanner0.putChar(',');
      String string0 = jSONReaderScanner0.numberString();
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'u';
      charArray0[2] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportNonPublicField", 1);
      jSONReaderScanner0.putChar('J');
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("", string0);
      assertEquals('S', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N-S~3X\"M=K%");
      SymbolTable symbolTable0 = new SymbolTable(65536);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u001A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 105, 105);
      jSONReaderScanner0.bp = 105;
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u001E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B$w");
      jSONReaderScanner0.putChar('\u001E');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.indexOf('\u001E', 3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      jSONReaderScanner0.hasSpecial = true;
      charArray0[1] = '8';
      charArray0[2] = 'D';
      jSONReaderScanner0.np = 1;
      Class<Feature> class0 = Feature.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mJ31P7gQV_LN|/G;");
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[3] = 'g';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.charAt(939);
      jSONReaderScanner0.next();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isBlankInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }
}
