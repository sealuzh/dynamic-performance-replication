/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:11:14 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(2089, 2089);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][7];
      CharClass charClass1 = charClass0.appendFoldedRange((-5236), 504);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      charClass0.appendLiteral(1531, 1531);
      int[] intArray0 = charClass0.toArray();
      charClass1.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][5];
      charClass0.appendTable(intArray0);
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(93, 93);
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 93);
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][7];
      charClass0.appendTableWithSign(intArray0, 3985);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendClassWithSign(intArray0, (-452));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(1, 1);
      charClass1.appendClassWithSign(intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendClass(intArray0);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(1335, 1335);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral((-803), (-803));
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(749, 749);
      charClass0.negateClass();
      int[][] intArray0 = new int[5][9];
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.appendFoldedRange(66652, 66652);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(1, 1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[6][7];
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-1865));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(4, 1114111);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      charClass0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(86, 86);
      charClass0.toString();
      charClass0.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      charClass1.toString();
      charClass1.negateClass();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(65, 65);
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.toArray();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendRange(2235, (-514));
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 205);
      charClass2.negateClass();
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendLiteral(3532, 3532);
      charClass1.cleanClass();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(11388, 11388);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 11388;
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 279;
      intArray0[1] = 279;
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      intArray0[1] = (-514);
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass0.cleanClass();
      charClass1.appendFoldedClass(intArray0);
      CharClass charClass2 = new CharClass();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][9];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass0.negateClass();
      charClass1.toArray();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 279;
      intArray0[1] = 11388;
      intArray0[2] = 279;
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      charClass0.appendLiteral(279, 0);
      charClass0.appendLiteral(93, 2);
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharGroup charGroup0 = null;
      CharClass charClass1 = charClass0.appendFoldedRange(93, 133448);
      boolean boolean0 = true;
      charClass1.appendGroup(charGroup0, boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      intArray0[1] = (-514);
      intArray0[3] = 2235;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendRange(52625, (-514));
      charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass2.toArray();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[3];
      intArray1[1] = (-40);
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = (-40);
      intArray2[4] = 1;
      intArray2[6] = (-40);
      intArray2[8] = 6754;
      int[] intArray3 = new int[3];
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 93;
      intArray0[1] = 1534;
      intArray0[2] = 1;
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      charClass0.appendTableWithSign(intArray1, (-9924));
      intArray0[3] = 456;
      charClass0.appendClassWithSign(intArray0, 93);
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1114111, 1114111);
      CharClass charClass2 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 1114111;
      intArray0[1] = 1114111;
      intArray0[2] = 66807;
      intArray0[3] = 1114111;
      CharClass charClass3 = charClass1.appendClass(intArray0);
      charClass1.appendFoldedRange(1114111, (-4338));
      charClass3.appendLiteral((-2852), 1114111);
      charClass1.appendLiteral(4184, 1114111);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass5 = charClass4.appendNegatedTable(intArray1);
      charClass3.appendNegatedTable(intArray1);
      // Undeclared exception!
      try { 
        charClass5.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
