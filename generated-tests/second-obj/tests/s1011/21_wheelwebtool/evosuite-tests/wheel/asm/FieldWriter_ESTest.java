/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:59:21 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "fxF1%<,Si:H8:", "wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "fxF1%<,Si:H8:");
      Attribute attribute0 = new Attribute("fxF1%<,Si:H8:");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "", "", "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 8, "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "fxF1%<,Si:H8:", "wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "fxF1%<,Si:H8:");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2037);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1422, "H6", "H6", "H6", "H6");
      Attribute attribute0 = new Attribute("v'{");
      fieldWriter0.visitAttribute(attribute0);
      Attribute attribute1 = new Attribute("v'{");
      fieldWriter0.visitAttribute(attribute1);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "fxF1%<,Si:H8:", "fxF1%<,Si:H8:", "fxF1%<,Si:H8:", "fxF1%<,Si:H8:");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4015));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "fxF1%<,Si:H8:", "fxF1%<,Si:H8:", "fxF1%<,Si:H8:", "fxF1%<,Si:H8:");
      fieldWriter0.visitAnnotation("6;^zxI", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putByte((byte)0);
      byteVector0.putUTF8("");
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("1XD'lH*MMiR", true);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      int int0 = Frame.BYTE;
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      ClassWriter classWriter1 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 794, "@hvJ&lBs", "", "@hvJ&lBs", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2217));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2178, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(1, 2178);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("9Y", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fieldWriter0.visitEnd();
      fieldWriter0.visitAnnotation("ConstantValue", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      byte[] byteArray0 = new byte[4];
      classWriter0.typeTable = null;
      byteArray0[1] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      classWriter0.version = (int) (byte) (-41);
      int int0 = Frame.BASE;
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((byte) (-92));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-82));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-82), "", "RuntimeInvisibleAnnotations", "", "RuntimeInvisibleAnnotations");
      fieldWriter0.getSize();
      classWriter0.newLong((-82));
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = byteVector0.putUTF8("gX11^-> XP}YcZZGd;9");
      fieldWriter0.put(byteVector1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wheel.asm.MethodWriter";
      stringArray0[1] = "Q4/Z`^W`";
      stringArray0[2] = "Sdk:=Y;b{?<q ";
      classWriter0.visit(49, (-6336), "wheel.asm.MethodWriter", "Sdk:=Y;b{?<q ", "RuntimeInvisibleAnnotations", stringArray0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 49, "RuntimeInvisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, "gX11^-> XP}YcZZGd;9");
      fieldWriter1.getSize();
      ByteVector byteVector2 = byteVector0.putUTF8("RuntimeVisibleAnnotations");
      fieldWriter0.put(byteVector1);
      classWriter0.version = 16;
      fieldWriter1.visitAnnotation("RuntimeInvisibleAnnotations", false);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector2);
      assertFalse(fieldWriter0.equals((Object)fieldWriter1));
  }
}
