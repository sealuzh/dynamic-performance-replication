/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 14:01:08 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeHex("");
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.write(buffer0);
      realBufferedSink0.buffer.indexOf(byteString1);
      assertFalse(buffer0.exhausted());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      buffer0.copyTo((OutputStream) byteArrayOutputStream0, 3L, 3L);
      assertEquals("B\uFFFD\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.writeDecimalLong((-1));
      buffer0.writeLongLe((-1));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Pipe pipe0 = new Pipe(317L);
      Buffer buffer3 = pipe0.buffer;
      long long0 = buffer2.read(buffer3, 2147483647L);
      assertFalse(buffer3.exhausted());
      assertEquals(25L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      buffer_UnsafeCursor0.buffer.writeDecimalLong(19L);
      buffer0.readUnsafe();
      Buffer buffer1 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeUtf8("\n not found: limit=");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      ByteString byteString0 = ByteString.encodeUtf8("\n not found: limit=");
      realBufferedSource0.indexOfElement(byteString0);
      buffer2.writeLongLe(1153L);
      ByteString byteString1 = ByteString.encodeUtf8("\n not found: limit=");
      buffer1.indexOfElement(byteString1, 843L);
      ByteString byteString2 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.indexOf(byteString1, 19L);
      // Undeclared exception!
      try { 
        buffer1.getByte(238L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=238 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeHex("");
      byteString0.write(buffer0);
      buffer0.indexOf(byteString0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) bufferedOutputStream0, 8192L, 3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=8192 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer buffer2 = buffer1.writeUtf8("");
      buffer2.readByte();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-3809L));
      buffer1.md5();
      buffer0.readIntLe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(9223372036691091455L);
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-1));
      buffer3.readLong();
      buffer0.writeLongLe((-1L));
      assertEquals(35L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.writeDecimalLong((-1));
      buffer1.md5();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(148032L);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      buffer_UnsafeCursor0.resizeBuffer(538L);
      String string0 = "sink == null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sink == null");
      buffer_UnsafeCursor0.buffer.readShortLe();
      buffer1.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong((-206));
      Pipe pipe0 = new Pipe(1095216660480L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("[hex=", charset0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.readInt();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Charset charset1 = Charset.defaultCharset();
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("/23A-F!4uG8r$xrC3", charset1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer2.sha1();
      buffer0.writeUtf8("out == null");
      ((RealBufferedSink) bufferedSink0).close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer;
      Charset.defaultCharset();
      realBufferedSink1.buffer.writeString("/23A-F!4uG8r$xrC3", charset1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[9] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray0[14] = (byte) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      byteArray1[3] = (byte)0;
      Buffer buffer1 = buffer0.writeIntLe((byte)0);
      ByteString byteString0 = buffer1.md5();
      buffer0.writeIntLe((byte)0);
      ByteString byteString1 = new ByteString(byteArray1);
      buffer1.indexOf(byteString0, (long) (byte)0);
      buffer0.writeDecimalLong((byte) (-1));
      ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      Charset.isSupported("okio.Base64");
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1908874352));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)40;
      ByteBuffer.wrap(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.completeSegmentByteCount();
      try { 
        buffer1.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=90\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer;
      Pipe pipe0 = new Pipe(4278190080L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer3.writeInt((-4559));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer4.writeUtf8CodePoint(65536);
      buffer3.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      InputStream inputStream0 = null;
      try {
        inputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(344L);
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort(10);
      buffer1.readUtf8Line();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.emit();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0, (-2665L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Segment segment0 = buffer0.head;
      ByteString byteString0 = buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteString0.write(buffer_UnsafeCursor0.buffer);
      byteStringArray0[0] = byteString0;
      byteString0.asByteBuffer();
      byteString0.sha1();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]_,^U~)TuYE/O4");
      buffer_UnsafeCursor0.seek((-1));
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.buffer.inputStream();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      realBufferedSink0.buffer.readUtf8();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAll((Sink) null);
      Buffer buffer1 = buffer0.writeShort((-656));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.writeUtf8CodePoint(55296);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-43);
      ByteBuffer.wrap(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.completeSegmentByteCount();
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=fd703f\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 65;
      Buffer buffer1 = buffer0.writeShort(65);
      buffer0.readByte();
      ByteString byteString0 = buffer1.sha1();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = buffer1.md5();
      Buffer buffer2 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      ByteString byteString2 = new ByteString(byteArray0);
      buffer0.indexOf(byteString1, (long) (byte)0);
      buffer0.writeDecimalLong(9223372036854775807L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(192);
      Buffer buffer1 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer1 = new Integer(10);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer0.writeLongLe(10);
      Buffer buffer3 = buffer1.writeShort(1);
      buffer1.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.timeout();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource1.readUtf8Line();
      Buffer buffer4 = buffer3.clone();
      buffer3.indexOf((byte)9);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      realBufferedSource2.readByteString();
      buffer3.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource1.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer3.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Segment segment0 = new Segment();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1L);
      HashingSource.sha1(buffer0);
      realBufferedSink0.buffer.indexOf((byte) (-95), (long) (byte)0, 1L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      realBufferedSink0.buffer.completeSegmentByteCount();
      long long0 = (-1794L);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1794L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1794
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray0[14] = (byte) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      byteArray1[3] = (byte)0;
      Integer integer0 = new Integer((-884));
      Buffer buffer1 = new Buffer();
      Integer integer1 = new Integer((byte)0);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer0.writeLongLe((byte) (-1));
      Buffer buffer3 = buffer2.writeShort((-1618));
      buffer0.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      realBufferedSource0.readUtf8Line();
      buffer2.clone();
      ByteString byteString1 = buffer3.snapshot((int) (byte)0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = buffer1.writeString("", charset0);
      Buffer buffer3 = buffer2.writeDecimalLong(16711651L);
      Pipe pipe0 = new Pipe(4213129205L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer4 = pipe0.buffer;
      Buffer buffer5 = new Buffer();
      Segment segment0 = new Segment();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      buffer1.head = segment0;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink1.writeLong((-1));
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(buffer5);
      BufferedSink bufferedSink0 = realBufferedSink4.writeString("", charset0);
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(bufferedSink0);
      Buffer buffer6 = realBufferedSink5.buffer;
      short short0 = buffer3.readShort();
      assertEquals((short)0, short0);
      
      Buffer buffer7 = realBufferedSink4.buffer.writeHexadecimalUnsignedLong(32L);
      assertEquals(2L, buffer7.size());
      
      Buffer buffer8 = realBufferedSink1.buffer.writeShortLe(965);
      assertEquals(0L, buffer8.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      Buffer buffer1 = buffer0.writeUtf8("u8*>nWzs|;)b9'i[");
      Buffer buffer2 = buffer1.writeIntLe((-1457));
      buffer2.md5();
      Buffer buffer3 = buffer1.writeIntLe((-1620));
      ByteString byteString0 = new ByteString(byteArray0);
      buffer3.indexOf(byteString0, (long) 15);
      buffer1.writeDecimalLong(15);
      // Undeclared exception!
      try { 
        buffer1.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=26 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readUtf8();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S|sD]9L ");
      buffer0.rangeEquals(65536L, byteString0);
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeInt((-1431655764));
      buffer1.writeUtf8("`G.}q-x?-kY!I");
      buffer1.selectPrefix(options0);
      buffer0.indexOf((byte)101, 10L, 518L);
      assertEquals(17L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer3 = new Buffer();
      Integer integer1 = new Integer((-269));
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.writeLongLe((-398L));
      Buffer buffer4 = buffer0.writeShort(65533);
      buffer4.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.timeout();
      buffer_UnsafeCursor0.buffer.writeLong(1444L);
      assertEquals(65541L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer3 = new Buffer();
      Integer integer1 = new Integer((-269));
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.writeLongLe((-398L));
      buffer0.writeShort(65533);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer4 = realBufferedSink0.buffer();
      Buffer buffer5 = buffer4.readFrom((InputStream) sequenceInputStream0, 0L);
      Buffer buffer6 = buffer5.buffer();
      // Undeclared exception!
      try { 
        buffer6.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray0[14] = (byte) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      byteArray1[3] = (byte)0;
      Integer integer0 = new Integer((-884));
      Buffer buffer1 = new Buffer();
      Integer integer1 = new Integer((byte)0);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = buffer0.writeLongLe((byte) (-1));
      Buffer buffer3 = buffer2.writeShort((-1618));
      buffer0.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      assertEquals(8L, buffer0.size());
      
      realBufferedSource0.readUtf8Line();
      buffer2.clone();
      realBufferedSource0.buffer.indexOf((byte)57);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = buffer3.rangeEquals((long) (byte)0, byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeString("5a+0]Io@", charset0);
      buffer1.readHexadecimalUnsignedLong();
      buffer1.sha1();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2b
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      buffer1.readFrom((InputStream) bufferedInputStream0);
      Charset.defaultCharset();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeString("EV+$,vs<E~]YqejLbh", charset0);
      buffer1.writeDecimalLong(1000000000000L);
      buffer2.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(31L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer3 = new Buffer();
      Integer integer1 = new Integer((-269));
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.writeLongLe((-398L));
      Buffer buffer4 = buffer0.writeShort(65533);
      buffer4.readString(charset0);
      // Undeclared exception!
      try { 
        buffer4.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer3 = new Buffer();
      Integer integer1 = new Integer((-269));
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.writeLongLe((-398L));
      Buffer buffer4 = buffer0.writeShort(65533);
      buffer4.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.timeout();
      buffer0.clone();
      assertEquals(65533L, buffer0.size());
      
      realBufferedSource0.readByteString();
      realBufferedSource0.buffer.rangeEquals(2896L, byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      buffer0.readUtf8(0L);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer3 = buffer1.writeLong(0L);
      assertEquals(0L, buffer3.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = buffer1.writeString("", charset0);
      buffer2.writeDecimalLong(16711651L);
      Pipe pipe0 = new Pipe(4213129215L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer3 = pipe0.buffer;
      Buffer buffer4 = new Buffer();
      Segment segment0 = new Segment();
      realBufferedSink0.emitCompleteSegments();
      buffer1.head = segment0;
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString.encodeString("", charset0);
      ByteString byteString0 = ByteString.encodeUtf8("delegate == null");
      byteStringArray0[1] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteStringArray0[2] = byteString1;
      Options.of(byteStringArray0);
      buffer4.readString(charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.buffer();
      buffer2.readLong();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-71);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.selectPrefix(options0);
      buffer1.readUtf8CodePoint();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        buffer1.readFrom((InputStream) sequenceInputStream0, (long) (byte)15);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray0[14] = (byte) (-1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/performance/Dataset/gordon_scripts/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "okio.Buffer$2");
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.rangeEquals(2147483647L, byteString0);
      ByteString[] byteStringArray0 = new ByteString[4];
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeInt((-1431655764));
      buffer1.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-1), (-777L), (-3731L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=4 fromIndex=-777 toIndex=-3731
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.md5();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer_UnsafeCursor0.buffer, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer_UnsafeCursor0.buffer.rangeEquals((-245L), byteString1);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString2;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      LinkedList<BufferedInputStream> linkedList0 = new LinkedList<BufferedInputStream>();
      options0.removeAll(linkedList0);
      Buffer buffer1 = buffer0.writeInt(0);
      buffer1.selectPrefix(options0);
      buffer_UnsafeCursor0.buffer.indexOf((byte) (-27), 15L, 15L);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeInt((-1));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 2048;
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2048);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      buffer_UnsafeCursor0.start = 2048;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer1.inputStream();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(2048);
      buffer2.readAll(bufferedSink0);
      Buffer buffer3 = realBufferedSink0.buffer();
      try { 
        buffer3.readUtf8LineStrict(1000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=15 content=0000000000000800ffffffffe0a080\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readUtf8();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S|sD]9L ");
      buffer0.rangeEquals(65536L, byteString0);
      Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeInt((-1431655764));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      boolean boolean0 = buffer1.exhausted();
      assertEquals(4L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = 15L;
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(2639L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = buffer2.writeString("__ Rf'w]D4%}", charset0);
      buffer3.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.sha1();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Charset.defaultCharset();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer1 = new Buffer();
      int int1 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-895L));
      buffer1.buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.readDecimalLong();
      long long0 = buffer0.indexOf((byte)65);
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(40);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeLongLe(2147483647L);
      ByteString byteString0 = ByteString.encodeString("~MVA7:]^qIX)|)`=^(7", charset0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString2 = ByteString.EMPTY;
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString3 = ByteString.of(byteBuffer0);
      buffer1.readByte();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer2 = buffer1.writeTo(outputStream0);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString3;
      realBufferedSink0.writeShortLe(40);
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer2.selectPrefix(options0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)40;
      int int0 = realBufferedSink0.buffer.read(byteArray0);
      assertTrue(buffer1.exhausted());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      Buffer buffer1 = buffer0.clone();
      long long0 = 823L;
      // Undeclared exception!
      try { 
        buffer1.readFully((Buffer) null, (-922337203685477580L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65533);
      Integer integer0 = new Integer((-1));
      Buffer buffer3 = buffer1.writeInt((-269));
      Integer integer1 = new Integer((-269));
      ByteString byteString0 = ByteString.EMPTY;
      buffer2.writeLongLe((-398L));
      Buffer buffer4 = buffer0.writeShort(65533);
      buffer4.readShort();
      // Undeclared exception!
      try { 
        buffer3.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeShort(20);
      buffer0.readByte();
      ByteString byteString0 = buffer1.sha1();
      buffer0.outputStream();
      HashingSource.md5(buffer0);
      HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer buffer3 = buffer2.writeShort((byte)0);
      buffer2.readUtf8CodePoint();
      buffer1.emit();
      try { 
        buffer3.readUtf8LineStrict(3779L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2663);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.emit();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)58;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, 2L);
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (long) (byte)58);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset.defaultCharset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.copyTo((OutputStream) pipedOutputStream0);
      buffer0.writeDecimalLong((-922337203685477580L));
      buffer0.readUnsafe();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("okio.Buffer$UnsafeCursor", charset0);
      long long0 = 4213129215L;
      buffer0.writeDecimalLong((-1));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000000000000000L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~5tp");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.readIntLe();
      Buffer buffer1 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      try { 
        buffer1.write((Source) gzipSource0, 2019L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00003030 != expected 0x00001f8b
         //
         verifyException("okio.GzipSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = buffer1.writeString("", charset0);
      buffer2.writeDecimalLong(16711651L);
      Pipe pipe0 = new Pipe(4213129215L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer3 = pipe0.buffer;
      Buffer buffer4 = new Buffer();
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer5.readUtf8CodePoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeInt((-1));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2048);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer.read(byteArray0);
      buffer2.readUtf8();
      buffer1.writeUtf8("\uFFFD\uFFFD\uFFFD\uFFFD\u0800");
      assertEquals(22L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      buffer1.readIntLe();
      Buffer buffer3 = new Buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-46);
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      buffer1.readDecimalLong();
      buffer2.indexOf((byte) (-84));
      // Undeclared exception!
      try { 
        buffer0.getByte((byte) (-84));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-84 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray0[14] = (byte) (-1);
      byteArray1[3] = (byte)0;
      buffer0.read(byteArray1, 0, (int) (byte)0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TEZP'SwQKG#");
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockPrintStream0, (long) (byte)0);
      buffer1.writeDecimalLong(10000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("TEZP'SwQKG#", charset0);
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.resizeBuffer(3846);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      buffer1.rangeEquals(60L, byteString0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1L);
      HashingSource.sha1(buffer0);
      buffer0.indexOf((byte)0, (long) (byte)0, 417L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      realBufferedSink0.flush();
      buffer0.readDecimalLong();
      buffer0.indexOf((byte)88);
      realBufferedSink0.buffer.outputStream();
      try { 
        buffer0.write((Source) buffer1, 3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray0[14] = (byte) (-1);
      byteArray1[3] = (byte)0;
      buffer0.read(byteArray1, 0, (int) (byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("G W5fx8s");
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(65);
      buffer0.readByte();
      ByteString byteString0 = buffer1.sha1();
      buffer0.outputStream();
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      HashingSource.hmacSha256(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer1.indexOfElement(byteString1, (long) (byte)0);
      HashingSource hashingSource1 = HashingSource.md5(buffer1);
      ByteString byteString2 = hashingSource1.hash();
      buffer1.hmacSha1(byteString2);
      // Undeclared exception!
      try { 
        buffer1.snapshot(1158);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=1158
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1343);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = buffer1.writeString("", charset0);
      Buffer buffer3 = buffer2.writeDecimalLong(16711680L);
      buffer3.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(4213129215L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.buffer.writeDecimalLong((-4372L));
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      buffer5.readUtf8CodePoint();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeShort(4782);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer3.writeTo(outputStream0);
      Buffer buffer6 = new Buffer();
      buffer2.writeLongLe((-1));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(outputStream0, false, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Buffer buffer1 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeUtf8CodePoint(57343);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1512L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1512
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(100005L);
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      assertFalse(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.buffer.toString();
      realBufferedSource0.buffer.completeSegmentByteCount();
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe(10000000000000L);
      buffer2.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      realBufferedSource0.buffer.readFrom((InputStream) sequenceInputStream0, (long) 0);
      realBufferedSink0.buffer.indexOf((byte)3);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      ByteString byteString0 = ByteString.EMPTY;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe();
      Buffer buffer2 = buffer1.writeLongLe((-1));
      buffer0.write((Source) buffer2, (-2279L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      buffer_UnsafeCursor1.buffer.readByte();
      Buffer buffer3 = new Buffer();
      byte byte0 = buffer2.readByte();
      assertEquals(7L, buffer2.size());
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("5f}6pM!&Fq", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=10 content=35667d36704d21264671\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(58);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(3438L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.toString();
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.completeSegmentByteCount();
      buffer3.writeLongLe(3438L);
      buffer3.write((Source) realBufferedSource0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer0.rangeEquals((-3719L), byteString0);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[8] = byteString0;
      Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeInt((byte)0);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString("s*gE~0>v>#lh", (int) (byte)0, (int) (byte) (-1), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(532);
      buffer1.readByte();
      buffer0.sha1();
      buffer1.outputStream();
      buffer0.readUtf8CodePoint();
      String string0 = "";
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong((-230L));
      HashingSource.sha1(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer2.readUtf8CodePoint();
      buffer2.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(1L);
      HashingSource.sha1(buffer0);
      buffer0.indexOf((byte)0, (long) (byte)0, 417L);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer1.completeSegmentByteCount();
      realBufferedSink0.buffer.snapshot();
      assertFalse(buffer0.equals((Object)buffer1));
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[13] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.getByte((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeDecimalLong(20L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("okio.Buffer$UnsafeCursor", charset0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(4213129215L);
      buffer1.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        buffer_UnsafeCursor0.buffer.readFrom((InputStream) sequenceInputStream0, 8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAll((Sink) null);
      Buffer buffer1 = buffer0.writeShort((-656));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(55296);
      ByteString[] byteStringArray0 = new ByteString[1];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-43);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString(charset0);
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Segment segment0 = new Segment();
      ByteString byteString0 = buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteString0.asByteBuffer();
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      buffer_UnsafeCursor0.seek((-1));
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("Unexpected hex digit: ", charset0);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("No deadline", charset0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-29);
      Buffer buffer2 = buffer1.write(byteArray0);
      buffer2.getByte(8L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      assertEquals(16L, buffer0.size());
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, 1114, 1114, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(122);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      buffer1.toString();
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe(71776119061217280L);
      String string0 = "US-ASCII";
      Charset charset0 = Charset.forName("US-ASCII");
      // Undeclared exception!
      try { 
        buffer2.readString((long) 122, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=122
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      buffer0.writeUtf8CodePoint(754);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.emit();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)78;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOf(byteString0, (long) 16711680);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(344L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(10);
      buffer1.readUtf8CodePoint();
      buffer0.emit();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n not found: limit=");
      buffer0.readUtf8LineStrict((long) 0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(122);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      buffer1.toString();
      buffer0.completeSegmentByteCount();
      Buffer buffer2 = buffer1.writeLongLe(100000000L);
      // Undeclared exception!
      try { 
        buffer2.write((Source) buffer0, (long) 122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(5975L);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.writeUtf8CodePoint(65533);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.buffer.write((Source) buffer0, (long) 65533);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.readFully(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(3L);
      Buffer buffer2 = buffer1.clone();
      buffer2.writableSegment(45);
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 10, (-509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=10 byteCount=-509
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readAll((Sink) null);
      Buffer buffer1 = buffer0.writeShort((-656));
      buffer0.readUtf8CodePoint();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(55296);
      Charset.defaultCharset();
      buffer0.indexOfElement(byteString0, (long) 55296);
      // Undeclared exception!
      try { 
        buffer2.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readUtf8CodePoint();
      realBufferedSource0.buffer.toString();
      realBufferedSource0.buffer.completeSegmentByteCount();
      realBufferedSource0.buffer.writeLongLe(10000000000000L);
      realBufferedSource0.buffer.writeIntLe(1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer2.readByteArray((long) 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=12 offset=0 byteCount=65533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("No deadline", charset0);
      Buffer buffer2 = buffer1.writeDecimalLong((-2865L));
      buffer0.buffer();
      ByteString byteString0 = ByteString.encodeUtf8("O");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.hmacSha512(byteString0);
      Buffer buffer4 = buffer0.writeUtf8("2Da;MGD}%", 2, 7);
      buffer4.emit();
      assertEquals(21L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("^5f}6kpM!&Fq", charset0);
      buffer1.size();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = buffer0.writeByte(0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource2.readByteString();
      buffer0.rangeEquals((long) 0, byteString0);
      buffer2.writeShort(1044);
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)50, 12L, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=2 fromIndex=12 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("5f}6pM!&Fq", charset0);
      buffer1.readHexadecimalUnsignedLong();
      buffer0.readUnsafe();
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeDecimalLong(20L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("okio.Buffer$UnsafeCursor", charset0);
      buffer_UnsafeCursor0.buffer.writeLong(1411L);
      buffer0.readIntLe();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=30 offset=9223372036854775806 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.exhausted();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteString0.toString();
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(5969L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte) (-52);
      ByteString byteString0 = ByteString.EMPTY;
      byteString0.toString();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[3] = byteString2;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString3 = ByteString.encodeString("[size=0]", charset0);
      byteStringArray0[6] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      try { 
        buffer1.readUtf8LineStrict((long) (byte)38);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=4 content=35393639\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1578L));
      Buffer buffer1 = buffer0.buffer();
      byte[] byteArray0 = new byte[1];
      buffer1.writeShort(88);
      byteArray0[0] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.readDecimalLong();
      long long0 = buffer1.indexOf((byte)88);
      assertEquals(2L, buffer1.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      buffer1.sha1();
      buffer1.writeByte(65533);
      buffer1.readHexadecimalUnsignedLong();
      buffer0.readByte();
      String string0 = buffer1.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(16711680);
      ByteString byteString0 = ByteString.decodeBase64("");
      buffer1.rangeEquals((long) (-1769), byteString0);
      buffer0.readInt();
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.writeString("vx mBW=qhd2qW]J", charset0);
      buffer2.writeDecimalLong((-1692L));
      buffer1.readUtf8CodePoint();
      assertFalse(buffer1.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(118);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer3 = realBufferedSink0.buffer.writeTo(outputStream0);
      assertEquals(2L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000000L);
      buffer1.size = 1000000000000000000L;
      buffer0.readDecimalLong();
      buffer0.indexOf((byte)87);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("h'XgduM5)8l[o", (-846), (-5448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -846
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readFully(buffer1, 0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(122);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      buffer1.toString();
      buffer0.completeSegmentByteCount();
      Buffer buffer2 = buffer1.writeLongLe(100000000L);
      buffer2.size = (long) 122;
      buffer1.writeIntLe(122);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer3.readByteString();
      try { 
        buffer1.readByteArray((long) 122);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = new Buffer();
      buffer_UnsafeCursor0.buffer.readShort();
      buffer_UnsafeCursor0.buffer.inputStream();
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(122);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      buffer1.toString();
      buffer0.completeSegmentByteCount();
      buffer1.writeLongLe(100000000L);
      buffer1.writeIntLe(122);
      Buffer buffer2 = realBufferedSource0.buffer.writeLongLe(0L);
      buffer2.segmentSizes();
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(2639L);
      buffer_UnsafeCursor0.resizeBuffer(1L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong(100000L);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2048);
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(92L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.rangeEquals(0L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(1);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer1.writableSegment(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("vx mBW=qhd2qW]J", charset0);
      Buffer buffer2 = buffer0.writeDecimalLong((-1692L));
      buffer0.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      assertEquals(20L, buffer0.size());
      
      buffer2.writeTo(outputStream0);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.exhausted();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer0.toString();
      long long0 = buffer_UnsafeCursor0.offset;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 2856L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.writeDecimalLong(7177611906121728L);
      long long0 = buffer0.readLongLe();
      assertEquals(8L, buffer0.size());
      assertEquals(4121129242945073463L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.segmentSizes();
      buffer_UnsafeCursor0.resizeBuffer(2256L);
      buffer0.writeDecimalLong(71776119061217280L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2147221535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ffc001f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeDecimalLong((-1));
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeUtf8CodePoint((-1));
      buffer_UnsafeCursor0.offset = 1127L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1127 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      Charset.isSupported("okio.Base64");
      Buffer buffer1 = buffer0.writeString("A&", charset0);
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = buffer_UnsafeCursor0.start;
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-1));
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      // Undeclared exception!
      try { 
        buffer0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeUtf8CodePoint((-1));
      buffer_UnsafeCursor0.next();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.writeShort((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)33;
      buffer0.write(byteArray0);
      assertEquals(9L, buffer0.size());
      
      long long0 = buffer_UnsafeCursor0.buffer.readLongLe();
      assertEquals(367853563686027263L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      buffer0.sha512();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readByteArray(0L);
      buffer0.exhausted();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 0L, 1539L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1539
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(1000000000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readUtf8();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShort((-206));
      buffer0.readUtf8CodePoint();
      Integer integer0 = new Integer((-588));
      buffer1.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      buffer0.writeLong(3173L);
      long long0 = buffer0.indexOf((byte)0);
      assertEquals(9L, buffer0.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.write(byteString0);
      ByteString byteString1 = buffer0.sha1();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.hmacSha256(byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer1.sha1();
      byte[] byteArray0 = new byte[0];
      buffer1.read(byteArray0);
      buffer0.readUtf8CodePoint();
      buffer0.toString();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x1f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.sha1();
      boolean boolean0 = buffer0.rangeEquals(2065L, byteString0, 248, 248);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      boolean boolean1 = buffer0.equals(byteString0);
      assertTrue(boolean1 == boolean0);
      
      buffer0.require(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(100000000L);
      int int0 = (-1531);
      buffer1.writeUtf8CodePoint((-1531));
      String string0 = "";
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Pipe pipe0 = new Pipe(65543);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(55296);
      byte byte0 = (byte)0;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(10000000000000L);
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("y+-[zt_{FIQOU(", 0, 0);
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(706L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      int int0 = 101;
      buffer1.writeShort(101);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, (-820L), (-820L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-820 byteCount=-820
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(65533);
      Buffer buffer2 = buffer0.writeUtf8CodePoint(65533);
      ByteString byteString0 = ByteString.encodeUtf8("LY5{OB><,]%8q.WnM");
      buffer1.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        buffer2.writeUtf8("DIp@57ZRSaC(+&`E", 65533, 102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 102 < 65533
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-10L));
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(285L);
      buffer1.writeDecimalLong(1000L);
      assertEquals(7L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      buffer0.writeLongLe((-1));
      byteArray0[2] = (byte)90;
      buffer_UnsafeCursor0.buffer.write(byteArray0);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1717986917));
      long long0 = buffer_UnsafeCursor0.buffer.size();
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 21L;
      Pipe pipe0 = new Pipe(21L);
      pipe0.sourceClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(65533);
      buffer1.writeDecimalLong(100L);
      assertEquals(8L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      boolean boolean0 = buffer0.equals(inputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeDecimalLong(32L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.writeDecimalLong(4278190080L);
      short short0 = buffer0.readShort();
      assertFalse(buffer0.exhausted());
      assertEquals((short)13362, short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer1.writeDecimalLong(100000000000L);
      assertEquals(12L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.writeDecimalLong((-4L));
      assertEquals(2L, buffer0.size());
      
      short short0 = buffer0.readShort();
      assertEquals((short)11572, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.writeDecimalLong(280375465082880L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        byteString0.substring(2146785052);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(517);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.writeUtf8CodePoint(0);
      assertEquals(3L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65533);
      buffer1.writeUtf8CodePoint(65533);
      short short0 = buffer0.readShort();
      assertFalse(buffer0.exhausted());
      assertEquals((short) (-4161), short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2142732577);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fb78121
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Buffer buffer2 = buffer1.writeDecimalLong(451L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer();
      SegmentPool.byteCount = 451L;
      Buffer buffer4 = buffer3.writeByte(99);
      long long0 = buffer2.writeAll(buffer4);
      assertEquals(4L, buffer2.size());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      buffer0.writeUtf8CodePoint(3708);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(2252L);
      HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.writeDecimalLong((-1));
      // Undeclared exception!
      buffer_UnsafeCursor0.buffer.writeAll(realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      OutputStream outputStream0 = null;
      buffer_UnsafeCursor0.start = (-1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.copyTo((OutputStream) null, 71776118979567616L, 71776118979477504L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      buffer_UnsafeCursor0.resizeBuffer(71776119061217280L);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-16));
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString1);
      buffer0.hashCode();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2049));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.readByte();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream0 = realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        buffer1.readFrom(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2095));
      ByteString byteString0 = buffer1.sha1();
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      Buffer buffer2 = buffer1.buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString.encodeUtf8("\n not found: limit=");
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer2.select(options0);
      assertEquals(2L, buffer0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(65533);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2049));
      buffer0.writeShort((-1010));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.writeLong((-2051L));
      buffer2.readIntLe();
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line(10000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=9999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2049));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer1.readByte();
      buffer1.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.snapshot(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=39
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(532);
      buffer1.readByte();
      buffer0.sha1();
      OutputStream outputStream0 = buffer1.outputStream();
      buffer0.copyTo(outputStream0);
      buffer0.readUtf8CodePoint();
      buffer1.completeSegmentByteCount();
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x14
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1578L));
      Buffer buffer1 = buffer0.buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.readDecimalLong();
      buffer1.indexOf((byte)88);
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e_I Ij@W(_ty7ZmuOfj");
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Buffer buffer2 = buffer1.buffer();
      buffer2.rangeEquals((-3165L), byteString0);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-812L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GsSJ8}");
      Buffer buffer1 = buffer0.writeShort((-2388));
      buffer1.readByte();
      buffer0.sha1();
      buffer1.readUtf8CodePoint();
      ByteString byteString0 = buffer1.snapshot();
      Buffer buffer2 = buffer0.buffer();
      buffer0.rangeEquals((-72057594037927936L), byteString0);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer2, 723L, (long) 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=723 byteCount=65533
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1781);
      Buffer buffer2 = new Buffer();
      buffer2.readUtf8();
      byte byte0 = buffer1.getByte(1L);
      assertEquals((byte) (-11), byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.indexOf((byte)18);
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">e3(vvJXqaJ=C");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 0L;
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean0 = buffer0.equals("");
      assertFalse(boolean0);
      
      buffer0.rangeEquals(280375465082880L, byteString0, 1671, 564);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(12L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(12, buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Buffer buffer1 = buffer0.writeShort((-2146273797));
      buffer0.readUtf8();
      buffer1.sha512();
      // Undeclared exception!
      try { 
        buffer1.getByte((-2146273797));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2146273797 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(3732L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      long long0 = (-3040L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-3040L));
      InputStream inputStream0 = realBufferedSource0.inputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(inputStream0, inputStream0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) sequenceInputStream0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha1(byteString0);
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)0, 1L, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString(508L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=508
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeLong(65533);
      buffer0.readShortLe();
      buffer0.sha512();
      buffer1.emitCompleteSegments();
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2673);
      Buffer buffer1 = buffer0.writeShort((-2673));
      buffer1.writeUtf8("|d'eK)-g");
      buffer1.sha1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readShortLe();
      int int1 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (long) 65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShort((-2049));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.clone();
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) 65533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=65532 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      buffer0.snapshot();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.writeDecimalLong(1000000L);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Buffer buffer1 = buffer0.writeShort((-2146273797));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x75
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeShortLe(19);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.offset = (-1772L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-1772 > size=2
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2673));
      buffer1.require((-2673));
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(152L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=151 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-2673);
      Buffer buffer1 = buffer0.writeShort((-2673));
      buffer0.writeLong((-17L));
      buffer1.readLong();
      String string0 = "\u2026]";
      int int1 = 1610612736;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Charset.defaultCharset();
      ByteString byteString1 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeShortLe(2421);
      buffer0.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer1.readByteArray();
      buffer_UnsafeCursor0.buffer.timeout();
      assertTrue(buffer1.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N4");
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeShort(116);
      buffer1.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.read(buffer_UnsafeCursor0.buffer, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-1065));
      ByteString byteString0 = ByteString.EMPTY;
      Charset.defaultCharset();
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      buffer0.close();
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2673));
      ByteString byteString0 = buffer0.sha1();
      buffer0.indexOfElement(byteString0);
      buffer1.buffer();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = buffer0.sha1();
      buffer0.writeLong(1000000000000000000L);
      buffer0.readLong();
      boolean boolean0 = buffer0.rangeEquals(413L, byteString1, 1132, 65533);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-1769));
      ByteString byteString0 = ByteString.decodeBase64("");
      buffer1.rangeEquals((long) (-1769), byteString0);
      buffer1.readInt();
      ByteString byteString1 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.forName("US-ASCII");
      buffer_UnsafeCursor0.buffer.readString(charset0);
      Segment segment0 = buffer0.writableSegment(10);
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(517);
      Pipe pipe0 = new Pipe(517);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = pipe0.buffer;
      buffer2.writeAll(buffer0);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeLong(10L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(2157L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.completeSegmentByteCount();
      buffer1.snapshot();
      buffer2.size = 176L;
      buffer2.buffer();
      // Undeclared exception!
      try { 
        buffer2.read(buffer1, 16L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.readUtf8();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1530L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1530
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeInt((-1431655764));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffaa
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) mockPrintStream0, (-1873L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1873
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(55296);
      buffer1.sha1();
      buffer1.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      buffer1.snapshot();
      assertEquals(1L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(517);
      short short0 = buffer1.readShortLe();
      assertEquals((short)1282, short0);
      
      ByteString byteString0 = ByteString.EMPTY;
      buffer1.writeLong((short)1282);
      int int0 = buffer1.readInt();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeShortLe(3480);
      buffer0.readByte();
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-3409L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-3409
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1073741824;
      Buffer buffer1 = buffer0.writeUtf8("$");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) list0;
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "$", objectArray0);
      // Undeclared exception!
      try { 
        buffer1.copyTo((OutputStream) printStream0, (-1152921504606846976L), 3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-1152921504606846976 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1073741824);
      buffer1.readByte();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(8L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=8
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(517);
      buffer0.sha1();
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer0.readAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeLong(31L);
      buffer0.readLong();
      buffer1.writeShortLe(9);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.buffer();
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer_UnsafeCursor0.buffer.buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, (-1), 375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeLong(10L);
      buffer1.completeSegmentByteCount();
      buffer0.writeDecimalLong(0L);
      // Undeclared exception!
      try { 
        buffer0.writeAll(buffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Buffer buffer1 = buffer0.writeShort(65533);
      buffer1.writeUtf8("W,X:z9:OqpxB<");
      buffer0.readShortLe();
      Buffer buffer2 = buffer1.buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-51);
      // Undeclared exception!
      try { 
        buffer2.write(byteArray0, (-1193), 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=-1193 byteCount=99
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeLong(2393L);
      Buffer buffer2 = buffer0.writeShort((-5002));
      buffer2.writeByte((-5002));
      buffer0.rangeEquals(10000000000000L, byteString0);
      buffer2.readShortLe();
      buffer1.readShortLe();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.writeShort(1936);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString1;
      byteStringArray0[8] = byteString1;
      byteString1.asByteBuffer();
      Options.of(byteStringArray0);
      try { 
        buffer0.skip(1936);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(517);
      ByteString byteString0 = buffer0.readByteString();
      buffer0.write(byteString0);
      Buffer buffer2 = buffer0.writeDecimalLong(1000000000000L);
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer0.writeLong(2147221535);
      buffer1.sha1();
      buffer1.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readUtf8CodePoint();
      try { 
        buffer2.readUtf8LineStrict(15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=9 content=1f000000007ffc001f\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = buffer0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      ByteString byteString0 = buffer0.sha1();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      options0.forEach(consumer0);
      buffer0.select(options0);
      ByteString byteString2 = buffer0.readByteString();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-59), (-711L), (long) (byte) (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-711 toIndex=-59
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.toString();
      buffer_UnsafeCursor0.resizeBuffer(4L);
      buffer0.indexOf((byte)0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeShort((-1358));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readShortLe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Pipe pipe0 = new Pipe(2974L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      Buffer buffer1 = buffer0.writeLong(10L);
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      buffer1.readByteString();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.completeSegmentByteCount();
      Buffer buffer1 = buffer0.writeDecimalLong(1554L);
      buffer1.readDecimalLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)63, 10000L, (long) (byte)63);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=10000 toIndex=63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.rangeEquals(100000000L, byteString0);
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer0, 4098L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer0.readUtf8CodePoint();
      buffer1.completeSegmentByteCount();
      String string0 = "";
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 0, 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 36 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort((-2095));
      buffer1.sha1();
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff7)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeShort(116);
      buffer1.readShortLe();
      buffer0.writeDecimalLong(1L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(517);
      buffer0.sha1();
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      buffer0.snapshot();
      buffer0.buffer();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147221535);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.writeShortLe((-5233));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.encodeUtf8("");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeAll(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(0L);
      // Undeclared exception!
      try { 
        buffer3.indexOf(byteString1, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.sha1();
      Buffer buffer1 = buffer0.writeLong(10L);
      buffer0.readLong();
      boolean boolean0 = buffer1.rangeEquals(2700L, byteString0, 9, 65536);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer1.sha1();
      buffer0.readUtf8CodePoint();
      buffer0.toString();
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x1f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer1.sha1();
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      buffer0.snapshot();
      buffer1.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.sha1();
      int int0 = (-2146555607);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-2146555607), (-2146555607), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2146555607
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("ZzFIQQw6AjX&Y]eev", (-2146555607), (-2146555607), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -2146555607
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 2020, 379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.readWrite = false;
      long long0 = 374L;
      buffer0.writeLong((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        buffer0.readFully(buffer1, 840L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.skip(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Tc])X2~faAv j.N");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.skip(3L);
      try { 
        buffer0.require(643L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUtf8Line();
      buffer0.writeShort(2145951919);
      assertFalse(buffer0.exhausted());
      
      buffer0.readShortLe();
      buffer1.outputStream();
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Pipe pipe0 = new Pipe(8192L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer();
      buffer0.writeDecimalLong((-1326L));
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", 2020, (-4115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -4115 < 2020
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.readByteArray(0L);
      boolean boolean0 = buffer0.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.rangeEquals(10000L, byteString0);
      try { 
        buffer0.skip(10000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(9223372036854775807L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9223372036854775807
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 4L;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(4L);
      int int0 = 10;
      ByteString[] byteStringArray0 = new ByteString[9];
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSource0, byteString0);
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byte byte0 = (byte)5;
      byteArray0[1] = (byte)5;
      ByteString byteString3 = new ByteString(byteArray0);
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = ByteString.of(byteArray0);
      byteStringArray0[4] = byteString4;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      buffer0.rangeEquals((-647L), byteString0);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Pipe pipe0 = new Pipe(1850L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readString((-2955L), (Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2955
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.readUtf8Line();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("<j${&G*D", charset0);
      Buffer buffer1 = buffer0.writeShort((byte)50);
      buffer0.indexOf((byte)20, (long) (byte)50, (long) (byte)50);
      buffer0.readShortLe();
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, (long) (short)27196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(3747L);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.encodeUtf8("ho3^");
      boolean boolean0 = buffer0.rangeEquals((long) 10, byteString1, 9, (-4213));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      buffer0.readUtf8();
      // Undeclared exception!
      buffer0.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long1 = buffer0.indexOf((byte)18);
      assertEquals((-1L), long1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      buffer1.readFrom((InputStream) bufferedInputStream0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2189L));
      buffer1.readShort();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)10;
      buffer1.readFully(byteArray0);
      assertEquals(7L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("|cPn\"sf*zW;Cyk=e");
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      buffer0.readAll(hashingSink1);
      long long0 = 4L;
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Segment segment0 = new Segment();
      ByteString byteString0 = buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.hashCode();
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer_UnsafeCursor0.buffer.selectPrefix(options0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(34);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      buffer1.writeUtf8("y#n|8~dmIGB{3p <xG+");
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      Pipe pipe0 = new Pipe(910L);
      Buffer buffer3 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer3.write(buffer1, (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=20 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.encodeUtf8("ho3^");
      boolean boolean0 = buffer0.rangeEquals((long) 10, byteString1, 10, 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.exhausted();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteString0.toString();
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      try { 
        buffer0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("[3zp8C1$Umz;b+z%=;", 224, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 224
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)52);
      buffer0.segmentSizes();
      Buffer buffer1 = (Buffer)buffer0.write((Source) null, (-1L));
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-3674L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -3674
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      ByteString byteString1 = buffer0.sha512();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteStringArray0[2] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)70, (long) (byte)70);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.sha512();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.writeUtf8CodePoint(80);
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeShortLe((-1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.writableSegment(2715);
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer0.readByteString((-2384L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2384
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[.Bb3_m9x*|lB{6in");
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(4L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer.writeByte((-91));
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      assertFalse(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.completeSegmentByteCount();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      MockFile mockFile0 = new MockFile("](e5sT|J");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('M');
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) printStream0, 65536L, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=65536 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-1769));
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      buffer0.writeUtf8CodePoint(87);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(4L);
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer0.rangeEquals((-2344L), byteString0, 10, 10);
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("MD5");
      byte[] byteArray0 = new byte[0];
      ByteString.of(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0, 3197L);
      assertEquals((-1L), long0);
      
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long1 = buffer0.readAll((Sink) null);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 16L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      buffer0.writeAll(hashingSource0);
      // Undeclared exception!
      try { 
        buffer0.writeString("HmacSHA256", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(55296);
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(3747);
      buffer0.indexOf((byte) (-91));
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.request(17L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8(17L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=17
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      boolean boolean0 = buffer0.request(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("HmacSHA1", (-1862), (-1862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1862
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2147221535);
      buffer1.sha1();
      buffer0.readUtf8CodePoint();
      buffer0.completeSegmentByteCount();
      buffer0.request(2541L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.decodeBase64("|fN>>;");
      byteStringArray0[0] = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeLongLe((-1L));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      buffer0.inputStream();
      int int0 = 72;
      Buffer buffer1 = buffer0.writeByte(72);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer0.writeUtf8CodePoint(56);
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 17L;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, 100000000L, 17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.request((-2897L));
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      buffer0.writeAll(buffer1);
      ByteString.decodeBase64("eo?(g`Cw(t`95KP\"/MP");
      buffer0.rangeEquals(0L, (ByteString) null, 3747, 1576);
      buffer1.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      MockFile mockFile0 = new MockFile("");
      buffer_UnsafeCursor0.close();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-31));
      assertFalse(buffer0.exhausted());
      
      buffer0.readByteString();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      buffer0.hashCode();
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("7x2%l", 1126, 1126, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1126 > 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1065L));
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Integer integer0 = new Integer(65533);
      ByteString byteString0 = ByteString.EMPTY;
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.request(17L);
      Buffer buffer1 = buffer0.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      buffer0.writeUtf8CodePoint(1736);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Source source0 = hashingSource0.delegate();
      buffer0.emitCompleteSegments();
      buffer0.writeAll(source0);
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOfElement(byteString0);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("VO)Mt|7*m4rg.,", 65533, 65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 65533 > 16
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Pipe pipe0 = new Pipe(586L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      buffer0.writeHexadecimalUnsignedLong(586L);
      // Undeclared exception!
      try { 
        buffer0.indexOfElement((ByteString) null, 4058L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.writableSegment(2715);
      buffer_UnsafeCursor0.buffer.sha1();
      buffer0.md5();
      buffer_UnsafeCursor0.next();
      buffer0.writeIntLe((-1));
      buffer0.writeLong(2034L);
      assertEquals(12L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)125;
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.hmacSha512(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 17L;
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      buffer_UnsafeCursor0.buffer.writableSegment(2715);
      ByteString byteString1 = buffer0.md5();
      assertEquals(16, byteString1.size());
      
      buffer_UnsafeCursor0.next();
      buffer0.writeIntLe((-1));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte)124, (-526L), 17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-526 toIndex=17
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer2, 1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      URI uRI0 = MockURI.aFTPURI;
      Buffer buffer1 = buffer0.writeLongLe((-2496L));
      buffer1.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer2.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)50;
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.writeString("vX'(Ie5*Qw", 1535, (int) (byte)17, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 17 < 1535
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.request(17L);
      // Undeclared exception!
      try { 
        buffer0.snapshot(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      buffer0.sha256();
      assertNotSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      MockFile mockFile0 = new MockFile((String) null, " Y>j% +N*b}@&InC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " Y>j% +N*b}@&InC";
      objectArray0[1] = (Object) buffer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) buffer0;
      objectArray0[4] = (Object) " Y>j% +N*b}@&InC";
      objectArray0[5] = (Object) " Y>j% +N*b}@&InC";
      objectArray0[6] = (Object) byteString0;
      PrintStream printStream0 = mockPrintStream0.printf("limit < 0: ", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0, 1121);
      Buffer buffer1 = buffer0.writeTo((OutputStream) bufferedOutputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 3392L, 3392L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3392 byteCount=3392
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeShort((-771));
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(16L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.sha1();
      buffer0.indexOf((byte)15);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOf((byte)15);
      byte[] byteArray0 = buffer0.readByteArray();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.snapshot((-2146550769));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2146550769
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-91);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      URI uRI0 = MockURI.aFTPURI;
      buffer0.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = buffer0.write(byteString0);
      buffer1.clone();
      long long0 = 347L;
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 347L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      byte[] byteArray0 = new byte[2];
      buffer0.inputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)50;
      buffer0.readUtf8Line();
      buffer0.writeShort((byte)50);
      assertFalse(buffer0.exhausted());
      
      short short0 = buffer0.readShortLe();
      assertEquals((short)12800, short0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0, 808L);
      ByteString byteString1 = ByteString.encodeString("s.limit == s.pos", charset0);
      byteString1.string(charset0);
      buffer0.hmacSha512(byteString1);
      int int0 = (-2697);
      buffer0.writeUtf8CodePoint((-2697));
      Charset charset1 = Charset.defaultCharset();
      buffer0.writeString("s.limit == s.pos", charset1);
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-2697), (-2697));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",9{S]d4/U$Eut8ji");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("cz:&;e8C9+-");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)37;
      buffer0.read(byteArray0);
      byteString0.utf8 = ",9{S]d4/U$Eut8ji";
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("cz:&;e8C9+-", charset0);
      buffer0.indexOf(byteString0);
      buffer0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.clear();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-17);
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo(buffer_UnsafeCursor0.buffer, (long) (-1), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.exhausted();
      buffer0.clone();
      buffer0.writeUtf8CodePoint(84);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(150L);
      assertEquals(3L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(2028L);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Integer integer0 = new Integer((-386));
      boolean boolean0 = buffer0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      ByteString byteString0 = ByteString.encodeUtf8("string == null");
      buffer0.indexOf(byteString0, (long) (byte)50);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "huqJ|}r^");
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = ByteString.encodeUtf8("$%L:");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (-31L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.writeInt((-1431655764));
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(4558L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=4557 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "y7)8";
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.copyTo(outputStream0, 2642L, 330L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2642 byteCount=330
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeLongLe(1894L);
      // Undeclared exception!
      try { 
        buffer2.readFully(realBufferedSink0.buffer, (-227L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString.decodeBase64("|fN>>;");
      byteStringArray0[0] = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.writeByte((-1));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(3173L);
      buffer1.segmentSizes();
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.snapshot();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict((long) 150);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer_UnsafeCursor0.start = 522;
      buffer_UnsafeCursor0.resizeBuffer(4L);
      assertEquals(522, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(1120L);
      buffer0.snapshot();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(192);
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      Integer integer0 = new Integer(65533);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(2253L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(3173L);
      ByteString byteString0 = ByteString.EMPTY;
      buffer0.snapshot();
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 4L;
      try { 
        buffer0.require(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2409L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "y7)8";
      ByteString.decodeBase64("y7)8");
      buffer0.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1));
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size < 4: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.equals(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSink0.buffer.writeAll(buffer1);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)73, (long) (-1), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=-1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-7);
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.hmacSha512(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      buffer0.readUtf8();
      buffer0.hashCode();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 116, (int) (byte)72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=116 byteCount=72
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Pipe pipe0 = new Pipe(3263L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      pipe0.sourceClosed = false;
      try { 
        buffer0.write((Source) hashingSource0, 3263L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = Buffer.REPLACEMENT_CHARACTER;
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer0.read(buffer1, (long) 65533);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size();
      buffer0.snapshot();
      Segment segment0 = buffer0.writableSegment(18);
      SegmentPool.next = segment0;
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("|fN>>;");
      buffer0.writeIntLe(742);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("|fN>;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: |fN>;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("offset=%s > size=%s", charset0);
      ByteString.decodeBase64("|fN>>;");
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 7L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeHex("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)113;
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, 450, (int) (byte) (-122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=450 byteCount=-122
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null, (-933), 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(706L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray((-903L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-903
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-3706L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUnsafe();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, 1312, 1312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1312 byteCount=1312
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.offset = (-2632L);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
      buffer_UnsafeCursor2.buffer.readAll(buffer0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        buffer1.read(byteArray0, 2693, (int) (byte)63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=2693 byteCount=63
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)10;
      buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentPool.byteCount = 2613L;
      buffer0.writeLongLe(2613L);
      buffer0.readByte();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("|fN>>;");
      String string0 = "source is closed";
      int int0 = (-1463);
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString.decodeBase64("|fN>>;");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      realBufferedSource0.buffer.snapshot();
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-2270L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2270
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString.decodeBase64("|fN>>;");
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null, (-279L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)69);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)98;
      buffer0.writeShort((byte)98);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1397L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=1396 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString.decodeBase64("|fN>>;");
      byteStringArray0[0] = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.snapshot();
      Segment segment0 = realBufferedSink0.buffer.writableSegment(248);
      assertNotNull(segment0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8((-193L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-193
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-2871L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2871
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Pipe pipe0 = new Pipe(586L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      long long0 = buffer0.indexOfElement((ByteString) null, 4058L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = 2012;
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, 2012, 1717986918);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte byte0 = (byte)0;
      Buffer buffer0 = new Buffer();
      byte byte1 = (byte) (-67);
      buffer0.indexOf((byte) (-67), 3L);
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)49, (-1256L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1256 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ByteString[] byteStringArray0 = new ByteString[3];
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("~MVA7:]^qIX)|)`=^(7", charset0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[0] = byteString1;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString2;
      ByteBuffer byteBuffer0 = charset0.encode("~MVA7:]^qIX)|)`=^(7");
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteStringArray0[2] = byteString3;
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("'7D8:c@g3b@ab|");
      Buffer buffer1 = buffer0.writeString("'7D8:c@g3b@ab|", charset0);
      buffer0.readUtf8Line(0L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-128);
      buffer1.writeLong((byte) (-128));
      byteArray0[2] = (byte)104;
      buffer0.readFully(byteArray0);
      buffer0.rangeEquals(1120L, (ByteString) null, (-2147483646), (-1797));
      buffer1.readString(charset0);
      // Undeclared exception!
      try { 
        buffer0.readString((long) (-2147483646), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2147483646
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.read(buffer0, 0L);
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charset0.encode(charBuffer0);
      charset0.encode("");
      // Undeclared exception!
      try { 
        buffer1.readString((-1205L), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1205
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)102;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray1, 0, (int) (byte)102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=102
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Pipe pipe0 = new Pipe(25L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      long long0 = 0L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer1.copyTo((OutputStream) pipedOutputStream0);
      buffer1.readUtf8(0L);
      Buffer buffer2 = buffer0.write(byteArray0);
      buffer2.read(byteArray0);
      buffer1.clone();
      ByteString byteString0 = null;
      int int0 = 16711680;
      // Undeclared exception!
      try { 
        buffer1.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[3];
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)0, (int) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writableSegment(2145567962);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = true;
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.exhausted();
      String string0 = "E0@7|lF";
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.exhausted();
      buffer0.writeUtf8CodePoint((-1656));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("E0@7|lF", (-237), 3024, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -237
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-7);
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Z[");
      ByteString.of(byteBuffer0);
      buffer0.hmacSha512(byteString0);
      ByteString byteString1 = ByteString.EMPTY;
      buffer0.exhausted();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)50);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (byte)50);
      try { 
        buffer0.readFrom((InputStream) pushbackInputStream0, 17L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 55296);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0, (-2197L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2197
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.skip(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-93);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer1.hmacSha256(byteString0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readUtf8LineStrict(2540L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.timeout();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)0, (long) (byte)0);
      buffer0.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      buffer0.read(byteArray1, 0, (int) (byte)0);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)7;
      Buffer buffer1 = null;
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Pipe pipe0 = new Pipe(2565L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo(realBufferedSource0.buffer, 2565L, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2565 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(10000000000000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Pipe pipe0 = new Pipe(881L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 5;
      Deflater deflater0 = new Deflater(5, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.writeInt(5);
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        deflaterSink0.write(buffer1, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=5
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.exhausted();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("E0@7|lF", (-237), 3024, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -237
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)98;
      byteArray0[1] = (byte)98;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1397L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1396 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)0;
      buffer1.indexOf((byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      long long0 = 10000000000000000L;
      Pipe pipe0 = new Pipe(10000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      pipe0.sourceClosed = true;
      buffer_UnsafeCursor0.end = 1432;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1120L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1120 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Pipe pipe0 = new Pipe(545L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      RealBufferedSink realBufferedSink0 = null;
      try {
        realBufferedSink0 = new RealBufferedSink((Sink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }
}
