/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:34:33 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.net.URI;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      Locale locale0 = new Locale("");
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("up2");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(7542, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("", 22);
      char[] charArray0 = new char[2];
      jSONScanner0.scanNumber();
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.scanFieldFloatArray(charArray0);
      timeZone0.getOffset((long) (-2));
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9~X<MFV;M3zY#");
      jSONReaderScanner0.scanLong('Z');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong('#');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("oX(^9s");
      jSONReaderScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      SymbolTable symbolTable0 = new SymbolTable(1268);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '{');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanString('?');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(812);
      jSONReaderScanner0.scanDate('\u0000');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'l');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("CustomMapDeserializer");
      jSONReaderScanner0.scanFloat('b');
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", nfo : ");
      SymbolTable symbolTable0 = new SymbolTable(51);
      jSONReaderScanner0.scanFloat('D');
      JSONLexerBase.isWhitespace('D');
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d)/!Vh");
      char[] charArray0 = new char[6];
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[5] = ']';
      jSONScanner0.scanType(" 1S!t@zu");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("/jlB,9Cj1&Sw5}Un", 72);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Locale locale0 = Locale.CHINA;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P8B{3p=DhABtFdvG");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanDecimal('');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 22);
      jSONScanner0.scanNumber();
      jSONScanner0.token = 83;
      jSONScanner0.close();
      jSONScanner0.getFeatures();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 22);
      char[] charArray0 = new char[2];
      jSONScanner0.scanNumber();
      charArray0[0] = 'M';
      jSONScanner0.scanFieldLong(charArray0);
      charArray0[1] = 'M';
      jSONScanner0.close();
      jSONScanner0.getFeatures();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tfH ^ecode erro>( ", 55296);
      jSONScanner0.isRef();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hashCode");
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldFloat(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'a';
      charArray0[2] = ' ';
      charArray0[3] = 'V';
      charArray0[5] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2);
      jSONReaderScanner0.tokenName();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      jSONReaderScanner0.scanDouble('3');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = ']';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 2452);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('E');
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[3] = ' ';
      charArray0[4] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanString(',');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble(',');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9`", 2583);
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanDouble('\"');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.intValue();
      SymbolTable symbolTable0 = new SymbolTable(19);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2u7");
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, false);
      int int0 = (-1962);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1293));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = '\"';
      jSONScanner0.scanInt('\"');
      char[] charArray0 = new char[6];
      jSONScanner0.hasSpecial = true;
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      jSONScanner0.scanString();
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.matchStat();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a7[Ad");
      jSONScanner0.nextToken(105);
      jSONScanner0.scanString('H');
      jSONScanner0.scanDouble('Q');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7[Ad");
      jSONScanner0.nextToken(105);
      jSONScanner0.scanString('H');
      jSONScanner0.scanDouble('Q');
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 1442);
      SymbolTable symbolTable0 = new SymbolTable(1442);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanDate('q');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar('\u0000', (-1843987256), (-1427), 1430, 1955, 1430);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hashCode");
      jSONScanner0.scanType("hashCode");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.scanFieldDate(charArray0);
      jSONScanner1.scanUUID('/');
      SymbolTable symbolTable0 = new SymbolTable(2068);
      jSONScanner1.scanSymbolWithSeperator(symbolTable0, '/');
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(9999999);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ']');
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VQ3]P)@D58cu");
      int int0 = Calendar.JUNE;
      jSONReaderScanner0.scanInt('}');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - V, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Xy.e#0,6!{/");
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - X, info : pos 0, json : Xy.e#0,6!{/
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      jSONReaderScanner0.scanLong('4');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.pos();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E", 256);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.pos();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONReaderScanner0.scanString(']');
      int int0 = Calendar.DST_OFFSET;
      jSONReaderScanner0.nextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefine", (-1446));
      Collection<String> collection0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3237, (-73));
      jSONReaderScanner0.scanString('k');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('4');
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanDouble('4');
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V4I");
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      jSONScanner0.matchField(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('[', '6', 'p');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0iXSzV|+fEfe;,@?");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(2452);
      jSONScanner0.scanSymbol(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I", 1879048192);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '\\';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isEnabled(2227);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2583, (-3056));
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanString(' ');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('z');
      jSONReaderScanner0.bytesValue();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char char0 = '(';
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 1442);
      String string0 = "fO3R";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Th$:>g=y,%3o}p:*");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[3] = '\'';
      charArray0[1] = '\'';
      charArray0[1] = '\'';
      charArray0[3] = '\'';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('\"');
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[5] = '\"';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanLong('\"');
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanTrue();
      Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanBoolean('J');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.next();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanBoolean('J');
      jSONReaderScanner0.stringVal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hashCode");
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 1442);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SymbolTable symbolTable0 = new SymbolTable(83);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[5] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JS(OH");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.matchStat();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '6';
      charArray0[2] = ',';
      char[] charArray1 = new char[6];
      charArray1[0] = ']';
      charArray1[1] = 'j';
      charArray1[3] = ',';
      charArray1[4] = 'j';
      charArray1[5] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, ']', ']');
      jSONReaderScanner0.scanString('3');
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      jSONReaderScanner0.scanDouble('j');
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(92);
      jSONReaderScanner0.eofPos = 92;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '\u0000');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 2452);
      jSONReaderScanner0.scanString('i');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('E');
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[8] = 'j';
      charArray0[4] = '\u0000';
      charArray0[5] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'j');
      jSONReaderScanner0.intValue();
      JSONScanner jSONScanner0 = new JSONScanner("2", 0);
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextTokenWithChar('\u0000');
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neV\"pqC,{S", 1488);
      jSONReaderScanner0.eofPos = 1488;
      jSONReaderScanner0.scanDouble('A');
      int int0 = 83;
      SymbolTable symbolTable0 = new SymbolTable(83);
      char[] charArray0 = new char[3];
      jSONReaderScanner0.matchStat = (int) 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      JSONScanner jSONScanner0 = new JSONScanner("n:mC+Ka7*8. BPKEb", 83);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan false error", 83);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'A';
      charArray0[2] = ',';
      char[] charArray1 = new char[5];
      charArray1[0] = ',';
      charArray1[1] = ']';
      charArray1[2] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      Locale locale0 = Locale.ITALY;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      jSONReaderScanner0.isEnabled(45, 69);
      jSONReaderScanner0.charAt(78);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '6';
      charArray0[2] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(',', '6', 2452, '6', (-1), ',');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 702, 702);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.pos();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFloat('G');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("", 702);
      jSONScanner0.scanISO8601DateIfMatch(false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 1442);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanLong(';');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'A', 9999999);
      jSONReaderScanner0.scanString(',');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.np = (int) ',';
      JSONScanner.charArrayCompare("\"", 9999999, charArray0);
      jSONReaderScanner0.stringVal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 9);
      int int0 = 430;
      int int1 = 2476;
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '/';
      SymbolTable symbolTable0 = new SymbolTable(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 9, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[3] = ' ';
      charArray0[4] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '3', '3');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.setToken(3678080);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '.';
      charArray0[2] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDate('i');
      SymbolTable symbolTable0 = new SymbolTable(2452);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = ']';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1193, 95);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ]
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 2452);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.intValue();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = new Locale("fastjson.compatibleWithJavaBean", "writenulstrngasempty");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("writenulstrngasempty", 2614);
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 2452);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 9999999);
      jSONReaderScanner0.scanBoolean('*');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 18);
      jSONReaderScanner1.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '\'';
      charArray0[2] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-1453));
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal(' ');
      jSONScanner0.isRef();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '*';
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      SymbolTable symbolTable0 = new SymbolTable(9);
      jSONReaderScanner0.scanFieldString(charArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner("InternFieldNames");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(5);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal(' ');
      jSONScanner0.isRef();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      SymbolTable symbolTable1 = new SymbolTable(58);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanBoolean(' ');
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 69);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.ParserConfig");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEnabled(47, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6'Ur6]osEosIXGc");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFloat('z');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanInt('z');
      SymbolTable symbolTable0 = new SymbolTable(1268);
      jSONReaderScanner0.scanDate('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanString('q');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("has)Code", 1779);
      char char0 = ' ';
      jSONReaderScanner0.matchStat = 1779;
      jSONReaderScanner0.scanString(' ');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[0];
      int int0 = Calendar.JUNE;
      jSONReaderScanner0.scanInt('x');
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONScanner0.scanSymbol((SymbolTable) null);
      String string0 = "internfieldnames";
      char char0 = 'U';
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neV\"pqC,{S", 1488);
      jSONReaderScanner0.scanString('U');
      jSONReaderScanner0.scanDouble('A');
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullStringAsEmpty");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[7];
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONScanner0.scanStringArray(set0, 'U');
      jSONReaderScanner0.scanString('a');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`3<N9lh9qK>*.:T", 695);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanDate('2');
      jSONReaderScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner1.intValue();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("'/DHQrGZ.eE46", 45);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 9999999);
      jSONScanner0.longValue();
      char[] charArray0 = new char[2];
      char char0 = '\'';
      charArray0[0] = '\'';
      TimeZone timeZone0 = TimeZone.getTimeZone("fastjson.parser.deny");
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.setTimeZone(timeZone0);
      char char1 = 'I';
      charArray0[1] = 'I';
      byte byte0 = (byte) (-26);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9999999, 34);
      int int0 = 68;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("InternFieldNames");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.nextToken();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      jSONReaderScanner0.charAt(98);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h");
      jSONScanner0.scanBoolean('t');
      Object object0 = new Object();
      JSONScanner jSONScanner1 = new JSONScanner("new");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.intValue();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-v");
      jSONReaderScanner0.scanDouble('(');
      SymbolTable symbolTable0 = new SymbolTable(1442);
      JSONScanner jSONScanner0 = new JSONScanner("", 3371);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, (-1), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONScanner jSONScanner0 = new JSONScanner("MRZh ez`AFJ_9 4lI");
      char char0 = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-7DK?Q;&v?>|YS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-7DK?Q;&v?>|YS");
      jSONReaderScanner0.scanDouble('2');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanLong('M');
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      jSONReaderScanner0.scanFieldUUID(charArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[8] = 'j';
      charArray0[4] = '-';
      charArray0[5] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'j');
      JSONScanner jSONScanner0 = new JSONScanner("2", 0);
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextTokenWithChar('-');
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9`", 2583);
      JSONScanner jSONScanner0 = new JSONScanner("9`", 737);
      jSONScanner0.scanBoolean('\"');
      jSONScanner0.info();
      SymbolTable symbolTable0 = new SymbolTable(874);
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2583);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      SymbolTable symbolTable1 = new SymbolTable(740);
      jSONReaderScanner1.scanDouble(';');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      int int0 = 82;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 2849);
      int int1 = 1352;
      SymbolTable symbolTable0 = new SymbolTable(995);
      JSONScanner jSONScanner0 = new JSONScanner(", nfo : ", 127);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '!');
      jSONReaderScanner0.scanFloat(']');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 1352);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2O");
      jSONScanner0.scanBoolean('H');
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      JSONScanner jSONScanner1 = new JSONScanner("not match ", 687);
      jSONScanner0.scanFloat('H');
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 20);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'Z';
      charArray0[2] = 'j';
      charArray0[3] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 127);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9`", 2583);
      jSONReaderScanner0.matchStat = 2583;
      jSONReaderScanner0.scanDate('s');
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[2] = '\"';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanType("hTvM");
      JSONLexerBase.isWhitespace('Z');
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '\'';
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      MockFile mockFile0 = new MockFile("false", "b+^D");
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      JSONScanner jSONScanner0 = new JSONScanner("Wnt|rnFiel&Names");
      JSONScanner jSONScanner1 = new JSONScanner("Wnt|rnFiel&Names", 0);
      jSONScanner0.nextToken(18);
      jSONScanner0.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neV\"pqC,{S", 1488);
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullStringAsEmpty");
      jSONReaderScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Sp55i*E@Hb(rLY.", 32);
      jSONReaderScanner1.isEnabled((-697), (-697));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("WriteNullStringAsEmpty", 1572);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sp55i*E@Hb(rLY.");
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("Q#-'*$y4R2HCrU@(Y", 0);
      jSONReaderScanner3.charAt(8);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3461, "Sp55i*E@Hb(rLY.");
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" pos");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockCalendar.getInstance();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)33;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.skipWhitespace();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3169);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('3');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("JS(OH");
      jSONScanner0.longValue();
      char[] charArray0 = new char[6];
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[5] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 1S!t@zu");
      jSONReaderScanner0.nextToken();
      jSONScanner0.longValue();
      jSONReaderScanner0.intValue();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.lexError("nev", (Object[]) null);
      jSONScanner0.nextToken(785);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(2980);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 9, json : undefined
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("com.alibaba.fastjson.parser.ParserConfig");
      arrayList0.add("KhV&Gx'4EANdfZY!mf");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      arrayList0.sort(comparator0);
      SymbolTable symbolTable0 = new SymbolTable(1339);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[");
      jSONReaderScanner0.nextToken();
      int int0 = Calendar.JUNE;
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1052));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A");
      JSONScanner jSONScanner0 = new JSONScanner("A");
      jSONScanner0.hasSpecial = false;
      jSONScanner0.scanUUID('u');
      JSONScanner jSONScanner1 = new JSONScanner("null");
      jSONScanner1.nextToken(10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 2849);
      SymbolTable symbolTable0 = new SymbolTable(995);
      jSONReaderScanner0.scanDecimal(' ');
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      jSONScanner0.isRef();
      BigDecimal bigDecimal0 = new BigDecimal(1352);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("htvm");
      jSONReaderScanner1.nextToken();
      JSONScanner.charArrayCompare("\"", 0, charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tue", 245);
      jSONReaderScanner0.scanNumber();
      int int0 = Calendar.JULY;
      BigDecimal bigDecimal0 = new BigDecimal(6);
      jSONReaderScanner0.scanString(']');
      int int1 = Calendar.DECEMBER;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 9999999);
      char[] charArray0 = new char[2];
      jSONScanner0.nextIdent();
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      jSONScanner0.longValue();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(108);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDecimal('H');
      jSONScanner0.isRef();
      BigDecimal bigDecimal0 = new BigDecimal(74);
      jSONReaderScanner0.nextToken();
      JSONScanner.charArrayCompare("&\"#3. MHk", 108, charArray0);
      jSONScanner0.floatValue();
      jSONScanner0.longValue();
      jSONReaderScanner0.isEOF();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.ParserConfig", 737);
      char char0 = '`';
      jSONScanner0.scanBoolean('`');
      jSONScanner0.getLocale();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0iXSzV|+fEfe;,@?");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(2452);
      symbolTable0.addSymbol("0iXSzV|+fEfe;,@?", 0, 0, 2452);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 5859);
      jSONReaderScanner0.nextToken();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "G~8:)L|awXD?";
      JSONScanner jSONScanner0 = new JSONScanner("G~8:)L|awXD?", 83);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner1 = new JSONScanner("yyyy-MM-dd HH:mm:ss");
      JSONScanner jSONScanner2 = new JSONScanner("`KG7Bpn");
      jSONScanner2.scanBoolean('0');
      jSONScanner1.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner2.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 22);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = '6';
      charArray0[3] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987232));
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanDouble('#');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 2452, (-1843987232));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(108);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9", 0);
      JSONScanner jSONScanner1 = new JSONScanner("illegal", 16);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanLong('y');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      JSONScanner jSONScanner2 = new JSONScanner("d5oh");
      SymbolTable symbolTable1 = new SymbolTable(1652);
      jSONScanner2.scanSymbolWithSeperator(symbolTable1, 'y');
      jSONReaderScanner0.scanFloat('y');
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = "TreeSet";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 22);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 101, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.doubleValue();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/~.r<", (-2134));
      jSONReaderScanner0.scanDate(' ');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S#zoX");
      SymbolTable symbolTable0 = new SymbolTable(1339);
      JSONScanner jSONScanner0 = new JSONScanner("S#zoX");
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, ':');
      jSONReaderScanner0.scanFloat('(');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.lexError("true", (Object[]) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.integerValue();
      jSONScanner0.scanDouble('U');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-345));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x%^.gw79W2skm");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. %
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("@OmyUR:y hyA", 83);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_cLTLH&6:0v|");
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      MockFile mockFile0 = new MockFile("_cLTLH&6:0v|", "@OmyUR:y hyA");
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONScanner0.isRef();
      SymbolTable symbolTable0 = new SymbolTable(1606);
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable1 = new SymbolTable(1372);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[3] = 'j';
      charArray0[4] = '-';
      charArray0[5] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'j');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" pos");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockCalendar.getInstance();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(" pos", (-1165));
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(1469);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFloat('n');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanInt('v');
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      SymbolTable symbolTable0 = new SymbolTable(512);
      jSONScanner0.scanEnum(class0, symbolTable0, 'n');
      jSONScanner0.pos();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong('#');
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONReaderScanner0.token();
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "fastjson.compatibleWithJavaBean";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean", 46);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.ParserConfig", 737);
      jSONScanner0.info();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.ParserConfig");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("pos 0, json : com.alibaba.fastjson.parser.ParserConfig", 0);
      JSONScanner jSONScanner1 = new JSONScanner("Set");
      jSONScanner0.lexError("undefined", (Object[]) null);
      jSONScanner1.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : Set
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9");
      jSONScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(108);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.isRef();
      BigDecimal bigDecimal0 = new BigDecimal(74);
      jSONScanner0.putChar('r');
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'H';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken(19);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanBoolean('-');
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null, 2303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      int int0 = 82;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('E');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match E - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanString('l');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayScript(locale0);
      locale0.getDisplayLanguage(locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      linkedList0.add(locale0);
      locale0.getDisplayLanguage();
      JSONScanner jSONScanner0 = new JSONScanner("\u65E5\u672C\u8A9E", 'l');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(":");
      jSONReaderScanner1.nextToken();
      jSONScanner0.isRef();
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'l';
      charArray0[3] = '3';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDate('\u0083');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 97, 32);
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("i");
      jSONReaderScanner0.getTimeZone();
      SymbolTable symbolTable1 = new SymbolTable(547);
      jSONReaderScanner2.nextToken(547);
      jSONReaderScanner2.scanSymbol(symbolTable1);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 9999999);
      char[] charArray0 = new char[2];
      jSONScanner0.tokenName();
      jSONScanner0.nextIdent();
      charArray0[0] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONScanner0.np = 9999999;
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.isRef();
      jSONScanner0.intValue();
      jSONScanner0.scanString('U');
      int int0 = 1471;
      jSONScanner0.scanFieldStringArray((char[]) null, 321, (SymbolTable) null);
      jSONScanner0.indexOf('U', 1471);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MRZh ez`AFJ_9 4lI");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MRZh");
      jSONReaderScanner0.nextToken();
      String string0 = "not suppFort : ";
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.nextToken(0);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(82);
      jSONReaderScanner0.eofPos = 82;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '\u0000');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 789, 789);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A");
      JSONScanner jSONScanner0 = new JSONScanner("A");
      int int0 = Calendar.AM_PM;
      Locale locale0 = Locale.JAPANESE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A");
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable('u');
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("m<c.1Z3", 651);
      jSONReaderScanner1.scanFieldDate(charArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "up2");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MRZh");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("up2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[2] = ']';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanBoolean('x');
      jSONReaderScanner0.scanDate('m');
      SymbolTable symbolTable0 = new SymbolTable('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = Calendar.FRIDAY;
      SymbolTable symbolTable0 = new SymbolTable(3392903);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 6);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-?fw}e1QQ[{");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-?fw}e1QQ[{", 0);
      jSONReaderScanner1.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("$ref");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JSONScanner jSONScanner1 = new JSONScanner("-?fw}e1QQ[{");
      jSONScanner1.lexError("$ref", (Object[]) null);
      jSONScanner0.scanDouble('1');
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, (-462), (-1842));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "\":\"";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong('m');
      jSONReaderScanner0.scanString('C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = jSONReaderScanner0.getLocale();
      locale1.getDisplayScript(locale0);
      locale0.getDisplayLanguage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")om.alibaba.fastjson.serializer.SerAalizeConfig");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("UBs5.ucYQ-~4%/T`");
      jSONReaderScanner1.nextToken();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.features = 0;
      jSONReaderScanner0.scanFloat('z');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanInt('{');
      SymbolTable symbolTable0 = new SymbolTable(1268);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0, '{');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6'Ur6]osEosIXGc");
      char char0 = '\u0085';
      jSONReaderScanner0.scanFloat('\u0085');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanInt('\u0085');
      SymbolTable symbolTable0 = new SymbolTable(1268);
      char char1 = 'r';
      jSONReaderScanner0.scanDate('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '\u0085');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, '6');
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanInt('j');
      Locale locale0 = Locale.UK;
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      jSONScanner0.nextToken(2527);
      jSONReaderScanner0.scanFieldString(charArray0);
      Locale locale1 = null;
      try {
        locale1 = new Locale((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '^';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[4] = ')';
      charArray0[5] = 'c';
      charArray0[6] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 563, (-1797));
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanInt('T');
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Duration", (-2866));
      jSONReaderScanner0.longValue();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanLong('m');
      jSONReaderScanner0.scanString('l');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = jSONReaderScanner0.getLocale();
      locale1.getDisplayScript(locale0);
      locale0.getDisplayLanguage(locale1);
      locale0.getDisplayLanguage();
      JSONScanner jSONScanner0 = new JSONScanner(":");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("MRZh");
      jSONReaderScanner1.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("j2X$");
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      char char0 = '!';
      jSONReaderScanner1.scanDate(char0);
      SymbolTable symbolTable0 = new SymbolTable(jSONScanner0.matchStat);
      jSONReaderScanner1.scanSymbolUnQuoted(symbolTable0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray1 = null;
      jSONReaderScanner1.scanFieldBigInteger(charArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 83);
      MockDate mockDate0 = new MockDate((-8), (-7), (-8), 96, 0, 39);
      JSONScanner jSONScanner0 = new JSONScanner("n", 99);
      char char0 = 'm';
      jSONScanner0.scanUUID('m');
      jSONScanner0.scanBoolean('m');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(3311);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanFloat(' ');
      JSONScanner jSONScanner0 = new JSONScanner("null", (-1));
      jSONReaderScanner0.next();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanUUID(' ');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.nextToken();
      jSONScanner0.scanFieldSymbol(charArray0);
      stringReader0.read();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Object object0 = new Object();
      jSONScanner0.lexError("v[if/ONfnJ/h>V>bR8", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '^';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[4] = ')';
      charArray0[5] = 'c';
      charArray0[6] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 563, (-1797));
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanInt('^');
      JSONScanner jSONScanner0 = new JSONScanner("java.time.Duration", (-2866));
      jSONScanner0.eofPos = 59;
      SymbolTable symbolTable0 = new SymbolTable(8);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, ')');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"", 2849);
      SymbolTable symbolTable0 = new SymbolTable(995);
      jSONReaderScanner0.scanDecimal(' ');
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      jSONScanner0.isRef();
      BigDecimal bigDecimal0 = new BigDecimal(1352);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(>LJ");
      jSONReaderScanner1.nextToken();
      JSONScanner.charArrayCompare("\"", 0, charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 83);
      jSONReaderScanner0.getTimeZone();
      byte byte0 = (byte)71;
      JSONScanner jSONScanner0 = new JSONScanner("y>mgdxsjI", (-1602));
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch(false);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char char0 = 'B';
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'B');
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("y>mgdxsjI");
      char[] charArray1 = null;
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner((char[]) null, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 38);
      SymbolTable symbolTable0 = new SymbolTable(182);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.isRef();
      jSONScanner0.intValue();
      jSONScanner0.scanString('6');
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((String) null, (-461), 1870, 2048, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PVtNFY_\"aWg5#t{}\"r");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nev");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 501);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanDecimal('~');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1235));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 38);
      SymbolTable symbolTable0 = new SymbolTable(182);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'x');
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[1] = 'T';
      charArray0[2] = 'x';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'X';
      charArray0[2] = 'e';
      charArray0[3] = 'c';
      JSONScanner jSONScanner0 = new JSONScanner("MRN");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanLong('w');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1833));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "PVtNFY_\"aWg#t{}\"\\";
      JSONScanner jSONScanner0 = new JSONScanner("PVtNFY_\"aWg#t{}\"");
      jSONScanner0.scanNumber();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)81;
      byteArray0[2] = (byte)117;
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 476);
      jSONReaderScanner0.scanInt('{');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanString('i');
      jSONReaderScanner0.scanDouble('{');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONReaderScanner0.scanLong('i');
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 3, 0);
      jSONScanner1.scanFieldDouble(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONLexerBase.isWhitespace('0');
      jSONReaderScanner0.scanType("Ys>A");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDate('i');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar('6', (-1843987256), (-1427), 1411, 1955, 1411);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.decimalValue(false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 1463);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner(":O", 1463);
      jSONScanner0.isRef();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Z", 0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char char0 = 'g';
      jSONReaderScanner1.scanLong('g');
      jSONReaderScanner1.scanFieldUUID(charArray0);
      jSONReaderScanner1.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("Z", 1896);
      jSONScanner1.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "f3UZwEP#L];]";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f3UZwEP#L];]", 21);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 83);
      jSONReaderScanner0.getTimeZone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 24;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[Bb GxgD");
      jSONReaderScanner0.scanDouble('=');
      jSONReaderScanner1.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("syntax error :");
      jSONReaderScanner2.nextToken();
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("soKV c ");
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('i');
      jSONScanner0.scanUUID('i');
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = ':';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = '6';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ap?.\"_^S<e7hm");
      jSONReaderScanner0.skipWhitespace();
      StringReader stringReader0 = new StringReader("soKV c ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-774), (-1561), 34, (-33), 705, (-2640));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("}");
      jSONReaderScanner2.nextToken();
      jSONReaderScanner1.intValue();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      jSONScanner0.eofPos = 103;
      jSONScanner0.scanBoolean('t');
      Object object0 = new Object();
      char[] charArray0 = new char[5];
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      jSONScanner0.nextToken((-1));
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-v");
      jSONReaderScanner0.nextToken();
      jSONScanner0.charAt(103);
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'V';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDate('i');
      SymbolTable symbolTable0 = new SymbolTable(2452);
      jSONReaderScanner0.charAt(2452);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z1z~_v*S$dB{C");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate(108, 81, 81, 20, (-630));
      JSONScanner jSONScanner0 = new JSONScanner("0Y+hh", 25);
      char char0 = 'g';
      jSONScanner0.scanUUID('g');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Y+hh");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4B>C5DEz;KBS0O>");
      jSONReaderScanner1.setToken((-2302));
      JSONScanner jSONScanner1 = new JSONScanner("4B>C5DEz;KBS0O>");
      jSONScanner1.nextToken(2452);
      jSONScanner1.longValue();
      char char1 = 'D';
      jSONReaderScanner0.scanDate('D');
      jSONScanner1.integerValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("scan false error");
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Y+hh");
      jSONReaderScanner0.scanDouble('=');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0Y+hh");
      jSONReaderScanner1.scanBoolean('\u0000');
      jSONReaderScanner1.nextToken();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 2452);
      jSONReaderScanner2.intValue();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qGsy_+*9v&y", 512);
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qGsy_+*9v&y");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("knclosed");
      jSONScanner0.scanISO8601DateIfMatch(false);
      MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(78, 65, 49, 0, (-4182), 102);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("qGsy_+*9v&y");
      jSONScanner0.nextToken(12);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987256));
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDate('i');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(805, (-1843987256), (-1427), 1411, 1955, 1411);
      jSONReaderScanner0.scanLong('6');
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.longValue();
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.bytesValue();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9`");
      char[] charArray0 = new char[8];
      charArray0[3] = '\"';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      charset0.encode("illegal getter");
      jSONReaderScanner1.scanDouble('7');
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("9`");
      jSONReaderScanner2.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanDecimal('J');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONReaderScanner0.scanLong('m');
      jSONReaderScanner0.scanString('C');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":\"");
      int int0 = (-1843987256);
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      int int1 = 1011;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1011, 1909);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner1 = new JSONScanner(":O");
      jSONScanner1.scanLong('f');
      jSONScanner1.isRef();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.Collections$EmptyMap", 593);
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanLong('t');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(66, (byte)33, 1955, (-1), 7, 1955);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-v_Y-yOLH");
      jSONReaderScanner1.scanLong('f');
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66, 91);
      jSONReaderScanner0.scanString('V');
      Locale locale0 = Locale.UK;
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      jSONReaderScanner0.setToken(66);
      jSONScanner0.bytesValue();
      jSONScanner0.nextToken(4);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-405));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '4';
      charArray0[2] = '6';
      MockDate mockDate0 = new MockDate(2452, 2452, 2452, (-2516), 2452);
      JSONScanner jSONScanner0 = new JSONScanner("0Y+hh", (-2516));
      jSONScanner0.scanUUID('m');
      jSONScanner0.scanBoolean('4');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Y+hh");
      jSONReaderScanner0.setToken((-2516));
      jSONScanner0.nextToken(81);
      jSONScanner0.longValue();
      jSONScanner0.nextToken(20);
      String string0 = "com";
      int int0 = 630;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=O:`zOoA");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanString('}');
      jSONReaderScanner0.token = 120;
      jSONReaderScanner0.scanDate('D');
      jSONReaderScanner0.scanDate('Q');
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.getCurrent();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'Z';
      JSONScanner jSONScanner0 = new JSONScanner("qgsy", 863);
      jSONScanner0.scanUUID('u');
      jSONScanner0.scanBoolean('|');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%*D");
      jSONReaderScanner0.setToken(256);
      jSONScanner0.nextToken(8);
      JSONScanner jSONScanner1 = new JSONScanner("h]");
      jSONScanner1.nextIdent();
      jSONScanner1.longValue();
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(8, 863, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '.';
      charArray0[2] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, (-1843987248));
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanDate('6');
      jSONReaderScanner0.scanInt('j');
      Locale locale0 = Locale.UK;
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      jSONReaderScanner0.setToken(44);
      jSONScanner0.nextToken(2527);
      jSONScanner0.longValue();
      jSONReaderScanner0.nextToken();
      jSONScanner0.charAt(57);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      jSONReaderScanner1.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6.6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Du&u_rQSz_5jL!K#";
      JSONScanner jSONScanner0 = new JSONScanner("Du&u_rQSz_5jL!K#");
      jSONScanner0.scanInt('>');
      jSONScanner0.scanNumber();
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Du&u_rQSz_5jL!K#");
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.ParserConfig", 737);
      jSONScanner0.info();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.ParserConfig");
      JSONScanner jSONScanner1 = new JSONScanner("pos 0, json : com.alibaba.fastjson.parser.ParserConfig", 0);
      char char0 = 'm';
      JSONScanner jSONScanner2 = new JSONScanner(";b057.@~c");
      jSONScanner2.scanUUID('m');
      jSONScanner2.scanBoolean('e');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("can");
      StringReader stringReader0 = new StringReader("5-");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      int int0 = 512;
      jSONReaderScanner2.setToken(512);
      jSONScanner2.nextToken(0);
      jSONScanner2.longValue();
      jSONReaderScanner0.scanDate('e');
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '6';
      charArray0[2] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, 2452);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("N:#XK+NmQbO>h7*E", (-1704));
      jSONScanner0.nextToken((-1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      char char0 = 't';
      jSONScanner0.eofPos = 103;
      jSONScanner0.scanBoolean('t');
      Object object0 = new Object();
      JSONScanner jSONScanner1 = new JSONScanner("new");
      jSONScanner1.nextToken((-1));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-v");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      jSONScanner1.charAt(103);
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-1301));
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '~';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 41, (-1301));
      jSONReaderScanner1.scanString('~');
      jSONReaderScanner0.scanInt('B');
      Locale locale0 = Locale.UK;
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner("\"V:oxEMS");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('C');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("Type: ", 45);
      Object object0 = new Object();
      JSONScanner jSONScanner1 = new JSONScanner("Type: ");
      jSONScanner0.nextToken(45);
      jSONScanner0.longValue();
      jSONScanner0.charAt(45);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      Locale locale0 = Locale.UK;
      JSONScanner jSONScanner2 = new JSONScanner("nev");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Set<String> set0 = charset0.aliases();
      jSONScanner2.scanStringArray(set0, 'I');
      jSONScanner0.charAt(1843);
      jSONScanner2.next();
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockDate mockDate0 = new MockDate(108, 81, 81, 20, (-630));
      JSONScanner jSONScanner0 = new JSONScanner("0Y+hh", 25);
      jSONScanner0.scanUUID('g');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Y+hh");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("4B>C5DEz;KBS0O>");
      jSONReaderScanner1.setToken((-2302));
      JSONScanner jSONScanner1 = new JSONScanner("4B>C5DEz;KBS0O>");
      jSONScanner1.nextToken(2452);
      jSONScanner1.longValue();
      jSONReaderScanner0.scanDate('D');
      jSONScanner1.integerValue();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("scan false error");
      jSONScanner0.scanDecimal('D');
      jSONReaderScanner2.nextToken();
      jSONScanner1.scanUUID('g');
      jSONScanner1.scanDate('@');
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 2452;
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2452, '\u0000');
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanInt('j');
      Locale locale0 = Locale.UK;
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('6');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error pY@`arse false");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 0);
      jSONScanner0.lexError("nev", (Object[]) null);
      jSONScanner0.nextToken(785);
      JSONScanner jSONScanner1 = new JSONScanner("nev");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner1.scanIdent();
      char[] charArray0 = new char[9];
      charArray0[1] = 'c';
      charArray0[2] = 'Z';
      charArray0[4] = '4';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = '2';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "($'/pML<OU1\"]v");
      jSONScanner0.nextToken(1567);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nev", 0);
      jSONReaderScanner1.scanLong('\'');
      jSONScanner0.putChar('Z');
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = 946;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 946, 946);
      jSONReaderScanner0.scanString(' ');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 110, 49);
      jSONReaderScanner1.scanDate(' ');
      jSONReaderScanner1.scanInt('w');
      Locale locale0 = Locale.UK;
      jSONReaderScanner1.scanString('j');
      JSONScanner jSONScanner0 = new JSONScanner("c3k5 [@c0O");
      jSONReaderScanner0.setToken(110);
      jSONScanner0.nextToken(6);
      jSONScanner0.longValue();
      jSONReaderScanner0.nextToken();
      jSONScanner0.charAt(110);
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
