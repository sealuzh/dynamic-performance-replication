/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:55:16 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "can't happen";
      RE2 rE2_0 = new RE2("can't happen");
      byte[] byteArray0 = new byte[2];
      rE2_0.findSubmatch("can't happen");
      byte byte0 = (byte)34;
      rE2_0.findAllUTF8(byteArray0, (byte)34);
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String> list0 = rE2_0.findAll("45;28tB|o^", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      rE2_0.findAllUTF8(byteArray0, (byte)0);
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("};P~ih^m>B0lR1vY0");
      String string0 = "uBS8";
      rE2_0.find("uBS8");
      String string1 = "UTF-8";
      int[] intArray0 = new int[2];
      intArray0[0] = 44;
      intArray0[1] = 92;
      // Undeclared exception!
      try { 
        rE2_0.match((CharSequence) null, 92, 92, 44, intArray0, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = rE2_0.find(".X(l]*xv`t,UY|-[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("^@q9`Dq");
      rE2_0.findIndex("^@q9`Dq");
      boolean boolean0 = rE2_0.match("^@q9`Dq", 4603, 1973, 183, (int[]) null, 183);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-65);
      rE2_0.prefixRune = 0;
      rE2_0.match("");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-65);
      intArray0[1] = (int) (byte)95;
      intArray0[2] = 4355;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte) (-65);
      intArray0[7] = (int) (byte)95;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 4355, (byte)0, intArray0, (byte)95);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("QnOwWctrFY>4$N");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-430));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.match("");
      rE2_0.match("");
      rE2_0.findIndex("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 7);
      assertEquals(7, list0.size());
      assertNotNull(list0);
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      rE2_0.get();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-106);
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      assertNull(list1);
      
      List<byte[][]> list2 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list2);
      
      String string0 = rE2_0.replaceAll("rune1 ", "");
      assertEquals("rune1 ", string0);
      
      rE2_0.find("rune1 ");
      rE2_0.findIndex("");
      rE2_0.longest = true;
      String string1 = rE2_0.replaceAll("", "y&WYJc$G|rp#>C|GX?");
      assertEquals("y&WYJc$G|rp#>C|GX?", string1);
      
      String string2 = rE2_0.toString();
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-17));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("2");
      int[] intArray0 = rE2_0.findIndex("p:kxp");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 3277);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      RE2.compileImpl("", (-3804), false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)25;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte) (-119);
      rE2_0.findAllUTF8Submatch(byteArray1, (-3804));
      rE2_0.matchUTF8(byteArray0);
      rE2_0.findAllIndex("", (-6));
      rE2_0.toString();
      // Undeclared exception!
      try { 
        rE2_0.replaceFirst((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTF-8");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-95));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.RE2", 12, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      rE2_0.replaceAll("", "");
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-621), false);
      rE2_0.match("");
      int[] intArray0 = new int[6];
      intArray0[0] = (-621);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-621);
      RE2.quoteMeta("h_hO");
      intArray0[5] = (-621);
      // Undeclared exception!
      try { 
        rE2_0.match("", (-621), (-621), (-1), intArray0, (-621));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2.compilePOSIX("ALTEQ ATE");
      String string0 = RE2.quoteMeta("t");
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllSubmatchIndex("", 1);
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("Ug", (-88), false);
      byte[] byteArray0 = new byte[0];
      rE2_0.match("Ug");
      rE2_0.findUTF8(byteArray0);
      byte[] byteArray1 = new byte[4];
      rE2_0.replaceAll(")xG+:j9[?l;!J#yde", "UTF-8");
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      rE2_0.prefixComplete = true;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)90;
      rE2_0.findAllUTF8SubmatchIndex(byteArray1, (byte)91);
      rE2_0.findAllUTF8Index(byteArray0, (-3230));
      rE2_0.findAllUTF8(byteArray0, (-3230));
      RE2.match("{qJ}yELc9", "{qJ}yELc9");
      rE2_0.matchUTF8(byteArray0);
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)90;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1062);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)90;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 2852;
      intArray0[8] = (int) (byte)91;
      // Undeclared exception!
      try { 
        rE2_0.match("UTF-8", (-1062), (byte)90, (byte)90, intArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      rE2_0.findUTF8(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "com.google.re2j.Simplify$1";
      int int0 = 0;
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.Simplify$1", 0, true);
      String string1 = "CYWsx'n$VOj7;QD!w";
      rE2_0.findAll("CYWsx'n$VOj7;QD!w", 521);
      rE2_0.findAll("", 1696);
      rE2_0.match("");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        rE2_0.findAllUTF8Submatch((byte[]) null, 1644);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)1;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 12);
      assertNotNull(list0);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAllSubmatchIndex("", (-669));
      rE2_0.prefixComplete = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      rE2_0.longest = true;
      byteArray0[1] = (byte)14;
      rE2_0.get();
      byteArray0[2] = (byte)10;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)94;
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)14);
      RE2.match("", "");
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.replaceFirst("sm", "");
      rE2_0.findSubmatch("");
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)10);
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.toString();
      rE2_0.findUTF8(byteArray0);
      Machine machine0 = rE2_0.get();
      MachineInput machineInput0 = MachineInput.fromUTF8(byteArray0, (byte)0, (byte)0);
      machine0.match(machineInput0, 12, 1246);
      rE2_0.put(machine0);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      rE2_0.findAllUTF8(byteArray0, 0);
      rE2_0.get();
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray1, (-1020));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 4);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)53;
      rE2_0.findAllUTF8(byteArray0, 0);
      rE2_0.findAllSubmatch("fH),xs=2p", 4);
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.replaceFirst("", "&g=;y4B;+Ze7j%?F08");
      RE2 rE2_1 = RE2.compilePOSIX("");
      rE2_0.find("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)118;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-20);
      rE2_1.findAllUTF8(byteArray1, 36);
      rE2_1.findAllIndex("eC\\B|o^s4:", 123);
      rE2_1.findAll("eC\\B|o^s4:", 123);
      rE2_1.numberOfCapturingGroups();
      RE2 rE2_2 = RE2.compilePOSIX("&g=;y4B;+Ze7j%?F08");
      assertNotSame(rE2_2, rE2_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "CONCAT";
      RE2 rE2_0 = RE2.compile("CONCAT");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, (-1444));
      rE2_0.findAllSubmatch("CONCAT", 1553);
      rE2_0.get();
      // Undeclared exception!
      try { 
        MachineInput.fromUTF8(byteArray0, (byte)0, 817);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // end is greater than length: 817 > 7
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllSubmatchIndex("", (-29));
      int[] intArray0 = new int[6];
      intArray0[0] = 2008;
      intArray0[1] = (int) (byte)53;
      intArray0[2] = (int) (byte)53;
      intArray0[3] = (int) (byte)53;
      intArray0[4] = 2008;
      intArray0[5] = (int) (byte)53;
      rE2_0.match("", 2008, 0, (-1814), intArray0, (byte)53);
      rE2_0.match("", 119154, (-510), 66517, intArray0, 3830);
      rE2_0.findAllIndex("", (byte)53);
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("aH,u/&{j", 1773, false);
      int[] intArray0 = new int[13];
      intArray0[0] = 335;
      intArray0[1] = 2877;
      rE2_0.match("xqz9_g8WMDkq*!", 7, 2877, 2, intArray0, 335);
      RE2 rE2_1 = RE2.compileImpl("GGQO8giz", 50, false);
      rE2_1.findSubmatchIndex("");
      RE2 rE2_2 = null;
      try {
        rE2_2 = new RE2(".+*?()|[]{}^$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("im9I;");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      rE2_0.replaceFirst("im9I;", "error parsing regexp: ");
      byteArray0[1] = (byte)1;
      rE2_0.findAllSubmatchIndex("im9I;", 65281);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.prefixComplete = false;
      rE2_0.reset();
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.match("im9I;", 0, (byte) (-107), 0, (int[]) null, (byte)1);
      rE2_0.findAllSubmatch("im9I;", 0);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 12);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      rE2_0.toString();
      byte[] byteArray1 = rE2_0.prefixUTF8;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[6] = (int) (byte)0;
      rE2_0.match("", (byte)0, (byte)0, (byte)0, intArray0, 0);
      rE2_0.findAllIndex("", 0);
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      RE2 rE2_1 = RE2.compilePOSIX("");
      rE2_1.matchUTF8(byteArray0);
      rE2_1.match("", (byte)0, (byte)0, (byte)0, (int[]) null, (byte)0);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, 4);
      rE2_0.reset();
      rE2_0.findSubmatch("");
      String string0 = rE2_1.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("$");
      List<String[]> list0 = rE2_0.findAllSubmatch("$", (-1566));
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("#|");
      RE2 rE2_1 = RE2.compile("#|");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-102);
      rE2_1.findUTF8SubmatchIndex(byteArray0);
      rE2_0.matchUTF8(byteArray0);
      rE2_1.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, 297);
      rE2_0.reset();
      rE2_0.findSubmatch("#|");
      rE2_1.replaceAll("#|", "#|");
      rE2_0.findAllSubmatch("#||#|", 5);
      RE2.compile("#||#|");
      byte[][] byteArray2 = rE2_1.findUTF8Submatch(byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("S>&()v2+^m!q>EY|");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-2);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8Submatch(byteArray0, 1162);
      rE2_0.findSubmatch("BMtv,W/Kg]/Et");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (byte) (-2));
      assertFalse(list0.isEmpty());
  }
}
