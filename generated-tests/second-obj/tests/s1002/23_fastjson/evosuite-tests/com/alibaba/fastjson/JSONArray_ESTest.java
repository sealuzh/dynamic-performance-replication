/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:00:58 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import java.io.FilterInputStream;
import java.io.Writer;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Clock;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.JapaneseDate;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(3203);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3203, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.sort((Comparator<? super Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-2395));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<FilterInputStream> linkedHashSet0 = new LinkedHashSet<FilterInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-2555), (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3231);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3231, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockHijrahDate> linkedList0 = new LinkedList<MockHijrahDate>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3198, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(815);
      LinkedList<MockHijrahDate> linkedList0 = new LinkedList<MockHijrahDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, concurrentHashMap0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray0 = new JSONArray(list0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      jSONArray0.toJavaList(class1);
      javaBeanSerializer0.getContextValueFilters();
      jSONArray0.fluentRemove((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1203));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3059);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll((-1958), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1124075009);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1124075009, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology chronology0 = Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(2016, (Object) chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2016, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      boolean boolean0 = jSONArray0.remove((Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      jSONArray0.fluentSet(3238, object0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray(linkedList0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Object object0 = new Object();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(3195, 3237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3237
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Long> class0 = Long.class;
      String[] stringArray0 = new String[0];
      jSONArray0.iterator();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<?> class1 = javaBeanSerializer0.getType();
      jSONArray0.setComponentType(class1);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3241);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3241, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2016, list0);
      jSONArray1.setComponentType(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-1958));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1958, Size: 2017
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3209);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      JSONObject jSONObject0 = new JSONObject();
      TreeMap<String, MockJapaneseDate> treeMap0 = new TreeMap<String, MockJapaneseDate>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(treeMap0);
      jSONArray0.add((Object) jSONObject1);
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Integer integer0 = new Integer((byte)0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<PropertyNamingStrategy> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.containsAll(list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer((-127));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray(linkedList0);
      jSONArray0.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-1958));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1958, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.removeAll(set0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/(lB1wI1AN");
      int int0 = (-1030);
      int int1 = 94;
      Chronology chronology0 = Chronology.ofLocale(jSONArray0.defaultLocale);
      HashMap<TemporalField, Long> hashMap0 = new HashMap<TemporalField, Long>();
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      chronology0.resolveDate(hashMap0, resolverStyle0);
      Temporal temporal0 = null;
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      // Undeclared exception!
      try { 
        chronoUnit0.between((Temporal) null, (Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.getJSONObject(1236);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      jSONArray0.getJSONObject(1236);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3238, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(3238);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2016, list0);
      int int0 = jSONArray1.getIntValue(189);
      assertEquals(2017, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.fluentSet(3205, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.getObject(1, (Type) null);
      Object object1 = new Object();
      jSONArray0.size();
      jSONArray0.equals((Object) null);
      assertEquals(3206, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object1 = new Object();
      jSONArray1.getDoubleValue(1280);
      jSONArray1.getJSONObject(1263);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(280);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 280, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3238;
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3238, object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      JSON.toJSONString((Object) japaneseDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray2 = jSONArray0.fluentRemove(object0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray0.toJavaList(class0);
      jSONArray2.getFloatValue(3210);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger((-2187));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      jSONArray0.fluentSet(3238, object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      JSON.toJSONString((Object) japaneseDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.fluentRemove(object0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONArray0.toJavaList(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getObject(1, (Type) null);
      Object object1 = new Object();
      jSONArray1.getJSONObject(1281);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      jSONArray1.fluentRemove((Object) mockMinguoDate1);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = Opcodes.IFLE;
      Object object0 = new Object();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.addAll((Collection<?>) set0);
      jSONArray0.toJSONString();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1124075009);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1124075009, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(2016);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      jSONArray0.remove((Object) linkedList0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "/(lB1wI1AN";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "/(lB1wI1AN";
      stringArray0[4] = "/(lB1wI1AN";
      jSONArray0.toArray(stringArray0);
      jSONArray0.iterator();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3238, object0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      int int0 = 2016;
      Integer integer0 = new Integer(2016);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(object0);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Object object1 = new Object();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.add((-1958), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2016);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object1 = new Object();
      jSONArray0.clear();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3238, object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      jSONArray1.getDoubleValue(1642);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(3238);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.Object@334455dd
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.contains(mockThaiBuddhistDate0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-2034));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      jSONArray0.fluentSet(3238, object0);
      int int0 = 2016;
      Integer integer0 = new Integer(2016);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = new Object();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      Integer integer0 = new Integer(2004);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(2004);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2004, list0);
      linkedList0.pollLast();
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(2004);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3238);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3238, object0);
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Chronology.from(japaneseDate0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSON.toJSONString((Object) mockHijrahDate0);
      Integer integer0 = new Integer((-1958));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3238);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.Object@5705591
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3174, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.getObject(1, (Type) null);
      Object object1 = new Object();
      jSONArray1.iterator();
      jSONArray0.listIterator();
      jSONArray0.getShortValue(1);
      jSONArray0.clone();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3205);
      Object object0 = new Object();
      jSONArray0.fluentSet(3205, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3211, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3201);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig.getGlobalInstance();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getObject(1, (Type) null);
      Object object1 = new Object();
      jSONArray1.getJSONObject(1263);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      jSONArray1.fluentRemove((Object) mockMinguoDate1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 3237;
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      jSONArray0.fluentSet(3237, object0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ql}8Z*J");
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      SerializeWriter serializeWriter0 = null;
      try {
        serializeWriter0 = new SerializeWriter((-1958));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1958
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3256);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3256, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.defaultLocale.getDisplayVariant(jSONArray1.defaultLocale);
      Object object1 = new Object();
      jSONArray1.getJSONObject(1267);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) mockMinguoDate1);
      JSON.toJSONString(object1, false);
      jSONArray2.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1958), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object1 = new Object();
      jSONArray0.getJSONObject(3209);
      jSONArray1.indexOf((Object) null);
      jSONArray0.getLongValue(1);
      Object object2 = new Object();
      jSONArray0.addAll((Collection<?>) linkedList0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((-1958));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray1.getJSONObject(3200);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@63bd66a6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3237);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3237, object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      SerializeConfig.getGlobalInstance();
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      jSONArray0.getObject(1, (Type) class1);
      Object object1 = new Object();
      int int0 = (-1648);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-1648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
