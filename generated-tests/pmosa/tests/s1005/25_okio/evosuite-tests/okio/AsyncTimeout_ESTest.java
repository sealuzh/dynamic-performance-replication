/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:41:00 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.GzipSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      Source source0 = asyncTimeout0.source((Source) null);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException("{`,", (Throwable) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit(iOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1644L);
      asyncTimeout2.timedOut();
      asyncTimeout0.enter();
      Source source0 = asyncTimeout1.source((Source) null);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(1644L);
      asyncTimeout1.timedOut();
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(10000L);
      Sink sink0 = asyncTimeout1.sink((Sink) null);
      asyncTimeout1.sink(sink0);
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      GzipSource gzipSource0 = null;
      try {
        gzipSource0 = new GzipSource((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.GzipSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout0.timeout(60000000000L, timeUnit0);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.exit();
      asyncTimeout0.exit();
      asyncTimeout1.deadlineNanoTime(1644L);
      asyncTimeout1.timedOut();
      asyncTimeout1.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
