/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:45:31 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>((Map<Object, Map<HashMap<Object, Object>, Object>>) null, class0);
      doubleKeyMap0.put((Object) null, hashMap0, (Object) "");
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.remove("VLe*p.YJ2p!bia%8-T", (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = doubleKeyMap1.remove("", (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      HashMap<Object, Map<Map<Object, Map<Object, Integer>>, String>> hashMap0 = new HashMap<Object, Map<Map<Object, Map<Object, Integer>>, String>>();
      DoubleKeyMap<Object, Map<Object, Map<Object, Integer>>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Map<Object, Integer>>, String>(hashMap0);
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Object, Map<Object, Integer>>) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>((Map<Object, Map<HashMap<Object, Object>, Object>>) null, class0);
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(2);
      Object object0 = doubleKeyMap1.put("V7L(D{", integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      Integer integer0 = new Integer(528);
      Integer integer1 = doubleKeyMap0.put((Object) "HIKm`>@bEjG0u+NbV!", (String) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<Integer, String>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Integer, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Integer, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap0.get((HashMap<Integer, String>) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<Object, Integer>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, String>(class0);
      Map<Object, Map<Integer, Map<Object, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, Integer>>(map0, class0);
      Object object0 = new Object();
      Map<Integer, Map<Object, Integer>> map1 = doubleKeyMap1.get(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>(hashMap1);
      Integer integer0 = new Integer(2);
      hashMap2.put(integer0, hashMap0);
      hashMap0.put(doubleKeyMap0, hashMap2);
      // Undeclared exception!
      try { 
        doubleKeyMap0.remove((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0, (Class<? extends Map>) null);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Integer) null, "us.codecraft.webmagic.utils.MultiKeyMapBase", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0);
      Map<Object, Map<Object, String>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(map1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Integer>, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Object, String>((Map<Map<Object, Integer>, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(integer0, "6E8zL\"", "vC}n``YV~c@");
      String string0 = doubleKeyMap0.remove(integer0, "tg)C#NGS_-,6*N[Q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.remove((Integer) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      doubleKeyMap0.put((Integer) null, "", "");
      String string0 = doubleKeyMap0.put((Integer) null, "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap0.get((Integer) null, (Object) "us.codecraft.weagic.utils.MultiKeyMapBase");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, String, Map<Object, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap0, "}iH==G|{4W9yr*", (Map<Object, Integer>) null);
      Map<Object, Integer> map0 = doubleKeyMap0.get(hashMap0, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<String, HashMap<String, String>>> hashMap0 = new HashMap<Map<Object, Integer>, Map<String, HashMap<String, String>>>();
      DoubleKeyMap<Map<Object, Integer>, String, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, HashMap<String, String>>(hashMap0);
      DoubleKeyMap<Integer, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<Object, Integer>>();
      Integer integer0 = new Integer(1);
      Map<Object, Integer> map0 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<String, String>, Map<String, Object>> hashMap0 = new HashMap<HashMap<String, String>, Map<String, Object>>();
      DoubleKeyMap<HashMap<String, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Object>(hashMap0, class0);
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap1, class0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      doubleKeyMap0.put((Integer) null, "", "");
      String string0 = doubleKeyMap0.remove((Integer) null, "");
      assertEquals("", string0);
  }
}
