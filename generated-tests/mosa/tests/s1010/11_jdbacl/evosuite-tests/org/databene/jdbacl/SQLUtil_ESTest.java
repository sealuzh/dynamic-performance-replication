/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:26:11 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.Locale;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.LanguageFactory;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.command.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create mateZialized view");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.removeComments("libfbembed.so");
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(" '", "1AX;zP", " '");
      assertEquals(" '", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "delete";
      stringArray0[1] = "exec";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("delete = 'delete' AND exec = 'exec'", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.insert(0, " REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance(1642, "o{y$aoufe7r4?~L");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sf=@$ca6/$rMd1Vij^", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = LanguageFactory.MODULE;
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.sf=@$ca6/$rMd1Vij^", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize("^-:@D/uQ=J/Q", true);
      assertEquals("^ - : @ D / uQ = J / Q", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.innerJoin("drop materialized viewf2", stringArray0, "drop materialized viewf2", "drop materialized viewf2", stringArray0);
      assertEquals("drop materialized viewf2 as drop materialized viewf2 on ", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "create materialized view", "", stringArray0);
      assertEquals("left join create materialized view as  on . = . and .create materialized view = .create materialized view and . = . and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@S};2/MLoEn";
      stringArray0[1] = "@S};2/MLoEn";
      stringArray0[2] = "UNIQUE ";
      String string0 = SQLUtil.renderColumnListWithTableName("@S};2/MLoEn", stringArray0);
      assertEquals("@S};2/MLoEn.@S};2/MLoEn, @S};2/MLoEn.@S};2/MLoEn, @S};2/MLoEn.UNIQUE ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.normalize("//", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/ /";
      String string1 = SQLUtil.join((String) null, "executeeeteyco cyz", stringArray0, "//", (String) null, stringArray0);
      assertEquals("// as null on executeeeteyco cyz./ / = null./ /", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.removeComments("I0Z");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string1 = SQLUtil.renderValue(mockHijrahDate0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("LV'p.");
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      SQLUtil.addRequiredCondition("i/h+b6z hTmGD;J&)", stringBuilder1);
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder1.toString());
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("sf=@_ca66$rMd1Vij^", stringBuilder0);
      assertEquals("sf=@_ca66$rMd1Vij^", stringBuilder0.toString());
      
      String string0 = NoPutResultSet.PREVIOUS;
      String string1 = SQLUtil.normalize("sf=@_ca66$rMd1Vij^", true);
      assertEquals("sf = @ _ca66 $ rMd1Vij ^", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.removeComments("isert");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Z", true, "isert", "isert");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Z ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9L TD";
      stringArray0[1] = "9L TD";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "9L TD", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (9L TD, 9L TD)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("", stringBuilder0);
      stringBuilder0.chars();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.mutatesDataOrStructure("create materialized view");
      String string0 = LanguageFactory.MODULE;
      assertEquals("org.apache.derby.iapi.sql.LanguageFactory", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = NoPutResultSet.PREVIOUS;
      SQLUtil.mutatesDataOrStructure("deletef2l)\\)gmgrckn&s");
      SQLUtil.isDDL(".");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("/lp-,5=~Q^:G_XWb", true);
      assertEquals("/ lp -, 5 = ~ Q ^ : G_XWb", string0);
      
      String string1 = LanguageFactory.MODULE;
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("K&V&6Z^]Vz", false);
      assertEquals("K & V & 6Z ^ ] Vz", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.normalize("g()C6JbJWWW7},t2z", true);
      assertEquals("g () C6JbJWWW7 }, t2z", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-32), "m");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = LanguageFactory.MODULE;
      Character character0 = new Character('/');
      String string1 = SQLUtil.substituteMarkers("e", "FLOOR", character0);
      assertEquals("e", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("executeuv=e%wh-+ zlfmd'a", false);
      String string0 = LanguageFactory.MODULE;
      assertEquals("org.apache.derby.iapi.sql.LanguageFactory", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("alter table^-:@d/uq=j/q", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(b,>(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (b,>(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("H*6(~TOm]f", false);
      assertEquals("H * 6 (~ TOm ] f", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FIELD_PRECISION", defaultDBTable0, (-177), "t<zi\"Sb~s");
      DBCatalog dBCatalog0 = new DBCatalog("FIELD_PRECISION");
      dBCatalog0.getSchema("FIELD_PRECISION");
      DBPackage dBPackage0 = new DBPackage("t<zi\"Sb~s", (DBSchema) null);
      SQLUtil.substituteMarkers("FIELD_PRECISION", "t<zi\"Sb~s", dBCatalog0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("FIELD_PRECISION, FIELD_PRECISION, FIELD_PRECISION, FIELD_PRECISION, FIELD_PRECISION", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("}|!*<[?TC$1oXCT", true);
      assertEquals("} | ! * < [ ? TC $ 1oXCT", string0);
      
      boolean boolean0 = SQLUtil.isDML("}|!*<[?TC$1oXCT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.removeComments("isert");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Z", true, "isert", "isert");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Z ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("UJ\"0cO?@65e<", true);
      assertEquals("UJ \"0cO?@65e<\"", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-32), "m");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("M(2,2)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("tr{nca.e");
      assertNull(boolean0);
      
      String string0 = LanguageFactory.MODULE;
      DBDataType dBDataType0 = DBDataType.getInstance(102, "org.apache.derby.iapi.sql.LanguageFactory");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.sql.LanguageFactory", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ORG.APACHE.DERBY.IAPI.SQL.LANGUAGEFACTORY(0)", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("o{y$aoufe;b7r4?~L");
      String[] stringArray0 = new String[1];
      defaultDBTable0.setName("o{y$aoufe;b7r4?~L");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o{y$aoufe;b7r4?~L", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT o{y$aoufe;b7r4?~L ", string0);
      
      String string1 = SQLUtil.normalize("CONSTRAINT o{y$aoufe;b7r4?~L ", false);
      assertEquals("CONSTRAINT o { y $ aoufe ; b7r4 ? ~ L", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "o{y$aoufe;b7r4?~L";
      stringArray0[1] = "o{y$aoufe;b7r4?~L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "table null", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"table null\" ", string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("~ kbtZJ[Jhd.+@u3C_a", false);
      assertEquals("~ kbtZJ [ Jhd.+ @ u3C_a", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("//", false);
      StringBuilder stringBuilder0 = new StringBuilder("//");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("k", stringBuilder0);
      assertEquals("// or k", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("libfbembed.so", (DBTable) null, (-1802), "CREATE USER ");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE USER ", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o{y$aoufe;b7r4?~L", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT o{y$aoufe;b7r4?~L UNIQUE ()", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      defaultDBTable0.setName("o{y$aoufe7r4?~L");
      stringArray0[0] = "o{y$aoufe7r4?~L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o{y$aoufe7r4?~L", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "o{y$aoufe7r4?~L");
      dBUniqueConstraint0.addColumnName("o{y$aoufe7r4?~L");
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("o{y$aoufe7r4?~LCONSTRAINT o{y$aoufe7r4?~L ", stringBuilder0.toString());
      
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table o{y$aoufe7r4?~L", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      String string0 = LanguageFactory.MODULE;
      TableContainer tableContainer0 = new TableContainer("alter session+\"ezflo", (CompositeDBObject<? extends DBObject>) null);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.removeComments("`^E]/");
      boolean boolean0 = SQLUtil.isProcedureCall("org.apache.derby.iapi.sql.execute.CurorResultSt[]");
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertTrue(boolean1 == boolean0);
      
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.iapi.sql.execute.CurorResultSt[]");
      tableContainer0.getTable("8BI&D");
      boolean boolean2 = SQLUtil.isQuery("org.apache.derby.iapi.sql.execute.CurorResultSt[]");
      assertFalse(boolean2);
      
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container org.apache.derby.iapi.sql.execute.CurorResultSt[]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("}|!*<[?TC$1oXCT", false);
      String string0 = LanguageConnectionContext.lccStr;
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("50LwX)$1)iz", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("} | ! * < [ ? TC  $ 1oXCT");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("6U4j\"I#sTa0*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R8", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R8";
      stringArray0[1] = "R8";
      stringArray0[2] = "R8";
      stringArray0[3] = "6U4j\"I#sTa0*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6U4j\"I#sTa0*", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 6U4j\"I#sTa0* PRIMARY KEY (R8, R8, R8, 6U4j\"I#sTa0*)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog("insertcreate matezialized vie");
      String string0 = SchemaDescriptor.IBM_SYSTEM_NULLID_SCHEMA_NAME;
      String string1 = SQLUtil.normalize("insertcreate matezialized vie", false);
      assertEquals("insertcreate matezialized vie", string1);
      
      String string2 = Dependable.TABLE;
      boolean boolean0 = SQLUtil.isDML("5V,&~u^y*<{fpB&dhuO");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName((String) null);
      String[] stringArray0 = new String[18];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      defaultDBTable0.setName("o{y$aoufe7r4?~L");
      stringArray0[0] = "o{y$aoufe7r4?~L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o{y$aoufe7r4?~L", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "o{y$aoufe7r4?~L");
      dBUniqueConstraint0.addColumnName("o{y$aoufe7r4?~L");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[1];
      dBUniqueConstraint0.setName((String) null);
      charArray0[0] = '-';
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      String string0 = SQLUtil.removeComments("1n;mDk;r%.-i");
      assertEquals("1n;mDk;r%.-i", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("7^9xJ:\"kM(", defaultDBTable0, 467, "c12*zQG()B#q,Qcv=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("A[N&7E;");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A[N&7E;";
      stringArray0[1] = "A[N&7E;";
      String string0 = "FeM+/\\BKS";
      stringArray0[2] = "FeM+/BKS";
      stringArray0[3] = "A[N&7E;";
      stringArray0[4] = "A[N&7E;";
      stringArray0[5] = "A[N&7E;";
      stringArray0[6] = "A[N&7E;";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Y~", defaultDBTable0, (-454), "(A[N&7E;, A[N&7E;, FeM+/BKS, A[N&7E;, A[N&7E;, A[N&7E;, A[N&7E;)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A[N&7E;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m", defaultDBTable0, 499, "m");
      SQLUtil.renderColumn(defaultDBColumn0);
      Parser.quoteIdentifier("m");
      String[] stringArray0 = new String[8];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFileWriter mockFileWriter0 = new MockFileWriter("m M NULL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Locale locale0 = new Locale("BIT VARYING", "m");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(";:+.Iq?\"5.fjw");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m", defaultDBTable0, 499, "m");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("m M NOT NULL", string0);
      
      Parser.quoteIdentifier("m");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      stringArray0[1] = "m M NOT NULL";
      stringArray0[7] = "\"m\"";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockFileWriter mockFileWriter0 = new MockFileWriter("m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Locale locale0 = new Locale("", "m M NOT NULL");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("cal");
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, ")<Hw)Cs$pm5ECJx,=T", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      boolean boolean0 = SQLUtil.isDML("drop tableexecutedeleteyco cyz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("executeeeteyco cyz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d+44+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "BIT VARYING";
      stringArray0[1] = ";:+.Iq?\"5.fjw";
      stringArray0[2] = ";:+.Iq?\"5.fjw";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d+44+";
      stringArray0[6] = "d+44+";
      stringArray0[7] = "executeeeteyco cyz";
      stringArray0[8] = "d+44+";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("N`ntI;/E", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }
}
