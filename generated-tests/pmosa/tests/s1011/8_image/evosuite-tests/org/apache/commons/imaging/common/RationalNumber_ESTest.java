/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:04:29 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 0L);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(0L, (-1213L));
      String string0 = rationalNumber0.toString();
      assertEquals("0", string0);
      
      rationalNumber0.longValue();
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber0.doubleValue();
      rationalNumber0.floatValue();
      rationalNumber0.intValue();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toString();
      long long0 = rationalNumber1.longValue();
      assertEquals(0L, long0);
      
      rationalNumber0.toString();
      rationalNumber0.floatValue();
      rationalNumber0.toString();
      rationalNumber1.doubleValue();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(0);
      RationalNumber rationalNumber5 = RationalNumber.valueOf(2.147483647E9);
      rationalNumber5.negate();
      rationalNumber4.toDisplayString();
      rationalNumber5.negate();
      assertEquals((short) (-1), rationalNumber5.shortValue());
      
      rationalNumber0.toDisplayString();
      rationalNumber3.doubleValue();
      rationalNumber1.toDisplayString();
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      
      rationalNumber2.toString();
      double double0 = rationalNumber2.doubleValue();
      assertEquals(0.0, double0, 0.01);
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(1.0);
      rationalNumber3.intValue();
      long long1 = rationalNumber6.longValue();
      assertEquals(1L, long1);
      assertEquals(1.0F, rationalNumber6.floatValue(), 0.01F);
      
      String string1 = rationalNumber4.toDisplayString();
      assertEquals("0", string1);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber7.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.789666666809353E-4);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836465028615E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2147483647", string0);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(0, 1);
      String string1 = rationalNumber0.toDisplayString();
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      RationalNumber rationalNumber5 = rationalNumber4.negate();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1571L, 1571L);
      RationalNumber rationalNumber7 = rationalNumber0.negate();
      rationalNumber7.toString();
      RationalNumber rationalNumber8 = RationalNumber.valueOf((-241.23));
      RationalNumber rationalNumber9 = RationalNumber.valueOf(1571L);
      assertEquals(1571, rationalNumber9.intValue());
      
      RationalNumber rationalNumber10 = RationalNumber.valueOf((-4312.8868974));
      assertEquals((-4312.8867F), rationalNumber10.floatValue(), 0.01F);
      
      rationalNumber0.toString();
      RationalNumber.factoryMethod((-4503L), (-1L));
      rationalNumber2.intValue();
      rationalNumber0.toString();
      rationalNumber4.doubleValue();
      rationalNumber6.floatValue();
      rationalNumber2.floatValue();
      rationalNumber3.longValue();
      long long0 = rationalNumber5.longValue();
      assertEquals(0L, long0);
      
      String string2 = rationalNumber4.toString();
      assertTrue(string2.equals((Object)string1));
      
      rationalNumber4.floatValue();
      RationalNumber.factoryMethod(1571, 1);
      int int0 = rationalNumber8.intValue();
      assertEquals((-241L), rationalNumber8.longValue());
      assertEquals((-241), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1765.5);
      assertEquals(3531, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2430, 2430);
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, (-2147L));
      rationalNumber0.negate();
      RationalNumber.valueOf(1);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1680L, 2430);
      rationalNumber2.toString();
      rationalNumber2.toDisplayString();
      rationalNumber1.negate();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.113003918362665E-6);
      assertEquals(1.1130044553568348E-6, rationalNumber0.doubleValue(), 0.01);
      assertEquals(898469, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-531.804741));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0E-8);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-531.805", string0);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(0L, 181L);
      String string1 = rationalNumber4.toString();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(0L, (-2096L));
      rationalNumber1.longValue();
      rationalNumber5.toString();
      long long0 = rationalNumber3.longValue();
      assertEquals(531L, long0);
      
      rationalNumber1.floatValue();
      assertEquals((-531.80475F), rationalNumber0.floatValue(), 0.01F);
      
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(0L, 5695);
      rationalNumber7.toString();
      rationalNumber4.negate();
      String string2 = rationalNumber4.toDisplayString();
      String string3 = rationalNumber2.toDisplayString();
      assertTrue(string3.equals((Object)string1));
      
      long long1 = rationalNumber6.longValue();
      assertEquals(0L, long1);
      assertEquals(1, rationalNumber6.divisor);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(1);
      rationalNumber2.longValue();
      assertEquals(100000000, rationalNumber2.divisor);
      
      rationalNumber8.floatValue();
      String string4 = rationalNumber8.toString();
      assertFalse(string4.equals((Object)string2));
      
      RationalNumber rationalNumber9 = RationalNumber.factoryMethod(0, 1);
      assertEquals(0, rationalNumber9.intValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483664L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483664, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2593.6));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("2,593.6", string0);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-2235L), (-1621L));
      RationalNumber.valueOf(2235);
      RationalNumber rationalNumber5 = RationalNumber.valueOf(5);
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      RationalNumber.factoryMethod(1621, (-2235L));
      String string1 = rationalNumber3.toString();
      assertEquals("-12968/5 (-2,593.6)", string1);
      
      rationalNumber0.longValue();
      rationalNumber1.longValue();
      rationalNumber1.floatValue();
      String string2 = rationalNumber5.toString();
      RationalNumber rationalNumber7 = RationalNumber.valueOf(2593L);
      rationalNumber7.toString();
      rationalNumber4.longValue();
      rationalNumber6.toString();
      String string3 = rationalNumber5.toDisplayString();
      assertTrue(string3.equals((Object)string2));
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-2593.6F), float0, 0.01F);
      
      RationalNumber.factoryMethod((-12968), 1139L);
      RationalNumber.factoryMethod(1621, 11L);
      int int0 = rationalNumber1.intValue();
      assertEquals(2593, int0);
      
      rationalNumber0.doubleValue();
      RationalNumber.valueOf(2593);
      RationalNumber.factoryMethod((-1252L), 834L);
      RationalNumber.factoryMethod(2147483650L, 1);
      rationalNumber2.longValue();
      assertEquals(0.0F, rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(12968);
      assertEquals(12968L, rationalNumber8.longValue());
      
      RationalNumber rationalNumber9 = RationalNumber.valueOf(0.0);
      assertEquals(0L, rationalNumber9.longValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(4091L, 1);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("0", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1878L, 4091);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(616.0221241);
      assertEquals(7127992, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      RationalNumber rationalNumber5 = rationalNumber4.negate();
      String string1 = rationalNumber5.toDisplayString();
      assertEquals((-0.45905647F), rationalNumber4.floatValue(), 0.01F);
      assertEquals(0L, rationalNumber5.longValue());
      assertEquals("0.459", string1);
      
      long long0 = rationalNumber1.longValue();
      assertEquals(4091L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483663L, 2147483663L);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1L, rationalNumber0.longValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483683L), (-558L));
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("3,848,537.068", string0);
      
      String string1 = rationalNumber1.toString();
      assertEquals("1073741842/279 (3,848,537.068)", string1);
      
      String string2 = rationalNumber0.toDisplayString();
      assertEquals("0", string2);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1073741842);
      assertEquals(1.073741842E9, rationalNumber2.doubleValue(), 0.01);
      assertEquals(1073741842, rationalNumber2.numerator);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3813L, 2147483676L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      rationalNumber0.intValue();
      int int0 = rationalNumber0.intValue();
      assertEquals(1.7751008040724216E-6, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
      assertEquals(536870919, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3813L, 2147483676L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      RationalNumber.factoryMethod(953, 2147483676L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(953, 2147483676L);
      assertEquals(4.433095397368692E-7, rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 2147483676L);
      assertEquals(1, rationalNumber2.numerator);
  }
}
