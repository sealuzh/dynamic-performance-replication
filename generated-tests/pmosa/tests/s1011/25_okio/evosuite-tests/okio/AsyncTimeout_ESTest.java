/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:25:28 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Timeout timeout0 = asyncTimeout0.timeout(0L, timeUnit0);
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout0.timeout(0L, timeUnit0);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("", mockIOException0);
      MockIOException mockIOException1 = new MockIOException(mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      asyncTimeout0.sink((Sink) null);
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException0);
      
      asyncTimeout0.exit((IOException) mockIOException1);
      MockIOException mockIOException2 = new MockIOException("&fopZ=}\"L0", mockIOException1);
      IOException iOException1 = asyncTimeout0.exit((IOException) mockIOException2);
      IOException iOException2 = asyncTimeout0.newTimeoutException(iOException1);
      assertEquals("timeout", iOException2.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.exit(true);
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.getSuppressed();
      mockIOException0.getCause();
      mockIOException0.getLocalizedMessage();
      mockIOException0.toString();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit();
      asyncTimeout0.timedOut();
      mockIOException0.toString();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.enter();
      ByteString byteString0 = null;
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1((Source) null, (ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      Timeout timeout0 = AsyncTimeout.head.clearTimeout();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      timeout0.timeout(4886L, timeUnit0);
      boolean boolean0 = AsyncTimeout.head.exit();
      assertFalse(boolean0);
      
      asyncTimeout0.enter();
      MockIOException mockIOException2 = new MockIOException();
      IOException iOException0 = AsyncTimeout.head.newTimeoutException(mockIOException2);
      assertEquals("timeout", iOException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Timeout timeout0 = asyncTimeout0.deadline(2648L, timeUnit0);
      asyncTimeout0.exit();
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.printStackTrace();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout1.enter();
      MockIOException mockIOException2 = (MockIOException)asyncTimeout0.exit((IOException) mockIOException1);
      mockIOException0.fillInStackTrace();
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)AsyncTimeout.head.deadlineNanoTime(0L);
      asyncTimeout2.deadlineNanoTime();
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException2);
      AsyncTimeout.head.enter();
      AsyncTimeout.head.newTimeoutException(interruptedIOException0);
      // Undeclared exception!
      try { 
        AsyncTimeout.head.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      HashingSource.sha256(buffer0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      asyncTimeout0.timeout(3210L, timeUnit0);
      boolean boolean0 = asyncTimeout0.exit();
      asyncTimeout0.enter();
      boolean boolean1 = asyncTimeout0.exit();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.close();
      asyncTimeout0.source(hashingSource0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.timedOut();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.close();
      asyncTimeout0.source(hashingSource0);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("");
      mockIOException0.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.timedOut();
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      long long0 = (-2521L);
      asyncTimeout0.deadlineNanoTime((-2521L));
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("yi[wueb(X; ARB6}vY");
      mockIOException0.toString();
      mockIOException0.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      try { 
        asyncTimeout1.exit(true);
        fail("Expecting exception: InterruptedIOException");
      
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 0L;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("yi[wueb(X; ARB6}vY");
      MockIOException mockIOException1 = (MockIOException)mockIOException0.fillInStackTrace();
      asyncTimeout1.timedOut();
      asyncTimeout1.newTimeoutException(mockIOException1);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("yi[wueb(X; ARB6}vY");
      mockIOException0.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        HashingSource.sha256((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }
}
