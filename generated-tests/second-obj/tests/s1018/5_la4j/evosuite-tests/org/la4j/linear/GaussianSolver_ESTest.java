/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:24:49 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      Random.setNextRandom(1);
      SparseVector sparseVector0 = SparseVector.zero(1, (-1169));
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1);
      GaussianSolver gaussianSolver0 = new GaussianSolver(sparseMatrix0);
      Vector vector0 = gaussianSolver0.solve(sparseVector0);
      Random.setNextRandom((-13));
      gaussianSolver0.solve(vector0);
      gaussianSolver0.applicableTo(matrix0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      GaussianSolver gaussianSolver1 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver1.solve(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      Random.setNextRandom(9);
      int int0 = (-1169);
      SparseVector sparseVector0 = SparseVector.zero(9, (-1169));
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseMatrix.identity(9);
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(9, mockRandom0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(denseMatrix0);
      Integer integer0 = new Integer(1073741824);
      hashMap0.remove((Object) integer0);
      gaussianSolver0.solve(sparseVector0);
      Random.setNextRandom((-13));
      gaussianSolver0.solve(sparseVector0);
      gaussianSolver0.applicableTo(denseMatrix0);
      Random.setNextRandom(1255);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      DenseVector.fromMap(hashMap0, 2211);
      GaussianSolver gaussianSolver1 = new GaussianSolver(matrix0);
      // Undeclared exception!
      try { 
        gaussianSolver1.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }
}
