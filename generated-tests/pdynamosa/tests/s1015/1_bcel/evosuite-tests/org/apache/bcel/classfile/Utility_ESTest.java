/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:34:33 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Cp&:@y Y1]1W");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-1);
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      try { 
        Utility.typeOfSignature("Hzi.S$Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hzi.S$Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.accessToString((-904));
      assertEquals("static final synchronized volatile abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T[/zSYgzm1g");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.getSignature("U=");
      assertEquals("LU=;", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte) (-29);
      byteArray1[5] = (byte)71;
      byteArray1[6] = (byte) (-88);
      byteArray1[7] = (byte)125;
      byteArray1[8] = (byte) (-88);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.classOrInterface((-507));
      // Undeclared exception!
      try { 
        Utility.signatureToString("N.T\\f./01", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N.T\\f./01'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "){d.?Yk";
      try { 
        Utility.typeOfSignature("){d.?Yk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ){d.?Yk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.setBit(0, 0);
      Utility.isSet(0, 0);
      Utility.compactClassName("7a}D");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.methodSignatureReturnType("Simple,lementVaue class doe not know hwto str>ngif type ");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-107);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-310), (-310), false);
      Utility.compactClassName(";3JK,5xP`]J", ";3JK,5xP`]J", false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)1;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      byteSequence3.skip(1L);
      String string1 = Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wd";
      Utility.methodTypeToSignature("wd", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lwd;)Lwd;");
      try { 
        Utility.typeOfSignature("wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      Utility.getSignature("");
      Utility.isJavaIdentifierPart('1');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "static", "ineg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^eH=";
      stringArray0[1] = "^eH=";
      stringArray0[2] = "^eH=";
      Utility.methodTypeToSignature("^eH=", stringArray0);
      boolean boolean0 = false;
      Utility.printArray((Object[]) stringArray0, false);
      int int0 = 0;
      Utility.accessToString(0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("vlc,", "^eH=", "aw{M9:T=9St");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vlc,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)112);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)112;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte) (-25);
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)112, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("jsr_w\t\t#-613027362", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName("b=})]U)");
      Utility.setBit(10, 25);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      assertEquals("float", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r y}KVi3ZS I3YpO");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fsub";
      stringArray0[1] = "r y}KVi3ZS I3YpO";
      stringArray0[2] = "F`n+_LL,\"0=r{y/U6";
      stringArray0[3] = "<illegal opcode>";
      String string1 = Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      assertEquals("(Lfsub;Lr;LF`n+_LL,\"0=r{y/U6;L<illegal;)L<illegal;", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("-CVGV:lB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -CVGV:lB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "{y-70-I~R\\IWk)";
      Utility.compactClassName("{y-70-I~RIWk)");
      String string1 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      String string2 = "";
      int int0 = 0;
      boolean boolean1 = true;
      char char0 = 'L';
      Utility.fillup("", 0, true, 'L');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.compactClassName("pq~7w[l[-Iyg{0a");
      Utility.compactClassName("pq~7w[l[-Iyg{0a", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L>a~*wtTm=F;&R");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)57;
      byte byte0 = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)104;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("2A$999$b7$b6$Hh", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)85;
      byteArray0[3] = (byte)13;
      byteArray0[3] = (byte) (-110);
      byteArray0[3] = (byte)97;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte) (-18);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1868), 232, true);
      assertEquals("0:    castore\n1:    astore_0\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.getSignature("ableswitch");
      assertEquals("Lableswitch;", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(711, (byte) (-75));
      ConstantDouble constantDouble0 = new ConstantDouble((-3065.59));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aconst_null", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.compactClassName(", low = ", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.typeOfSignature("eHf[)%\u0002ZB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eHf[)%\u0002ZB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)32;
      Utility.compactClassName("class", false);
      String string0 = Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.compactClassName("\t", "\t", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)16;
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte)16;
      byteArray1[8] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.searchOpcode("G&j[?DPvqU@;");
      Utility.isSet((short) (-1), (short) (-1));
      Utility.compactClassName("", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "!e5VLr[3S1z`][p(s";
      stringArray0[2] = "G&j[?DPvqU@;";
      Utility.compactClassName("%GV1}Y9?5\"=", false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.signatureToString("BEE~X", false);
      Utility.classOrInterface(79);
      try { 
        Utility.methodSignatureReturnType("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "lHrS|";
      Utility.decode("lHrS|", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.classOrInterface(91);
      try { 
        Utility.typeOfSignature("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Simple,lementValue class doe not know hw to str>ngif type ", "Simple,lementValue class doe not know hw to str>ngif type ", "Simple,lementValue class doe not know hw to str>ngif type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Simple,lementValue class doe not know hw to str>ngif type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "zUVQceU/H[EAq:L?IDR";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("zUVQceU/H[EAq:L?IDR", "zUVQceU/H[EAq:L?IDR", "zUVQceU/H[EAq:L?IDR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zUVQceU/H[EAq:L?IDR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.convertString(";3JK,5xP`]J");
      assertEquals(";3JK,5xP`]J", string0);
      
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-310), 68, false);
      assertEquals("0:    istore_0\n1:    baload\n2:    dstore_3\n3:    astore_0\n4:    aload_2\n5:    saload\n6:    ishl\n7:    lastore\n8:    iadd\n9:    dup2_x1\n10:   dstore_3\n", string1);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UnW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UnW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.clearBit((byte) (-75), 0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "double", "9HN/F],Uxu180z|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte)124, 186);
      assertEquals(67108988, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-119);
      Utility.compactClassName("Illegally nested brackets:", true);
      Utility.compactClassName("Illegally nested brackets:");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "#TM6;", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(I0\"'G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `I0\"'G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("IAazploBI9d");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char char0 = '3';
      Utility.isJavaIdentifierPart('3');
      Utility.accessToString(256);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-72);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "7~CqAN";
      try { 
        Utility.typeOfSignature("7~CqAN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7~CqAN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.signatureToString("Z;/G9`+*6f}>)^gW", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-76);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-2630));
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifle\t\t#-19453", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("iY+q#e4zW5Pu//+n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("land", "78zT5{8shk>]q>", "$u]yY{%&DW4|c`+KJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)65;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$f5hT0A$aaA", string0);
      
      byte[] byteArray1 = Utility.decode("$A$f5hT0A$aaA", false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-11), (byte)104, (byte)84, (byte)48, (byte)65, (byte) (-86), (byte)65}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      String string1 = Utility.accessToString((-761));
      assertEquals("public private protected native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "RCKiw";
      try { 
        Utility.typeOfMethodSignature("RCKiw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RCKiw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConstantUtf8.getInstance("9@_Bv0[a8j");
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isSet(1684, 443);
      Utility.searchOpcode("short");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t<");
      Utility.fillup("_WB", (-4699), false, 'o');
      int int0 = (-2023);
      Utility.clearBit((-2023), (short) (-1));
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[8];
      ConstantClass constantClass0 = new ConstantClass((short) (-1));
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(16);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("rG$}sZdKTx=");
      constantArray0[2] = (Constant) constantUtf8_0;
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(3809, 1376, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      String string1 = Utility.format((-44), (-44), true, '4');
      assertEquals("-44", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8>'lYUz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8>'lYUz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)91);
      byteSequence0.read();
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpne");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(1622.9696535405155);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-4), 76);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantString constantString0 = new ConstantString((byte)46);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "if_acmpne";
      stringArray0[1] = "ZsMy$s,.Ijvs";
      stringArray0[2] = "i2d";
      String string0 = Utility.methodTypeToSignature("ZsMy$s,.Ijvs", stringArray0);
      assertEquals("(Lif_acmpne;LZsMy$s,/Ijvs;Li2d;)LZsMy$s,/Ijvs;", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0]@Z3;X2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0]@Z3;X2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(74);
      constantClass0.toString();
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Integer integer0 = new Integer(74);
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nop";
      stringArray0[1] = "nop";
      stringArray0[2] = "CONSTANT_Class[7](name_index = 74)";
      stringArray0[3] = "nop";
      stringArray0[4] = "CONSTANT_Class[7](name_index = 74)";
      stringArray0[5] = "nop";
      String string0 = Utility.methodTypeToSignature("nop", stringArray0);
      assertEquals("(Lnop;Lnop;[LCONSTANT_Class;Lnop;[LCONSTANT_Class;Lnop;)Lnop;", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1883, false, '`');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpgt\t\t#-22619", string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      // Undeclared exception!
      try { 
        Utility.signatureToString("+UzQNgmO;X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+UzQNgmO;X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.format(168, 168, true, 'U');
      assertEquals("168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      
      String string1 = Utility.format(168, (-1692), true, 'U');
      assertEquals("168", string1);
      
      String string2 = Utility.classOrInterface((-1692));
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU";
      Utility.printArray(objectArray0, false, true);
      String string3 = Utility.compactClassName("class", "org.apache.bcel.classfile.MethodParameter", false);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)68;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("x,G2f_.nw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x,G2f_.nw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RzJ$n-jN[~.LS!C7 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RzJ$n-jN[~.LS!C7 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1384, (int) (byte) (-84));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      String string0 = "lKE\\=N:S8^nLk";
      Utility.convertString("lKE=N:S8^nLk");
      Utility.setBit(13, 13);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.getSignature("\nAttributeT(s):\n");
      assertEquals("LAttributeT(s):;", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.replace("[", "[", "[");
      Utility.convertString("[");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[";
      stringArray0[1] = "[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("(anonymous)", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-76);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      String string0 = Utility.signatureToString("Illegally nested brackets:", false);
      assertEquals("int", string0);
      
      String string1 = Utility.accessToString(61);
      assertEquals("public protected static final synchronized", string1);
      
      String string2 = Utility.format((-3013), 61, false, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh-3013", string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.compactClassName("\t", "\t", false);
      assertEquals("\t", string0);
      
      String string1 = Utility.getSignature("\t");
      assertEquals("L;", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) null, false, false);
      String string2 = Utility.signatureToString("L;", false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte)54;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("dstore\t\t%46", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore\t\t%46
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.classOrInterface(3388);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.replace("Invalid method signature: ", "Invalid method signature: ", "Invalid method signature: ");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.compactClassName("\"");
      assertEquals("\"", string0);
      
      int int0 = Utility.clearBit(6, (-792));
      assertEquals(6, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte) (-89);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-CVGV:lB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -CVGV:lB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.typeOfSignature("JC.4");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)11;
      Constant[] constantArray0 = new Constant[7];
      DataInput dataInput0 = null;
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, ":;n{4 N", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = " 307-$,'Hm:;Z9;@@.{";
      Utility.getSignature(" 307-$,'Hm:;Z9;@@.{");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "L307-$,'Hm:;Z9;@@/{;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      Utility.isJavaIdentifierPart('j');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
      assertEquals(32, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Simple,lementValue class does not know how to stringif type ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Simple,lementValue class does not know how to stringif type ";
      objectArray0[3] = (Object) "Simple,lementValue class does not know how to stringif type ";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.replace("\t(wide)", "v58eaGaC>-", "{Simple,lementValue class does not know how to stringif type , java.lang.Object@1dda0dfd, Simple,lementValue class does not know how to stringif type , Simple,lementValue class does not know how to stringif type }");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.convertString("`2\"[Y\"CS~Z I6\\v=");
      assertEquals("`2\\\"[Y\\\"CS~Z I6\\\\v=", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.convertString(";3JK,5xP`]J");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2464, (-2761));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      constantPool0.copy();
      byteArray0[1] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-14));
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.signatureToString("J{");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.classOrInterface((-507));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DjdVsbR\u0002.0th(s>SZ";
      stringArray0[1] = "DjdVsbR\u0002.0th(s>SZ";
      stringArray0[2] = "DjdVsbR\u0002.0th(s>SZ";
      stringArray0[3] = "DjdVsbR\u0002.0th(s>SZ";
      Utility.methodTypeToSignature("DjdVsbR\u0002.0th(s>SZ", stringArray0);
      Utility.searchOpcode("DjdVsbR\u0002.0th(s>SZ");
      Utility.convertString("DjdVsbR\u0002.0th(s>SZ");
      Utility.clearBit(3880, (short) (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(32, byteArray0.length);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.compactClassName("G@]DGo~#[uku", "G@]DGo~#[uku", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifeq\t\t#-9983", string1);
      
      byte byte0 = Utility.typeOfSignature("F<.9(ObTT~|#-C_ypt");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.compactClassName("fdiv", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("\"8eXs+;g=(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"8eXs+;g=(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Method$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Method$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(74);
      constantClass0.toString();
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.clearBit(61, 61);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-73);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 135, (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 74. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.isSet(0, 149);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "eZh'P<gY,ng", "eZh'P<gY,ng", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(4, 56);
      Constant[] constantArray0 = new Constant[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantMethodref0.accept(descendingVisitor0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, (-3064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid IOCase name: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.compactClassName("{y-70-I~RIWk)");
      byte[] byteArray0 = Utility.decode("{y-70-I~RIWk)", false);
      int int0 = 0;
      Utility.fillup("", 0, true, 'L');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "{y-70-I~RIWk)";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "{y-70-I~RIWk)";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.isJavaIdentifierPart('L');
      Utility.equals(byteArray0, byteArray0);
      Utility.methodTypeToSignature("", (String[]) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, (-3965), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifgt\t\t#-9793", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byte byte0 = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("N?1CL$UBVo@Z\"1f+}p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N?1CL$UBVo@Z\"1f+}p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.compactClassName("Q5b", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "Q5b";
      objectArray0[2] = (Object) "Q5b";
      Utility.isJavaIdentifierPart('T');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{RBG?>y";
      stringArray0[1] = "{RBG?>y";
      stringArray0[2] = "fload_3";
      stringArray0[3] = "{RBG?>y";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("Q5b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.accessToString((-935));
      Utility.compactClassName("\t\t<", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)65;
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("fcmpg");
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4F6evvCdT|U,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4F6evvCdT|U,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2 s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2 s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", true);
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[0] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.compactClassName("Simple,lementValue class does not know how to stringif type ");
      assertEquals("Simple,lementValue class does not know how to stringif type ", string0);
      
      String string1 = Utility.accessToString((-418), true);
      assertEquals("private protected static final volatile abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-21);
      byteArray0[2] = (byte) (-33);
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-6), true);
      assertEquals("private static final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The offset cannot be negative", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The offset cannot be negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)81;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", high = ");
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.compactClassName("\t", "\t", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(74);
      constantClass0.toString();
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.clearBit(61, 61);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, 800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)46;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      boolean boolean1 = Utility.isJavaIdentifierPart('e');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.compactClassName("fdiv", false);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "LB!t)q[7*8ak%";
      String string1 = "X)uXe&aSp5~a";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3z%s![UZ*7N&JAA");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-123);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X)uXe&aSp5~a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X)uXe&aSp5~a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)103;
      byteArray0[2] = (byte)43;
      byteArray0[5] = (byte)43;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.signatureToString("C)", false);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), (-986), false);
      assertEquals("0:    ishl\n1:    dup_x2\n2:    swap\n3:    dstore_2\n4:    <illegal opcode>\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lneg");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.compactClassName("CONSTANT_MethodType");
      Utility.fillup("lneg", (-1148), true, 'x');
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QM2@/!YXY!25Ea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QM2@/!YXY!25Ea
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.replace("i2b", "i2b", (String) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("tS1G.RK}dU4V)k'gp6v", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tS1G.RK}dU4V)k'gp6v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.replace("org.aache.cel.classfile.JavaClEss", "org.aache.cel.classfile.JavaClEss", "org.aache.cel.classfile.JavaClEss");
      short short0 = Utility.searchOpcode("athrow");
      assertEquals((short)191, short0);
      
      String string0 = Utility.replace("goto", "goto", " ;UC");
      assertEquals(" ;UC", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Utility.compactClassName("\t", "The offset cannot be negative", true);
      Utility.printArray((Object[]) null, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence1);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(50, (byte)60);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(211, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.convertString("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format(3, 3, true, 'M');
      assertEquals("3MM", string0);
      
      int int0 = Utility.clearBit(3, (-4126));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S2E$b;U9cQ?");
      assertEquals((byte)9, byte0);
      
      boolean boolean0 = Utility.isSet((byte)9, 853);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.replace("LB!t)q[7*8ak%", "-JkteKeBkI~s./>)", "X)uXe&aSp5~a");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.methodSignatureReturnType("Illegally nested brackets:");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%^ +Fgx]4F@,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %^ +Fgx]4F@,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-32);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte) (-2), true);
      String string0 = "/2$";
      String string1 = "n'f@O=(&fMiqOm.";
      String string2 = null;
      int int0 = 1801;
      int int1 = (-1282);
      ConstantPool constantPool2 = null;
      try {
        constantPool2 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.signatureToString("Z;/G9`+*6f}>)^gW", false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.LocalVariableTypeTable", (String[]) null);
      assertEquals("()Lorg/apache/bcel/classfile/LocalVariableTypeTable;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%87", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      String[] stringArray0 = new String[11];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lHr|", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)72, (byte)114, (byte)124}, byteArray0);
      
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-52);
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("fload_2", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("#TM6;");
      try { 
        Utility.methodSignatureToString("9@_Bv0[a8j", "9@_Bv0[a8j", "fload_2", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9@_Bv0[a8j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      Utility.toHexString(byteArray0);
      String string0 = "w$";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("w$", "fd 10 7b 11 0e 66 00 02", "fd 10 7b 11 0e 66 00 02", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)103;
      byteArray0[2] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q5b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q5b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((-1583L));
      byteSequence1.markSupported();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Utility.printArray(objectArray0, false);
      Utility.convertString("class, java.lang.Object@268c3fb9, class, class, class");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "class, java.lang.Object@268c3fb9, class, class, class", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)89;
      byteArray0[1] = (byte) (-119);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1129), (int) (byte)90);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("~w]", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.replace("TU7:2*> $X", "TU7:2*> $X", "TU7:2*> $X");
      // Undeclared exception!
      try { 
        Utility.getSignature("[R3:b;DFGLCO>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [R3:b;DFGLCO>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.format((-1844), (-1844), true, 'o');
      Utility.accessToString((-1969), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      Utility.isSet(171, 171);
      Utility.printArray(objectArray0, true);
      boolean boolean0 = Utility.isSet(247, (-497));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("", "", true);
      Utility.classOrInterface(106);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.fillup("", 0, false, '5');
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.CodeException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.CodeException'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[3] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 444;
      Utility.classOrInterface(444);
      Utility.accessToString(444);
      Utility.compactClassName("class");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("class");
      Utility.isJavaIdentifierPart('g');
      Utility.classOrInterface(444);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      Constant[] constantArray0 = new Constant[4];
      EnclosingMethod enclosingMethod0 = null;
      try {
        enclosingMethod0 = new EnclosingMethod(65, 2635, (DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantUtf8.getCachedInstance("9@_Bv0[a8j");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      constantPool0.copy();
      Utility.convertString("\t\t#");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y+o;<huT9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y+o;<huT9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.typeOfSignature("[");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1132, (byte)13);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1132, 1132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9@_Bv0[a8j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9@_Bv0[a8j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-310), 68, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName(";3JK,5xP`]J", ";3JK,5xP`]J", true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)1;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)76);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(10, byteSequence0.getIndex());
      
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger1 = new ConstantInteger(byteSequence2);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantFloat constantFloat2 = new ConstantFloat(byteSequence2);
      constantArray0[4] = (Constant) constantFloat2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)36;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1757), (int) (byte)90);
      assertEquals("0:    dup_x1\n1:    dup_x1\n2:    dup_x1\n3:    l2f\n4:    dup_x1\n5:    l2f\n6:    dup_x1\n7:    faload\n8:    fload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(235, 161);
      assertEquals(233, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.classOrInterface((-507));
      assertEquals("interface", string0);
      
      byte byte0 = Utility.typeOfSignature("BootstrapMethods");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      Utility.isJavaIdentifierPart(')');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "3L|WLV}aW}hQMs", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.MagicNumberFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.MagicNumberFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$ff$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$ff$A$A$A$A$A", false);
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("ff 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isSet((-29), (-29));
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gdr;u&ouX4RD{&#V1");
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("G5tj,=", "G5tj,=", (String) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.typeOfSignature("VF AK85M%'-a3Yi");
      String string0 = Utility.accessToString((int) (byte)12, false);
      Utility.getSignature("protected static");
      String string1 = Utility.signatureToString("VF AK85M%'-a3Yi", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("pop2");
      ConstantLong constantLong0 = new ConstantLong(615L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong1;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%>^");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 408, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)11;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "11:   nop\n";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (byte) (-116);
      objectArray0[7] = (Object) (byte)11;
      objectArray0[8] = (Object) "11:   nop\n";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Qf]nvCMma'M[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qf]nvCMma'M['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.searchOpcode("");
      Utility.isSet((short) (-1), 0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)123;
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-108));
      constantArray0[0] = (Constant) constantDouble0;
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      classPath0.getResourceAsStream("=");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      byteSequence0.readLong();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Method$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Method$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.classOrInterface(150);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("", "", true);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1132, 78);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[7] = (Constant) constantMethodref0;
      constantMethodref0.copy();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      constantArray0[8] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, 1132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-2);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("gh&l3bC]06HYm8", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 129, (-827), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Simple,lementValue class does not know how to stringif type ";
      objectArray0[2] = (Object) "Simple,lementValue class does not know how to stringif type ";
      objectArray0[3] = (Object) "Simple,lementValue class does not know how to stringif type ";
      objectArray0[4] = (Object) "Simple,lementValue class does not know how to stringif type ";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "Simple,lementValue class does not know how to stringif type ";
      objectArray0[7] = (Object) "Simple,lementValue class does not know how to stringif type ";
      String string0 = Utility.printArray(objectArray0, false);
      String string1 = Utility.compactClassName("java.lang.Object@582f8e8c, Simple,lementValue class does not know how to stringif type , Simple,lementValue class does not know how to stringif type , Simple,lementValue class does not know how to stringif type , Simple,lementValue class does not know how to stringif type , java.lang.Object@5be79c45, Simple,lementValue class does not know how to stringif type , Simple,lementValue class does not know how to stringif type ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125), false);
      assertEquals("0:    lxor\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('1');
      assertTrue(boolean0);
      
      Utility.printArray((Object[]) null, false, false);
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.MethodParameter", "n", true);
      assertEquals("org.apache.bcel.classfile.MethodParameter", string1);
      
      String string2 = Utility.accessToString((-683), false);
      assertEquals("public protected final volatile native abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.decode("", false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.typeOfSignature("':2 s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ':2 s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)103;
      byteArray0[2] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-898), (byte)116);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)116);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      String[] stringArray0 = new String[11];
      stringArray0[0] = "short";
      stringArray0[1] = "Simple,lementValue class doe not know hw to str>ngif type ";
      stringArray0[2] = "Simple,lementValue class doe not know hw to str>ngif type ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      String string0 = Utility.signatureToString("F`n+_LL,\"0=r{y/U6", false);
      assertEquals("float", string0);
      
      String string1 = Utility.accessToString(110);
      assertEquals("private protected static synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E`4#q5;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E`4#q5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E>f$1H");
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r y}KVi3ZS I3YpO");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "java.lang.Simple,lementValue class doe not know hw to str>ngif type ";
      Utility.replace("java.lang.Simple,lementValue class doe not know hw to str>ngif type ", "java.lang.Simple,lementValue class doe not know hw to str>ngif type ", "java.lang.Simple,lementValue class doe not know hw to str>ngif type ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-105);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("&*ZZJvRX'ZPG2fcX1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &*ZZJvRX'ZPG2fcX1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O#eK9&Xsk:g", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O#eK9&Xsk:g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("jsr\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#19152", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.typeOfSignature("[");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      String string0 = Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)62, (byte)62);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, 0, 1455, false);
      assertEquals("0:    dstore\t\t%52\n", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.setBit(211, 87);
      // Undeclared exception!
      try { 
        Utility.getSignature("r[][jzjfgMA3!b$>Gw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[][jzjfgMA3!b$>Gw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A\"!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A\"!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1531));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      int int0 = Utility.clearBit(1636, 5161);
      assertEquals(1124, int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 0, 973);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("\nAttributeT(s):\n");
      assertEquals("\\nAttributeT(s):\\n", string0);
      
      String string1 = Utility.getSignature("\nAttributeT(s):\n");
      assertEquals("LAttributeT(s):;", string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance("9@_Bv0[a8j");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)87;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4602), 72, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!j'.oa|,$mPE CMl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j'.oa|,$mPE CMl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, 232, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Simple,lementValue class does not know how to stringif type ", true);
      assertEquals("short", string0);
      
      String string1 = Utility.convertString("Y*h1X4MQpDQjP(2vs");
      assertEquals("Y*h1X4MQpDQjP(2vs", string1);
      
      short short0 = Utility.searchOpcode("Y*h1X4MQpDQjP(2vs");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "W7";
      Utility.replace("invokedynamic", "W7", "invokedynamic");
      char char0 = 'A';
      Utility.isJavaIdentifierPart('A');
      boolean boolean0 = false;
      Utility.accessToString(249, false);
      Utility.compactClassName("invokedynamic", true);
      Utility.compactClassName(",\"k D&_z^~&y");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("W7", ",\"k D&_z^~&y", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = Utility.replace("Invalid method signature: ", "Invalid method signature: ", "Invalid method signature: ");
      assertEquals("Invalid method signature: ", string0);
      
      String string1 = Utility.getSignature("Invalid method signature: ");
      assertEquals("LInvalid;", string1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = null;
      String string1 = "=]z";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "=]z", "if_acmpne", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.methodTypeToSignature("org.apache.bcel.classfile.LocalVariableTypeTable", (String[]) null);
      Utility.methodSignatureArgumentTypes("()Lorg/apache/bcel/classfile/LocalVariableTypeTable;");
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.LocalVariableTypeTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char char0 = '3';
      Utility.isJavaIdentifierPart('3');
      Utility.accessToString((int) '3', true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-72);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("org$$apache", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[10];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.accessToString((-935));
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(74);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, 2559, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.accessToString(48);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "final synchronized";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "final synchronized";
      stringArray0[4] = "final synchronized";
      stringArray0[5] = "";
      stringArray0[6] = "final synchronized";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)110;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)8, (byte)8);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      int int0 = 99;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(99, 48);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      DataInput dataInput0 = null;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.replace("java.lang.Simple,lementValue class doe not know hw to str>ngif type ", "java.lang.Simple,lementValue class doe not know hw to str>ngif type ", "java.lang.Simple,lementValue class doe not know hw to str>ngif type ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.StackMap";
      Utility.getSignature("org.apache.bcel.classfile.StackMap");
      Utility.replace("Lorg/apache/bcel/classfile/StackMap;", "Lorg/apache/bcel/classfile/StackMap;", "org.apache.bcel.classfile.StackMap");
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.StackMap", "org.apache.bcel.classfile.StackMap");
      String string1 = "ij~A'l3n;>JD\"sGG9pH";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "ij~A'l3n;>JD\"sGG9pH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ij~A'l3n;>JD\"sGG9pH
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = Utility.getSignature("!Q6");
      assertEquals("L!Q6;", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, false, true);
      Utility.compactClassName("jsr_w", "O|tA!VWwP:!g=BHo|0", false);
      String string1 = Utility.signatureToString("LSimple,lementValue;V", false);
      assertEquals("Simple,lementValue", string1);
      
      String string2 = Utility.accessToString(36, false);
      assertEquals("protected synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit((-2538), 67);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1734, 2146);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("o~onk}y$!.q 1]ORk", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o~onk}y$!.q 1]ORk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(74);
      constantClass0.toString();
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = Utility.clearBit(61, 61);
      assertEquals(61, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(711, (byte) (-75));
      ConstantDouble constantDouble0 = new ConstantDouble((-3065.59));
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool1.accept(descendingVisitor0);
      Utility.codeToString(byteSequence0, constantPool0);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "LB!t)q[7*8ak%";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, null, LB!t)q[7*8ak%", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      int int0 = 171;
      Utility.isSet(171, 171);
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char char0 = '.';
      Utility.isJavaIdentifierPart('.');
      String string0 = "[^;SrH:R|!?|u)";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[^;SrH:R|!?|u)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^;SrH:R|!?|u)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.typeOfSignature("[");
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Utility.decode("$cN.^QZGm*Ye|X{i", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = Utility.classOrInterface((-935));
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "Fc!\"{o{)Sne#UHNi%";
      Utility.typeOfSignature("Fc!\"{o{)Sne#UHNi%");
      String string1 = ":;P";
      try { 
        Utility.typeOfMethodSignature(":;P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :;P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isub");
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#10280", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.setBit((-1122), (-1122));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bjTGkw";
      stringArray0[1] = "bjTGkw";
      stringArray0[2] = "bjTGkw";
      stringArray0[3] = "f[xA?~ExX;E,@5==:";
      stringArray0[4] = "bjTGkw";
      stringArray0[5] = "bjTGkw";
      stringArray0[6] = "(name_index = ";
      stringArray0[7] = "bjTGkw";
      stringArray0[8] = "bjTGkw";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("bjTGkw", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[xA?~ExX;E,@5==:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore\t\t%183", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "K}F:#F-";
      try { 
        Utility.typeOfSignature("K}F:#F-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K}F:#F-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('}');
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[2] = (byte)96;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", high = ");
      byteArray0[3] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("lload_0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("goto_w\t\t#1687234875", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.compactClassName("{y-70-I~RIWk)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZYMS(k");
      Utility.decode("", false);
      Utility.compactClassName("{y-70-I~RIWk)", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("{y-70-I~RIWk)", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3J__cX^}NVO6E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3J__cX^}NVO6E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[1];
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Illegally nested brackets:";
      stringArray0[1] = "int";
      String string0 = Utility.methodTypeToSignature("int", stringArray0);
      assertEquals("(LIllegally;I)I", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LIllegally;I)I", true);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("MS'fe6WTpf\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MS'fe6WTpf\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.compactClassName("", "The offse cannot be negative", false);
      Utility.compactClassName("The offse cannot be negative");
      Utility.getSignature("");
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "#TM6;";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "#TM6;", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.classOrInterface(11);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      Utility.accessToString(256);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      Utility.compactClassName("Z*x6`W", "/!f`A!Y9I{jqYJDT(", true);
      Utility.printArray((Object[]) null, false, false);
      Utility.getSignature("Z*x6`W");
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "Z*x6`W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%132\t0", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "Invalid ethod sinature ", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[3] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(",", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Utility.convertString("Invalid method signature: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = Utility.classOrInterface((-3605));
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("4f.$s?@", stringArray0);
      assertEquals("()L4f/$s?@;", string1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.signatureToString("Z;/G9`+*6f}>)^gW", false);
      try { 
        Utility.methodSignatureArgumentTypes("zp\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zp\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-76);
      Utility.encode(byteArray0, false);
      MockFile mockFile0 = new MockFile("$3c$3d$E$3b$b4", "$3c$3d$E$3b$b4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      try { 
        Utility.decode("V[ho{m:%ts.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(32, byteArray0.length);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = Utility.compactClassName("{y-70-I~RIWk)");
      assertEquals("{y-70-I~RIWk)", string0);
      
      Utility.decode("", false);
      String string1 = Utility.fillup("", 0, true, 'L');
      String string2 = Utility.compactClassName("");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O=6*3R{WBx!Jbj%3";
      stringArray0[1] = "O=6*3R{WBx!Jbj%3";
      String string0 = Utility.methodTypeToSignature("O=6*3R{WBx!Jbj%3", stringArray0);
      assertEquals("(LO=6*3R{WBx!Jbj%3;LO=6*3R{WBx!Jbj%3;)LO=6*3R{WBx!Jbj%3;", string0);
      
      Utility.searchOpcode("O=6*3R{WBx!Jbj%3");
      String string1 = Utility.convertString("O=6*3R{WBx!Jbj%3");
      assertEquals("O=6*3R{WBx!Jbj%3", string1);
      
      int int0 = Utility.clearBit((short) (-1), 1673);
      assertEquals((-513), int0);
      
      String string2 = Utility.methodSignatureToString("(LO=6*3R{WBx!Jbj%3;LO=6*3R{WBx!Jbj%3;)LO=6*3R{WBx!Jbj%3;", "D+3!,h\u0000shDA]MAt", "O=6*3R{WBx!Jbj%3");
      assertEquals("O=6*3R{WBx!Jbj%3 O=6*3R{WBx!Jbj%3 D+3!,h\u0000shDA]MAt(O=6*3R{WBx!Jbj%3 arg1, O=6*3R{WBx!Jbj%3 arg2)", string2);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = Utility.replace("ip;ysx`9}^A{H)tAYY", "ip;ysx`9}^A{H)tAYY", "A\"!");
      assertEquals("A\"!", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string1);
      
      short short0 = Utility.searchOpcode("a}AbB&");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.signatureToString("D08BtlYvv2l:r\"@\"1O");
      assertEquals("double", string0);
      
      String string1 = Utility.accessToString((-2407));
      assertEquals("public static final transient interface abstract synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)125);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-77), (int) (byte)40, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "!^\"KEUxjoWV#'aH", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = "Invalid IOCase name: ";
      Utility.signatureToString("Invalid IOCase name: ");
      try { 
        Utility.methodSignatureToString("java.lang.>a~*wtTmF", "java.lang.>a~*wtTmF", "java.lang.>a~*wtTmF", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.>a~*wtTmF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      String string1 = Utility.compactClassName("float", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.getSignature("L");
      // Undeclared exception!
      try { 
        Utility.signatureToString("P'9!LkNKwKgNXl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'9!LkNKwKgNXl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "";
      String string1 = "!e5VLr[3S1z`][p(s";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "!e5VLr[3S1z`][p(s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.compactClassName("fdiv", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = Utility.convertString("ADx.}qr*<&_'");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.format((byte)75, (byte)0, true, 'j');
      assertEquals("75", string0);
      
      String string1 = Utility.replace("75", "75", "E;3PBk{`w2>");
      assertEquals("E;3PBk{`w2>", string1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#j");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-43);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte) (-81));
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private protected static synchronized transient native interface abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-310), 68, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName(";3JK,5xP`]J", ";3JK,5xP`]J", true);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)1;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X\"3N`;r)/<a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X\"3N`;r)/<a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance("9@_Bv0[a8j");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-542L));
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.isSet(0, 6);
      String string0 = Utility.fillup("iNu=-clyzwvG9Mol:r", 0, false, '\'');
      assertEquals("iNu=-clyzwvG9Mol:r", string0);
      
      boolean boolean0 = Utility.isSet(1841, 6);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)0;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$5d$cak$S$Ah$A$Z$A", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "fmul";
      stringArray0[2] = "java.lang.";
      stringArray0[3] = "Im%[Q,[{1<w=3PNZ";
      stringArray0[4] = "fmul";
      stringArray0[5] = "java.lang.";
      stringArray0[6] = "fmul";
      stringArray0[7] = "java.lang.";
      stringArray0[8] = "fmul";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("fmul", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Q,[{1<w=3PNZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gdr;u&ouX4RD{&#V1");
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("iY+q#e4zW5Pu//+n", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FS:<=9");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0]@ZG;Xp";
      objectArray0[1] = (Object) "FS:<=9";
      mockPrintWriter1.format("goto_w", objectArray0);
      Object[] objectArray1 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.classOrInterface(5552);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Utility.classOrInterface(11);
      Utility.compactClassName(":", ":", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray((Object[]) null, true, true);
      Utility.getSignature("X@1J`j");
      Utility.isJavaIdentifierPart('A');
      Utility.printArray((Object[]) null, true, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName("9~}\"d|D=GIB/", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "Simple,lementValue class doe not know hw to str>ngif type ";
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      Utility.compactClassName("short");
      Utility.isJavaIdentifierPart('|');
      try { 
        Utility.methodSignatureToString("short", "Simple,lementValue class doe not know hw to str>ngif type ", "Simple,lementValue class doe not know hw to str>ngif type ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("\nAttributeT(s):\n");
      assertEquals("\\nAttributeT(s):\\n", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("volatile");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("newarray\t\t<<illegal type>>", string1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.compactClassName("{y-70-I~RIWk)");
      byte[] byteArray0 = Utility.decode("", false);
      Utility.fillup("", 0, true, 'L');
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("?ayaT-Sop/p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?ayaT-Sop/p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U1B>2,(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U1B>2,(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = "G113";
      try { 
        Utility.typeOfSignature("G113");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G113
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit((byte)37, (byte)37);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.format(0, 1613, true, 'R');
      String string0 = Utility.getSignature(", high = ");
      assertEquals("L,;", string0);
      
      String string1 = Utility.compactClassName(", high = ", true);
      assertEquals(", high = ", string1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-40);
      byte byte0 = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-109);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("int");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte)110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    bipush\t\t-40
         // 3:    fdiv
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.replace("Simple,lementValue class doe not know hw to str>ngif type ", "int", "int");
      MockPrintStream mockPrintStream0 = new MockPrintStream("dsYB_*!??O;FL *Lb2");
      PrintStream printStream0 = mockPrintStream0.format("?mgY.D~)$;#,w", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.isSet(0, 149);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.convertString("null");
      try { 
        Utility.methodSignatureArgumentTypes("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*imQ$%/zfyJKWRs", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.decode("kxCG^uM.)|Y4$7Z#^;", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Wq{+#W+zbp=`w`y6g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wq{+#W+zbp=`w`y6g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Yy/Si.g`bv}W`(6!Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yy/Si.g`bv}W`(6!Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "/E`4#q5;";
      try { 
        Utility.typeOfSignature("/E`4#q5;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /E`4#q5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)53;
      byteArray1[3] = (byte)53;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.typeOfSignature("[");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)13;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "LSimple,lementValue;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1 4.W36)&V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1 4.W36)&V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putfield", "invokestatic", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-45), (int) (byte) (-45));
      assertEquals("0:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      int int0 = 171;
      Utility.isSet(171, 171);
      Utility.fillup("|s^dVdmli", 171, true, '[');
      Utility.isJavaIdentifierPart('[');
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("|s^dVdmli", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |s^dVdmli
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Utility.replace("getfield", "getfield", "rh`o.eM!qug");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-70);
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = Utility.replace("", "Invalid signature: ", ")J<_!<ZlwVFg`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance("9@_Bv0[a8j");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-542L));
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.accessToString(1433, false);
      assertEquals("public static final transient native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.typeOfSignature("CONSTANT_Long");
      Utility.accessToString((int) (byte)5, true);
      try { 
        Utility.methodSignatureArgumentTypes("public protected");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = ")lsUcEgX9)qGe'sUG";
      try { 
        Utility.methodSignatureReturnType(")lsUcEgX9)qGe'sUG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qGe'sUG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.compactClassName("\t", "The offset cannot be negative", false);
      Utility.printArray((Object[]) null, false, false);
      Utility.getSignature("\t");
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.compactClassName("QOh8GUq;cta66Te.*c");
      assertEquals("QOh8GUq;cta66Te.*c", string0);
      
      String string1 = Utility.fillup("]?r_>#)HJl", (-2939), true, 'I');
      assertEquals("]?r_>#)HJl", string1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.compactClassName("\"");
      try { 
        Utility.typeOfMethodSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", (String) null);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = Utility.compactClassName("\"");
      assertEquals("\"", string0);
      
      int int0 = Utility.clearBit((-792), 533);
      assertEquals((-2097944), int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1132, 1132);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[7] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)73;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1315), (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R$kwoX>U3q_;Fnd`iBl");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
      assertEquals("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = Utility.format(110, 110, false, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh110", string2);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Utility.compactClassName("G@]DGo~#[uku", "G@]DGo~#[uku", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[J7|D@9C%aK");
      assertEquals("long[]", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.LocalVariableTypeTable", (String[]) null);
      assertEquals("()Lorg/apache/bcel/classfile/LocalVariableTypeTable;", string0);
      
      Utility.methodSignatureArgumentTypes("()Lorg/apache/bcel/classfile/LocalVariableTypeTable;");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.accessToString((int) (byte) (-96));
      assertEquals("synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8.getCachedInstance("9@_Bv0[a8j");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = Utility.compactClassName("A", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = Utility.replace("putfield", "N2wa@;;ay", "$cN.^QZGm*Ye|X{i");
      assertEquals("putfield", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-160L));
      byteSequence0.close();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%25", string1);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte)5;
      String string0 = Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.typeOfSignature("[");
      byte[] byteArray0 = new byte[7];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#2Ej");
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("goto\t\t#-23421", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t%", "", "checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpeq\t\t#-17477", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.getSignature(">8hU~!be!W/1Lz");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null, true, false);
      Utility.compactClassName("Dq+?l\"0j?hR\"D4bZ", ">8hU~!be!W/1Lz", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.searchOpcode("tableswitch");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(96, (byte)86);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantString constantString2 = new ConstantString(84);
      constantArray0[2] = (Constant) constantString2;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[3] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("qh+g");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong(615L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[5] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@,*5<Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @,*5<Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.compactClassName("ADx.T}r*<&_'", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-21);
      String string0 = Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = "fload";
      Utility.compactClassName("fload", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)91;
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("castore", "fload", "5E7`%jH(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      String string0 = Utility.compactClassName("Simple,lementValue class doe not know hw to str>ngif type ");
      assertEquals("Simple,lementValue class doe not know hw to str>ngif type ", string0);
      
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ", false);
      String string1 = Utility.accessToString(87);
      assertEquals("public private protected final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.signatureToString("Jl-=`", true);
      assertEquals("long", string0);
      
      Utility.accessToString((int) (byte) (-73));
      String string1 = Utility.accessToString((int) (byte) (-73));
      assertEquals("public private protected final synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("iY+q#e4W5Pu//+n", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore\t\t%62", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DfL !PRld4/3[y");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-84);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)48;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-78), 1778);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.methodTypeToSignature("if_icmpgt", (String[]) null);
      Utility.methodSignatureArgumentTypes("()Lif_icmpgt;");
      Utility.fillup("TV}urf;", 78, true, '');
      Utility.signatureToString("TV}urf;");
      // Undeclared exception!
      try { 
        Utility.signatureToString(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.compactClassName("Y");
      String string0 = "U/`,9%*-@$ddjS";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U/`,9%*-@$ddjS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U/`,9%*-@$ddjS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.accessToString(18, false);
      Utility.printArray((Object[]) null);
      Utility.getSignature("private final");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.isSet(0, 0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(1848);
      Utility.printArray(objectArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        Charset.forName("static final synchronized native interface abstract");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // static final synchronized native interface abstract
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!&B[jy5'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &B[jy5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)91;
      byteArray1[7] = (byte) (-16);
      byteArray1[8] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.compactClassName("jsr_w");
      Utility.compactClassName("PMGClass");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.typeOfSignature("Z,b2>+T>#|");
      Utility.fillup("\t\t#", (byte)4, false, 'Z');
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)4, (int) (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$QP5e@C/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $QP5e@C/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1369));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.convertString(", low = ");
      try { 
        Utility.methodSignatureArgumentTypes("Kq,.<}eoHi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kq,.<}eoHi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)3;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (-1204), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "", true);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1132, 78);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantMethodref0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Utility.format(186, 186, true, '0');
      // Undeclared exception!
      try { 
        Utility.signatureToString("UnW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UnW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Utility.convertString(":c;3JK,5xP`]J");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode(":c;3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals("astore\t\t%99", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5&U[s7Wx3CFK\"C(]@lz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5&U[s7Wx3CFK\"C(]@lz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      String[] stringArray0 = new String[11];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      String string1 = Utility.format(3, 3, true, 'A');
      assertEquals("3AA", string1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nAttributeT(s):\n";
      stringArray0[1] = "\nAttributeT(s):\n";
      stringArray0[2] = "<M?(";
      stringArray0[3] = "<M?(";
      stringArray0[4] = "\nAttributeT(s):\n";
      stringArray0[5] = "\nAttributeT(s):\n";
      stringArray0[6] = "\nAttributeT(s):\n";
      stringArray0[7] = "\nAttributeT(s):\n";
      Utility.methodTypeToSignature("<M?(", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LAttributeT(s):;LAttributeT(s):;L<M?(;L<M?(;LAttributeT(s):;LAttributeT(s):;LAttributeT(s):;LAttributeT(s):;)L<M?(;", "\nAttributeT(s):\n", "float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LAttributeT(s):;LAttributeT(s):;L<M?(;L<M?(;LAttributeT(s):;LAttributeT(s):;LAttributeT(s):;LAttributeT(s):;)L<M?(;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.methodTypeToSignature("org.apache.bcel.classfile.LocalVariableTypeTable", (String[]) null);
      Utility.methodSignatureArgumentTypes("()Lorg/apache/bcel/classfile/LocalVariableTypeTable;");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = Utility.compactClassName("CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.compactClassName("\t", "\t", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isJavaIdentifierPart('H');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-75);
      Utility.printArray(objectArray0, true, false);
      Utility.compactClassName("{org.apache.bcel.util.ByteSequence@33df486, org.apache.bcel.util.ByteSequence@33df486, java.lang.Object@1b289795, -75}", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{org.apache.bcel.util.ByteSequence@33df486, org.apache.bcel.util.ByteSequence@33df486, java.lang.Object@1b289795, -75}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{org.apache.bcel.util.ByteSequence@33df486, org.apache.bcel.util.ByteSequence@33df486, java.lang.Object@1b289795, -75}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#j");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LSimple,lementValuezV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LSimple,lementValuezV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Tr5$,(.F9");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("ireturn");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantFloat constantFloat0 = new ConstantFloat((-1742.5F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#j");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      int int0 = Utility.setBit((byte)0, 182);
      assertEquals(4194304, int0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1369));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.convertString(", low = ");
      try { 
        Utility.methodSignatureArgumentTypes("Kq,.<}eoHi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kq,.<}eoHi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifne\t\t#-24105", string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("putfield", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations", "");
      assertEquals("putfield", string0);
      
      String string1 = Utility.compactClassName("short", "putfield", true);
      assertEquals("short", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-23388
         // 3:    if_icmple\t\t#-23385
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-96);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      String string0 = "r y}KVi3ZS I3YpO";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r y}KVi3ZS I3YpO");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = Utility.format(168, 168, true, 'U');
      assertEquals("168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      
      String string1 = Utility.format(168, (-1692), true, 'U');
      assertEquals("168", string1);
      
      String string2 = Utility.classOrInterface((-1692));
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU";
      String string3 = Utility.printArray(objectArray0, false, true);
      assertEquals("null, \"168UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\", null", string3);
      assertNotNull(string3);
      
      String string4 = Utility.compactClassName("class", "org.apache.bcel.classfile.MethodParameter", false);
      assertTrue(string4.equals((Object)string2));
      
      Utility.format(725, 255, true, '_');
      String string5 = Utility.classOrInterface(3618);
      assertEquals("interface", string5);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature(":[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RzJ$n-jN[~.LS!C7 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RzJ$n-jN[~.LS!C7 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(0, (-2277));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.methodSignatureReturnType("Simple,lementValue class doe not know hw to str>ngif type ");
      String string0 = Utility.signatureToString("Simple,lementValue class doe not know hw to str>ngif type ");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1684, 448);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("short");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-462), 65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    ladd
         // 2:    ladd
         // 3:    i2c
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1522));
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1741), (byte) (-98));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPool0.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("instanceof");
      try { 
        Utility.methodSignatureArgumentTypes("Eb' 6_bg7A&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eb' 6_bg7A&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = Utility.compactClassName(", high = ", false);
      assertEquals(", high = ", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit(1754, (byte)27);
      assertEquals(1754, int0);
      
      String string1 = Utility.fillup("baload", (byte)69, false, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTbaload", string1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.setBit((byte) (-119), 186);
      assertEquals((-119), int0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      try { 
        Utility.typeOfSignature("*:G)cU3#))N/>vk'WN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :G)cU3#))N/>vk'WN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-71);
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1L));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ka DpGEe|h#Qh'aZH]>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ka DpGEe|h#Qh'aZH]>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.signatureToString("F`n+_LL,\"0=r{y/U6");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-79));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantMethodType0;
      constantArray0[7] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), 162, false);
      Utility.compactClassName("getfield", "float", false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)53, (byte)53);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence1, constantPool1, false);
      String string0 = Utility.accessToString((int) (byte)82, false);
      assertEquals("private final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = Utility.convertString(";3JK,5xP`]J");
      assertEquals(";3JK,5xP`]J", string0);
      
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      int int0 = Utility.clearBit(1754, (byte)34);
      assertEquals(1754, int0);
      
      String string2 = Utility.fillup("nop", 8192, true, 'T');
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("lstore_0", "lmul", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string2 = Utility.convertString("+a|");
      assertEquals("+a|", string2);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(177);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)118, (byte)118);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      Utility.convertString("Zc ~U");
      try { 
        Utility.methodSignatureArgumentTypes("fstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      int int0 = Utility.clearBit((-792), (-792));
      assertEquals((-792), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-310), 68, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName(";3JK,5xP`]J", ";3JK,5xP`]J", true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)1;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)76);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger1 = new ConstantInteger(byteSequence2);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantFloat constantFloat2 = new ConstantFloat(byteSequence2);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R*7j gaO?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R*7j gaO?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("\"");
      String string0 = Utility.methodSignatureReturnType("LSimple,lementValue;V", true);
      assertEquals("Simple,lementValue", string0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ifge\t\t#-15311", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 823, false);
      try { 
        Utility.typeOfMethodSignature("CONSTANT_NameAndType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_NameAndType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%163", string0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ret";
      stringArray0[1] = "ret";
      stringArray0[2] = "\t).i^b^";
      stringArray0[3] = "ret";
      stringArray0[4] = "ret";
      stringArray0[5] = "ret";
      stringArray0[6] = "ret";
      stringArray0[7] = "ret";
      Utility.methodTypeToSignature("ret", stringArray0);
      Utility.signatureToString("Double", false);
      Utility.isJavaIdentifierPart('J');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Double", "Invalid signature: ", "ret", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = Utility.decode(";3JK,5xP`]J", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-310), 68, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.compactClassName("jsr_w");
      Utility.compactClassName("PMGClass");
      Utility.isJavaIdentifierPart('|');
      try { 
        Utility.methodSignatureToString("@ZXussa|<m#o", (String) null, "3L|WLV}aW}hQMs", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @ZXussa|<m#o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      try { 
        Utility.typeOfSignature("Nqiqs[e,&R?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nqiqs[e,&R?L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Utility.convertString(";3JK,5xP`]J");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)82;
      try { 
        Utility.typeOfSignature(";3JK,5xP`]J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;3JK,5xP`]J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = Utility.classOrInterface(11);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishr", string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      Utility.decode(">-8^", false);
      Utility.accessToString(897);
      Utility.compactClassName(">-8^", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ">-8^";
      objectArray0[1] = (Object) ">-8^";
      objectArray0[2] = (Object) ">-8^";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ">-8^";
      objectArray0[5] = (Object) ">-8^";
      objectArray0[6] = (Object) ">-8^";
      objectArray0[7] = (Object) "public transient native interface";
      Utility.printArray(objectArray0, false, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "public transient native interface";
      Utility.methodTypeToSignature("public transient native interface", stringArray0);
      Utility.getSignature(">-8^");
      Utility.compactClassName("public transient native interface");
      Utility.accessToString(897);
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureToString("-2B'Y^K", "3V]8%yCM{L/MBxQaD", "invokestatic", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -2B'Y^K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1145, 1145, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#j'.oa|;$mPEh CMl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #j'.oa|;$mPEh CMl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = Utility.classOrInterface(12);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte)99;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("66 ed 04 98 00 a4 33 cb 63", string1);
      
      String string2 = Utility.convertString("#O?{,3cwPS'lfU;a");
      assertEquals("#O?{,3cwPS\\'lfU;a", string2);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertEquals(", , , , , , , ", string1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "if_acmpne", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      try { 
        Utility.decode(">", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)48);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-55));
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Utility.signatureToString("Z;/G9`+*6f}>)^gW", false);
      try { 
        Utility.typeOfSignature(":q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)48);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-55));
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = "x,G2f_.nw";
      Utility.replace("CONSTANT_NameAndType", "x,G2f_.nw", "CONSTANT_NameAndType");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1522));
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1741), (byte) (-98));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-1741), (int) (byte)26, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-21);
      byteArray0[2] = (byte) (-33);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)80;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("b$_$df$AzP", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "K";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      String string1 = "int";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K");
      String string2 = "Q5b";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = "iload_3";
      boolean boolean0 = true;
      Utility.compactClassName("iload_3", true);
      Utility.classOrInterface(0);
      try { 
        Utility.typeOfMethodSignature("iload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      Utility.compactClassName("P|Ky", "", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Utility.compactClassName(", low = ", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-468), 36);
      assertEquals("0:    baload\n1:    impdep2\n2:    impdep2\n3:    impdep2\n4:    <illegal opcode>\n5:    iload_1\n6:    iload_1\n7:    impdep2\n8:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=aFDs9Zz2:NN]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =aFDs9Zz2:NN]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Utility.classOrInterface('U');
      Utility.format(168, (-1692), true, 'U');
      Utility.classOrInterface((-1692));
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      try { 
        Utility.methodSignatureReturnType("static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GN085lCWJtsn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GN085lCWJtsn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = "Invalid signature: `";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("Invalid signature: `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-117), 36, byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?69!@", "f2i", (String) null, false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-32);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
