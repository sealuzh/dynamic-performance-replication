/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:51 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(37, 37, 37);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(33, 33, 33);
      assertEquals(33, denseMatrix0.rows());
      assertEquals(33, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(33, denseMatrix0.rows());
      assertEquals(33, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(33, denseMatrix0.rows());
      assertEquals(33, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(27, 27, 27);
      assertEquals(27, denseMatrix0.columns());
      assertEquals(27, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(27, denseMatrix0.columns());
      assertEquals(27, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      assertEquals(0.1, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      assertEquals(0.1, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(0.1, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(0.1, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(matrixArray1);
      assertNotSame(matrixArray1, matrixArray0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(48, 48, (-966.0));
      assertEquals(48, denseMatrix0.rows());
      assertEquals(48, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(48, denseMatrix0.rows());
      assertEquals(48, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(37, 48, 48);
      assertEquals(48, denseMatrix0.columns());
      assertEquals(37, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(48, denseMatrix0.columns());
      assertEquals(37, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      // Undeclared exception!
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1, 1, 48);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(48, 1, 48);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      assertNotNull(singularValueDecompositor0);
      
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(1, denseMatrix0.columns());
      assertEquals(48, denseMatrix0.rows());
      assertNotNull(matrixArray1);
      assertNotSame(matrixArray1, matrixArray0);
  }
}
