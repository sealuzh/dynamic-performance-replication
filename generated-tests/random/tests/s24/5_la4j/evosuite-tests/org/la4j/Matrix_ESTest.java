/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:04:26 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1637, 1637, 1637);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(1637);
      int int0 = 7;
      int int1 = 1000;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) sparseMatrix0, 1637, 17, 17, 7, 1000, 1627);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 1000 rows and 1627 cols at 1637, 17 from a 1637x1637 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      sparseMatrix0.equals((Object) null);
      sparseMatrix0.shuffle();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2324, 2324, 2324);
      columnMajorSparseMatrix0.columns();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2324, (-966.0));
      int int0 = (-3424);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 2324, (-3424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 2324x-3424
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 393.6206043622;
      doubleArray0[6] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      Matrix matrix1 = matrix0.divide(0.0);
      assertEquals(7, matrix1.rows());
      assertEquals(7, matrix1.columns());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
      
      Matrix matrix2 = matrix1.power(1806);
      assertEquals(7, matrix2.rows());
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix2.equals((Object)matrix1));
      
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      matrix2.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix2, 7, 4595);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 7 rows and 4595 cols at 0, 0 in a 7x7 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, 2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 2, (-937), 0, 564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 2, -937
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(48, 0.0, (Random) mockRandom0);
      mockRandom0.nextFloat();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2035.77314127).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldColumn(2, vectorAccumulator0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 224.5880856007548, 7.0, 1.0, 5.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(10, vectorFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachInColumn(10, vectorProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.6458336095458524E-11).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateAt(7, 2, matrixFunction0);
      rowMajorSparseMatrix0.minInColumn(7);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2004, 2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, (-439), (-2086), 0, 1, 10, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 0, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(4);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 4;
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = (double) 4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) 4;
      doubleArray4[1] = (double) 4;
      doubleArray4[2] = (-1228.664290685);
      doubleArray4[3] = (double) 4;
      doubleArray4[4] = (double) 4;
      doubleArray4[5] = (double) 4;
      doubleArray4[6] = (double) 4;
      doubleArray4[7] = (double) 4;
      doubleArray4[8] = (double) 4;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1228.664290685);
      doubleArray5[1] = 2.0;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (double) 4;
      doubleArray5[4] = (double) 4;
      doubleArray5[5] = (double) 4;
      doubleArray5[6] = (double) 4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-1228.664290685);
      doubleArray6[1] = 2.0;
      doubleArray6[2] = (double) 4;
      doubleArray6[3] = 1894.8539775182921;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 1894.8539775182921;
      doubleArray0[6] = doubleArray7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      boolean boolean0 = matrix0.equals((Matrix) columnMajorSparseMatrix0, 1.8238916037275123E-6);
      assertEquals(7, columnMajorSparseMatrix0.rows());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1;
      int int1 = 2102;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 2102);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(1);
      matrix0.equals((Matrix) rowMajorSparseMatrix0, 801.5370295270764);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.is(matrixPredicate0);
      Matrix matrix1 = rowMajorSparseMatrix0.removeFirstColumn();
      // Undeclared exception!
      try { 
        matrix1.multiply((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 0, (double[]) null);
      sparseMatrix0.setColumn((-2987), 1511.6099459729655);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      
      double double0 = sparseMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      MockRandom mockRandom0 = new MockRandom(3L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      matrix0.swapRows((-3119), (-3119));
      assertEquals(0.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 3279.0;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.getColumn(2161);
      rowMajorSparseMatrix0.iterator();
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Vector vector0 = Vector.fromCollection(linkedList0);
      vector0.sum();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(6, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      Matrix.from1DArray(1, 1, doubleArray0);
      double[][] doubleArray1 = new double[0][7];
      Matrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, 5);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      matrix0.rank();
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 5572.409;
      doubleArray0[2] = (double) 5;
      matrix0.rotate();
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.applySymmetric(denseVector0, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-1.0);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      Matrix matrix1 = matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix1, 2593, 2593, (-3551), 273, 6, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -3551, 273
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 476;
      Matrix matrix0 = Matrix.unit(476, 476);
      int int1 = (-2147481498);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      int int2 = 11;
      DenseVector denseVector0 = DenseVector.unit(11);
      denseVector0.divide((-3355.7587097));
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(denseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-2147481498), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..475
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 2854);
      double double0 = sparseMatrix0.manhattanNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, (-3269.624997));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      denseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0, 0);
      int int0 = 632;
      sparseMatrix0.iteratorOfColumn(632);
      int int1 = 37;
      Matrix matrix0 = sparseMatrix0.copyOfRows(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.updateColumn(632, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      sparseMatrix0.fold(matrixAccumulator0);
      matrix0.getColumn(0);
      Double double0 = new Double(0.0);
      sparseMatrix0.equals((Object) double0);
      // Undeclared exception!
      try { 
        sparseMatrix0.hadamardProduct(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 37x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.swapRows(1, 1293);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 4;
      MockRandom mockRandom0 = new MockRandom((-1L));
      Matrix matrix0 = Matrix.randomSymmetric(4, mockRandom0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(4, (-209.090056));
      int int1 = (-928);
      sparseMatrix0.removeFirstColumn();
      matrix0.iteratorOfRow(4);
      int int2 = 284;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) sparseMatrix0, (-928), 284);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -928x284
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 269.14439678716;
      doubleArray1[1] = 2081.813243206085;
      doubleArray1[2] = 5583.4724;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2653.4648);
      doubleArray1[6] = (-1753.3212141168);
      doubleArray1[7] = 1096.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 269.14439678716;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      int int0 = 4633;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4633);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(4633, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 11;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(11, 11);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (-1939.1);
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) 11;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 11;
      doubleArray0[8] = (double) 11;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 9 does not equal to 11.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 17;
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextInt(17);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(17, 17, 0.0, (Random) mockRandom0);
      mockRandom0.nextLong();
      double double0 = 100.0;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.maxInRow(1583);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1583' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 2144;
      DenseVector denseVector0 = DenseVector.zero(2144);
      Matrix matrix0 = denseVector0.toRowMatrix();
      denseVector0.setAll((-359.85));
      // Undeclared exception!
      try { 
        matrix0.insertRow(1642, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = matrix0.shuffle();
      denseMatrix0.rank();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateColumn(1090, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 5;
      DenseVector denseVector0 = DenseVector.constant(5, (-847.84));
      Matrix matrix0 = denseVector0.toRowMatrix();
      Matrix matrix1 = matrix0.blank();
      matrix1.insert(matrix0);
      int int1 = 48;
      matrix1.blankOfColumns(48);
      int int2 = 3;
      int int3 = (-1);
      // Undeclared exception!
      try { 
        matrix0.blankOfShape(3454, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1194;
      int int1 = 4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 1194;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1194, 4, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.maxInColumn(2502);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2502' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 2526;
      int int1 = 1542;
      Matrix matrix0 = Matrix.constant(2526, 1542, 1542);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1542;
      doubleArray1[1] = (double) 2526;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 1542;
      doubleArray2[1] = (double) 1542;
      doubleArray2[2] = (double) 2526;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
      int int2 = 838;
      matrix0.setRow(838, Double.POSITIVE_INFINITY);
      matrix0.blank();
      // Undeclared exception!
      matrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(362, 362);
      Matrix matrix1 = matrix0.copy();
      // Undeclared exception!
      try { 
        matrix1.removeRow(362);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..361
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 7, 7);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.diagonal(7, 7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("org.la4j.Vector");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \"org.la4j.Vector\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(934, 934, 934);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2694, 934, 934);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 2694, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2694 rows and 6 cols at 0, 0 in a 934x934 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      denseMatrix0.setColumn(3, (double) 8);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(3, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.get(8, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(37);
      matrix0.transpose();
      matrix0.toRowMajorSparseMatrix();
      matrix0.toCSV();
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1423, 7.0);
      // Undeclared exception!
      sparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(17);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 6;
      long long0 = 2458L;
      MockRandom mockRandom0 = new MockRandom(2458L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(6, (double) 6, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 36.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(48, 0.0, (Random) mockRandom0);
      mockRandom0.nextFloat();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldColumn(2, vectorAccumulator0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      rowMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(10, vectorFunction0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      rowMajorSparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.eachInColumn(10, vectorProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateAt(7, 2, matrixFunction0);
      rowMajorSparseMatrix0.minInColumn(7);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(7);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(2004, 2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert(matrix0, 2, (-2086), 0, 1, 10, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 0, 1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2614.2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2614.2);
      doubleArray2[1] = 4665.6555;
      doubleArray2[2] = (-2614.2);
      doubleArray2[3] = (-2614.2);
      doubleArray2[4] = (-2614.2);
      doubleArray2[5] = (-2614.2);
      doubleArray2[6] = (-2614.2);
      doubleArray2[7] = (-2614.2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 4665.6555;
      doubleArray3[1] = (-2614.2);
      doubleArray3[2] = 4665.6555;
      doubleArray3[3] = 4665.6555;
      doubleArray3[4] = 4665.6555;
      doubleArray3[5] = (-2614.2);
      doubleArray3[6] = 4665.6555;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-2614.2);
      doubleArray4[1] = (-2614.2);
      doubleArray4[2] = (-2614.2);
      doubleArray4[3] = 4665.6555;
      doubleArray4[4] = (-2614.2);
      doubleArray4[5] = (-2614.2);
      doubleArray4[6] = 4665.6555;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2614.2);
      doubleArray5[1] = 4665.6555;
      doubleArray5[2] = 4665.6555;
      doubleArray5[3] = (-2614.2);
      doubleArray5[4] = 4665.6555;
      doubleArray5[5] = (-2614.2);
      doubleArray5[6] = (-2614.2);
      doubleArray5[7] = 4665.6555;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-2614.2);
      doubleArray6[1] = 4665.6555;
      doubleArray6[2] = (-2614.2);
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) denseMatrix0, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 3 rows and 3 cols at 0, 0 from a 6x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 21;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(21, 21);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(21, 21);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix1);
      Matrix.diagonal(21, 21);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      basic2DMatrix1.min();
      basic2DMatrix1.columnMajorIterator();
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail("?/G7}=B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ?/G7}=B
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 37;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(37, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn(0, (Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3576, 3576, 1444);
      DenseVector denseVector0 = DenseVector.zero(81);
      // Undeclared exception!
      rowMajorSparseMatrix0.insertColumn(37, denseVector0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(4, 4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 508;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(508, 508);
      rowMajorSparseMatrix0.swapColumns(508, 508);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(508);
      mockRandom0.doubles(0.0, 2190.03457);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(16, mockRandom0);
      mockRandom0.nextLong();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      denseMatrix0.rotate();
      // Undeclared exception!
      rowMajorSparseMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 579;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(579, 579);
      // Undeclared exception!
      denseMatrix0.toColumnMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.random(4838, 4838, 0.0, (Random) mockRandom0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = (double) 4838;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 4838;
      doubleArray3[2] = (-966.0);
      doubleArray3[3] = (-966.0);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-966.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1243.7495;
      doubleArray4[2] = (-966.0);
      doubleArray4[3] = (double) 4838;
      doubleArray4[4] = (-966.0);
      doubleArray4[5] = (-966.0);
      doubleArray4[6] = (-966.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1737.512424775;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-966.0);
      doubleArray5[3] = (double) 4838;
      doubleArray5[4] = 1243.7495;
      doubleArray5[5] = (-966.0);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (-966.0);
      doubleArray5[8] = 1243.7495;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 1243.7495;
      doubleArray6[1] = (double) 4838;
      doubleArray6[2] = 1737.512424775;
      doubleArray6[3] = (double) 4838;
      doubleArray6[4] = 1243.7495;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 2363.80182103;
      doubleArray6[7] = (-1614.46996256046);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 1737.512424775;
      doubleArray7[1] = 1737.512424775;
      doubleArray7[2] = (-966.0);
      doubleArray7[3] = (-847.094461407);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      Matrix.from2DArray(doubleArray0);
      rowMajorSparseMatrix0.min();
      // Undeclared exception!
      rowMajorSparseMatrix0.norm();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 140.18559127100042;
      doubleArray2[1] = 2.9401777175363973E-10;
      doubleArray2[2] = 4.9E-324;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2.9401777175363973E-10;
      doubleArray2[5] = 2.6458336095458524E-11;
      doubleArray2[6] = (-2834.5);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 2469.296970672558;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2834.5);
      doubleArray3[1] = (-2834.5);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-2834.5);
      doubleArray3[5] = 2.1330673731333057E-10;
      doubleArray3[6] = 2.9401777175363973E-10;
      doubleArray3[7] = 140.18559127100042;
      doubleArray3[8] = 2.9401777175363973E-10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-2834.5);
      doubleArray4[1] = 2.9401777175363973E-10;
      doubleArray4[2] = 4.9E-324;
      doubleArray4[3] = 2.9401777175363973E-10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2.9401777175363973E-10;
      doubleArray5[1] = (-2834.5);
      doubleArray5[2] = 2.6458336095458524E-11;
      doubleArray5[3] = 4.9E-324;
      doubleArray5[4] = 2469.296970672558;
      doubleArray5[5] = 2.6458336095458524E-11;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      try { 
        matrix1.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-966.0);
      doubleArray0[1] = (double) 3248;
      doubleArray0[2] = 7.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) 3248;
      // Undeclared exception!
      try { 
        Matrix.from1DArray(3248, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 13;
      double double0 = (-966.0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(13, (-966.0));
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.blankOfColumns(13);
      String string0 = "matrix";
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.diagonal(13, (-966.0));
      sparseMatrix0.equals((Object) cRSMatrix1);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).fail("matrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(32);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(32, 10, 32);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      matrix0.blankOfShape(1443, 5);
      matrix1.equals(matrix0, 2035.77314127);
      int int0 = (-800);
      // Undeclared exception!
      try { 
        DenseVector.fromCSV("?pC+n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      matrix0.rank();
      // Undeclared exception!
      try { 
        Matrix.fromCSV("agQ65");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1440);
      int int0 = 0;
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfRows(0);
      // Undeclared exception!
      try { 
        matrix0.power((-1372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1372.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2, 2);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(13, (-3394));
      Vector vector0 = sparseVector0.multiply((double) 13);
      // Undeclared exception!
      try { 
        matrix0.setRow((-3394), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 13. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray1[3] = 3426.29429693;
      doubleArray1[4] = 1320.80843812;
      doubleArray1[5] = 1516.0;
      doubleArray1[6] = 968.3647881757548;
      doubleArray1[7] = (-393.4377268428926);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.1102230246251565E-14;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-966.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-966.0);
      doubleArray4[2] = 3426.29429693;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-966.0);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 1516.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "\n";
      Matrix matrix0 = Matrix.fromCSV("\n");
      int int0 = 2;
      matrix0.toBinary();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldColumn(2, vectorAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        matrix1.getRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = 0.0;
      double double0 = (-308.8521606);
      doubleArray2[5] = (-308.8521606);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1626);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(9, mockRandom0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertColumn((-2558), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1625
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2451, 2451);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      matrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1644, (-908.5));
      // Undeclared exception!
      try { 
        denseMatrix0.transformColumn((-369), (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 906;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2593, 906, 2593);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      Matrix matrix1 = matrix0.rotate();
      matrix1.divide(2593);
      // Undeclared exception!
      try { 
        matrix1.removeColumn((-2864));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..905
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(7, 7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 7);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        matrix0.setRow((-2040109464), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2040109464' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(32, mockRandom0);
      // Undeclared exception!
      try { 
        denseMatrix0.setRow((-1704), (double) (-1704));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow((-5972));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(10, 5, mockRandom0);
      matrix0.toMatrixMarket();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.setColumn((-1458), 1686.3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.8238916037275123E-6;
      doubleArray2[1] = 280.55;
      doubleArray2[2] = (-1520.22062843);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1520.22062843);
      doubleArray3[1] = 280.55;
      doubleArray3[2] = 280.55;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 280.55;
      doubleArray4[1] = (-1520.22062843);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.minInRow(8);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 8);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.power(969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(2590, mockRandom0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(2590, 3015);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2590..2590][3015..2590].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 1603);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.updateColumn((-3633), (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-3633' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(1000, 1000, 1000);
      // Undeclared exception!
      denseMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      SparseVector sparseVector0 = SparseVector.zero(406, 0);
      sparseVector0.toString();
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.toRowVector();
      sparseVector0.max();
      // Undeclared exception!
      try { 
        matrix0.set(17, 17, (-2375.899079631));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(342, (-1932735282));
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("2");
      Matrix matrix1 = columnMajorSparseMatrix0.transpose();
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix1, matrix1, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 496.0;
      doubleArray0[3] = (-3277.846985);
      doubleArray0[4] = 4117.542643;
      doubleArray0[5] = 1038.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      denseVector0.toDiagonalMatrix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1473);
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      int int0 = (-2056);
      int int1 = 2;
      // Undeclared exception!
      try { 
        matrix0.swapColumns((-2056), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2056' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1225, 1225);
      matrix0.columnMajorIterator();
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3284.97709140803);
      doubleArray0[1] = (-955.98158853);
      double double0 = 512.1516600040442;
      doubleArray0[2] = 512.1516600040442;
      doubleArray0[3] = 1618.38;
      doubleArray0[4] = (-52.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 221.53252226234;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      matrix0.mkString(numberFormat0);
      int int0 = 1;
      int int1 = (-2344);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Vector.fromCSV("_9d-(W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 5);
      rowMajorSparseMatrix0.hashCode();
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(4109, 4109);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix1, 747, 840, 840, 32, 840, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 840, 32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(532, 0.0, (Random) null);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      matrix0.blank();
      columnMajorSparseMatrix0.columnMajorIterator();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1000);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) rowMajorSparseMatrix0, 532, 1000, 0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 532, 1000
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 9;
      DenseVector denseVector0 = DenseVector.unit(9);
      SparseVector sparseVector0 = SparseVector.zero(9);
      denseVector0.toColumnMatrix();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("RpxxK,!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 3865;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3865, 3865);
      int int1 = (-75);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft((-75), 3865);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-75][0..3865].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero((-1665), (-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1665x-1665
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(18);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.foldRow(17, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 9;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(9);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Matrix matrix0 = sparseMatrix0.blank();
      Matrix matrix1 = matrix0.transpose();
      matrix0.multiplyByItsTranspose();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix2 = sparseMatrix0.transformRow(4, vectorFunction0);
      matrix2.euclideanNorm();
      matrix2.hadamardProduct(matrix1);
      matrix0.shuffle();
      String string0 = "5!";
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 4862;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(4862, 4862, 4862);
      Matrix matrix0 = columnMajorSparseMatrix0.multiplyByItsTranspose();
      matrix0.trace();
      // Undeclared exception!
      matrix0.add((Matrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1650;
      MockRandom mockRandom0 = new MockRandom(1650);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(1650, 0.0, (Random) mockRandom0);
      mockRandom0.nextInt(1650);
      sparseMatrix0.toMatrixMarket();
      sparseMatrix0.blankOfShape(1650, 3);
      sparseMatrix0.toDenseMatrix();
      sparseMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        sparseMatrix0.updateAt(1650, 4937, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1651
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(27, 17.332495389759867);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      assertEquals(27, matrix0.rows());
      assertEquals(27, matrix0.columns());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 17.332495389759867;
      doubleArray0[1] = 17.332495389759867;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      sparseVector0.infinityNorm();
      denseVector0.innerProduct(sparseVector0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
      Matrix matrix1 = denseMatrix0.transpose();
      Matrix matrix2 = matrix1.removeLastRow();
      assertEquals(26, matrix2.rows());
      assertTrue(matrix1.equals((Object)denseMatrix0));
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(8, 8);
      DenseMatrix denseMatrix1 = DenseMatrix.constant(8, 8, 8);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix1);
      int int0 = matrix0.rank();
      assertEquals(0, int0);
      assertEquals(8, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(4946);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.trace();
      // Undeclared exception!
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2128.1593863);
      doubleArray1[1] = (-291.2171);
      doubleArray1[2] = (-2019.6527486212226);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2128.1593863);
      doubleArray2[1] = (-2019.6527486212226);
      doubleArray2[2] = (-2019.6527486212226);
      doubleArray2[3] = (-2128.1593863);
      doubleArray2[4] = (-512.30096);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-2128.1593863);
      doubleArray3[1] = (-2128.1593863);
      doubleArray3[2] = (-2019.6527486212226);
      doubleArray0[2] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.min();
      matrix0.mkString("0.000", "0.000");
      matrix0.diagonalProduct();
      Matrix matrix1 = Matrix.constant(6, 6, 6);
      assertEquals(6, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      double double0 = sparseMatrix0.euclideanNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 2;
      Matrix matrix0 = Matrix.constant(2, 2, 0.0);
      matrix0.add(796.4);
      matrix0.toBinary();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(4);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = matrix0.rotate();
      assertNotSame(matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.zero(2, (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2611, 2611);
      Matrix matrix0 = sparseMatrix0.subtract((double) 2611);
      assertEquals(2611, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(16, 1390, 16);
      double double0 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 1390;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 1390;
      doubleArray0[6] = (double) 16;
      doubleArray0[7] = (double) 16;
      doubleArray0[8] = (double) 1390;
      Matrix matrix1 = Matrix.from1DArray(16, 16, doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.hadamardProduct(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 16x1390 does not equal to 16x16.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 2);
      columnMajorSparseMatrix0.max();
      columnMajorSparseMatrix0.iteratorOfColumn(2);
      columnMajorSparseMatrix0.min();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformRow(2, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 37;
      Matrix matrix0 = Matrix.constant(37, 37, 37);
      // Undeclared exception!
      try { 
        matrix0.minInRow((-1717986917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1035;
      int int1 = 34;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 1035;
      doubleArray0[3] = (double) 34;
      doubleArray0[4] = (double) 1035;
      doubleArray0[5] = (double) 34;
      doubleArray0[6] = (double) 1035;
      doubleArray0[7] = (double) 1035;
      doubleArray0[8] = (double) 1035;
      Matrix matrix0 = Matrix.from1DArray(1035, 34, doubleArray0);
      int int2 = 531;
      // Undeclared exception!
      try { 
        matrix0.copyOfColumns(531);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(20, 20, 20);
      Matrix matrix1 = matrix0.blankOfColumns(6);
      Matrix matrix2 = matrix0.removeLastRow();
      matrix2.columns();
      // Undeclared exception!
      try { 
        matrix1.subtract(matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 20x6 does not equal to 19x20.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1478, 1478, 5);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      double double0 = matrix0.minInColumn(5);
      assertEquals(1478, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(3, 3, 3);
      Matrix matrix1 = matrix0.blankOfColumns(6);
      assertEquals(6, matrix1.columns());
      assertEquals(3, matrix1.rows());
      
      Matrix matrix2 = matrix0.removeLastRow();
      assertEquals(3, matrix2.columns());
      assertEquals(2, matrix2.rows());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 3;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(294, 3);
      int int1 = 1115;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 294;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1115;
      int[] intArray0 = new int[2];
      intArray0[0] = 294;
      intArray0[1] = 3;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(37, 30);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      matrix0.removeLastColumn();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(matrix0, matrix0, (Matrix) null, rowMajorSparseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(454);
      // Undeclared exception!
      try { 
        sparseMatrix0.setColumn(454, (double) 454);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '454' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5);
      mockRandom0.longs();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.random(5, 5, mockRandom0);
      ((Matrix)basic2DMatrix0).ensureDimensionsAreCorrect(9, 5);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.multiply((double) 5);
      basic2DMatrix0.toColumnVector();
      ((Matrix)basic2DMatrix1).ensureDimensionsAreCorrect(8, 8);
      // Undeclared exception!
      try { 
        basic2DMatrix1.eachInColumn(9, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1921.98244;
      doubleArray1[1] = 4487.207133;
      doubleArray1[2] = (-748.84825905547);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 4487.207133;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-748.84825905547);
      doubleArray2[3] = 1921.98244;
      doubleArray2[4] = 4487.207133;
      doubleArray2[5] = 1921.98244;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = (-976.7540837074409);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-748.84825905547);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 4487.207133;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1873.9333266);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 1921.98244;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-976.7540837074409);
      doubleArray6[1] = 4487.207133;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-976.7540837074409);
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (-976.7540837074409);
      doubleArray7[6] = 4487.207133;
      doubleArray7[7] = 1921.98244;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-1873.9333266);
      doubleArray8[1] = (-748.84825905547);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (-748.84825905547);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-1873.9333266);
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 0.0;
      doubleArray9[5] = 4487.207133;
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.copyOfRows(2003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(8);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.get(8, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 8);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.power(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("       ");
      int int0 = 55;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(55, vectorFunction0);
      matrix0.equals((Object) "       ");
      MockRandom mockRandom0 = new MockRandom(668);
      // Undeclared exception!
      try { 
        SparseVector.random(668, (-473.28655193), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("   ");
      columnMajorSparseMatrix0.transpose();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 7;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(7, 7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(7, 7, doubleArray0);
      columnMajorSparseMatrix0.equals((Object) denseMatrix0);
      // Undeclared exception!
      try { 
        Matrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(673);
      int int0 = 242;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow(673, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '673' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 51;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(51, 19, 19);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      sparseMatrix0.nonZeroColumnMajorIterator();
      sparseMatrix0.toColumnVector();
      matrix0.hashCode();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = (-1180);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(55, (-1180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 55x-1180
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1;
      DenseMatrix.diagonal(1, 0.0);
      int int1 = 349;
      Matrix matrix0 = Matrix.identity(349);
      // Undeclared exception!
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix.fromCSV("");
      MockRandom mockRandom0 = new MockRandom(3);
      // Undeclared exception!
      try { 
        Matrix.random(3, (-1890), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1556L);
      mockRandom0.doubles(0L);
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-419), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(9, 9);
      assertEquals(9, denseMatrix0.columns());
      
      double double0 = denseMatrix0.max();
      assertEquals(9, denseMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 52;
      double double0 = (-1.0);
      Matrix matrix0 = Matrix.constant(52, 52, (-1.0));
      // Undeclared exception!
      matrix0.product();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      linkedList0.stream();
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)matrix0.blankOfRows(0);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).ensureIndexesAreInBounds(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2147483647' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = Matrix.unit(0, 0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      DenseVector denseVector0 = DenseVector.zero(2579);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        DenseMatrix.block(matrix0, (Matrix) null, matrix1, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromCSV("%=Q9GS$I;cl16");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(757, 757);
      rowMajorSparseMatrix0.blankOfRows(757);
      int[] intArray0 = new int[6];
      intArray0[0] = 757;
      intArray0[1] = 757;
      intArray0[2] = 757;
      intArray0[3] = 757;
      intArray0[4] = 757;
      intArray0[5] = 757;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '757' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = (-1643);
      int int1 = (-5845);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-1643), (-5845));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1643x-5845
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("cOnGzFvQl%tWj<4jS+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = (-1119);
      // Undeclared exception!
      try { 
        DenseMatrix.diagonal((-1119), (-1119));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 1590;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(1590, (double) 1590, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2528100.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(denseMatrix0);
      Matrix matrix1 = matrix0.shuffle();
      assertEquals(1, denseMatrix0.rows());
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(1, matrix0.columns());
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 19;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(19, 19, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(10, 10);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.1, cRSMatrix1.density(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(68, 68);
      Matrix matrix0 = columnMajorSparseMatrix0.add(90.911765079);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      // Undeclared exception!
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(37);
      sparseMatrix0.mkString("7<?", "7<?");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = sparseMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(37, sparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3637, 2.7755575615628914E-13);
      int int0 = 24;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      rowMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(4, 4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      matrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
