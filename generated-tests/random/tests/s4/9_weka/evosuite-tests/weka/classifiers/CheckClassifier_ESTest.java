/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:03:34 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.Vote;
import weka.classifiers.trees.M5P;
import weka.core.CheckScheme;
import weka.core.SelectedTag;
import weka.core.Utils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iH");
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.setDebug(false);
      checkClassifier0.setClassifier(simpleLinearRegression0);
      checkClassifier0.getOptions();
      checkClassifier0.canTakeOptions();
      checkClassifier0.getClassifier();
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      checkClassifier0.declaresSerialVersionUID();
      int int0 = (-1291);
      checkClassifier0.setNumInstancesRelational((-1291));
      checkClassifier0.setDebug(true);
      checkClassifier0.getOptions();
      int int1 = (-72);
      Random.setNextRandom((-72));
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = costSensitiveClassifier0.getCostMatrixSource();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      Classifier classifier0 = AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      checkClassifier0.setClassifier(classifier0);
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.m_Classifier = null;
      checkClassifier0.doTests();
      checkClassifier0.testToString();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      int int0 = (-825);
      int int1 = 1676;
      try { 
        checkClassifier0.makeTestDataset((-825), (-825), (-5332), (-825), 2110, 2110, 200, 24, (-5332), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1736
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setNumDate(37);
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.updateableClassifier();
      checkClassifier0.setClassifier((Classifier) null);
      checkClassifier0.doTests();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(false, false, false, true, false, false, 37, 5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '37' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2:O");
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 27;
      checkClassifier0.setNumDate(27);
      checkClassifier0.getRevision();
      checkClassifier0.canTakeOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pO");
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, true, false, false, false, 2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.rules.ZeroR: Cannot handle string class!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setClassifier((Classifier) null);
      String[] stringArray0 = checkClassifier0.getOptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      checkClassifier0.canTakeOptions();
      checkClassifier0.listOptions();
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.testsPerClassType(4, false, true, false);
      boolean boolean2 = true;
      boolean boolean3 = true;
      checkClassifier0.updatingEquality(true, true, true, true, true, false, 0);
      checkClassifier0.setSilent(true);
      boolean boolean4 = false;
      int int0 = 1722;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, true, true, 200, false, true, 1722);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '200' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.getWords();
      boolean boolean1 = false;
      int int0 = 3;
      int int1 = (-2364);
      checkClassifier0.setNumNumeric((-2364));
      checkClassifier0.updatingEquality(false, false, false, false, false, true, 3);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, false, true, true, false, (-5466));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-5466' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.testsPerClassType(4, false, true, false);
      boolean boolean2 = true;
      boolean boolean3 = true;
      checkClassifier0.updatingEquality(true, false, true, true, true, false, 0);
      checkClassifier0.setSilent(true);
      boolean boolean4 = false;
      int int0 = 1722;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, true, true, 200, false, true, 1722);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '200' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Vote vote0 = new Vote();
      checkClassifier0.m_Classifier = (Classifier) vote0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      checkClassifier0.updateableClassifier();
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utils.SMALL = 0.0;
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.declaresSerialVersionUID();
      boolean boolean0 = false;
      checkClassifier0.getRevision();
      int int0 = 2;
      checkClassifier0.canHandleOnlyClass(true, false, false, false, false, 2);
      boolean boolean1 = false;
      checkClassifier0.printAttributeSummary(true, false, false, false, false, false, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      checkClassifier0.correctBuildInitialisation(false, true, false, false, false, false, 2);
      boolean boolean2 = false;
      checkClassifier0.setNumInstancesRelational(2);
      boolean boolean3 = true;
      checkClassifier0.setNumInstances((-1));
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, false, false, false, false, 2, false, true, (-1512));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -1
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setClassifier((Classifier) null);
      checkClassifier0.getOptions();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int0 = 1;
      checkClassifier0.weightedInstancesHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, true, true, true, true, true, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      Random.setNextRandom(1);
      Random.setNextRandom(1);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(1, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SGD sGD0 = new SGD();
      checkClassifier0.m_Classifier = (Classifier) sGD0;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, true, true, false, true, 3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getRevision();
      checkClassifier0.canHandleOnlyClass(true, false, false, false, false, 2);
      boolean boolean0 = false;
      checkClassifier0.printAttributeSummary(true, false, false, false, false, false, 2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      checkClassifier0.setNumInstancesRelational(2);
      boolean boolean1 = true;
      checkClassifier0.setNumInstances((-1));
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, false, false, false, false, 2, false, true, (-1512));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Illegal Capacity: -1
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z{Z<j]");
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      checkClassifier0.testToString();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, false, false, true, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p;sV\"/%@W";
      stringArray0[1] = "A\"`~^oRDu";
      stringArray0[2] = "-W";
      stringArray0[3] = "7H&1<yO46>@w";
      stringArray0[4] = "Xf";
      stringArray0[5] = "V<";
      stringArray0[6] = "\tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.\n";
      stringArray0[7] = "s~KmF";
      CheckClassifier.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      checkClassifier0.datasetIntegrity(false, false, false, false, true, false, 1, true, false);
      try { 
        checkClassifier0.makeTestDataset(1, 1, (-659), 1, (-448), (-337), (-2385), (-337), (-659), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, false, true, false, 2729);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2729' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, false, false, 37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '37' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 114;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, true, true, true, 114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '114' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(1572L);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      Classifier classifier0 = checkClassifier0.getClassifier();
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setClassifier(classifier0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2bkA@EZL$2x19&U";
      stringArray0[1] = "am";
      stringArray0[2] = "\"cbN";
      stringArray0[3] = "46:\"Mn|:";
      stringArray0[4] = " string";
      stringArray0[5] = "rb";
      stringArray0[6] = "";
      stringArray0[7] = "Cu<iXc0gohc^P";
      CheckClassifier.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.getRevision();
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, true, true, true, false, 6, true, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '6' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-2696L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int0 = 7;
      checkClassifier0.setNumRelational(7);
      boolean boolean3 = false;
      int int1 = 13;
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(true, true, false, false, false, false, 13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '13' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        CheckClassifier.main(stringArray0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.doesntUseTestClassVal(true, false, false, false, true, false, 0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int0 = 24;
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(true, false, true, true, false, true, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '24' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.canTakeOptions();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      checkClassifier0.setNumNumeric(8);
      int int0 = 4;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, true, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-66);
      int int1 = 73;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, false, true, true, false, true, (-66), true, true, 73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-66' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getPostProcessor();
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.setNumString(1434);
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, true, false, true, true, true, 2636);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '2636' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, true, false, false, true, 10, false, false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '10' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, false, false, true, true, false, (-3054));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3054' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      double double0 = 0.0;
      try { 
        checkClassifier0.setOptions((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setDebug(false);
      checkClassifier0.printAttributeSummary(false, false, false, false, false, false, 372);
      int int0 = (-5357);
      try { 
        checkClassifier0.makeTestDataset(100, 372, 372, 59, 372, 59, (-2), (-5357), 372, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-1030);
      int int1 = (-791);
      int int2 = 0;
      int int3 = 0;
      boolean boolean0 = false;
      checkClassifier0.setDebug(false);
      checkClassifier0.setNumInstances((-1030));
      int int4 = 0;
      int int5 = 42;
      int int6 = 0;
      boolean boolean1 = false;
      int int7 = (-1589);
      boolean boolean2 = true;
      checkClassifier0.makeTestDataset(0, (-2812), 0, 42, 0, 0, 2820, (-1589), (-1589), 42, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = 42;
      int int1 = 1063;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(1063, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1063' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.multiInstanceHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, false, true, true, true, 294, false, false, 294);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '294' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int0 = (-2102);
      try { 
        checkClassifier0.makeTestDataset((-2582), (-2582), (-2582), 0, 0, 0, (-2102), (-2102), 0, (-2102), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        AbstractClassifier.forName("", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      checkClassifier0.declaresSerialVersionUID();
      int int0 = (-1278);
      checkClassifier0.setNumInstancesRelational((-1278));
      checkClassifier0.setDebug(true);
      M5P m5P0 = new M5P();
      checkClassifier0.setClassifier(m5P0);
      checkClassifier0.getOptions();
      int int1 = (-72);
      Random.setNextRandom((-72));
      checkClassifier0.getRevision();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, false, false, true, true, true, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }
}
