/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:18:45 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2295.2616843440032, 2295.2616843440032, (-80.63817), (-80.63817), 2295.2616843440032).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("", 0.0, 0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 12.000000000000002, 1167);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, (-89.831), (-2028.713501), (-2028.713501), (-89.831)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      double double0 = 0.0;
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("", 0.0, 0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      double[] doubleArray0 = null;
      int int0 = 978;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.0, 978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0), (-3637.729375005), 2942.4590135027656, (-3637.729375005), (-358.600859553565)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      MnStrategy mnStrategy0 = new MnStrategy(2146376630);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2.0720144948302806), mnStrategy0, 0.5);
      double[] doubleArray1 = new double[1];
      mnStrategy0.setGradientTolerance(14.200000000000003);
      doubleArray1[0] = 2942.4590135027656;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 2942.4590135027656, 2146376630);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, (-3637.729375005));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2972.8630127159995, mnStrategy0, 2972.8630127159995);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.2, 0.2, 0.2, 0.2, 3597.04963343833).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("", 0.0, 0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 12.000000000000002, 1176);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, (-2.0), (-2.0), 16.1, (-2.0)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles((-2143159034));
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      double[] doubleArray0 = null;
      mnStrategy0.setGradientStepTolerance(0.0);
      double[] doubleArray1 = null;
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setHessianGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(6.78183629140725E8, (-3637.729375005), (-3637.729375005), 6.78183629140725E8, (-3637.729375005)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.add("", 0.0, 10.0);
      int int0 = 0;
      double double0 = 0.5;
      mnUserParameterState0.setLimits(0, 0.5, 2152.2);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianStepTolerance((-3930.915432));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2152.2, mnStrategy0, (-2.662979799149787E21));
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3637.689789116612);
      doubleArray1[1] = 5945.726025432;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setLimits(0, (double) 0, (-3637.689789116612));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1.0, 1.0, 5945.726025432, 5945.726025432).when(fCNBase1).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy(1);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0, mnStrategy1, (-2.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 10.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, (-2.0), (-2.0), 1.0, (-2.0)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles((-2143159034));
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setHessianGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.0, 8);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 2199.8779215728023, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.2, 0.2, (-80.63817), (-80.63817), 3597.04963343833).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("", (-80.63817), (-80.63817));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-80.63817), mnStrategy0, (-80.63817));
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(3597.04963343833);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 12.000000000000002, 1176);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-495.5724297358269);
      doubleArray1[1] = 2972.8630127159995;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, (-3637.729375005));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2972.8630127159995, mnStrategy0, 2972.8630127159995);
      int[] intArray0 = new int[3];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-495.5724297358269), 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 6);
      mnUserParameterState0.add("MnFunctionCross problem 1", 1000.0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, (-314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 1550.7658599453;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1871.3180988393146), 1550.7658599453, 1550.7658599453, (-1871.3180988393146), (-1.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.001569413811564;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, (-1871.3180988393146));
      double[] doubleArray2 = null;
      int int0 = 978;
      int[] intArray0 = new int[0];
      double double1 = 4983.370960394052;
      mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 4983.370960394052, 978);
      int[] intArray1 = new int[6];
      // Undeclared exception!
      try { 
        mnUserParameterState0.removeLimits("hWD9}]n)k8kZt}$,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, (-2.0), 1100.64976998571, 1.0, (-2.0)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      mnStrategy0.setGradientTolerance((-3370.0));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, (-1892.77), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, 16.1, 16.1, 1.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      int int0 = (-2143159052);
      mnStrategy0.setHessianGradientNCycles((-2143159052));
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      double[] doubleArray0 = null;
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 0.0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-4144.17055313), (-89.831), (-2028.713501), (-2028.713501), (-89.831)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2028.713501);
      doubleArray0[5] = (-2028.713501);
      doubleArray0[3] = 0.0;
      mnStrategy0.setHessianG2Tolerance((-275.5447005808244));
      int int0 = (-4385);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1324.6, (-4385));
      doubleArray0[5] = (-265.82711);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2028.713501);
      mnStrategy0.setHessianStepTolerance((-265.82711));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.288409686595516E40, (-1697));
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-265.82711), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 4.0, (-2028.713501), (-2028.713501), 4.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 0.0;
      mnUserParameterState0.setPrecision(4.0);
      mnStrategy0.setHessianG2Tolerance(1.0);
      doubleArray0[3] = 0.0;
      mnUserParameters0.setPrecision(0.0);
      mnUserParameters0.toString();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1291.9573054440061, (-4385));
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt((-2124734880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-2124734880
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, (-2.0), 1100.64976998571, 0.7108091993089056, 16.1).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setHessianGradientNCycles((-2143159034));
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.7108091993089056);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setHessianGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(0.7108091993089056);
      mnUserParameterState0.clone();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1100.64976998571, 8);
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1847.0, 2);
      mnStrategy0.setHessianNCycles(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7108091993089056;
      doubleArray0[1] = (double) (-2143159034);
      doubleArray0[2] = (double) (-158);
      doubleArray0[3] = 1100.64976998571;
      mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, 0.51, 0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1880.0, 2);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2.0);
      doubleArray1[1] = 2972.8630127159995;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, (-3637.729375005));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2972.8630127159995, mnStrategy0, 2972.8630127159995);
      mnUserParameterState0.clone();
      int[] intArray0 = new int[3];
      mnStrategy0.setLowStrategy();
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 2972.8630127159995, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3637.729375005);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, 2152.2);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("? <L6qdp;B\"XN\"W$G!", (-3637.729375005));
      int[] intArray0 = new int[2];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.16227766016838, (-3637.729375005), (-240.308631189), 2152.2, (-3637.729375005)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0.5, mnStrategy0, (-3637.729375005));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.5, (-1069));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-0.1), 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(16.1, (-2.0), 1100.64976998571, 0.7108091993089056).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.7108091993089056);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setHessianGradientNCycles(0);
      mnStrategy0.setGradientStepTolerance(0.7108091993089056);
      mnUserParameterState0.clone();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 16.1);
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1100.64976998571, 8);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 3354.5, 8);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 16.1, 2823);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MnUserParameterState mnUserParameterState2 = new MnUserParameterState(mnUserParameters0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1041.63, 16.1, (double)(-2143159052), (-2.0), (-2.0)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-0.40013744837739584), mnStrategy0, (-2670.573));
      mnFunctionCross0.cross(intArray0, (double[]) null, (double[]) null, 1041.63, 12);
      int[] intArray1 = new int[2];
      intArray1[1] = 0;
      int[] intArray2 = new int[8];
      intArray2[0] = 1;
      intArray2[2] = (-2143159052);
      intArray2[3] = 12;
      intArray2[4] = 8;
      intArray2[5] = 12;
      intArray2[6] = 12;
      intArray2[7] = 8;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(6.78183629140725E8, (-3637.729375005), (-3637.729375005), 6.78183629140725E8, (-3637.729375005)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3637.729375005);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, 2152.2);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianStepTolerance((-3930.915432));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2152.2, mnStrategy0, (-2.662979799149787E21));
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 10.0, (-2883));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 4.0, 0);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setError((-2883), 2656.14065026786);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-3637.729375005);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3637.729375005), (-3637.729375005), 2265.0, 0.0, 10.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3637.729375005);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      int int0 = 0;
      mnUserParameterState0.setLimits(0, 0.5, 2152.2);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianStepTolerance((-3637.729375005));
      mnUserParameterState0.toString();
      mnStrategy0.setHessianStepTolerance((-2.662979799149787E21));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2152.2, mnStrategy0, (-2.662979799149787E21));
      mnStrategy0.setHessianStepTolerance(9.687199840412094E24);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.5, 0);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setUpperLimit("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||   -3637.73 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n\n\n\n\n", (-3637.729375005));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3637.729375005), (-3637.729375005), (-3637.729375005), 1586.9, 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3637.729375005);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
      mnUserParameterState0.setPrecision(2025.2029977171971);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      mnUserParameterState0.setUpperLimit(0, (-3066.719133208702));
      mnStrategy0.setHessianStepTolerance((-3637.729375005));
      mnUserParameterState0.name(0);
      mnStrategy0.setHessianStepTolerance(0.5);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-169.9845), mnStrategy0, (-3637.729375005));
      mnStrategy0.setHessianStepTolerance(34.9007);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.5, 0);
      MnStrategy mnStrategy1 = new MnStrategy();
      mnStrategy1.setHessianNCycles(0);
      assertEquals(0.05, mnStrategy1.gradientTolerance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3637.729375005), (-3637.729375005), 2265.0, (-0.1), 0.05).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, 2152.2);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianStepTolerance(0.0);
      mnUserParameterState0.toString();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2152.2, mnStrategy0, (-2.662979799149787E21));
      mnStrategy0.setHessianStepTolerance(9.687199840412094E24);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3637.729375005), 0);
      mnStrategy0.setGradientTolerance(0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-1069));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 10.0, (-3871));
      mnStrategy0.setGradientStepTolerance((-2.662979799149787E21));
      mnUserParameterState0.setPrecision((-1069));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3637.729375005), (-21));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-0.1);
      doubleArray1[1] = (-3637.729375005);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-0.1), (-1069));
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross((int[]) null, doubleArray0, doubleArray0, (-3637.729375005), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3637.689789116612), 8.0, 8.0, 5945.726025431999, (-2.0)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      mnUserParameterState0.setLimits(0, 0.5, (-3637.689789116612));
      MnStrategy mnStrategy0 = new MnStrategy(0);
      int[] intArray0 = new int[2];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2.0, mnStrategy1, (-2896.0));
      double double0 = 0.0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 1);
      mnStrategy1.setHessianG2Tolerance((-2896.0));
      int int0 = 200;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1249.549, 200);
      mnUserParameterState0.errors();
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.5, 0);
  }
}
