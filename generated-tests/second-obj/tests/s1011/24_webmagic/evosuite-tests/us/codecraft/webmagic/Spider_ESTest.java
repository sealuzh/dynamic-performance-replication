/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:14:01 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("4cF%E");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.addPipeline(resultItemsCollectorPipeline0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.pipeline(resultItemsCollectorPipeline0);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("Y4bWPG:K.c", "(~|+");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(657, threadFactory0);
      Spider spider2 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&iYL~T@B*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("&iYL~T@B*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("charsets*=s*['\"]*([^s;'\"]*)");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider1.scheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(">0qU_)j<YP?6");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.getSite();
      spider0.getThreadAlive();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      spider0.getThreadAlive();
      spider0.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      Spider spider1 = spider0.downloader((Downloader) null);
      spider1.getPageCount();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.setSpawnUrl(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("threadNum should be more than one!");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f_)N @2V4-nN7x^*.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f_)N @2V4-nN7x^*.";
      stringArray0[1] = "f_)N @2V4-nN7x^*.";
      stringArray0[2] = "f_)N @2V4-nN7x^*.";
      stringArray0[3] = "f_)N @2V4-nN7x^*.";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("A'`izXUB");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      assertTrue(spider2.isSpawnUrl());
      
      spider2.setSpawnUrl(false);
      boolean boolean0 = spider1.isExitWhenComplete();
      assertFalse(spider1.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0=gzmedkp,RVQ<%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      spider1.setEmptySleepTime(5);
      String string0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y>0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("A'iUcB");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      Request request0 = new Request();
      Page page0 = Page.fail();
      page0.setSkip(false);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider1.addRequest(requestArray0);
      spider1.getScheduler();
      spider3.getStartTime();
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "page status code error, page {} , code: {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      boolean boolean0 = false;
      Page page0 = null;
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "Go`uAKPliK";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Go`uAKPliK");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.thread((-359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1+<Lb:mt]Ci");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("1+<Lb:mt]Ci");
      requestArray0[0] = request0;
      Request request1 = request0.setCharset("_cycle_tried_times");
      requestArray0[1] = request1;
      Request request2 = request1.setUrl("");
      requestArray0[2] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.thread((ExecutorService) null, 31);
      Request request0 = new Request();
      request0.setExtras((Map<String, Object>) null);
      request0.setMethod((String) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.pipelines = (List<Pipeline>) linkedList0;
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Spider spider1 = spider0.thread(3);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "hNAG;a].1)R#";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hNAG;a].1)R#");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setUUID("");
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      spider3.sleep(5);
      Spider spider4 = spider0.thread(5);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isSpawnUrl());
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      Json json0 = new Json((String) null);
      Class<String> class0 = String.class;
      json0.toList(class0);
      Json json1 = new Json((List<String>) null);
      List<Request> list0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(list0);
      spider1.getUUID();
      spider1.start();
      Page page0 = new Page();
      spider0.getSite();
      spider0.getThreadAlive();
      Spider spider2 = spider0.setSpawnUrl(false);
      spider2.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Spider.Status.fromValue((-526));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.selector.RegexResult");
      spider1.startRequest((List<Request>) null);
      spider0.getSpiderListeners();
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Spider.Status.fromValue(0);
      String string0 = ">0qU_)j<YPA?6";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YPA?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string1 = "A'`izXUB";
      Spider spider1 = spider0.setUUID("A'`izXUB");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Request request0 = null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A'`izXUB";
      stringArray0[1] = ">0qU_)j<YPA?6";
      spider1.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider1.get("%qR<Z(YDeE`");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " stop fail!");
      Spider spider1 = spider0.setUUID(">0qU_)j<YP?6");
      spider0.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler((Scheduler) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider0.scheduler((Scheduler) null);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">0qU_)j<YP?6");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " stop fail!");
      Spider spider1 = spider0.setUUID(">0qU_)j<YP?6");
      spider0.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler((Scheduler) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.scheduler((Scheduler) null);
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("f");
      Json json0 = page2.getJson();
      Spider spider2 = spider0.scheduler(priorityScheduler0);
      Class<Request> class0 = Request.class;
      spider2.getStatus();
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      spider0.start();
      Page page0 = new Page();
      spider0.getSite();
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      spider0.start();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!+ #2BQY{5lK";
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0);
      spider0.setExecutorService(scheduledThreadPoolExecutor0);
      stringArray0[1] = "gwbFvBQ-]";
      stringArray0[2] = "gwbFvBQ-]";
      stringArray0[3] = "!+ #2BQY{5lK";
      stringArray0[4] = "gwbFvBQ-]";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("gwbFvBQ-]");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Page page0 = new Page();
      page0.setRawText("get page: ");
      Page page1 = new Page();
      Page page2 = page1.setRawText("");
      page2.setSkip(true);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("\"nf7J_", "\"nf7J_");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader(":name=", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      assertTrue(spider2.isExitWhenComplete());
      
      spider1.getAll((Collection<String>) linkedBlockingDeque0);
      System.setCurrentTimeMillis(0);
      spider0.sleep(918);
      spider0.setEmptySleepTime(86);
      spider2.run();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }
}
