/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:51:57 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String string0 = rE2_0.find("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      int[] intArray0 = rE2_0.findSubmatchIndex("UTF-8");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.numberOfCapturingGroups();
      List<String> list0 = rE2_0.findAll("", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String> list0 = rE2_0.findAll("", 556);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-38);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-38));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 107667);
      assertNull(list0);
      assertEquals("can't happen", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 8);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(":'lV?pP|Y");
      assertNotNull(rE2_0);
      assertEquals(":'lV?pP|Y", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-2785));
      assertNull(list0);
      assertEquals(":'lV?pP|Y", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("UTF-8", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 8);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 3844, true);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3844;
      boolean boolean0 = rE2_0.match("", 7077, (-2038), 110, intArray0, 110);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {3844}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("1}$=F");
      assertNotNull(rE2_0);
      assertEquals("1}$=F", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
      assertEquals("1}$=F", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("UTF-8", "UTF-8");
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      assertEquals("UTF-8", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)65;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte)7;
      byteArray0[2] = (byte)73;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-107));
      assertNotNull(list0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte) (-107), (byte)65, (byte)73}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 3521);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[18];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("u2Dq&DeM.;m7r{'T^q");
      assertNotNull(rE2_0);
      assertEquals("u2Dq&DeM.;m7r{'T^q", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      rE2_0.reset();
      assertEquals("u2Dq&DeM.;m7r{'T^q", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-4150));
      assertNull(list0);
      assertEquals("u2Dq&DeM.;m7r{'T^q", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("[:^cntrl:]");
      assertNotNull(rE2_0);
      assertEquals("[:^cntrl:]", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("79A#", "[:^cntrl:]");
      assertEquals("79A#", string0);
      assertNotNull(string0);
      assertEquals("[:^cntrl:]", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("pcG9K'M6V4PH>");
      assertNotNull(rE2_0);
      assertEquals("pcG9K'M6V4PH>", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("pcG9K'M6V4PH>", "pcG9K'M6V4PH>");
      assertEquals("pcG9K'M6V4PH>", string0);
      assertNotNull(string0);
      assertEquals("pcG9K'M6V4PH>", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.Machine$1");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("4gw", 560);
      assertNull(list0);
      assertEquals("com.google.re2j.Machine$1", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("\t");
      assertNotNull(rE2_0);
      assertEquals("\t", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("\t");
      assertNotNull(stringArray0);
      assertEquals("\t", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("{%F{#Ck*}ak\"LK0");
      assertNotNull(rE2_0);
      assertEquals("{%F{#Ck*}ak\"LK0", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("{%F{#Ck*}ak\"LK0");
      assertFalse(boolean0);
      assertEquals("{%F{#Ck*}ak\"LK0", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 64327, true);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 3446);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("79A#");
      assertNotNull(rE2_0);
      assertEquals("79A#", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertEquals("79A#", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("lGJzxBMjyw7t\"");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("i");
      assertNotNull(rE2_0);
      assertEquals("i", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("i");
      assertEquals("i", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RE2.quoteMeta("^js|");
      assertEquals("\\^js\\|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("\"+1wSrZO5U1K 1");
      assertNotNull(rE2_0);
      assertEquals("\"+1wSrZO5U1K 1", rE2_0.toString());
      
      String string0 = rE2_0.find("\"+1wSrZO5U1K 1");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("\"+1wSrZO5U1K 1", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Kharoshthi");
      assertNotNull(rE2_0);
      assertEquals("Kharoshthi", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-5);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertEquals("Kharoshthi", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      RE2 rE2_0 = RE2.compilePOSIX("E");
      assertNotNull(rE2_0);
      assertEquals("E", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertEquals("E", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compile("Tamil");
      assertNotNull(rE2_0);
      assertEquals("Tamil", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("Tamil", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      byte[] byteArray0 = new byte[19];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-38));
      assertNull(list0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("k`");
      assertNotNull(rE2_0);
      assertEquals("k`", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("g&1Jh", 3446);
      assertNull(list0);
      assertEquals("k`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("b", "b");
      assertEquals("bbb", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", (-733));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("ZHkZO^PWcQplD'e");
      assertNotNull(rE2_0);
      assertEquals("ZHkZO^PWcQplD'e", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("ZHkZO^PWcQplD'e");
      assertNull(intArray0);
      assertEquals("ZHkZO^PWcQplD'e", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("UTF-8", (-1));
      assertNotNull(list0);
      assertEquals("UTF-8", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3745;
      intArray0[0] = 551;
      intArray0[3] = 551;
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.longest = true;
      assertEquals("", rE2_0.toString());
      
      rE2_0.prefixRune = (-266);
      assertEquals("", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.match("[:xdigit:]", 0, 551, 0, intArray0, 551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("", 1900, 1900, 2, intArray0, 2);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      
      try { 
        RE2.compilePOSIX(" w]9@lr)v\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("7?");
      assertNotNull(rE2_0);
      assertEquals("7?", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("7?", 43233);
      assertNotNull(list0);
      assertEquals("7?", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray0);
      
      String[] stringArray1 = rE2_0.findSubmatch("com.google.re2j.RE2");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[26];
      intArray0[5] = 0;
      intArray0[0] = 0;
      rE2_0.prefixUTF8 = byteArray0;
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.longest;
      assertFalse(boolean0);
      
      RE2 rE2_1 = RE2.compile("");
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      
      String string0 = rE2_1.replaceFirst("com.google.re2j.RE2", "");
      assertEquals("com.google.re2j.RE2", string0);
      assertNotNull(string0);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("", rE2_1.toString());
      
      RE2 rE2_2 = new RE2("");
      assertNotNull(rE2_2);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
      
      List<byte[][]> list0 = rE2_2.findAllUTF8Submatch(byteArray0, 12441);
      assertNotNull(list0);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray0);
      
      int[] intArray1 = rE2_2.findSubmatchIndex("");
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      RE2 rE2_3 = RE2.compileImpl("4S;I;g8sQUP};B3", 12441, false);
      assertNotNull(rE2_3);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_0);
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertEquals("4S;I;g8sQUP};B3", rE2_3.toString());
      
      rE2_0.prefixComplete = true;
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_3.replaceAll("com.google.re2j.RE2", "UTF-8");
      assertEquals("com.google.re2j.RE2", string1);
      assertNotNull(string1);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_0);
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("4S;I;g8sQUP};B3", rE2_3.toString());
      
      boolean boolean1 = RE2.match("", "com.google.re2j.RE2");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray2 = rE2_3.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray2);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_0);
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertEquals("4S;I;g8sQUP};B3", rE2_3.toString());
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray0);
      
      boolean boolean2 = rE2_3.matchUTF8(rE2_0.prefixUTF8);
      assertFalse(boolean2);
      assertNotSame(rE2_0, rE2_3);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(rE2_0, rE2_2);
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_1);
      assertNotSame(rE2_3, rE2_0);
      assertFalse(rE2_0.equals((Object)rE2_3));
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(rE2_0.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("", rE2_0.toString());
      assertEquals("4S;I;g8sQUP};B3", rE2_3.toString());
      
      String string2 = rE2_1.prefix;
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = rE2_2.match("com.google.re2j.RE2", 0, 43044, 42548, (int[]) null, 43044);
      assertTrue(boolean3);
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_3);
      assertNotSame(rE2_2, rE2_0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_3));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "7?";
      RE2 rE2_0 = new RE2("7?");
      assertNotNull(rE2_0);
      assertEquals("7?", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compilePOSIX("7?");
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("7?", rE2_1.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("K>DYWnSB&s=HFkwt");
      assertNotNull(stringArray0);
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("7?", rE2_0.toString());
      
      String[] stringArray1 = rE2_0.findSubmatch("7?");
      assertNotNull(stringArray1);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("7?", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll("7?", "7?");
      assertEquals("7??7?", string1);
      assertNotNull(string1);
      assertNotSame(rE2_0, rE2_1);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("7?", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }
}
