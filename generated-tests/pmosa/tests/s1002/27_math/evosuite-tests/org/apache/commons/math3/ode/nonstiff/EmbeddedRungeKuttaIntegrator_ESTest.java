/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:14:26 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(9.324622137237299E-90, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 9.324622137237299E-90;
      doubleArray0[1] = 9.324622137237299E-90;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 9.324622137237299E-90;
      doubleArray0[4] = 1083.2045791;
      doubleArray0[5] = 9.324622137237299E-90;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1083.2045791;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1083.2045791;
      doubleArray1[3] = 0.08333333333333333;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1083.2045791;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 9.324622137237299E-90;
      dormandPrince853Integrator0.setStepSizeControl(9.324622137237299E-90, 9.324622137237299E-90, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.getMinReduction();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-830.9324591444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1201.53341605743, 0.0, 0.0, 0.0);
      double double0 = dormandPrince54Integrator0.getSafety();
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, double0, 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(580.4757043594715, 487.779277, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 940.1554967);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1050.4139415379, 1050.4139415379, 1050.4139415379, 1050.4139415379);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1050.4139415379;
      doubleArray0[1] = 1050.4139415379;
      doubleArray0[2] = 1050.4139415379;
      doubleArray0[3] = 1050.4139415379;
      doubleArray0[4] = 1050.4139415379;
      doubleArray0[5] = 1050.4139415379;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1050.4139415379, 1050.4139415379, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, 1050.4139415379);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1050.4139415379, 1050.4139415379, 1050.4139415379, 1050.4139415379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1050.4139415379);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1050.4139415379, 1050.4139415379, 1050.4139415379, 1050.4139415379);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1050.4139415379;
      doubleArray0[1] = 1050.4139415379;
      doubleArray0[2] = 1050.4139415379;
      doubleArray0[3] = 1050.4139415379;
      doubleArray0[4] = 1050.4139415379;
      doubleArray0[5] = 1050.4139415379;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1050.4139415379, 1050.4139415379, 1050.4139415379, 1050.4139415379);
      dormandPrince54Integrator0.estimateError((double[][]) null, doubleArray0, doubleArray0, 1050.4139415379);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1050.4139415379, 1050.4139415379, 1050.4139415379, 1050.4139415379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1050.4139415379);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(581.0, 581.0, 581.0, 1.5804200403673568E-61);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 345.582707246927);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(581.0, 487.779277, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.vecRelativeTolerance = doubleArray0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(581.0);
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 487.779277);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(487.779277, 581.53677, dormandPrince853Integrator0.vecRelativeTolerance, dormandPrince853Integrator0.vecRelativeTolerance);
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = dormandPrince853Integrator0.vecRelativeTolerance;
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, dormandPrince853Integrator0.vecRelativeTolerance, 0.2);
      dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 10.0);
      double double0 = dormandPrince853Integrator0.getMaxGrowth();
      assertEquals(17, dormandPrince853Integrator0.getEvaluations());
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = 581.0;
      double double1 = 487.779277;
      double double2 = (-3102.466612891361);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(487.779277, 581.0, 2764.4603891161837, (-3102.466612891361));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      double double3 = 2125.56360533379;
      expandableStatefulODE0.setTime(10.0);
      double double4 = 1002.722016;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1002.722016);
  }
}
