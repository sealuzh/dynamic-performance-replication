/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:00:15 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      int int0 = (-2026);
      CharClass charClass2 = charClass1.appendFoldedRange((-2026), (-2026));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 65;
      intArray2[1] = (-2026);
      intArray2[2] = (-2026);
      intArray2[3] = 0;
      intArray2[4] = (-2026);
      intArray2[5] = (-2026);
      intArray1[2] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[3] = intArray3;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, (-2026));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 537;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1251;
      intArray2[1] = 1114112;
      intArray2[2] = 1114112;
      intArray2[3] = 537;
      intArray2[4] = 1114112;
      intArray2[5] = 537;
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {1, 536, 1, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      intArray2[6] = 1114112;
      intArray2[7] = 1114112;
      intArray1[1] = intArray2;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 1251);
      assertArrayEquals(new int[] {1, 536, 1, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass3 = charClass0.appendLiteral(4, 306);
      assertArrayEquals(new int[] {1, 536, 1, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass3.negateClass();
      assertArrayEquals(new int[] {0, 0, 1, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass5 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertNotNull(charClass6);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(4, intArray0.length);
      
      String string0 = charClass6.toString();
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(4, intArray0.length);
      
      String string1 = charClass6.toString();
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertEquals("[0x0-0x10ffff]", string1);
      assertNotNull(string1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 2264;
      intArray1[1] = 2380;
      intArray1[2] = 222;
      intArray1[3] = 2259;
      intArray1[4] = (-9);
      intArray1[5] = 66639;
      intArray1[6] = 1083;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1083;
      intArray2[1] = (-9);
      intArray2[2] = (-9);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-393);
      intArray3[1] = 66639;
      intArray3[2] = 66639;
      intArray3[3] = 222;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 66639;
      intArray4[1] = 2259;
      intArray4[2] = 1083;
      intArray4[3] = (-9);
      intArray4[4] = 66639;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2380;
      intArray5[1] = 66639;
      intArray5[2] = 2380;
      intArray5[3] = (-3717);
      intArray5[4] = 66639;
      intArray5[5] = 2948;
      intArray5[6] = 66639;
      intArray5[7] = 222;
      intArray5[8] = 2380;
      intArray0[4] = intArray5;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-9));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 12538;
      intArray0[2] = 12538;
      int int0 = 2099;
      intArray0[3] = 2099;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 12538, 12538, 2099}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 2099);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1521;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 66640;
      intArray0[5] = 1547;
      intArray0[6] = 66639;
      intArray0[7] = (-1539);
      intArray0[8] = 6450;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 1521, 0, 0, 66640, 1547, 66639, (-1539), 6450}, intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 509;
      intArray0[1] = (-1307);
      intArray0[2] = 0;
      intArray0[3] = (-1075);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {509, (-1307), 0, (-1075)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {509, (-1307), 0, (-1075)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 509;
      intArray2[1] = (-1307);
      intArray2[2] = 509;
      intArray2[3] = 0;
      intArray2[4] = 509;
      intArray2[5] = (-1307);
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 509;
      intArray3[1] = (-1307);
      intArray3[2] = 509;
      intArray3[3] = (-1307);
      intArray3[4] = 509;
      intArray3[5] = 509;
      intArray3[6] = (-1075);
      intArray3[7] = (-1307);
      intArray3[8] = (-1307);
      intArray1[7] = intArray3;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {509, (-1307), 0, (-1075)}, intArray0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {509, (-1307), 0, (-1075)}, intArray0);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {509, (-1307), 0, (-1075)}, intArray0);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      intArray0[1] = 12538;
      intArray0[2] = 12449;
      intArray0[3] = 2099;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2724, 12538, 12449, 2099}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 12538, 2100, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2680, 2680);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.appendRange(2680, 2680);
      assertNotNull(charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass2);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass3.appendLiteral(489, 489);
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass0.appendRange(12450, 65096);
      assertNotNull(charClass6);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass2);
      
      CharClass charClass7 = charClass0.cleanClass();
      assertNotNull(charClass7);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass2));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {488, 489, 2680, 2680, 12450, 65096}, intArray1);
      assertNotNull(intArray1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      int int0 = 2353;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 2353);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      charClass0.appendFoldedRange((-1789), 2766);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1046);
      intArray0[1] = 2102;
      int int0 = (-118);
      intArray0[2] = (-118);
      int int1 = 89;
      intArray0[3] = 89;
      intArray0[4] = 2221;
      int int2 = (-292);
      intArray0[5] = (-292);
      int int3 = 8508;
      intArray0[6] = 8508;
      intArray0[7] = 0;
      intArray0[8] = 18;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3476;
      intArray0[1] = 43456;
      intArray0[2] = 6400;
      intArray0[3] = 0;
      intArray0[4] = (-839);
      intArray0[5] = 4139;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {3476, 43456, 6400, 0, (-839), 4139}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 43456;
      intArray2[1] = 2103;
      intArray2[2] = 1114111;
      intArray2[3] = (-839);
      intArray2[4] = 4139;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      CharClass charClass3 = charClass0.appendTableWithSign(intArray1, 6400);
      assertSame(charClass0, charClass3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(981, 981);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 981;
      intArray0[1] = 981;
      intArray0[2] = 981;
      intArray0[3] = 981;
      intArray0[4] = 981;
      int[][] intArray1 = new int[7][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 981;
      intArray2[1] = (-1405);
      intArray2[2] = 981;
      intArray2[3] = 981;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(7, intArray1.length);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 981);
      assertArrayEquals(new int[] {981, 981, 981, 981, 981, 0}, intArray0);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, (-3146));
      assertArrayEquals(new int[] {981, 981, 981, 981, 981, 0}, intArray0);
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass6 = charClass2.appendLiteral((-2804), 981);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1008, 1008);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral(674, (-2256));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(charClass4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      
      CharClass charClass5 = charClass3.appendRange((-7), (-7));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray2 = new int[2][4];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(0, (-1419));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      int[][] intArray0 = new int[3][1];
      int[] intArray1 = new int[2];
      intArray1[0] = (-1419);
      intArray1[1] = (-1419);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1274);
      intArray2[1] = (-1419);
      String string0 = charClass3.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      intArray2[2] = (-2747);
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1274);
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(66639, 3941);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(66639, 66639);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendLiteral(1297, 1379);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2757;
      intArray0[1] = 68352;
      intArray0[2] = 1700;
      intArray0[3] = (-552);
      intArray0[4] = 138;
      intArray0[5] = (-1163);
      intArray0[6] = 763;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(487, 2041);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = new CharClass();
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1364;
      intArray0[0] = 1364;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-4159);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1364, 0, 0, 0, (-4159)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertArrayEquals(new int[] {1364, 0, 0, 0, (-4159)}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 0);
      assertArrayEquals(new int[] {1364, 0, 0, 0, (-4159)}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-3533);
      CharClass charClass1 = charClass0.appendFoldedRange((-3533), (-3533));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-3533);
      intArray0[1] = (-3533);
      intArray0[2] = (-3533);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {(-3533), (-3533), (-3533), 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      
      intArray0[3] = (-3533);
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, (-3533));
      assertArrayEquals(new int[] {(-3533), (-3533), (-3533), (-3533)}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      intArray0[1] = 2724;
      intArray0[2] = 12449;
      intArray0[3] = 2099;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2724, 2724, 12449, 2099}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 2099);
      assertArrayEquals(new int[] {2724, 2724, 12449, 2099}, intArray0);
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.appendLiteral(12449, 399);
      assertArrayEquals(new int[] {2724, 2724, 12449, 2099}, intArray0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {2724, 2724, 12449, 2099}, intArray0);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][6];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[5];
      intArray1[0] = 1357;
      intArray1[1] = (-2662);
      intArray1[2] = 9633;
      int int0 = 4;
      CharClass charClass3 = charClass0.appendLiteral(1357, 9633);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      intArray1[3] = 4;
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][1];
      int[] intArray1 = new int[4];
      intArray1[0] = 890;
      intArray1[1] = (-485);
      intArray1[2] = 884;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 890;
      intArray2[1] = 0;
      intArray2[2] = (-485);
      intArray2[3] = 2634;
      intArray2[4] = 890;
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {890, (-485), 884, 0}, intArray1);
      assertNotNull(charClass2);
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {890, (-485), 884, 0}, intArray1);
      assertNotNull(charClass3);
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray1);
      assertArrayEquals(new int[] {890, (-485), 884, 0}, intArray1);
      assertNotNull(charClass4);
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertArrayEquals(new int[] {890, (-485), 884, 0}, intArray1);
      assertNotNull(charClass5);
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass5.appendTable(intArray0);
      assertArrayEquals(new int[] {890, (-485), 884, 0}, intArray1);
      assertNotNull(charClass6);
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = null;
      String string0 = CharClass.charClassToString((int[]) null, (-3124));
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendLiteral(42894, 489);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 537;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(4, 306);
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(4, intArray0.length);
      
      String string0 = charClass4.toString();
      assertArrayEquals(new int[] {0, 0, 537, 0}, intArray0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(780, 780);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 780;
      int int0 = (-2);
      intArray0[1] = (-2);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 780);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3476;
      intArray0[1] = 43456;
      intArray0[2] = 6400;
      intArray0[3] = 0;
      intArray0[4] = (-839);
      intArray0[5] = 4139;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {3476, 43456, 6400, 0, (-839), 4139}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange(43456, 0);
      assertArrayEquals(new int[] {3476, 43456, 6400, 0, (-839), 4139}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 32;
      intArray2[1] = (-2996);
      intArray2[2] = 230;
      intArray2[3] = (-3101);
      intArray2[4] = 0;
      intArray2[5] = 66640;
      intArray2[6] = 4182;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2996);
      intArray3[1] = 230;
      intArray3[2] = (-2996);
      intArray3[3] = 230;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      int int0 = 827;
      intArray0[1] = 827;
      intArray0[2] = 7617;
      intArray0[3] = 1;
      int int1 = 3453;
      intArray0[4] = 3453;
      int int2 = 1110;
      intArray0[5] = 1110;
      intArray0[6] = 366;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {32, 827, 7617, 1, 3453, 1110, 366}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(3453, 3453);
      assertArrayEquals(new int[] {32, 827, 7617, 1, 3453, 1110, 366}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 827;
      intArray0[1] = 827;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 827, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      intArray0[1] = 12538;
      intArray0[2] = 12449;
      intArray0[3] = 2099;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2724, 12538, 12449, 2099}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = CharClass.charClassToString(intArray1, (-2261));
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 12538, 2100, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 1114111, 2100, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass2.appendClassWithSign(intArray1, 42894);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      intArray0[1] = 12538;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 2724);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      int[][] intArray0 = new int[0][6];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray0, 0);
      assertNotNull(charClass2);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass1.negateClass();
      assertNotNull(charClass3);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass0.appendRange(0, (-272));
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(780, 780);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendLiteral(32, 3291);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange(780, 65);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendRange(65, 65);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {32, 32, 65, 65, 780, 780}, intArray0);
      assertNotNull(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {32, 32, 65, 65, 780, 780}, intArray0);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 2724;
      intArray0[0] = 2724;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2724, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 2724, 0}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-26);
      intArray0[1] = 1380;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-26), 1380}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 1380);
      assertArrayEquals(new int[] {(-26), 1380}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-974), 1380);
      assertArrayEquals(new int[] {(-26), 1380}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertArrayEquals(new int[] {(-26), 1380}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 1380);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2680, 2680);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.appendRange(2680, 2680);
      assertNotNull(charClass3);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass3.appendLiteral(489, 489);
      assertNotNull(charClass5);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      
      // Undeclared exception!
      try { 
        charClass5.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[8];
      int int0 = (-1884);
      intArray1[0] = (-1884);
      intArray1[1] = 2159;
      intArray1[2] = (-2);
      intArray1[3] = (-2569);
      intArray1[4] = 0;
      intArray1[5] = 218;
      intArray1[6] = (-3000);
      intArray1[7] = 14;
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertArrayEquals(new int[] {(-1884), 2159, (-2), (-2569), 0, 218, (-3000), 14}, intArray1);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {(-1884), 2159, (-2), (-2569), 0, 218, (-3000), 14}, intArray1);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = 1479;
      intArray0[1] = 3905;
      intArray0[2] = 1292;
      intArray0[3] = (-1572);
      intArray0[4] = 12771;
      intArray0[5] = 1508;
      intArray0[6] = 11519;
      intArray0[7] = (-2);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(18, intArray0.length);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {(-1571), 1114111}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(18, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray1);
      assertArrayEquals(new int[] {(-1571), 1114111}, intArray1);
      assertNotNull(charClass2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(18, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass3 = charClass1.appendClass(intArray1);
      assertArrayEquals(new int[] {(-1571), 1114111}, intArray1);
      assertNotNull(charClass3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(18, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1114112;
      intArray0[2] = 537;
      intArray0[3] = 2145;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1, 1114112, 537, 2145}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1, 1114112, 1, 1114112}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {1, 1114112, 1, 1114112}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(1285, 1285);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharGroup charGroup0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = 1285;
      intArray0[1] = 1285;
      intArray0[2] = 530;
      intArray0[3] = 1285;
      intArray0[4] = 1285;
      intArray0[5] = 1285;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 120466;
      intArray0[1] = 1334;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {120466, 1334}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 120465}, intArray0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 120465}, intArray0);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 120465}, intArray0);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[3][7];
      int[] intArray1 = new int[6];
      intArray1[0] = 4148;
      intArray1[1] = 0;
      intArray1[2] = 3790;
      intArray1[3] = 13008;
      intArray1[4] = 0;
      intArray1[5] = 64;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 3790;
      intArray2[1] = 489;
      intArray2[2] = 64;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 13008;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2724;
      intArray0[2] = 12538;
      intArray0[2] = 12449;
      intArray0[3] = 2099;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2723, 1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 981;
      int int1 = 1114112;
      int int2 = 2723;
      charClass0.appendLiteral(1114112, 2723);
      int[] intArray0 = new int[1];
      intArray0[0] = 981;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 1114112;
      intArray0[2] = 537;
      intArray0[3] = 2145;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {32, 1114112, 0, 1114112}, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 8080;
      intArray0[2] = 1320;
      intArray0[3] = 3115;
      intArray0[4] = 3205;
      intArray0[5] = 2;
      intArray0[6] = 800;
      intArray0[7] = 201;
      intArray0[8] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      CharClass charClass2 = charClass1.appendFoldedRange((-1), 800);
      charClass2.toArray();
      CharClass charClass3 = charClass1.negateClass();
      charClass3.negateClass();
      charClass3.appendLiteral(0, 1320);
      assertArrayEquals(new int[] {0, 8080, 1320, 3115, 3205, 2, 800, 1, 1319}, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1008, 1008);
      charClass0.appendLiteral(674, (-2222));
      int[] intArray0 = new int[0];
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 674;
      intArray1[1] = 674;
      intArray1[2] = 674;
      intArray1[3] = 674;
      intArray1[4] = (-2222);
      intArray1[5] = 1008;
      intArray1[6] = 0;
      intArray1[7] = 0;
      charClass2.appendNegatedClass(intArray1);
      CharClass charClass3 = charClass0.appendLiteral((-2222), 0);
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = (-2222);
      CharClass charClass4 = charClass3.appendClass(intArray2);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 65;
      intArray0[1] = 9371;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 9371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(705, 42894);
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = charClass2.toArray();
      charClass2.appendClassWithSign(intArray0, 705);
      assertArrayEquals(new int[] {705, 42894}, intArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 7617;
      intArray0[3] = 1;
      intArray0[4] = 7617;
      int int0 = 1110;
      intArray0[6] = 366;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      charClass1.appendLiteral(981, 981);
      int[] intArray0 = new int[6];
      intArray0[0] = 981;
      intArray0[1] = 981;
      intArray0[2] = 981;
      intArray0[3] = 981;
      charClass0.cleanClass();
      intArray0[4] = 981;
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass1.appendLiteral(981, 3790);
      charClass2.appendClass(intArray0);
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass3 = charClass1.appendTableWithSign(intArray1, 981);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      int[][] intArray1 = new int[2][1];
      int[] intArray2 = new int[9];
      int int0 = 8265;
      intArray2[0] = 8265;
      int int1 = (-1192);
      intArray2[1] = (-1192);
      int int2 = 91;
      intArray2[2] = 91;
      int int3 = 0;
      int int4 = (-3704);
      charClass0.appendRange((-3704), 8265);
      intArray2[3] = 0;
      intArray2[4] = 0;
      int int5 = 0;
      charClass0.negateClass();
      intArray2[5] = 0;
      int int6 = 2969;
      intArray2[6] = 2969;
      int int7 = 0;
      intArray2[7] = 0;
      intArray2[8] = 2;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1486;
      intArray0[1] = 65121;
      intArray0[2] = 1218;
      intArray0[3] = 0;
      intArray0[4] = 915;
      intArray0[5] = (-1266);
      intArray0[6] = 3959;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[8][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = 1486;
      intArray2[1] = 65121;
      intArray2[2] = (-1266);
      intArray2[3] = 915;
      intArray2[4] = 315;
      intArray2[5] = 65121;
      intArray2[6] = 0;
      intArray2[7] = (-1266);
      intArray2[8] = 1218;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray1, (-1266));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 981;
      intArray0[0] = 981;
      intArray0[2] = 981;
      intArray0[3] = 981;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 394);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      intArray2[0] = 394;
      intArray2[1] = 779;
      intArray2[2] = 981;
      intArray2[3] = 981;
      intArray2[4] = 394;
      intArray2[5] = 394;
      intArray2[6] = 981;
      intArray2[7] = 981;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      CharClass charClass5 = charClass4.cleanClass();
      int[] intArray3 = new int[1];
      intArray3[0] = 394;
      // Undeclared exception!
      try { 
        charClass5.appendNegatedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
