/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:26:17 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.subarray((int[]) null, 48, 128565);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Utils.unhex((-406));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Utils.EMPTY_BEGIN_LINE;
      byte[] byteArray0 = new byte[0];
      int int1 = Utils.indexOf(byteArray0, byteArray0, 1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.subarray((byte[]) null, 510, 3980);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Utils.EMPTY_BEGIN_TEXT;
      byte[] byteArray0 = new byte[1];
      int int1 = Utils.indexOf(byteArray0, byteArray0, 4);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Utils.runeToString((-838));
      assertEquals("\uFCBA", string0);
      
      boolean boolean0 = Utils.isalnum((-838));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = Utils.emptyOpContext(281, 281);
      assertEquals(32, int0);
      
      boolean boolean0 = Utils.isalnum(281);
      assertFalse(boolean0);
      
      String string0 = Utils.runeToString(32);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Utils.emptyOpContext((-418), (-418));
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = Utils.subarray((int[]) null, 65535, 65535);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = Utils.unhex(389);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = Utils.indexOf(byteArray0, byteArray0, (-1));
      assertEquals(0, int1);
      
      boolean boolean0 = Utils.isalnum(389);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      int int0 = Utils.indexOf(byteArray0, byteArray0, 1);
      assertEquals((-1), int0);
      
      String string0 = Utils.runeToString((byte)9);
      assertEquals("\t", string0);
      
      boolean boolean0 = Utils.isWordRune((byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utils.isalnum(1282);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 1282);
      assertEquals("\u0502", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Utils.subarray(byteArray0, 97, 97);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = Utils.isWordRune(97);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(65279);
      Utils.escapeRune(stringBuilder0, 65279);
      assertEquals("\\x{feff}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1282);
      Utils.escapeRune(stringBuilder0, 1);
      assertEquals("\\x01", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(935);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      Utils.escapeRune(stringBuilder1, (-406));
      assertEquals("\\xfffffe6a", stringBuilder1.toString());
      assertEquals("\\xfffffe6a", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = Utils.emptyOpContext(65, (-3669));
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((byte)111);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utils.runeToString(887);
      Utils.isWordRune(887);
      Utils.isalnum(102);
      Utils.isalnum(102);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0377");
      Utils.escapeRune(stringBuilder0, 8);
      assertEquals("\u0377\\b", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utils.runeToString((byte)0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0000");
      Utils.escapeRune(stringBuilder0, 9);
      assertEquals("\u0000\\t", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(85);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((byte)89);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utils.unhex(65);
      int[] intArray0 = Utils.stringToRunes("New_Tai_Lue");
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(57);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = Utils.unhex(1901);
      assertEquals((-1), int0);
      
      Utils.isalnum((-1));
      boolean boolean0 = Utils.isWordRune(57);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)90;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)100;
      byteArray1[0] = (byte)90;
      byteArray1[3] = (byte)90;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-2878));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)90;
      byteArray0[7] = (byte) (-80);
      byte[] byteArray1 = new byte[4];
      byteArray0[3] = (byte) (-80);
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-2867));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)90;
      byteArray0[7] = (byte) (-80);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)100;
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-80);
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-2878));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(107);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = Utils.unhex(99);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utils.runeToString((byte)0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0000");
      Utils.escapeRune(stringBuilder0, 13);
      assertEquals("\u0000\\r", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 10);
      assertEquals("\\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = Utils.EMPTY_BEGIN_TEXT;
      String string0 = Utils.runeToString((-324));
      assertEquals("\uFEBC", string0);
      
      int int1 = Utils.emptyOpContext(10, 4);
      assertEquals(33, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Utils.unhex(57);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utils.emptyOpContext((-203), 10);
      int int0 = Utils.EMPTY_END_TEXT;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utils.isalnum(97);
      Utils.runeToString(125);
      Utils.unhex(125);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}");
      Utils.escapeRune(stringBuilder0, 125);
      assertEquals("}\\}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune(95);
      boolean boolean1 = Utils.isalnum(1347);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
