/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:15:36 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = new CCSMatrix(120, 2802);
      cCSMatrix0.minInColumn(99);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2837.2907239;
      doubleArray0[1] = 1194.414;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(21, 21, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Matrix matrix0 = Matrix.randomSymmetric(5, mockRandom0);
      assertEquals(5, matrix0.columns());
      assertEquals(5, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1880);
      CCSMatrix.from1DArray(0, 2802, (double[]) null);
      cCSMatrix0.isZeroAt(1880, 18);
      int[] intArray0 = new int[4];
      intArray0[0] = (-3583);
      intArray0[1] = 0;
      intArray0[2] = 2802;
      intArray0[3] = (-3583);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)38;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      cCSMatrix0.iteratorOfColumn(1900);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.nonZeroIteratorOfColumn(1431655765);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1900, 1900, 280);
      cCSMatrix0.blankOfShape(9970, (-1494));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2837.2907239;
      doubleArray1[1] = 1194.414;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2837.2907239;
      doubleArray2[3] = 1194.414;
      doubleArray2[4] = 1194.414;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 2837.2907239;
      doubleArray2[7] = 2837.2907239;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2837.2907239;
      doubleArray3[1] = 2837.2907239;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.removeLastRow();
      int int0 = 721;
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(721);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 721
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3132, 9, 3132);
      cCSMatrix0.getRow(11);
      cCSMatrix0.setAll(9);
      MockRandom mockRandom0 = new MockRandom(int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2837.2907239;
      doubleArray0[1] = 2837.2907239;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(28, 28, 1.0, (java.util.Random) mockRandom0);
      cCSMatrix0.getRow(390);
      cCSMatrix0.setAll(2837.2907239);
      // Undeclared exception!
      try { 
        cCSMatrix0.set((-1418), 28, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1418' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 15;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3132, 15, 3132);
      cCSMatrix0.setRow(11, (double) 3132);
      cCSMatrix0.getRow(11);
      cCSMatrix0.setAll(15);
      MockRandom mockRandom0 = new MockRandom(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = new CCSMatrix(147, 2802);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(147, 344, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2837.2907239;
      doubleArray1[1] = 2837.2907239;
      doubleArray1[2] = (-1.3461716385677907);
      doubleArray0[0] = doubleArray1;
      MockRandom mockRandom0 = new MockRandom((-652L));
      mockRandom0.nextFloat();
      CCSMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, (-652L));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)23).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(17, 23, matrixFunction0);
      Double double0 = new Double(72.95311146616213);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix.identity(3);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CCSMatrix.from1DArray(1900, 2142, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(490, 490, (double) 490, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = new CCSMatrix(120, 2802);
      cCSMatrix0.minInColumn(99);
      cCSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn((-1920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1920
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.diagonalProduct();
      int int0 = 2;
      // Undeclared exception!
      try { 
        cCSMatrix0.isZeroAt(134, 134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 134
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 100.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cCSMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3132, 9, 3132);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.setAll(int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 2802;
      Random.setNextRandom(2802);
      int int1 = 120;
      CCSMatrix cCSMatrix0 = new CCSMatrix(120, 2802);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ColumnMajorSparseMatrix.diagonal(2802, 1162.38);
      String string1 = "SqA-[";
      DenseMatrix.fromCSV("");
      CCSMatrix.block(rowMajorSparseMatrix0, cCSMatrix0, matrix0, rowMajorSparseMatrix0);
      int int2 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int1, int2, int0);
      NumberFormat.getNumberInstance();
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string1);
      cCSMatrix0.toBinary();
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      int int0 = 0;
      Matrix matrix1 = cCSMatrix0.slice(0, 0, 0, 1119);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.product();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(0, 842);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 842
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[2] = 2;
      intArray0[3] = (int) (byte) (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, Double.POSITIVE_INFINITY);
      cCSMatrix0.rotate();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CCSMatrix cCSMatrix2 = null;
      try {
        cCSMatrix2 = new CCSMatrix(2002, (-1879048191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2002x-1879048191
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3;
      int int1 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 8);
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray0[0] = doubleArray1;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(3, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-672));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -671
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (java.util.Random) mockRandom0);
      cCSMatrix0.copyOfShape(1, 1872);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2837.2907239;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1183, 10);
      CCSMatrix cCSMatrix1 = new CCSMatrix(10, 1189, 13);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(10, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(420.7600171384445).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) (-71);
      doubleArray1[2] = 947.6669208449;
      doubleArray1[4] = 947.6669208449;
      doubleArray1[5] = 947.6669208449;
      doubleArray1[6] = 420.7600171384445;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[2] = 2;
      intArray0[3] = (int) (byte)70;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)70, 0.0, (double)(byte)70, (double)(byte)70).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix.diagonal(2, Double.POSITIVE_INFINITY);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(477);
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(248, 2.0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 682;
      doubleArray0[1] = (double) (byte) (-65);
      doubleArray0[2] = (double) 682;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(682, 0, doubleArray0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      int int0 = 2382;
      // Undeclared exception!
      SparseMatrix.from1DArray(3694, 2382, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 2218);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.min();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (double) 2218;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(41, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        cCSMatrix0.set(32, 393, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '32' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      SparseVector.fromArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix1.removeLastRow();
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroRowMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix1.removeLastRow();
      int int0 = 56;
      int int1 = 1500;
      int int2 = 4;
      CCSMatrix.zero(int0, int1, int2);
      int int3 = 1741;
      ColumnMajorSparseMatrix.identity(int1);
      CCSMatrix.random(int3, int0, (double) int1, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 42;
      int int1 = 1937;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3132, 1937);
      double double0 = (-812.663854);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-812.663854), (double)9, (double)9, (double)9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(9, vectorFunction0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int0;
      int int2 = (-518);
      RowMajorSparseMatrix.zero(int2, int1);
      int int3 = 0;
      cCSMatrix0.iteratorOfColumn(int3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = new CCSMatrix(120, 2802);
      cCSMatrix0.minInColumn(99);
      cCSMatrix0.toMatrixMarket();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 99;
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 99;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2802;
      doubleArray0[7] = 0.0;
      Matrix.from1DArray(99, 120, doubleArray0);
      int int0 = 1896;
      cCSMatrix0.minInColumn(1896);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(1896, vectorFunction0);
      cCSMatrix0.maxInColumn(1863);
      cCSMatrix0.toBinary();
      cCSMatrix0.setAll((-4304.746306));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.columnMajorIterator();
      int int1 = (-469);
      CCSMatrix.diagonal(int1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2837.2907239;
      doubleArray1[1] = 2837.2907239;
      doubleArray1[2] = (-1.3461716385677907);
      doubleArray0[0] = doubleArray1;
      MockRandom mockRandom0 = new MockRandom((-652L));
      mockRandom0.nextFloat();
      CCSMatrix.randomSymmetric(0, (double) 0, (java.util.Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, (-652L));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(17, 23, matrixFunction0);
      Double double0 = new Double(72.95311146616213);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.rank();
      cCSMatrix0.iteratorOfRow(0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 2802;
      doubleArray0[2] = (double) 2802;
      doubleArray0[3] = (double) 93;
      doubleArray0[4] = (double) 2802;
      doubleArray0[5] = (double) 2802;
      Matrix.from1DArray(2802, 2802, doubleArray0);
      cCSMatrix0.minInColumn(93);
      cCSMatrix0.iterator();
      cCSMatrix0.set(3, 180, 93);
      Matrix matrix0 = cCSMatrix0.blankOfShape(180, 2802);
      int[] intArray0 = new int[1];
      intArray0[0] = 180;
      matrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(3, 1.0, (java.util.Random) mockRandom0);
      byte byte0 = (byte)3;
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = (-854);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1231, 1214);
      cCSMatrix0.copyOfShape(1214, 1231);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[2] = 2;
      intArray0[3] = (int) (byte)70;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix.diagonal(2, Double.POSITIVE_INFINITY);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1183, 10);
      cCSMatrix0.copyOfShape(10, 1192);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-523.7904801023);
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(16, 0, doubleArray0);
      cCSMatrix0.max();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 2567;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2567, 2567, 2180);
      cCSMatrix0.maxInColumn(1887);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1264, 3844, 1264);
      int[] intArray0 = new int[6];
      intArray0[0] = 1264;
      cCSMatrix0.toBinary();
      intArray0[3] = 1264;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      cCSMatrix0.copyOfShape(1264, 286);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[9];
      intArray0[0] = 1180;
      intArray0[1] = 6;
      intArray0[2] = 160;
      intArray0[3] = 1900;
      intArray0[4] = 160;
      intArray0[5] = 375;
      intArray0[6] = 160;
      intArray0[7] = 6;
      intArray0[8] = 160;
      int[] intArray1 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(6, 2125, 160, doubleArray0, intArray0, intArray1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2689);
      cCSMatrix1.maxInColumn(2573);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      matrix0.rowMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.min();
      int int0 = (-399);
      // Undeclared exception!
      try { 
        matrix0.setRow((-399), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-399' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2837.2907239;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      cCSMatrix0.nonZeroIteratorOfColumn(3);
      cCSMatrix0.copyOfShape(149, 8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(1919, 431, 431);
      cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.random(2047, 371, (double) 0, (java.util.Random) mockRandom0);
      cCSMatrix1.blankOfShape(0, 238);
      cCSMatrix1.eachNonZeroInColumn(1919, vectorProcedure0);
      int int0 = 14;
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 2802;
      cCSMatrix0.max();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 93;
      doubleArray1[1] = 190.0747475;
      doubleArray1[2] = (-4574.96);
      SparseVector.fromArray(doubleArray1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("f#0;g#,WF<0W,R152");
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int0 = (-1740);
      double double0 = 4213.8416;
      ColumnMajorSparseMatrix.diagonal(int0, double0);
      int int1 = (-1765);
      cCSMatrix0.getColumn(int1);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      String string0 = "";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      cCSMatrix0.toBinary();
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 2239;
      int int1 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(412, 5);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.fold(matrixAccumulator0);
      ((CCSMatrix) columnMajorSparseMatrix0).set(int1, int1, int1);
      CCSMatrix.zero(int0, int1);
      int int2 = Integer.MAX_VALUE;
      int int3 = (-696);
      double[] doubleArray0 = null;
      SparseMatrix.from1DArray(int2, int3, doubleArray0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(int3, int2);
      int[] intArray0 = new int[0];
      int int4 = 1778;
      CCSMatrix.zero(int4, int4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 60;
      CCSMatrix cCSMatrix0 = new CCSMatrix(60, 5, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (-400.572), (-400.572), (-400.572), (double)5).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.removeLastRow();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte) (-6);
      byteArray1[4] = (byte) (-6);
      byteArray1[5] = (byte) (-6);
      cCSMatrix0.rank();
      CCSMatrix.identity(byteArray1[2]);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateAt(byteArray1[4], int0, matrixFunction1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(420.7600171384445).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix1.removeLastRow();
      cCSMatrix1.power(1);
      int int0 = 1325;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(1325, (-1316));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1316
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[6];
      intArray0[0] = 1264;
      byte[] byteArray0 = cCSMatrix0.toBinary();
      intArray0[0] = 1264;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix1.toRowMajorSparseMatrix();
      cCSMatrix1.getRow(1264);
      cCSMatrix1.setAll(0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2, 1900);
      cCSMatrix1.isZeroAt(640, 2);
      int int0 = (-3583);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1900;
      intArray0[2] = (-3583);
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = 3;
      cCSMatrix0.copyOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1900, 1900, 1900);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(4, vectorProcedure0);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 2802;
      doubleArray0[2] = (double) 2802;
      doubleArray0[3] = (double) 93;
      doubleArray0[4] = (double) 2802;
      doubleArray0[5] = (double) 2802;
      Matrix.from1DArray(2802, 2802, doubleArray0);
      cCSMatrix0.minInColumn(93);
      cCSMatrix0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(180, vectorProcedure0);
      cCSMatrix0.nonZeroAt(93, 180);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-523.7904801023);
      doubleArray0[5] = (double) 16;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1868);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(16, vectorFunction0);
      cCSMatrix0.copyOfShape((-1184), 1387);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toMatrixMarket();
      cCSMatrix0.to(matrixFactory0);
      MatrixFunction matrixFunction0 = null;
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      cCSMatrix0.nonZeroAt((-743), 3);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-743);
      int[] intArray0 = new int[7];
      intArray0[1] = 1900;
      intArray0[2] = (-743);
      intArray0[3] = 1900;
      intArray0[4] = 1896;
      intArray0[5] = (-743);
      intArray0[6] = (-612);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1940.90509107034, (-1228.256603), Double.NEGATIVE_INFINITY, 1940.90509107034, (double)(-743)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1896, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1896, 3, (-612), doubleArray0, intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(intArray0[4], vectorProcedure0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-2);
      byteArray0[0] = byte0;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int0 = (-1951);
      int int1 = 1754;
      cCSMatrix2.copyOfShape(int0, int1);
      String string0 = ".YO|%|gywOs,-v{";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1900);
      cCSMatrix0.nonZeroAt(2, 3);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = (-612);
      intArray0[2] = 2;
      intArray0[3] = 1900;
      intArray0[4] = 1896;
      intArray0[5] = 2;
      intArray0[6] = (-612);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(2, vectorProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (double)1900, 322.6, (-1900.43)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1896, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1896, 32, (-612), doubleArray0, intArray0, intArray0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(intArray0[4], vectorProcedure1);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-2);
      byteArray0[0] = byte0;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int0 = 1861;
      cCSMatrix2.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 8);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(8, 8, 3);
      cCSMatrix1.getRow(3);
      cCSMatrix0.setAll(3);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 287;
      doubleArray0[2] = 215.356169;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 8;
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 32;
      CCSMatrix cCSMatrix2 = new CCSMatrix(287, 287, 8, doubleArray0, intArray0, intArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cCSMatrix2.non(matrixPredicate0);
      cCSMatrix2.iteratorOrNonZeroColumns();
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(420.7600171384445).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(420.7600171384445).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix1.removeLastRow();
      cCSMatrix1.power(1);
      int int0 = 1325;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(1325, (-1316));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1316
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.diagonalProduct();
      int int0 = 7;
      cCSMatrix0.isZeroAt(7, 2);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      CCSMatrix cCSMatrix1 = new CCSMatrix(2802, 3387);
      cCSMatrix0.minInColumn(1383);
      cCSMatrix1.toMatrixMarket();
      MockRandom mockRandom0 = new MockRandom(622L);
      CCSMatrix cCSMatrix2 = CCSMatrix.random(837, 93, (-730.0591397567841), (java.util.Random) mockRandom0);
      int int0 = 9;
      cCSMatrix2.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 12;
      int int1 = 2;
      int[] intArray0 = new int[18];
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(12, Double.POSITIVE_INFINITY);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.rotate();
      int int2 = cCSMatrix0.rank();
      cCSMatrix0.power(intArray0[2]);
      String string0 = "%4]#Sw4H>";
      ColumnMajorSparseMatrix.fromCSV(string0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(int1);
      int int3 = (-687);
      double double0 = 3400.097;
      cCSMatrix0.getOrElse(int3, intArray0[3], double0);
      int int4 = 2;
      CCSMatrix.zero(int4, int1, int2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix0.toRowMajorSparseMatrix();
      double double0 = 420.7600171384445;
      int int0 = 1334;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1334, 1, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1334' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 2802;
      doubleArray0[2] = (double) 2802;
      doubleArray0[3] = (double) 93;
      doubleArray0[4] = (double) 2802;
      doubleArray0[5] = (double) 2802;
      Matrix.from1DArray(2802, 2802, doubleArray0);
      cCSMatrix0.minInColumn(93);
      cCSMatrix0.iterator();
      cCSMatrix0.set(3, 3, (-1.0));
      cCSMatrix0.blankOfShape(3, 180);
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = new CCSMatrix(180, 93, (-1352));
      NumberFormat.getNumberInstance();
      String string0 = null;
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      cCSMatrix0.eachNonZero(matrixProcedure0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.max();
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix3 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      SparseVector.fromArray(doubleArray0);
      cCSMatrix0.equals((Object) null);
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.block(cCSMatrix3, cCSMatrix3, cCSMatrix3, cCSMatrix2);
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      ColumnMajorSparseMatrix.diagonal(1593, 103.7070462);
      CCSMatrix.zero(1593, 1593);
      cCSMatrix1.toBinary();
      cCSMatrix0.eachNonZeroInColumn((-1887), (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = new CCSMatrix(51, 5, 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)51, (double)51, (double)51, (double)5).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "";
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.diagonal((-2286), 51);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Random.setNextRandom(2802);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2802);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 2802;
      doubleArray0[2] = (double) 2802;
      doubleArray0[3] = (double) 93;
      doubleArray0[4] = (double) 2802;
      doubleArray0[5] = (double) 2802;
      Matrix.from1DArray(2802, 2802, doubleArray0);
      cCSMatrix0.minInColumn(93);
      cCSMatrix0.iterator();
      int[] intArray0 = new int[3];
      intArray0[1] = 93;
      intArray0[2] = 180;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.copyOfShape(0, 0);
      cCSMatrix0.minInColumn(0);
  }
}
