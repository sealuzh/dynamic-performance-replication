/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:40:51 GMT 2018
 */

package org.apache.commons.jxpath.ri.model.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyIterator_ESTest extends PropertyIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("valuePoinXer");
      NullPointer nullPointer0 = new NullPointer(locale0, "valuePoinXer");
      PropertyIterator propertyIterator0 = null;
      try {
        propertyIterator0 = new PropertyIterator(nullPointer0, "<<unknown namespace>>", false, nullPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("valuePoinXer");
      NullPointer nullPointer0 = new NullPointer(locale0, "valuePoinXer");
      PropertyIterator propertyIterator0 = null;
      try {
        propertyIterator0 = new PropertyIterator(nullPointer0, "<<unknown namespace>>", true, nullPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("[]-Y,ax4(MFY[6yF", "[]-Y,ax4(MFY[6yF");
      Locale locale0 = Locale.US;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      assertNull(nodePointer0);
      
      beanAttributeIterator0.getPropertyPointer();
      assertEquals(0, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer((QName) null, "bean", jXPathBasicBeanInfo0, (Locale) null);
      beanPointer0.getParent();
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "bean", false, (NodePointer) null);
      int int0 = propertyIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, (Locale) null);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      QName qName0 = new QName("<<unknown namespace>>", "<<unknown namespace>>");
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      beanAttributeIterator0.prepareForIndividualProperty("f?nGF^:0");
      boolean boolean0 = beanAttributeIterator0.setPosition(1040);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("f{N7mIZ3e-'b5{.z3", "f{N7mIZ3e-'b5{.z3");
      Locale locale0 = Locale.FRENCH;
      QName qName1 = new QName("org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer", "f{N7mIZ3e-'b5{.z3");
      NullPointer nullPointer0 = new NullPointer(qName1, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.setPosition(163);
      NullPointer nullPointer1 = (NullPointer)beanAttributeIterator0.getNodePointer();
      assertFalse(nullPointer1.isDynamicPropertyDeclarationSupported());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName("[]-Y,ax4vcY[6yF", "[]-Y,ax4vcY[6yF");
      Locale locale0 = Locale.UK;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.getNodePointer();
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      assertNull(nodePointer0);
      assertEquals(0, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("", "");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      Locale locale0 = Locale.ENGLISH;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer(qName0, locale0, jXPathBasicBeanInfo0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, nullPropertyPointer0);
      propertyIterator0.getPropertyPointer();
      propertyIterator0.prepareForIndividualProperty(".0");
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("java.math.BigInteger");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      Locale locale0 = Locale.TAIWAN;
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, "after: '", jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "[DocType: ", true, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNull(nodePointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("PropertyIerator startWith parameter is not a child of the supplied parent", "PropertyIerator startWith parameter is not a child of the supplied parent");
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class1);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName0, "PropertyIerator startWith parameter is not a child of the supplied parent", jXPathBasicBeanInfo0);
      NullPointer nullPointer0 = new NullPointer(beanPointer0, qName0);
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "PropertyIerator startWith parameter is not a child of the supplied parent", true, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNull(nodePointer0);
      
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      propertyIterator0.getPropertyPointer();
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("node");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = Locale.ITALY;
      jXPathBasicBeanInfo0.getPropertyDescriptor("node");
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex(Integer.MIN_VALUE);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "node", true, beanPropertyPointer0);
      beanPointer0.printPointerChain();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      boolean boolean0 = propertyIterator0.setPosition(888);
      assertEquals(888, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("node");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = Locale.ITALY;
      jXPathBasicBeanInfo0.getPropertyDescriptor("node");
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex(Integer.MIN_VALUE);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "node", true, beanPropertyPointer0);
      beanPointer0.printPointerChain();
      beanPropertyPointer0.getNode();
      propertyIterator0.getNodePointer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      propertyIterator0.setPosition(888);
      propertyIterator0.getPropertyPointer();
      assertEquals(888, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName("node");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.US;
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex((-1842969240));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      int int0 = PropertyPointer.UNSPECIFIED_PROPERTY;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      beanAttributeIterator0.setPosition(2);
      int int1 = PropertyPointer.UNSPECIFIED_PROPERTY;
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      NullPointer nullPointer0 = new NullPointer(locale0, "wN|gPoO(");
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nullPointer0);
      QName qName0 = nullPropertyPointer0.getName();
      NullPointer nullPointer1 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer1, qName0);
      beanAttributeIterator0.getNodePointer();
      assertEquals(1, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PropertyIerator startWith parameter is not a child of the supplied parent");
      QName qName0 = new QName("PropertyIerator startWith parameter is not a child of the supplied parent", "java.math.BigInteger");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = Locale.TAIWAN;
      jXPathBasicBeanInfo0.getPropertyDescriptor("PropertyIerator startWith parameter is not a child of the supplied parent");
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      BeanPointer beanPointer0 = new BeanPointer(qName0, "valuePointer", jXPathBasicBeanInfo0, locale0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      VariablePointer variablePointer1 = new VariablePointer(qName0);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      variablePointer1.namespacePointer("PropertyIerator startWith parameter is not a child of the supplied parent");
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "UW>.0Jq}X#.%oWL", true, (NodePointer) null);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "valuePointer", true, (NodePointer) null);
      propertyIterator1.getNodePointer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        variablePointer1.setValue(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set undefined variable: PropertyIerator startWith parameter is not a child of the supplied parent:java.math.BigInteger
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("PropertyIerator startWith parameter is not a child of the supplied parent", "java.math.BigInteger");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = Locale.forLanguageTag("PropertyIerator startWith parameter is not a child of the supplied parent");
      BeanPointer beanPointer0 = new BeanPointer(qName0, "java.math.BigInteger", jXPathBasicBeanInfo0, locale0);
      QName qName1 = beanPointer0.getName();
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      VariablePointer variablePointer1 = new VariablePointer(qName1);
      variablePointer0.namespacePointer("java.math.BigInteger");
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      propertyIterator0.reset();
      beanPointer0.clone();
      NullPointer nullPointer0 = new NullPointer(variablePointer1, qName0);
      beanPointer0.namespaceIterator();
      propertyIterator0.setPosition(1);
      variablePointer1.asPath();
      propertyIterator0.getPosition();
      propertyIterator0.getPropertyPointer();
      boolean boolean0 = propertyIterator0.setPosition(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = new QName("]Y'E&ZlcsWn0K.4ITe");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = new Locale("]Y'E&ZlcsWn0K.4ITe", "]Y'E&ZlcsWn0K.4ITe");
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      beanPointer0.getNamespaceResolver();
      Locale.getISOCountries();
      Locale.getISOLanguages();
      locale0.getCountry();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      QName qName1 = new QName("<<unknown namespace>>", "]Y'E&ZlcsWn0K.4ITe");
      NullPointer nullPointer0 = new NullPointer(qName1, locale0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      beanAttributeIterator0.prepareForIndividualProperty("actual");
      beanAttributeIterator0.setPosition(1474);
      int int0 = NodePointer.WHOLE_COLLECTION;
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, class0);
      BeanPointer beanPointer0 = new BeanPointer((QName) null, (Object) null, jXPathBasicBeanInfo0, (Locale) null);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      QName qName0 = beanPropertyPointer0.getName();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      beanAttributeIterator0.getNodePointer();
      assertEquals(1, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("", "java.math.BigInteger");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.TAIWAN;
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class0, class0);
      Locale locale1 = Locale.forLanguageTag("valuePointer");
      BeanPointer beanPointer0 = new BeanPointer(qName0, "valuePointer", jXPathBasicBeanInfo0, locale1);
      jXPathBasicBeanInfo1.getPropertyDescriptors();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      propertyIterator0.prepareForIndividualProperty("java.math.BigInteger");
      propertyIterator0.getPosition();
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNotNull(nodePointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QName qName0 = new QName("node");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.US;
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex(Integer.MIN_VALUE);
      beanPointer0.getImmediateNode();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      beanPropertyPointer0.getName();
      locale0.getScript();
      beanPointer0.namespacePointer(":");
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      beanAttributeIterator0.setPosition(1);
      beanAttributeIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      int int0 = PropertyPointer.UNSPECIFIED_PROPERTY;
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      // Undeclared exception!
      try { 
        nodePointer0.compareChildNodePointers((NodePointer) null, (NodePointer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyOwnerPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName("f?nGF^:0");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.GERMAN;
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex((-2014194191));
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, beanPropertyPointer0);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, (String) null, false, beanPropertyPointer0);
      propertyIterator1.prepareForIndividualProperty("6~I:#'Q");
      int int0 = PropertyPointer.UNSPECIFIED_PROPERTY;
      NullPointer nullPointer0 = new NullPointer(locale0, "<<unknown namespace>>");
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      propertyIterator0.reset();
      propertyIterator1.getNodePointer();
      propertyIterator0.prepareForIndividualProperty((String) null);
      propertyIterator0.setPosition((-765));
      propertyIterator1.reset();
      assertEquals(0, propertyIterator1.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QName qName0 = new QName("node", "node");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.ITALY;
      jXPathBasicBeanInfo0.getPropertyDescriptor("node");
      BeanPointer beanPointer0 = new BeanPointer(qName0, (Object) null, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, beanPropertyPointer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      propertyIterator0.prepareForIndividualProperty("node");
      Object object0 = beanPropertyPointer0.bean;
      propertyIterator0.prepareForIndividualProperty("node");
      assertEquals(0, propertyIterator0.getPosition());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jXPathBasicBeanInfo0.getPropertyDescriptor("node");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1464));
      jXPathBasicBeanInfo0.getPropertyDescriptor("node");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = propertyIterator0.setPosition(1);
      assertEquals(1, propertyIterator0.getPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QName qName0 = new QName("]Y'E&ZlcsWn0W4ITe");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      Locale locale0 = Locale.CHINA;
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex((-1));
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "]Y'E&ZlcsWn0W4ITe", true, beanPropertyPointer0);
      locale0.getExtensionKeys();
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, beanPropertyPointer0);
      propertyIterator0.prepareForIndividualProperty((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      beanPropertyPointer0.isActualProperty();
      propertyIterator0.getNodePointer();
      byte[] byteArray0 = new byte[10];
      propertyIterator0.setPosition((byte)0);
      int int0 = NodePointer.WHOLE_COLLECTION;
      propertyIterator1.reset();
      propertyIterator1.getPosition();
      propertyIterator1.prepareForIndividualProperty("]Y'E&ZlcsWn0W4ITe");
      propertyIterator0.getPosition();
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyIterator1.reset();
      propertyIterator0.getPropertyPointer();
      propertyIterator1.reset();
      propertyIterator0.setPosition(754);
      propertyIterator1.prepareForIndividualProperty("<<unknown namespace>>");
      boolean boolean0 = propertyIterator1.setPosition(16);
      assertEquals(16, propertyIterator1.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      QName qName0 = new QName("f?nGF^:0", "f?nGF^:0");
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      Locale locale0 = Locale.forLanguageTag("f?nGF^:0");
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer(beanPointer0, jXPathBasicBeanInfo0);
      beanPropertyPointer0.setIndex((-2014194112));
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, beanPropertyPointer0);
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f?nGF^:0");
      NodePointer nodePointer0 = beanPointer0.getImmediateValuePointer();
      propertyIterator0.getNodePointer();
      propertyIterator0.setPosition(Integer.MIN_VALUE);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(nodePointer0);
      BeanPropertyPointer beanPropertyPointer1 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newNodePointer(qName0, beanPropertyPointer1, locale0);
      propertyIterator0.prepareForIndividualProperty("actual");
      QName qName1 = beanPropertyPointer1.getName();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer1, qName1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      beanAttributeIterator0.getPosition();
      propertyIterator0.setPosition(7);
      beanAttributeIterator0.prepareForIndividualProperty("propertyNames");
      beanAttributeIterator0.setPosition((-14));
      beanAttributeIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      propertyIterator0.getNodePointer();
      assertEquals(7, propertyIterator0.getPosition());
  }
}
