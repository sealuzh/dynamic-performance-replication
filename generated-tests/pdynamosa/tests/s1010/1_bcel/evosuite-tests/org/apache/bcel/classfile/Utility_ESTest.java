/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:31:24 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      byteSequence0.skipBytes((byte)33);
      byteSequence1.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-63), 188);
      int int0 = Utility.setBit(4, (-1267));
      assertEquals(8196, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#16020", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)69;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)69, 88);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(88);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore\t\t%138", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-86);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$_$98$da$df$aa$A", (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.compactClassName("gcah", true);
      try { 
        Utility.methodSignatureArgumentTypes(" C^'Vhd7p34sg6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  C^'Vhd7p34sg6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.typeOfSignature("&ni0Yo08M=<ly");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &ni0Yo08M=<ly
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isSet(1026, 1026);
      Utility.setBit(1026, 895);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_3", "lload_3", "? extends ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "short";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      try { 
        Utility.typeOfSignature("YickvkN1%^?^V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YickvkN1%^?^V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.typeOfSignature("Z#ng=");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0, false, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("null");
      Utility.getSignature("long");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("long", "long", "null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      boolean boolean0 = Utility.isSet(1026, 1026);
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(1026, 895);
      assertEquals((-2147482622), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore\t\t%109", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("ixor");
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.format((-768), 84, true, '[');
      assertEquals("-768[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      
      String string1 = Utility.classOrInterface(89);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.replace("acce$ fwags,2G.\t\t", "acce$ fwags,2G.\t\t", "acce$ fwags,2G.\t\t");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)95;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1024, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.convertString("t+");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "t+";
      objectArray0[1] = (Object) "t+";
      objectArray0[2] = (Object) "t+";
      objectArray0[3] = (Object) "t+";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "t+";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 1518, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm#]#");
      String string0 = "(Unknown attribute ";
      Utility.compactClassName("(Unknown attribute ");
      String string1 = "I}dW kNSw$cES";
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2, 2, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("(Unknown attribute ", "T!oqe*) =2ff0", "I}dW kNSw$cES", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.typeOfSignature("Z#ng=");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence1.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string0 = Utility.compactClassName("class", false);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte)0);
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString((int) (byte)0, true);
      assertEquals("", string1);
      
      Utility.searchOpcode("lJt<WoOq!");
      Utility.isJavaIdentifierPart('n');
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.isSet((-977), 12);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-127);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-127);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(46, (byte)0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.classOrInterface(1084);
      assertEquals("class", string0);
      
      String string1 = Utility.convertString("access flags\t\t");
      assertEquals("access flags\t\t", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "";
      String string1 = "\\n";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      String string0 = "QbU*";
      Utility.signatureToString("SAME_EXTENDED", true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("+kr426/^||,1\"Va)!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+kr426/^||,1\"Va)!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "\\u!n~CUdmEL8?goM";
      String string1 = Utility.getSignature(string0);
      assertEquals("L\\u!n~CUdmEL8?goM;", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.replace("'{WH&X", "'{WH&X", "'{WH&X");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit((-1850), 185);
      try { 
        Utility.methodSignatureToString("'{WH&X", "new", "'{WH&X", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '{WH&X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      Utility.decode("", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      printWriter0.print(0L);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append('C');
      String string1 = Utility.accessToString(72, false);
      assertEquals("static volatile", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = null;
      String string1 = "xs.oQ{SKga\\f";
      String string2 = "agXNN.F|0KVeL";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "xs.oQ{SKga\f", "agXNN.F|0KVeL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P>c]3}vX@%_ktHyi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>c]3}vX@%_ktHyi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore\t\t%63", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.typeOfSignature("Lbwp");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('\"');
      // Undeclared exception!
      try { 
        Utility.signatureToString("P/~p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P/~p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      String string0 = "QbU*";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QbU*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QbU*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "s{O";
      objectArray0[1] = (Object) "s{O";
      objectArray0[2] = (Object) "s{O";
      objectArray0[3] = (Object) "s{O";
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{s{O, s{O, s{O, s{O}", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureToString("", "", "[92SxKJkZb0\"{Ti", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.clearBit((-3776), (-3776));
      Utility.getSignature("!@WKS[YAtmQ!*3qm#]#");
      try { 
        Utility.methodSignatureReturnType("(Unknown attribute ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "3";
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.format(10, 442, true, 'P');
      MockFile mockFile0 = new MockFile
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "10PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP";
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "10PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      Utility.accessToString((-4248));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\nAnnotation(s):\n";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")zgf-", "\nAnnotation(s):\n", "\nAnnotation(s):\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )zgf-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)51;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte)96;
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)96;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte)31;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2\"uw!Co_p_]N6Z?$eP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2\"uw!Co_p_]N6Z?$eP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid method signature: ", true);
      assertEquals("Invalid method signature: ", string0);
      
      boolean boolean0 = Utility.isSet(2793, 2793);
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("${*9,gR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ${*9,gR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z#nN-=");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.fillup("Z#nN-=", 44, true, '1');
      assertEquals("Z#nN-=11111111111111111111111111111111111111", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-80);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      byteSequence1.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = Utility.clearBit((-24), (-24));
      assertEquals((-280), int0);
      
      Utility.fillup("org.apache.bcel.classfile.Utility", 159, true, 'R');
      String string0 = Utility.fillup("\t\t%", 48, true, 'R');
      assertEquals("\t\t%RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm*]M#");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1459, (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("w+kBL$Ru4?f", false);
      Utility.setBit(0, 5083);
      int int0 = 0;
      Utility.classOrInterface(0);
      String string0 = "ZcY$RZv-pAJH1";
      // Undeclared exception!
      Utility.replace("ZcY$RZv-pAJH1", "", "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      Utility.fillup(" Bd,uHth", 68, true, 'S');
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.isSet((-977), 12);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      int int0 = new Integer((-977));
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      String string0 = Utility.methodTypeToSignature("V", stringArray0);
      assertEquals("(LV;LV;LV;LV;)LV;", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("V");
      Locale locale0 = new Locale("Mac6w");
      PrintStream printStream0 = mockPrintStream0.format(locale0, "V", (Object[]) stringArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) stringArray0);
      int int0 = Utility.clearBit((-1082), (-856));
      assertEquals((-1338), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.typeOfSignature("Z#nN-=");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@\"OST%wJ/bmN", (String) null, "@\"OST%wJ/bmN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @\"OST%wJ/bmN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.methodSignatureReturnType("B", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-32768), 2858, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.replace("v2@-5M2dx?-qMK", "v2@-5M2dx?-qMK", "v2@-5M2dx?-qMK");
      Utility.compactClassName("z*KR`U$");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "w+kBL$Ru4?f";
      boolean boolean0 = true;
      try { 
        Utility.decode("w+kBL$Ru4?f", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1<ZT`GbD|L/YmF]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1<ZT`GbD|L/YmF]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1003), 12);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("V#{/mX%8ea]{U@jf]<");
      assertEquals("V#{/mX%8ea]{U@jf]<", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.accessToString(0);
      Utility.decode("", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('C');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      Utility.printArray(printWriter1, objectArray0);
      assertNotSame(printWriter1, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[0] = (byte)35;
      byteArray0[4] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.typeOfSignature("Z#ng=");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "Z#ng=";
      stringArray0[3] = "YmH|@g-$0|%ombl]e=u";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YmH|@g-$0|%ombl]e=u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YmH|@g-$0|%ombl]e=u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XOUA", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XOUA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-118));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1492, (int) (byte) (-118), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LineNumber(", "P^aR9I/}", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      Utility.codeToString(byteArray0, constantPool0, (-4274), 2582);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[1] = "&* N|*^7J<|R&k!5D'";
      stringArray0[2] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[3] = "kZ7bW;9ad:,)-%/M";
      stringArray0[4] = "kZ7bW;9ad:,)-%/M";
      stringArray0[5] = "kZ7bW;9ad:,)-%/M";
      stringArray0[6] = "kZ7bW;9ad:,)-%/M";
      stringArray0[7] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[8] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      Utility.methodTypeToSignature("kZ7bW;9ad:,)-%/M", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.fillup("ifnull", 7, true, '\"');
      assertEquals("ifnull\"", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.replace("'{WH&X", "'{WH&X", "'{WH&X");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lconst_1", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "%";
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)74;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("nop");
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-16);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("S08LR2eo*f&L*AJ^", stringArray0);
      Utility.methodSignatureToString("()LS08LR2eo*f&L*AJ^;", ", ", ", ", true);
      try { 
        Utility.methodSignatureReturnType(",  S08LR2eo*f&L*AJ^ , ()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qegCx:u%b1:b");
      Utility.isSet(1026, 1026);
      Utility.accessToString(1026, false);
      Utility.setBit(1026, 895);
      Utility.setBit(512, 842);
      try { 
        Utility.methodSignatureToString("'", "qegCx:u%b1:b", "new", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)113;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)113;
      byteArray1[5] = (byte)90;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "52t9QpN]T6,/H";
      Utility.searchOpcode("52t9QpN]T6,/H");
      try { 
        Utility.typeOfSignature("52t9QpN]T6,/H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 52t9QpN]T6,/H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.signatureToString("I");
      String string0 = Utility.accessToString(3053, true);
      assertEquals("public protected static volatile transient native strictfp", string0);
      
      int int0 = Utility.clearBit(3053, 3053);
      assertEquals(3053, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte)16;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hoct";
      stringArray0[1] = "hoct";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#15621", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.isSet((-977), 12);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-127);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-127);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(46, (byte)0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? extends ", "ifge\t\t#-21502", "getstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dcmpl");
      try { 
        Utility.typeOfSignature("#IZBq0?EW HQ[#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #IZBq0?EW HQ[#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence1.readUnsignedShort();
      byteSequence0.readBoolean();
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.fillup("aload_2", 837, true, 'n');
      assertEquals("aload_2nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ladd", "tableswitch", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BKwj");
      assertEquals((byte)8, byte0);
      
      Utility.accessToString((int) (byte)8);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BKwj";
      stringArray0[1] = "static";
      stringArray0[2] = "BKwj";
      stringArray0[3] = "BKwj";
      stringArray0[4] = "^+[Lad/6E9t/N*%";
      stringArray0[5] = "static";
      stringArray0[6] = "static";
      stringArray0[7] = "BKwj";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("static", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Lad/6E9t/N*%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = Utility.setBit((-1619), 108);
      assertEquals((-1619), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)114;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-92);
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#-23131", string0);
      
      short short0 = Utility.searchOpcode(", ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      Utility.printArray((Object[]) stringArray0);
      byte byte0 = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)110;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-115), 45, true);
      try { 
        Utility.methodSignatureReturnType("U=SMxnFk,R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U=SMxnFk,R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-2418), (-2418));
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = Utility.clearBit((-1144194084), 498);
      assertEquals((-1144456228), int0);
      
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{}", string0);
      
      String string1 = Utility.fillup("faU68B!2EpB8>C7&Y", (-2418), false, 'D');
      assertEquals("faU68B!2EpB8>C7&Y", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "W!";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.accessToString(171);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[0];
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      String string0 = Utility.signatureToString("I", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rGu,9)OX?\"}_J";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "rGu,9)OX?\"}_J";
      stringArray0[3] = "rGu,9)OX?\"}_J";
      stringArray0[4] = "rGu,9)OX?\"}_J";
      stringArray0[5] = "rGu,9)OX?\"}_J";
      stringArray0[6] = "rGu,9)OX?\"}_J";
      stringArray0[7] = "rGu,9)OX?\"}_J";
      Utility.methodTypeToSignature("rGu,9)OX?\"}_J", stringArray0);
      Utility.printArray((Object[]) stringArray0, false, false);
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-451), 45, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-451), (int) (byte) (-63), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-91);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    if_acmpeq\t\t#255
         // 4:    if_acmpeq\t\t#-23127
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("fstore_0");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.convertString(")zgf-");
      String string0 = Utility.convertString("invokespecial");
      assertEquals("invokespecial", string0);
      
      String string1 = Utility.compactClassName("k!", false);
      assertEquals("k!", string1);
      
      String string2 = Utility.getSignature(" ");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.clearBit(582, 582);
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "o81+}kSwKVKr$\\,";
      // Undeclared exception!
      try { 
        Utility.signatureToString("o81+}kSwKVKr$,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o81+}kSwKVKr$,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.printArray((Object[]) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("|bWynf^Nu.m.\"r{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |bWynf^Nu.m.\"r{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.getSignature("_;+w}-;");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.typeOfSignature("V72;c@b3oBG^,");
      try { 
        Utility.methodSignatureReturnType("E3_22;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E3_22;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.accessToString(133);
      assertEquals("public protected transient", string0);
      
      String string1 = Utility.getSignature("public protected transient");
      assertEquals("Lpublic;", string1);
      
      String string2 = Utility.convertString("bB_0;m");
      assertEquals("bB_0;m", string2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.isSet(2793, (-2355));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isSet((-2358), (-2358));
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "z +-wnl]P4Oh";
      Utility.compactClassName("z +-wnl]P4Oh");
      // Undeclared exception!
      try { 
        Utility.signatureToString("z +-wnl]P4Oh", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z +-wnl]P4Oh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Class must not be null");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.signatureToString("Class must not be null");
      assertEquals("char", string0);
      
      String string1 = Utility.methodTypeToSignature("x5BbS*s:+>", (String[]) null);
      assertEquals("()Lx5BbS*s:+>;", string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=<ZT`GtD|L/YmF]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =<ZT`GtD|L/YmF]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-71);
      byteSequence0.mark((byte) (-79));
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)93;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      Utility.searchOpcode("\t\t#");
      Utility.typeOfMethodSignature("(L#;L#;L#;L#;L#;)L#;");
      Utility.searchOpcode("Only element values of type annotation can be built with this ctor - type specified: ");
      Utility.convertString("\t\t#");
      try { 
        Utility.methodSignatureArgumentTypes("fconst_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fconst_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmplt\t\t#-31223", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.isSet(1084, 1084);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("(descriptor_index = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(descriptor_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.isJavaIdentifierPart('}');
      try { 
        Utility.methodSignatureReturnType("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      Utility.clearBit(876, (byte)0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("GT.]R4G=Wdhy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GT.]R4G=Wdhy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.isSet((-1013), 7);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\u0000YdH( Y[n_Y}+", "\u0000YdH( Y[n_Y}+", "dload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \u0000YdH( Y[n_Y}+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object2;
      objectArray0[1] = object2;
      objectArray0[2] = object1;
      objectArray0[3] = object3;
      objectArray0[4] = object0;
      objectArray0[5] = object1;
      objectArray0[6] = object1;
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      objectArray0[0] = (Object) (byte)80;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 84, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.replace("'{WH&X", "'{WH&X", "'{WH&X");
      byte[] byteArray0 = new byte[1];
      Utility.isSet(1026, 422);
      Utility.setBit((-1079), (-66));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)109;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.setBit((byte)0, (byte)0);
      try { 
        Utility.typeOfSignature("ddiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ddiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3418, 263);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-847), (byte) (-75));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmple\t\t#-18990", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("dup2");
      assertEquals((short)92, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iconst_3", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte)52;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.classOrInterface((-310));
      assertEquals("interface", string0);
      
      String string1 = Utility.format((-310), (-400), true, 'R');
      assertEquals("-310", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.isJavaIdentifierPart('C');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte)122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.accessToString(0);
      byte[] byteArray0 = Utility.decode("", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append('C');
      Utility.accessToString(0);
      Utility.searchOpcode("");
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.format(0, 12, true, '[');
      assertEquals("0[[[[[[[[[[[", string0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2220), (int) (byte)83, false);
      assertEquals("0:    aastore\n1:    aastore\n2:    aastore\n3:    aastore\n4:    aastore\n5:    aastore\n6:    aastore\n", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte)83;
      byteArray1[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)83;
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("The suffix mut not be null", false);
      assertEquals("The suffix mut not be null", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[7];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "m.l)6[,^]I 2Ul:&z&V";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Ud/4>2", "ow", "m.l)6[,^]I 2Ul:&z&V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ud/4>2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-30);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 52, (-2014));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "Qh&q(KP6.:$;Pem-fY";
      try { 
        Utility.typeOfSignature("Qh&q(KP6.:$;Pem-fY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qh&q(KP6.:$;Pem-fY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("U ", "a>2", true);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.classOrInterface((-1810));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2220), (int) (byte)83, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)83;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)83;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)121;
      byteArray2[1] = (byte)121;
      byteArray2[2] = (byte)24;
      byteArray2[3] = (byte)24;
      byteArray2[4] = (byte)83;
      byteArray2[5] = (byte)121;
      byteArray2[6] = (byte)83;
      byteArray2[7] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.isSet((-1013), 13);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "'XvBs4";
      try { 
        Utility.typeOfSignature("'XvBs4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'XvBs4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = ", low = ";
      boolean boolean0 = true;
      Utility.compactClassName(", low = ", ", low = ", true);
      Utility.isJavaIdentifierPart('Z');
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "H";
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(570, 570);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5140. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.getSignature("int");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "int";
      stringArray0[1] = "impdep1";
      stringArray0[2] = "YmH|@g-$0|%ombl]e=u";
      stringArray0[3] = "int";
      stringArray0[4] = "I";
      stringArray0[5] = "short";
      stringArray0[6] = "I";
      String string0 = Utility.methodTypeToSignature("impdep1", stringArray0);
      assertEquals("(ILimpdep1;LYmH|@g-$0|%ombl]e=u;ILI;SLI;)Limpdep1;", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.fillup("/Fi&M8q", 1, false, ',');
      Utility.format(1, 0, false, 'A');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "1";
      objectArray0[1] = (Object) "/Fi&M8q";
      objectArray0[2] = (Object) "1";
      objectArray0[3] = (Object) "1";
      objectArray0[4] = (Object) "/Fi&M8q";
      objectArray0[5] = (Object) "/Fi&M8q";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "/Fi&M8q";
      objectArray0[8] = (Object) "1";
      Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('A');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-47);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)126;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), 1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "A5/LF+j:4+z0;r|? ";
      try { 
        Utility.typeOfSignature("A5/LF+j:4+z0;r|? ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A5/LF+j:4+z0;r|? 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Z#ng=";
      objectArray0[1] = (Object) "Z#ng=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      objectArray0[2] = (Object) "Z#ng=";
      objectArray0[3] = (Object) "Z#ng=";
      objectArray0[4] = (Object) "Z#ng=";
      Utility.printArray(objectArray0, true, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-81);
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2789), (-3052));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      assertEquals("(L#;L#;L#;L#;L#;)L#;", string0);
      
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-96);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1276), 113, true);
      assertEquals("0:    lreturn\n1:    iconst_1\n2:    lshr\n3:    sipush\t\t-24576\n6:    nop\n7:    nop\n", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{\t\t#, \t\t#, \t\t#, \t\t#, \t\t#}", string2);
      
      String string3 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-122);
      byteArray0[4] = (byte) (-42);
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(byteSequence1);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-80), (-1686));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1686));
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      try { 
        Constant.readConstant(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.typeOfSignature("BKwj");
      Utility.signatureToString("BKwj");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.typeOfSignature("BKwj");
      Utility.classOrInterface(1127);
      Utility.format(74, (-501), true, '+');
      Utility.replace("_>kRfW+gzYI", "74", (String) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_>kRfW+gzYI", (String) null, "_>kRfW+gzYI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _>kRfW+gzYI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:bt";
      stringArray0[1] = ",:bt";
      stringArray0[2] = ",:bt";
      stringArray0[3] = ",:bt";
      stringArray0[4] = ",:bt";
      Utility.methodTypeToSignature(",:bt", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.searchOpcode("dcmpg");
      Utility.searchOpcode("dcmpg");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dcmpg";
      ConstantString constantString0 = new ConstantString((short)152);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!]_0N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]_0N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-154), 655);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(Ud/4>2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ud/4>2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isSet((-1013), 13);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-42);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("o7[qEHh9aK0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `o7[qEHh9aK0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.isJavaIdentifierPart('*');
      // Undeclared exception!
      try { 
        Utility.signatureToString("4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "[92SxKJkZb0\"{Ti";
      Utility.typeOfSignature("[92SxKJkZb0\"{Ti");
      Utility.typeOfSignature("[92SxKJkZb0\"{Ti");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[92SxKJkZb0\"{Ti";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ifeq", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [92SxKJkZb0\"{Ti
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("iload_1", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "long";
      Utility.getSignature("long");
      boolean boolean0 = false;
      Utility.signatureToString("J", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("J", "interface", "long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.replace("", "),U6?]'{:Jv4o*H^", "),U6?]'{:Jv4o*H^");
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "),U6?]'{:Jv4o*H^";
      stringArray0[1] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L),U6?]'{:Jv4o*H^;L;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Utility.signatureToString("Dp$HglE` R");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RxK 2R=XiCz#sf.");
      // Undeclared exception!
      try { 
        Utility.signatureToString("RxK 2R=XiCz#sf.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RxK 2R=XiCz#sf.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.isSet(7, (-2347));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.setBit(3433, 3433);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence1.readChar();
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{\"java.lang.Object@2df2c624\", \"java.lang.Object@202b95bf\", \"java.lang.Object@4c094ef3\", \"java.lang.Object@c2aff30\", \"java.lang.Object@3752cb77\", \"java.lang.Object@4ba8264f\"}";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "{\"java.lang.Object@2df2c624\", \"java.lang.Object@202b95bf\", \"java.lang.Object@4c094ef3\", \"java.lang.Object@c2aff30\", \"java.lang.Object@3752cb77\", \"java.lang.Object@4ba8264f\"}";
      stringArray0[6] = "";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Jp1J?;e)p|-y");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.signatureToString("VMf^$I p");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, false);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("iload\t\t%163", string0);
      
      String string1 = Utility.compactClassName("'");
      assertEquals("'", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.classOrInterface(56);
      String string0 = Utility.classOrInterface(56);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[92SxKJkZb0\"{Ti");
      assertEquals((byte)13, byte0);
      
      try { 
        Utility.methodSignatureReturnType("[92SxKJkZb0\"{Ti", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `92SxKJkZb0\"{Ti'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("StackMap");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-4274), 2582);
      assertEquals("0:    fconst_2\n1:    fconst_2\n2:    nop\n", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[1] = "`<)0B";
      stringArray0[2] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[3] = "kZ7bW;9ad:,)-%/M";
      stringArray0[4] = "kZ7bW;9ad:,)-%/M";
      stringArray0[5] = "kZ7bW;9ad:,)-%/M";
      stringArray0[6] = "kZ7bW;9ad:,)-%/M";
      stringArray0[7] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      stringArray0[8] = "0:    fconst_2\n1:    fconst_2\n2:    nop\n";
      String string1 = Utility.methodTypeToSignature("kZ7bW;9ad:,)-%/M", stringArray0);
      assertEquals("(L0:;L`<)0B;L0:;LkZ7bW;9ad:,)-%/M;LkZ7bW;9ad:,)-%/M;LkZ7bW;9ad:,)-%/M;LkZ7bW;9ad:,)-%/M;L0:;L0:;)LkZ7bW;9ad:,)-%/M;", string1);
      
      boolean boolean0 = Utility.isSet(1751, (byte)13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8NsKkT2@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8NsKkT2@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = Utility.compactClassName("", "", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DH.{!H");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skipBytes((byte) (-124));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[4];
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((byte) (-124), (byte) (-68), byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.typeOfSignature("VMf^$I p");
      Utility.compactClassName("fload_1");
      Utility.clearBit(52, 420);
      // Undeclared exception!
      try { 
        Utility.signatureToString("bastore", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bastore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      byteSequence1.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "kAZ3,rXepzAA^e2";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      Utility.printArray(printWriter0, (Object[]) null);
      try { 
        Utility.typeOfMethodSignature("kAZ3,rXepzAA^e2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kAZ3,rXepzAA^e2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(Ud/4>2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Ud/4>2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)69;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)69, 88);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(88);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)69, 1802);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = 93;
      Utility.accessToString(93);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(/4>2", "(/4>2", "(/4>2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/4>2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("Wt&@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wt&@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "Qf[}VQFayIA,+[d";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Qf[}VQFayIA,+[d", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[}VQFayIA,+[d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-47);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), (int) (byte) (-47));
      assertEquals("0:    astore_1\n1:    fload_2\n2:    <illegal opcode>\n3:    fload_2\n4:    <illegal opcode>\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "0s";
      try { 
        Utility.typeOfSignature("0s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.skipBytes((-408));
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 198);
      assertEquals("0:    astore_1\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.accessToString(1892, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-2006), 62, (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("protected synchronized volatile native interface abstract", "isub", "$l$8b$I$A$A$A$A$A$A$A", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected synchronized volatile native interface abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 248, 81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte) (-85);
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)96;
      byteArray1[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("!@WKS[YAtmQ!*3qm*]M#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!@WKS[YAtmQ!*3qm*]M#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)74;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("fload_2", false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = Utility.setBit((-1619), 108);
      assertEquals((-1619), int0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.readChar();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ret\t\t%169", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LineNumber(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumber(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit(2211, 2211);
      Utility.setBit(3236, (byte)36);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CONSTANT_String");
      mockPrintStream0.print((float) (byte)36);
      mockPrintStream0.print(false);
      mockPrintStream0.close();
      String string0 = "h$C}J!t'ZnskP'.EU";
      PrintStream printStream0 = mockPrintStream0.printf("h$C}J!t'ZnskP'.EU", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)12, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.setBit(1322, (-2149));
      Utility.convertString("");
      try { 
        Utility.methodSignatureArgumentTypes("zm(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: zm(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.classOrInterface(310);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "/8JvXA";
      try { 
        Utility.typeOfSignature("/8JvXA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /8JvXA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-125);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-125);
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte) (-125);
      byteArray1[4] = (byte) (-125);
      byteArray1[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("lxor");
      assertEquals((short)131, short0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm*]M#");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "iconst_1";
      String string1 = "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER";
      String string2 = "[]";
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(1153, (byte)42, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)20;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte)16;
      byteArray1[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      String string0 = Utility.getSignature("nop");
      assertEquals("Lnop;", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.isSet(849, 849);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)13;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Utility.classOrInterface(56);
      assertEquals("class", string0);
      
      byte byte0 = Utility.typeOfSignature("Lpublic;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.classOrInterface((-24));
      String string1 = Utility.replace("interface", ">\t", "interface");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.accessToString(16384, true);
      assertEquals("enum", string2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.format(798, 2, true, 'W');
      try { 
        Utility.typeOfMethodSignature("!?gwZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !?gwZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.classOrInterface(81);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte) (-70);
      byteArray1[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)54;
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      try { 
        Utility.codeToString(byteSequence2, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.replace("double", "double", "double");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "\"96gl>";
      try { 
        Utility.typeOfSignature("\"96gl>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"96gl>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.setBit(11, (-1547));
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("^O|", stringArray0);
      Utility.getSignature("VazYL(Zv)-rb^*");
      Utility.printArray((Object[]) stringArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.classOrInterface((-620));
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("B", false);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-66);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "B";
      Utility.methodTypeToSignature("byte", stringArray0);
      Utility.isSet((byte) (-75), 244);
      Utility.isJavaIdentifierPart('Y');
      Utility.printArray((Object[]) stringArray0, false, true);
      Utility.methodSignatureArgumentTypes("(BBLB;)B");
      String string0 = null;
      int int0 = 176;
      int int1 = 194;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.isSet(849, 849);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)13;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.convertString("\"96gl>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private static native interfacepublic private static native interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private static native interfacepublic private static native interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("-T~]<yNTmz/%E)|A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -T~]<yNTmz/%E)|A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)39;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("dload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.isJavaIdentifierPart('z');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("5K", "5K", "5K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)103;
      byteArray1[5] = (byte)122;
      byteArray1[6] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit(1026, 895);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      Utility.compactClassName("%:]f=faDTW#27t", false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1532), 0, false);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.clearBit((-193), (-193));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" read ", " read ", " read ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  read 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Utility.getSignature("\t\t#");
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(309L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 747, (int) (byte)122, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Utility.typeOfSignature("StackMap");
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.convertString(")zgf-");
      String string0 = Utility.convertString("invokespecial");
      assertEquals("invokespecial", string0);
      
      Utility.compactClassName("k!", false);
      String string1 = Utility.getSignature(")zgf-");
      assertEquals("L)zgf-;", string1);
      
      String string2 = Utility.compactClassName("int", " X %ff?-O", false);
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.format((-11), 12, true, 'R');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-72);
      Utility.encode(byteArray0, false);
      File file0 = MockFile.createTempFile("-11RRRRRRRRR", "-11RRRRRRRRR");
      try { 
        MockFile.createTempFile("-11RRRRRRRRR", "X$a7$5b$7b$98$b3$b8", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W K0##jg%H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W K0##jg%H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)62;
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 127
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kucd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kucd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.isSet((-977), 12);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 201, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    ldiv
         // 3:    fconst_0
         // 4:    fconst_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "newarray";
      Utility.methodTypeToSignature("Z#ng =", stringArray0);
      Utility.printArray((Object[]) stringArray0, false, false);
      String string0 = Utility.getSignature("(Lnewarray;)LZ#ng;");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(Ud/4>2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Ud/4>2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M5$8LLWN?$\"~;pkq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M5$8LLWN?$\"~;pkq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "The list of names must not be null";
      try { 
        Utility.methodSignatureArgumentTypes("The list of names must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The list of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid method signature: ");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("int");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Utility.signatureToString("Dont call getValueBoolean() on a non BOOLEAN ElementValue", true);
      Utility.fillup("", 233, true, '&');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-82);
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-45));
      constantArray0[0] = (Constant) constantDouble0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "/";
      try { 
        Utility.methodSignatureReturnType("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = 0;
      Utility.setBit(0, 0);
      String string0 = "System";
      Utility.signatureToString("System");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm*]M#");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 20, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.isSet(1084, 1084);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)122;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2372), 76, false);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
      
      Utility.fillup("GN", (-2299), false, '2');
      try { 
        Utility.methodSignatureReturnType("GN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.compactClassName("Could not create the directory ", "Could not create the directory ", false);
      assertEquals("Could not create the directory ", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Could not create the directory ";
      objectArray0[1] = (Object) "Could not create the directory ";
      objectArray0[2] = (Object) "Could not create the directory ";
      objectArray0[3] = (Object) "Could not create the directory ";
      objectArray0[4] = (Object) "Could not create the directory ";
      objectArray0[5] = (Object) "Could not create the directory ";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{Could not create the directory , Could not create the directory , Could not create the directory , Could not create the directory , Could not create the directory , Could not create the directory }", string1);
      
      String string2 = Utility.methodSignatureReturnType("Could not create the directory ");
      assertEquals("char", string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)1;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("06 72 f1 52 36 01", string3);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.setBit(837, 51);
      String string0 = "SJXSxBP~[p_4{I@9]U";
      Utility.replace("SJXSxBP~[p_4{I@9]U", "L% .}D]M", "L% .}D]M");
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-175), 102, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.classOrInterface((-24));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "interface";
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("CRAdVHp`91izxtcl}sR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CRAdVHp`91izxtcl}sR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.typeOfSignature("BKwj");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1343, false, 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      int int0 = 164;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(/4>2", "(/4>2", "(/4>2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/4>2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      Utility.signatureToString("F", true);
      try { 
        Utility.methodSignatureArgumentTypes("F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.compactClassName("Invalid method signature: ", false);
      MockFile mockFile0 = new MockFile("double", "Invalid method signature: ");
      mockFile0.getAbsolutePath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 162, 1242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((-408));
      byteSequence1.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.reset();
      String string0 = Utility.codeToString(byteSequence3, (ConstantPool) null);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.accessToString((-24));
      Utility.format(101, 101, false, 'J');
      Utility.fillup("static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", 39, false, 'B');
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1013), 7);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)94;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload\t\t%94", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = stringArray0[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.isSet(849, 849);
      Integer integer0 = new Integer(849);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.isSet((byte) (-99), 95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-99);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2c");
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readUnsignedByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.isJavaIdentifierPart('$');
      ByteSequence byteSequence0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.isSet(61, 122);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.compactClassName("R^", "R^", true);
      Utility.setBit(58, 58);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("{java.lang.Object@75d3a92f}", stringArray0);
      Utility.getSignature("()L{java/lang/Object@75d3a92f};");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = Utility.classOrInterface(56);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "class";
      stringArray0[1] = "class";
      stringArray0[2] = "\n";
      stringArray0[3] = "impdep2";
      stringArray0[4] = "class";
      stringArray0[5] = "\n";
      String string1 = Utility.methodTypeToSignature("\n", stringArray0);
      assertEquals("(Lclass;Lclass;L;Limpdep2;Lclass;L;)L;", string1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList0, linkedHashSet0);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "L$l$8b$I$A$A$A$A$A$A$A;V", (Object[]) stringArray0);
      Utility.printArray(printWriter0, (Object[]) stringArray0);
      String string2 = Utility.methodSignatureReturnType("(Lclass;Lclass;L\n;Limpdep2;Lclass;L\n;)L\n;", true);
      assertEquals("\n", string2);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("GQs@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GQs@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fU&C<Zx4z#$\"m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fU&C<Zx4z#$\"m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      Utility.printArray((Object[]) null, true, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(895);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      Utility.accessToString(52);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.classOrInterface(171);
      Utility.isJavaIdentifierPart('`');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("z=,z", "_c%[;MBadyke", "1imEy(nB<f_7Pxs*`E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z=,z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.isSet(1317, 12);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6zsrLp]Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6zsrLp]Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#24747", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Utility.clearBit(882, 882);
      Utility.isSet(882, 882);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.setBit(310, 310);
      String string0 = "\t\t%";
      String string1 = "A\"rPqDkg";
      Utility.replace("\t\t%", "\t\t%", "A\"rPqDkg");
      String string2 = "fD\"F7}B@";
      String string3 = "getstatic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t%", "fD\"F7}B@", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)113;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 3416);
      Utility.convertString("0:    ifge\t\t#-21268\n3:    lrem\n");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-33));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1013), 7);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)96;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)29);
      assertEquals("7:    frem\n8:    iadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[4] = "\t\t#";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence3, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = Utility.replace("O(PM*1B(K}^z2tTp<b", "H", "NewObject");
      assertEquals("O(PM*1B(K}^z2tTp<b", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-65);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 5a 56 68 62 56 67 bf", string1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = Utility.signatureToString("D", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)31;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      byteSequence0.readInt();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.encode(byteArray0, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.searchOpcode("dcmpg");
      Utility.searchOpcode("dcmpg");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dcmpg";
      ConstantString constantString0 = new ConstantString((short)152);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)58;
      byteArray0[1] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("nop", "nop", true);
      assertEquals("", string0);
      
      String string1 = Utility.compactClassName("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.typeOfSignature("BKwj");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H8GuAqL'?}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H8GuAqL'?}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface(129);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Utility.getSignature("long");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, 1419, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-122);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3416);
      Utility.convertString("0:    nop\n1:    ireturn\n2:    <illegal opcode>\n3:    i2f\n");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0:    nop\n1:    ireturn\n2:    <illegal opcode>\n3:    i2f\n";
      stringArray0[1] = "0:    nop\n1:    ireturn\n2:    <illegal opcode>\n3:    i2f\n";
      stringArray0[2] = "0:    nop\n1:    ireturn\n2:    <illegal opcode>\n3:    i2f\n";
      LocalVariableTable localVariableTable0 = new LocalVariableTable(564, (byte) (-84), (LocalVariable[]) null, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("An~NGUXcUpo,Ab}T3u", "0:    nop\n1:    ireturn\n2:    <illegal opcode>\n3:    i2f\n", "instanceof", false, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: An~NGUXcUpo,Ab}T3u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[0] = (byte)35;
      byteArray0[4] = (byte) (-16);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-16);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1010), 1038);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_1
         // 1:    nop
         // 2:    nop
         // 3:    iand
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    sastore
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-125);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)47, (byte)47);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.classOrInterface((-3));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      byteArray0[2] = (byte)42;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (int) (byte)42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)18, (byte)25);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-11), (byte)25);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lastore");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)120);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      Constant constant0 = constantInteger0.copy();
      constantArray0[5] = constant0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[6] = (Constant) constantUtf8_2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[7] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.replace("'{WH&X", "'{WH&X", "'{WH&X");
      byte[] byteArray0 = new byte[1];
      Utility.isSet(1026, 422);
      Utility.setBit((-1079), (-66));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)109;
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)109;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (int) (byte) (-102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.setBit(310, 310);
      Utility.clearBit(0, 1);
      String string0 = Utility.format(4194614, 1, false, '3');
      assertEquals("4194614", string0);
      
      int int0 = new Integer(4194614);
      int int1 = Utility.clearBit(0, 171);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      String string1 = Utility.accessToString(4194614, true);
      assertEquals("private protected final native", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true);
      Utility.printArray((Object[]) stringArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-20);
      byteArray1[6] = (byte) (-20);
      Utility.equals(byteArray0, byteArray1);
      String string3 = Utility.compactClassName("{public, private, protected, static, final, synchronized, volatile, transient, native, interface, abstract, strictfp, synthetic, annotation, enum}", false);
      assertEquals("{public, private, protected, static, final, synchronized, volatile, transient, native, interface, abstract, strictfp, synthetic, annotation, enum}", string3);
      
      String string4 = Utility.classOrInterface((-4376));
      assertEquals("interface", string4);
      
      String string5 = Utility.convertString("{public, private, protected, static, final, synchronized, volatile, transient, native, interface, abstract, strictfp, synthetic, annotation, enum}");
      assertTrue(string5.equals((Object)string2));
      
      int int2 = Utility.setBit(684, 5);
      assertEquals(684, int2);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.typeOfSignature("F");
      try { 
        Utility.decode(":i]N;v$Yh^", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 334, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = Utility.classOrInterface((-3));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      String string1 = Utility.signatureToString("B;qf1_Hr", false);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Code code0 = null;
      try {
        code0 = new Code((byte)40, (-2196), byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm#]#");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-46);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("!@WKS[YAtmQ!*3qm#]#", stringArray0);
      assertEquals("()[L!@WKS;", string0);
      
      String string1 = Utility.methodSignatureReturnType("()[L!@WKS;", true);
      assertEquals("!@WKS[]", string1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("<2_DZ.3A;3d0&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <2_DZ.3A;3d0&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.typeOfSignature("Z#ng=");
      String string0 = Utility.signatureToString("Z#ng=", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The magic number cannot be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The magic number cannot be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-86);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)14;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2372), 90, true);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false, true);
      try { 
        Utility.methodSignatureReturnType("HbP]o kb@MT%']Io@2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HbP]o kb@MT%']Io@2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-100);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.skipBytes((-4019));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("protected");
      assertEquals("protected", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      ConstantPool constantPool0 = null;
      byteSequence0.readChar();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      byte byte0 = (byte)84;
      Constant[] constantArray0 = new Constant[8];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)84);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      String string0 = "Td/!Yx2yeC]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Td/!Yx2yeC]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Td/!Yx2yeC]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Object[] objectArray0 = new Object[1];
          Object object0 = new Object();
          objectArray0[0] = object0;
          Utility.printArray(objectArray0);
          boolean boolean0 = false;
          Utility.printArray(objectArray0, false, true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor144.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iconst_1", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifeq\t\t#-22686", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("null", "null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.convertString("l2d");
      Utility.format(3, 41, false, '(');
      try { 
        Utility.typeOfSignature("E~;(07");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E~;(07
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".Wi!i;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Wi!i;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = "Lbwp";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (-1791));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = Utility.getSignature(" ");
      assertEquals("L;", string0);
      
      String string1 = Utility.classOrInterface((-503));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.getSignature("!@WKS[YAtmQ!*3qm*]M#");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.searchOpcode("");
      String string0 = "";
      Utility.compactClassName("");
      String string1 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)53;
      byteArray0[3] = (byte)53;
      byte byte2 = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-55);
      MockFile mockFile0 = new MockFile("java.lang.Object@1e41c3d9, java.lang.Object@46231cc7, java.lang.Object@31ede7d1");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "java.lang.Object@1e41c3d9, java.lang.Object@46231cc7, java.lang.Object@31ede7d1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"java.lang.Object@1e41c3d9, java.lang.Object@46231cc7, java.lang.Object@31ede7d1\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = stringArray0[1];
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*]P;7$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]P;7$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.getSignature("long");
      Utility.signatureToString("J", true);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("FW");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.getSignature("\t\t#");
      Utility.printArray((Object[]) stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -115
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.isSet((-977), 12);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.isSet(165, 165);
      String string0 = "";
      String string1 = "qwJm";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("qwJm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qwJm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      Utility.printArray((Object[]) stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)39;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = Utility.getSignature("!@WKS[YAtmQ!*3qm#]#");
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, 7, 201);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byte byte0 = (byte) (-92);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 67, (int) (byte) (-18), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39918. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#-31149", string0);
      
      String string1 = Utility.fillup("ifnonnull\t\t#-31149", 46, true, '#');
      assertEquals("ifnonnull\t\t#-31149############################", string1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!6]_0N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6]_0N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.replace("$=|DQ`itEpYhC", "$=|DQ`itEpYhC", "$=|DQ`itEpYhC");
      Utility.isSet(46, 46);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("*]P;7$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *]P;7$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      byteSequence2.readUnsignedShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-33));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence3.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = "invokeVirtual";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "invokeVirtual", "double", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WNR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WNR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4vsj&]\"mM^29L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4vsj&]\"mM^29L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.isSet(1554, 1554);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, true);
      Utility.searchOpcode("Invalid signature: `");
      String string1 = Utility.fillup("Invalid signature: `", 1554, false, 'Z');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(105);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2448, 2448);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, 9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte) (-128);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readShort();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfSignature("iZ(3#+|Dv5z_4[5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iZ(3#+|Dv5z_4[5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)6;
      String string0 = Utility.getSignature("java.lang.");
      assertEquals("Ljava/lang/;", string0);
      
      String string1 = Utility.signatureToString("Ljava/lang/;", true);
      assertEquals("", string1);
      
      Object object0 = new Object();
      String string2 = Utility.compactClassName(":H!Yfy(}~", "PSM>)B~F#[", true);
      assertEquals(":H!Yfy(}~", string2);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.searchOpcode("ifne");
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifne", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifne'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-252), (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_2
         // 1:    iand
         // 2:    astore_1
         // 3:    istore_0
         // 4:    iload_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = "invokedynamic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("freturn", "invokedynamic", "freturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      int int0 = Utility.setBit((-368), (-368));
      assertEquals((-368), int0);
      
      String string0 = Utility.compactClassName("aload_0", "aload_0", true);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString(112, true);
      assertEquals("final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.typeOfSignature("Z#nN-=");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-265.775889459));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)4);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-14), (byte)4);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iconst_1", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The list of prefixes must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Utility.setBit(310, 310);
      Utility.clearBit(0, 0);
      boolean boolean0 = false;
      Utility.format(4194614, 0, false, '3');
      Utility.setBit(146, 146);
      Utility.clearBit(0, 2983);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("4194614");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4194614
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = Utility.classOrInterface(62);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J");
      try { 
        Utility.typeOfSignature("2QEY#'T*Lfz|qyH`NUh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2QEY#'T*Lfz|qyH`NUh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)46;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("70 3b 0e 2e", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "\t<";
      Utility.compactClassName("\t<");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\t<";
      objectArray0[1] = (Object) "\t<";
      objectArray0[2] = (Object) "\t<";
      objectArray0[3] = (Object) "\t<";
      objectArray0[4] = (Object) "\t<";
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readUnsignedShort();
      Utility.accessToString(972, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)0;
      String string0 = "fastore";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "fastore");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fastore\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.searchOpcode("i2b");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      boolean boolean0 = true;
      String string0 = "OQb&*";
      // Undeclared exception!
      try { 
        Utility.signatureToString("OQb&*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OQb&*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.isSet(1554, (-2358));
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.getSignature("Lbwp");
      Utility.signatureToString("LLbwp;", true);
      Object object0 = new Object();
      String[] stringArray0 = Constants.OPCODE_NAMES;
      assertEquals(256, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P>c]3}vX@%_ktHyi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P>c]3}vX@%_ktHyi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = "!v}h";
      try { 
        Utility.typeOfMethodSignature("!v}h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !v}h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = "7n[F=TkWci>&Y2F";
      try { 
        Utility.typeOfSignature("7n[F=TkWci>&Y2F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7n[F=TkWci>&Y2F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      Utility.compactClassName("Invalid method signature: ", true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.isSet(1026, 1026);
      Utility.setBit(1026, 895);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 414, 56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      String string1 = Utility.convertString("2e 10");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.classOrInterface(181);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NIq_?^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NIq_?^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpgt\t\t#23994", string0);
      
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("b1 a3 5d b9", string1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(895);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      Utility.codeToString(byteArray0, constantPool0, (-182), (-2356));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-63);
      byteArray1[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = Constants.OPCODE_NAMES;
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.accessToString(0);
      Utility.decode("", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      PrintWriter printWriter1 = printWriter0.append('C');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray(printWriter1, objectArray0);
      // Undeclared exception!
      Utility.replace("5y803G(?or`&}sP", "", "5y803G(?or`&}sP");
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ret\t\t%169", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("V$80$cf$f7zz", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Utility.accessToString((-24));
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte byte0 = (byte) (-102);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte)36;
      byteArray2[2] = (byte)58;
      byteArray2[3] = (byte)58;
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence4, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-97);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-7);
      Utility.codeToString(byteArray0, constantPool0, (-1288), (int) (byte) (-102), false);
      try { 
        Utility.typeOfMethodSignature("0:    fload_2\n1:    if_icmpeq\t\t#-25862\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fload_2
         // 1:    if_icmpeq\t\t#-25862
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.format(368, 56, true, 'c');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[0] = (byte)50;
      byteArray0[4] = (byte) (-3);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-3);
      byteArray0[7] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("OB*'X0o1|");
      assertEquals("OB*\\'X0o1|", string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":Q8[P5=':Iby");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Q8[P5=':Iby
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Utility.printArray((Object[]) null, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureToString("", "'", "[92SxKJkZb0\"{Ti", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.isSet(129, 129);
      try { 
        Utility.methodSignatureReturnType("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      boolean boolean0 = Utility.isSet(849, 849);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(849);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmpgt\t\t#-23782", string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.convertString("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString((-3634));
      String string1 = Utility.compactClassName("private protected static volatile transient native synthetic annotation enum", "", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", high = ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("if_icmpeq", (byte)83, true, '0');
      assertEquals("if_icmpeq00000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      
      String string1 = Utility.fillup("if_icmpeq00000000000000000000000000000000000000000000000000000000000000000000000000", (byte)83, false, '0');
      assertEquals("if_icmpeq00000000000000000000000000000000000000000000000000000000000000000000000000", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[8] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readChar();
      byteSequence0.readUnsignedShort();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.signatureToString("V#{/mX%8ea]{U@jf]<V#{.mX%8ea]{U@jf]<", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "pp%|b_g-BM-}7D%E/A", "pp%|b_g-BM-}7D%E/A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@}56Zv#}/d7M-v]Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @}56Zv#}/d7M-v]Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-100);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.close();
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iflt\t\t#-4440", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ifnonnull";
      stringArray0[1] = "ifnonnull";
      stringArray0[2] = "S08LR2eo*f&L*AJ^";
      String string0 = Utility.methodTypeToSignature("ifnonnull", stringArray0);
      assertEquals("(Lifnonnull;Lifnonnull;LS08LR2eo*f&L*AJ^;)Lifnonnull;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lifnonnull;Lifnonnull;LS08LR2eo*f&L*AJ^;)Lifnonnull;", "(Lifnonnull;Lifnonnull;LS08LR2eo*f&L*AJ^;)Lifnonnull;", "ifnonnull", true);
      assertEquals("ifnonnull ifnonnull (Lifnonnull;Lifnonnull;LS08LR2eo*f&L*AJ^;)Lifnonnull;(ifnonnull arg1, ifnonnull arg2, S08LR2eo*f&L*AJ^ arg3)", string1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lneg", string0);
      
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean boolean0 = false;
      Utility.setBit(146, (-27));
      Utility.clearBit((-27), 146);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("\nAnnotation(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Annotation(s):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "Xf";
      try { 
        Utility.typeOfSignature("Xf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.typeOfSignature("BKwj");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("BKwj");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte)8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.setBit(0, 0);
      String string0 = "";
      String string1 = null;
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.searchOpcode("dcmpg");
      Utility.searchOpcode("dcmpg");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "dcmpg";
      ConstantString constantString0 = new ConstantString((short)152);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)29, 1737);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("dup_x1", string0);
      
      String string1 = Utility.compactClassName("z0+A!;0H$}");
      assertEquals("z0+A!;0H$}", string1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[92SxKJkZb0\"{Ti", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `92SxKJkZb0\"{Ti'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lbwp", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lbwp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "F[W";
      // Undeclared exception!
      try { 
        Utility.getSignature("F[W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%18", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$MX8$S$b3$ab$ab$c7", string1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("81{z0b20|G<oHqT/$!", "81{z0b20|G<oHqT/$!", true);
      assertEquals("81{z0b20|G<oHqT.$!", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("StackMap");
      assertEquals((byte)9, byte0);
      
      short short0 = Utility.searchOpcode("athrow");
      assertEquals((short)191, short0);
      
      byte byte1 = Utility.typeOfSignature("FkwUkiQm");
      assertEquals((byte)6, byte1);
      
      String string0 = Utility.compactClassName("qz4Suu *1}", "return", true);
      assertEquals("qz4Suu *1}", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup_x1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",SLWzYv8KA%g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,SLWzYv8KA%g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      String string0 = "(anonymous)";
      boolean boolean1 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(anonymous)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = Utility.classOrInterface((-24));
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString((-24), false);
      assertEquals("static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dmul", string0);
  }
}
