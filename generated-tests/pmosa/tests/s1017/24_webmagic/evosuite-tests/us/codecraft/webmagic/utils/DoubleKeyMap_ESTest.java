/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:13:43 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.get((String) null, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      String string0 = "}/C4NQ7K.Ahnv";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(44);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("}/C4NQ7K.Ahnv", (Map<String, Integer>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, String>>> hashMap0 = new HashMap<String, Map<String, Map<Object, String>>>(0);
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, String>>(hashMap0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("", "", map0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.remove((Object) "us.codecraft.webmagic.utils.MultiKeyMapBase", "us.codecraft.webmagic.utils.MultiKeyMapBase");
      Object object0 = doubleKeyMap0.get((Object) doubleKeyMap0, "?");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove(integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      doubleKeyMap1.get(object0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      doubleKeyMap2.remove((Object) null);
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Map<String, Integer>> map0 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap4 = new DoubleKeyMap<String, String, Integer>(map0);
      doubleKeyMap4.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      Map<Integer, Map<String, String>> map1 = doubleKeyMap3.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap5 = new DoubleKeyMap<Integer, String, String>(map1, class1);
      doubleKeyMap5.put((Integer) null, "us.codecraft.webmagic.utils.MultiKeyMapBase", "");
      Map<Object, Map<Object, Integer>> map2 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap6 = new DoubleKeyMap<Object, Object, Integer>(map2);
      Map<Object, Integer> map3 = doubleKeyMap6.get((Object) null);
      assertNull(map3);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Integer>();
      doubleKeyMap0.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((Integer) null, (Map<Object, String>) hashMap0, (Integer) null);
      HashMap<Map<Object, String>, Integer> hashMap1 = new HashMap<Map<Object, String>, Integer>();
      hashMap1.putIfAbsent(hashMap0, (Integer) null);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove((Integer) null, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, String, Map<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Integer integer0 = new Integer(1247);
      Integer integer1 = new Integer(1247);
      doubleKeyMap0.remove(integer1);
      Integer integer2 = new Integer(1247);
      doubleKeyMap0.put(integer0, integer2, "wrong proto type map ");
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(hashMap0, class1);
      Integer integer3 = new Integer(1247);
      Integer integer4 = new Integer(1247);
      doubleKeyMap0.put(integer3, integer4, (String) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put("wrong proto type map ", (Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Integer>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(map0, "n;E&y~H");
      doubleKeyMap0.put((Integer) null, (Map<Object, String>) hashMap0, (Integer) null);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map1 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove((Integer) null, map1);
      doubleKeyMap1.remove("^xX5K*");
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>();
      doubleKeyMap3.get((Object) class0, "");
      DoubleKeyMap<Object, String, Integer> doubleKeyMap4 = new DoubleKeyMap<Object, String, Integer>((Map<Object, Map<String, Integer>>) null);
      Integer integer2 = new Integer((-4800));
      Integer integer3 = doubleKeyMap4.put((Object) map1, "7mGH@>J$I", integer2);
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<Map<Object, String>, Object> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((Object) map0, "wrong proto type map ", (Object) "wrong proto type map ");
      Object object0 = doubleKeyMap0.get((Object) map0, "wrong proto type map ");
      assertEquals("wrong proto type map ", object0);
  }
}
