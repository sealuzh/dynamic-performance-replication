/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:48:31 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.replace("v~WSpr{m", "v~WSpr{m", "v~WSpr{m");
      assertEquals("v~WSpr{m", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte) (-35);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-95), (byte)14);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString((-3526));
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2), (int) (byte)69);
      assertEquals("0:    dload_1\n1:    if_icmplt\t\t#-13433\n4:    dconst_0\n5:    astore_2\n6:    fload_3\n7:    fstore_2\n8:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-641);
      Utility.accessToString((-641), true);
      Utility.isJavaIdentifierPart('+');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byte byte0 = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)90;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.clearBit(2721, (-406));
      String string0 = "Tx\"s+U+zL3AE;#Y";
      Utility.signatureToString("Tx\"s+U+zL3AE;#Y", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('M');
      int int0 = (-3822);
      Utility.classOrInterface((-3822));
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "m";
      Utility.replace("SAME_EXTENDED", "vuK/o&i5|#z", "m");
      Utility.classOrInterface((-2863));
      Utility.accessToString((-2863));
      Utility.replace("public final volatile transient abstract synthetic annotation enum", "SAME_EXTENDED", "S");
      Utility.searchOpcode("public final volatile transient abstract synthetic annotation enum");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-121);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1711), (int) (byte) (-127));
      try { 
        Utility.methodSignatureArgumentTypes("SAME_EXTENDED");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_EXTENDED
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.convertString("'1d&8a8'");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)39;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(1538.3612672960478);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-128), (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    daload
         // 1:    ior
         // 2:    iconst_3
         // 3:    goto\t\t#-32036
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.format(111, 41, false, '8');
      Utility.fillup("88888888888888888888888888888888888888111", (-3087), false, '8');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-124);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1262, (byte) (-124));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-593));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B73=$w'iUO?");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("invokevirtual");
      assertEquals("invokevirtual", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)104;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-52), (int) (byte) (-52), false);
      assertEquals("0:    <illegal opcode>\n1:    f2i\n2:    lload\t\t%235\n4:    imul\n", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.format((-1644), 6, true, 'p');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-86);
      byteArray0[0] = (byte) (-26);
      byteArray0[4] = (byte)114;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-15);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (byte) (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.replace("impdep1", "impdep1", (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 303, (int) (byte) (-57), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-93);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-866), (-381));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      Constant constant0 = constantMethodref0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-258), 1737);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lxor
         // 1:    ifnonnull\t\t#21265
         // 4:    d2f
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "=";
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.compactClassName("_SOS={4kC7 ", false);
      Utility.searchOpcode("_SOS={4kC7 ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)61, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.convertString("(62;J@s'*iS-g");
      Utility.fillup("6ToDT_TH.c+J!", (-587), false, '\'');
      Utility.format((-587), (-587), false, '\'');
      Utility.compactClassName("&G*Ur;M$xC!");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte)104;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ";$";
      Utility.searchOpcode(";$");
      boolean boolean0 = true;
      try { 
        Utility.decode(";$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.getSignature("invokestatic");
      Utility.printArray((Object[]) null, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-99);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)49);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 98, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{java.lang.Object@5559b51b, java.lang.Object@4730f6d5, java.lang.Object@5aae51c, java.lang.Object@58a3b929}";
      stringArray0[1] = "java.lang.";
      stringArray0[2] = "0xC";
      Utility.methodTypeToSignature("0xC", stringArray0);
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)5;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-87), true);
      assertEquals("0:    aload_0\n1:    d2l\n2:    ret\t\t%148\n4:    <illegal opcode>\n5:    dstore_3\n6:    fstore_0\n7:    iconst_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "fadd", 171, (int) (byte) (-62));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_acmpeq\t\t#11971", string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("uZ[&M\"UTB", "uZ[&M\"UTB", "invokedynamic");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "uZ[&M\"UTB";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)88;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1277, (int) (byte) (-30), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16230. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-126);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.getSignature("if_acmpne");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-102);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte)99, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dadd
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.getSignature("SUUEuvv,6sn3dcx");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "SUUEuvv,6sn3dcx";
      objectArray0[1] = (Object) "LSUUEuvv,6sn3dcx;";
      objectArray0[2] = (Object) "SUUEuvv,6sn3dcx";
      objectArray0[3] = (Object) "SUUEuvv,6sn3dcx";
      objectArray0[4] = (Object) "LSUUEuvv,6sn3dcx;";
      objectArray0[5] = (Object) "LSUUEuvv,6sn3dcx;";
      Utility.printArray(objectArray0, true, true);
      Utility.classOrInterface((-2830));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)91;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-834), (-1745));
      assertEquals("0:    iadd\n1:    istore_1\n2:    dup_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("McK", false);
      Utility.fillup("Sz|R?6_?x}p^", (-1572), false, '(');
      Utility.compactClassName("McK", false);
      String string0 = Utility.methodSignatureReturnType("Sz|R?6_?x}p^", false);
      assertEquals("short", string0);
      
      String string1 = Utility.getSignature("short");
      assertEquals("S", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-49);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-97), (int) (byte)91, false);
      assertEquals("0:    iconst_5\n1:    if_icmpeq\t\t#-24740\n4:    dconst_1\n5:    monitorenter\n6:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\t\t#";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.classOrInterface((-194));
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("org.apache.bcel.classfile.Method");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 90, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2151, (int) (byte) (-115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1647), (int) (byte)112, false);
      assertEquals("0:    irem\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.convertString("b{y#ODu}X4v,");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)24;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)75, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("lRQBN]&5O`y", (String[]) null);
      assertEquals("()LlRQBN]&5O`y;", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string1 = Utility.methodSignatureToString("()LlRQBN]&5O`y;", "drem", "N`%_gh$();^a)m7.w");
      assertEquals("N`%_gh$();^a)m7.w lRQBN]&5O`y drem()", string1);
      
      String string2 = Utility.fillup("lRQBN]&5O`y", 835, false, ':');
      assertEqualslRQBN]&5O`y", string2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&nx59#:qA`#%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &nx59#:qA`#%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.format(34, 116, true, 'D');
      Utility.convertString("34DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "34DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      objectArray0[1] = (Object) "34DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      objectArray0[2] = (Object) "34DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      objectArray0[3] = (Object) "34DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)84;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 116, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.accessToString(121, false);
      Utility.replace("\\", "public static final synchronized volatile", "public static final synchronized volatile");
      String string0 = "U";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117), false);
      String string0 = "areturn";
      boolean boolean0 = false;
      int int0 = 1798;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -16
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = ".\\cE5S";
      try { 
        Utility.typeOfSignature(".cE5S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .cE5S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.isSet((-1437), (-1437));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 63, 55, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      Utility.accessToString(181, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-77);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public protected final synchronized transient");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-77), 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37436. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d");
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("{null}", "D $7ZW:>T", "Lclass;V");
      Utility.setBit(73, 73);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.fillup("U$'tvO,wr/]Xzz8{", (byte)3, false, '|');
      Utility.isSet((byte)3, 255);
      try { 
        Utility.typeOfSignature("!|-BO4~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |-BO4~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (int) (byte) (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.signatureToString("Jv:<)j9 bNKLka");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-84);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('Q');
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("1)>,?&*[bBi ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1)>,?&*[bBi 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.accessToString(13, false);
      Utility.getSignature("RFg~Ko|]f+wzK~? o");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "57jwB!o}8\"MZY";
      try { 
        Utility.typeOfSignature("57jwB!o}8\"MZY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 57jwB!o}8\"MZY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "O+";
      try { 
        Utility.typeOfSignature("O+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)92;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",OeN");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4004, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-868);
      Utility.isSet(0, (-868));
      String string0 = "d(WLc$3YjE:<";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("d(WLc$3YjE:<", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3Y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)88;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3428), 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2c
         // 1:    fstore\t\t%61
         // 3:    jsr\t\t#14868
         // 6:    bastore
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.decode("$\"Xm{K*e+w9 of4wF", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)32;
      byte byte0 = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)4;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      constantMethodref0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), 1362);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ixor
         // 1:    dload\t\t%32
         // 3:    wide\t(wide)
         // 4:    iload_3
         // 5:    monitorexit
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(190);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2459, 83);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, 1172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit((-1307), 190);
      Utility.isJavaIdentifierPart(')');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2246), 91);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.convertString("\nException handler(s) = \n");
      Utility.accessToString(1915, true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)74;
      byteArray0[0] = (byte)74;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodType constantMethodType0 = null;
      try {
        constantMethodType0 = new ConstantMethodType(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('\\');
      Utility.getSignature("kBI<Z");
      Utility.replace("-$x!a-X720T", "\"", ">\t");
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfSignature("61`eJNkr]RkA|HZn)-5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 61`eJNkr]RkA|HZn)-5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      String string0 = "org.apache.bcel.classfile.Utility";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility");
      try { 
        Utility.typeOfSignature(";rA~V~;7L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;rA~V~;7L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.format((-1644), 6, true, 'm');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-15);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, (int) (byte) (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray1 = Utility.decode(".#LLNe'n$d2rSA<", false);
      Utility.toHexString(byteArray1);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-75);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      byteArray2[1] = (byte) (-45);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((-2190.069756));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-45), (byte) (-75));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantDouble0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte) (-75), (int) (byte) (-75), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 3534, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.compactClassName("@=y*@JX/j");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@=y*@JX.j");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]wh");
      int int0 = 51;
      Utility.accessToString(51);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("No~\fH^W7m*6z ", stringArray0);
      Utility.format((-2110), (-1), false, 'V');
      Utility.typeOfMethodSignature("()LNo~\fH^W7m*6z;");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.replace("(~xu.", "(~xu.", "(~xu.");
      assertEquals("(~xu.", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)66;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 160);
      assertEquals("0:    iload_3\n1:    l2f\n2:    lcmp\n3:    astore_3\n4:    d2f\n5:    iconst_5\n6:    impdep2\n7:    lstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte) (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "L<;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(1885, 1885, false, '`');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1885, 1885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (int) (byte) (-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "Exceptions";
      try { 
        Utility.typeOfSignature("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exceptions
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-4395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)11, (byte)11);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_3", string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-15), (-2237), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11584. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2171, false);
      assertEquals("0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[1] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[2] = "s01SE";
      stringArray0[3] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[4] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[5] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[6] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      stringArray0[7] = "0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n";
      String string1 = Utility.methodTypeToSignature("0:    dneg\n1:    aconst_null\n2:    aconst_null\n3:    nop\n4:    lreturn\n5:    faload\n6:    nop\n", stringArray0);
      assertEquals("(L0:;L0:;Ls01SE;L0:;L0:;L0:;L0:;L0:;)L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.format(70, 70, true, 'H');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20458. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)117;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Kq,q-rv");
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte) (-88);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)41, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.replace("DE", "fbByC==[", "DE");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-43);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "DE";
      objectArray0[1] = (Object) "86 d5";
      objectArray0[2] = (Object) "fbByC==[";
      objectArray0[3] = (Object) "86 d5";
      objectArray0[4] = (Object) "fbByC==[";
      objectArray0[5] = (Object) "fbByC==[";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.setBit((byte) (-122), (-2269));
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-43), 9);
      Utility.printArray((Object[]) null);
      Utility.toHexString(byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-25);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-25));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(", ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 396, (int) (byte)91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.replace("org.apache.bcel.generic.type", "if_icmplt", "\t\t%");
      assertEquals("org.apache.bcel.generic.type", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)16;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)54, false);
      assertEquals("0:    <illegal opcode>\n1:    faload\n2:    dreturn\n3:    ior\n4:    istore\t\t%16\n", string1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("yefQ ?CI&@\"DY=@YM");
      mockPrintStream0.append('_');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "\t\t%";
      objectArray0[1] = (Object) "org.apache.bcel.generic.type";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.lookup(linkedList0, list0);
      mockPrintStream0.format((Locale) null, "Invalid signature: ", objectArray0);
      objectArray0[2] = (Object) "\t\t%";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      boolean boolean0 = Utility.isSet((byte)54, (byte) (-26));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<illegal o";
      stringArray0[1] = "<illegal o";
      stringArray0[2] = "<illegal o";
      stringArray0[3] = "<illegal o";
      stringArray0[4] = "<illegal o";
      stringArray0[5] = "<illegal o";
      stringArray0[6] = "<illegal o";
      stringArray0[7] = "<illegal o";
      Utility.methodTypeToSignature("<illegal o", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)80;
      ConstantPool constantPool0 = null;
      int int0 = 228;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 228, 108, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "irem");
      String string0 = Utility.compactClassName("frA Q2(EZ7qgg", "frA Q2(EZ7qgg", true);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("Types");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.replace("if_icmpeq", ")@NOGq|6u_htAP", "if_icmpeq");
      assertEquals("if_icmpeq", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "4:lfadj`d5\\&~FXb";
      boolean boolean0 = true;
      Utility.compactClassName("4:lfadj`d5&~FXb", "4:lfadj`d5&~FXb", true);
      String string1 = "-hSjnQB9i2i[Uv%~$d";
      try { 
        Utility.typeOfSignature("-hSjnQB9i2i[Uv%~$d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -hSjnQB9i2i[Uv%~$d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("org.apache.bcel.classfile.Field$1", false);
      Utility.isJavaIdentifierPart('Z');
      try { 
        Utility.decode("org.apache.bcel.classfile.Field$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("java.lang.", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)101;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.typeOfSignature("DnC[M(Q}cx9IkW.-");
      String string0 = null;
      String string1 = "T]*xkM=T'@1}/qVZ";
      boolean boolean0 = true;
      LocalVariable[] localVariableArray0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.accessToString(180, false);
      assertEquals("protected final synchronized transient", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(255);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dreturn", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$kwm&X<\"jnv7b|k*]");
      Utility.searchOpcode("Z<'0{]FlkC>");
      short short0 = Utility.searchOpcode("Z<'0{]FlkC>");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("Z<'0{]FlkC>");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isSet(16, 8);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z<'0{]FlkC>";
      stringArray0[1] = "Z<'0{]FlkC>";
      stringArray0[2] = "Z<'0{]FlkC>";
      stringArray0[3] = "Z<'0{]FlkC>";
      String string0 = Utility.methodTypeToSignature("Z<'0{]FlkC>", stringArray0);
      assertEquals("(LZ<'0{]FlkC>;LZ<'0{]FlkC>;LZ<'0{]FlkC>;LZ<'0{]FlkC>;)LZ<'0{]FlkC>;", string0);
      
      String string1 = Utility.compactClassName("\t\t%", "?n5J6i!z", false);
      assertEquals("\t\t%", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "4oub4b\"-0n&.}Nug";
      try { 
        Utility.typeOfSignature("4oub4b\"-0n&.}Nug");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4oub4b\"-0n&.}Nug
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.format(2980, 2980, true, 'L');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(46, 48);
      Utility.clearBit(2980, 2980);
      Utility.clearBit(46, (-1486));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-57);
      Utility.encode(byteArray0, true);
      Utility.replace("org.apache.bcel.generic.Type", "(", "b]5Au=[");
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.accessToString(2980);
      Utility.searchOpcode("org.apache.bcel.generic.Type");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4062), 2059);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "long";
      Utility.compactClassName("long");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2959), 6279, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 2171, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)124;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1482, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "dQ";
      Utility.replace("dQ", "dQ", "dQ");
      byte[] byteArray0 = Utility.decode("int", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "dQ";
      objectArray0[1] = (Object) "dQ";
      objectArray0[2] = (Object) "int";
      Utility.printArray(objectArray0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      int int0 = 27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, 27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1127;
      boolean boolean0 = true;
      Utility.fillup("", 1127, true, 'M');
      byte[] byteArray0 = Utility.decode("f2l", false);
      Utility.compactClassName("f2l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      int int1 = 48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1127, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-82);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("P7|y.rh5AfR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P7|y.rh5AfR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Character";
      stringArray0[1] = "y(.<<98Fcx";
      stringArray0[2] = "y(.<<98Fcx";
      stringArray0[3] = "y(.<<98Fcx";
      stringArray0[4] = "y(.<<98Fcx";
      stringArray0[5] = "y(.<<98Fcx";
      Utility.methodTypeToSignature("y(.<<98Fcx", stringArray0);
      Utility.fillup("java.lang.Character", (-1177), false, '{');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)124;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(501, (-2297));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(441, 103);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, (-2089), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.fillup("monitorexit", 1054, false, 'C');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ior";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "long";
      stringArray0[3] = "monitorexit";
      stringArray0[4] = "monitorexit";
      stringArray0[5] = "long";
      stringArray0[6] = "0L_/tc5n2MyQ8MEx";
      Utility.methodTypeToSignature("long", stringArray0);
      Utility.methodSignatureToString("(Lior;Linvokedynamic;JLmonitorexit;Lmonitorexit;JL0L_/tc5n2MyQ8MEx;)J", "invokedynamic", "?uy:R", true);
      Utility.methodTypeToSignature("invokedynamic", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The FileFilter must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The FileFilter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("tv$W@<o?NJ>zPI", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 101, 101, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte) (-33);
      byteArray0[2] = (byte) (-33);
      byte byte3 = (byte)95;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)91;
      byteArray0[5] = (byte)91;
      byte byte5 = (byte)82;
      byteArray0[6] = (byte)82;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, 4934);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-64);
      byte byte1 = (byte)102;
      byteArray0[3] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)71;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("M]1:2nsLs\"yg`O%lj");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 186, (int) (byte)117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15477. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-123);
      byte byte0 = (byte)22;
      byteArray0[2] = (byte)22;
      byte byte1 = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)122;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-111), (int) (byte)6);
      String string0 = "<";
      // Undeclared exception!
      try { 
        Utility.signatureToString("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte) (-75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byte byte0 = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byte byte1 = (byte)120;
      byteArray0[2] = (byte)120;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (-5102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LpV3D0%SK");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)14;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"^-j6hA%=,11TEVP\",");
      try { 
        Utility.typeOfSignature("\"^-j6hA%=,11TEVP\",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"^-j6hA%=,11TEVP\",
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8z:w_=i536VtC![]d";
      stringArray0[1] = "8z:w_=i536VtC![]d";
      stringArray0[2] = "8z:w_=i536VtC![]d";
      stringArray0[3] = "8z:w_=i536VtC![]d";
      stringArray0[4] = "8z:w_=i536VtC![]d";
      Utility.methodTypeToSignature("8z:w_=i536VtC![]d", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      Utility.equals(byteArray0, byteArray1);
      Utility.printArray((Object[]) stringArray0, true);
      Utility.printArray((Object[]) stringArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)35;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2285), (-2099));
      assertEquals("0:    bipush\t\t78\n2:    fstore_2\n3:    fload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "RuntimeVisibleParameterAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)42;
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "+W";
      try { 
        Utility.typeOfSignature("+W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-56), (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore\t\t%168
         // 2:    aload_3
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.getSignature("? extends ");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "? extends ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "? extends ";
      objectArray0[4] = (Object) "L?;";
      objectArray0[5] = (Object) "L?;";
      objectArray0[6] = (Object) "? extends ";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)36;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("0X1RSJ$|hfU9Fx6b5*c", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.convertString("checkcast");
      Utility.accessToString(71);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)115;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("drem", "goto_w", "checkcast", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: drem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)89);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-64));
      assertEquals("volatile transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.fillup("Deprecated", 1450, false, 'L');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-112);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface(237);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 832);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.getSignature("u'rheE,86n7");
      Utility.replace("", "u'rheE,86n7", "Lu'rheE,86n7;");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 320, (-2368), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 2234;
      Utility.setBit(16384, 2234);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-3061));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.isJavaIdentifierPart('E');
      Utility.format(55, (-2541), true, 'E');
      Utility.compactClassName("nLW", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, 55, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)86, 13);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3275, 323);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(dataInputStream0);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      constantArray0[3] = (Constant) constantInvokeDynamic2;
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[4] = constant0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1508, (byte) (-55));
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1784.36F));
      constantArray0[6] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic3 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      constantArray0[7] = (Constant) constantInvokeDynamic3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "qg9Z4punTgg%2\"l";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qg9Z4punTgg%2\"l");
      try { 
        Utility.typeOfSignature("G*&K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G*&K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-24);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 18, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.convertString("invokedynamic");
      try { 
        Utility.typeOfSignature("*fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byte byte0 = (byte)61;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-647), 1033);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.searchOpcode("getstatic");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "getstatic";
      objectArray0[1] = (Object) "getstatic";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.setBit((short)178, (short)178);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "MLDlZf%Mtx";
      try { 
        Utility.typeOfSignature("MLDlZf%Mtx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MLDlZf%Mtx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)4;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), 1362);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lcmp
         // 1:    dload\t\t%32
         // 3:    wide\t(wide)
         // 4:    iload_3
         // 5:    monitorexit
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.typeOfSignature("[y IE%K+");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "[y IE%K+";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "[y IE%K+";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jUX-;uo~`nll/]g(";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "long";
      stringArray0[4] = "\t\t<";
      stringArray0[5] = "\t\t<";
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      Utility.clearBit(1759, 117);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte)123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-66), 603);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "3G#&(H'|-";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3G#&(H'|-");
      int int0 = 73;
      Utility.accessToString(73);
      int int1 = 65;
      Utility.accessToString(65);
      int int2 = 64;
      Utility.accessToString(64);
      String string1 = "Yi!6N#aj";
      try { 
        Utility.methodSignatureReturnType("Yi!6N#aj", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yi!6N#aj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byte byte1 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-46);
      byte byte2 = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format((byte)0, (byte) (-46), false, 'y');
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      String string0 = "Z$[5oE?Sd5p!eno;K";
      Utility.methodSignatureReturnType("Z$[5oE?Sd5p!eno;K");
      int int0 = 71;
      Utility.classOrInterface(71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        byteSequence0.readFully(byteArray0, (-518), 89);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)34;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-844), (-298), true);
      assertEquals("0:    aload_1\n1:    iflt\t\t#-17643\n4:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-56);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFloat constantFloat0 = new ConstantFloat(134.1F);
      constantPool0.constantToString((Constant) constantFloat0);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (-481), (-481), true);
      Utility.printArray((Object[]) null);
      Utility.setBit(18, (-667));
      try { 
        Utility.methodSignatureReturnType("0:    fdiv\n1:    sipush\t\t-25912\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fdiv
         // 1:    sipush\t\t-25912
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-15);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, (int) (byte) (-39), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid", "{java.lang.Object@1ac71337, java.lang.Object@7cf2be19, java.lang.Object@79a16289, java.lang.Object@65fa5be5, java.lang.Object@4786b2c6, java.lang.Object@2eedde59, java.lang.Object@5caa5427, java.lang.Object@6bb80924}", "dload\t\t%48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)125;
      byteArray0[8] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WJ9fhS;t3j-0xF\"^5~6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      mockPrintWriter0.append((CharSequence) "WJ9fhS;t3j-0xF\"^5~6");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "<");
      mockPrintWriter0.println((-1588.7188F));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Only element values of type annotation can be built with this ctor - type specified: ");
      Utility.accessToString((-354));
      try { 
        Utility.methodSignatureReturnType("WJ9fhS;t3j-0xF\"^5~6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WJ9fhS;t3j-0xF\"^5~6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.methodTypeToSignature("if_icmpgt", (String[]) null);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      String string0 = "Signature";
      Utility.typeOfSignature("Signature");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.clearBit((-5039), (-5039));
      Utility.compactClassName("BootstrapMethods(");
      Utility.isSet((-1584), (-5039));
      Utility.getSignature("impdep2");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-51);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1584), (-1027));
      Utility.compactClassName("0:    iload_2\n1:    <illegal opcode>\n2:    newarray\t\t<object>\n4:    dup2\n5:    <illegal opcode>\n6:    frem\n7:    <illegal opcode>\n", "if_icmplt", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Limpdep2;";
      objectArray0[1] = (Object) (byte) (-21);
      objectArray0[2] = (Object) (byte) (-68);
      objectArray0[3] = (Object) "if_icmplt";
      objectArray0[4] = (Object) "Limpdep2;";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Limpdep2;", "Gb@Y2{", "impdep2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Limpdep2;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-21);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-15), (-549), false);
      assertEquals("0:    lstore_3\n1:    astore_1\n2:    <illegal opcode>\n3:    if_acmpne\t\t#-3759\n6:    jsr\t\t#7409\n", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 738, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.searchOpcode("getstatic");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "getstatic";
      objectArray0[1] = (Object) "getstatic";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, false);
      Utility.setBit((short)178, (short)178);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.searchOpcode("SimpleElementValue doesnt know how to write out type ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte)71, false);
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("b", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.fillup("Q", (-1429), true, '{');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.replace("PMGClass", "PMGClass", "PMGClass");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)7;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("PMGClass");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 39, (int) (byte)80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.replace("java.lang.?v", "java.lang.?v", "Invalid method signature: ");
      boolean boolean0 = true;
      char char0 = 'Y';
      Utility.format(80, 80, true, 'Y');
      Utility.typeOfSignature("F923<ZMe\"a_Yr$");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 291, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = object1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lpublic;V");
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("java.lang.Object@565c5095, java.lang.Object@1ffc7b85");
      Utility.compactClassName("Lpublic;V", "jUnQ8", true);
      Utility.classOrInterface(1501);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9HfH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9HfH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)111;
      byteArray1[7] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.equals(byteArray1, byteArray1);
      Utility.accessToString((int) (byte)75);
      Utility.clearBit((byte) (-78), (byte)111);
      try { 
        Utility.typeOfSignature("XoS)RHS6UR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XoS)RHS6UR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.compactClassName("'!");
      assertEquals("'!", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)27;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-22), 680);
      assertEquals("0:    <illegal opcode>\n1:    impdep1\n2:    faload\n3:    iload_1\n4:    iconst_m1\n5:    iload_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ", class=<unknown>";
      try { 
        Utility.typeOfSignature(", class=<unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , class=<unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "Rm";
      Utility.fillup("Rm", (-1910), false, '3');
      Utility.getSignature("Rm");
      try { 
        Utility.methodSignatureReturnType("Rm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!+m(>#^=[F2)_8'[:";
      stringArray0[1] = "!+m(>#^=[F2)_8'[:";
      stringArray0[2] = "!+m(>#^=[F2)_8'[:";
      stringArray0[3] = "!+m(>#^=[F2)_8'[:";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("!+m(>#^=[F2)_8'[:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[F2)_8'[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)92;
      ConstantPool constantPool0 = null;
      String string0 = ",OeN";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",OeN");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4004, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "CONSTANT_InvokeDynamic";
      Utility.typeOfSignature("CONSTANT_InvokeDynamic");
      Utility.isSet(187, 187);
      String string1 = "<V";
      try { 
        Utility.typeOfMethodSignature("<V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(739);
      try { 
        Utility.typeOfSignature("8w4pL6 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8w4pL6 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Bogus";
      Utility.typeOfSignature("Bogus");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.convertString("o9)/!]");
      assertEquals("o9)/!]", string0);
      
      String string1 = Utility.accessToString(40, false);
      assertEquals("static synchronized", string1);
      
      String string2 = Utility.signatureToString("Code", false);
      assertEquals("char", string2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.typeOfSignature("Illegally nested brackets:");
      Utility.searchOpcode("?>...");
      Utility.compactClassName("?>...", true);
      try { 
        Utility.typeOfMethodSignature("return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[tqs@{&,x+A,q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tqs@{&,x+A,q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = Utility.compactClassName("EoE,tm@`L", false);
      assertEquals("EoE,tm@`L", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(123);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.classOrInterface(7);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)21;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)21;
      Utility.equals(byteArray0, byteArray1);
      Utility.clearBit((byte)49, 7);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(7, 2290);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)21, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("\"r?`3~|", "Sqa;(;(y~\"kP{WY8", "\"r?`3~|");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "invokestatic", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "O!7P8y\"-VVW";
      try { 
        Utility.methodSignatureReturnType("O!7P8y\"-VVW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O!7P8y\"-VVW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-43);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 210, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfSignature("2]Rjt)OXWhvsaS(Nu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2]Rjt)OXWhvsaS(Nu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RHE^=k!", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString(108, true);
      assertEquals("protected static volatile", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)82, (byte)72, (byte)69, (byte)127, (byte)94, (byte)61, (byte)107, (byte)33}, byteArray0);
      
      String string1 = Utility.getSignature("dastore");
      assertEquals("Ldastore;", string1);
      
      Utility.replace("?im~mQ&E3PSj", "7z@ag.iB|G/{c&TH2c", "RHE^=k!");
      String string2 = Utility.fillup("Illegally nested brackets:", 108, true, '3');
      assertEquals("Illegally nested brackets:3333333333333333333333333333333333333333333333333333333333333333333333333333333333", string2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-102);
      Utility.toHexString(byteArray0);
      Utility.convertString("java.lang.Linvokevirtual;V");
      ConstantPool constantPool0 = null;
      int int0 = 137;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 137, 150);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, (int) (byte) (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = Utility.clearBit((-5039), (-5039));
      assertEquals((-136111), int0);
      
      String string0 = Utility.compactClassName("BootstrapMethods(");
      assertEquals("BootstrapMethods(", string0);
      
      Utility.isSet((-1584), (-5039));
      String string1 = Utility.getSignature("impdep2");
      assertEquals("Limpdep2;", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-51);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1584), (-1027));
      assertEquals("0:    iload_2\n1:    <illegal opcode>\n2:    newarray\t\t<object>\n4:    frem\n5:    <illegal opcode>\n6:    frem\n7:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_icmpge");
      constantArray0[0] = (Constant) constantUtf8_0;
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[1] = constant0;
      ConstantClass constantClass0 = new ConstantClass(34);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpge");
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "MCCMJdiix";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MCCMJdiix", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MCCMJdiix'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("?vScH=7rr-/7zVb`(m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?vScH=7rr-/7zVb`(m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T#,1VV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T#,1VV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.convertString("iw&R7^S]Iju7Yj5.F\"");
      Utility.isJavaIdentifierPart('#');
      try { 
        Utility.methodSignatureArgumentTypes("iw&R7^S]Iju7Yj5.F\\\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iw&R7^S]Iju7Yj5.F\\\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("X4<SBg*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X4<SBg*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "$']uQ1I!Z\"zcm`";
      try { 
        Utility.typeOfSignature("$']uQ1I!Z\"zcm`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $']uQ1I!Z\"zcm`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "KC1za %]3Q<u";
      try { 
        Utility.typeOfSignature("KC1za %]3Q<u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KC1za %]3Q<u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.getSignature("jsr_w");
      int int0 = 200;
      boolean boolean0 = false;
      Utility.accessToString(200, false);
      byte[] byteArray0 = null;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.replace(" l\"P~4dj\"+{", " l\"P~4dj\"+{", "?>...");
      Utility.accessToString((-641), true);
      Utility.isJavaIdentifierPart('+');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)90;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)83, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("V");
      try { 
        Utility.methodSignatureReturnType("^Y8}/]n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^Y8}/]n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.replace("|Z", "putstatic", (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)34;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("|Z");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)61);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)63, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-2174), 67, false, '+');
      byte[] byteArray0 = Utility.decode("FRtlVSC(]QJtOit$Ow", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("^d^Eow10", (-1210), false, 'o');
      Utility.accessToString((-894), false);
      Utility.convertString("FRtlVSC(]QJtOit$Ow");
      Utility.accessToString((-894), false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("95");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "FRtlVSC(]QJtOit$Ow";
      objectArray0[2] = (Object) "private transient abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-2174";
      objectArray0[4] = (Object) "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-2174";
      objectArray0[5] = (Object) "private transient abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) "private transient abstract strictfp synthetic annotation enum";
      objectArray0[7] = (Object) "^d^Eow10";
      objectArray0[8] = (Object) "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-2174";
      PrintWriter printWriter0 = mockPrintWriter0.printf("^d^Eow10", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.signatureToString("Synthetic");
      int int0 = (-497);
      boolean boolean0 = false;
      Utility.accessToString((-497), false);
      try { 
        Utility.methodSignatureArgumentTypes("Synthetic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Synthetic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature(">\t", stringArray0);
      try { 
        Utility.typeOfSignature("()L>;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()L>;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)4;
      byte byte0 = (byte)25;
      byteArray0[8] = (byte)25;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)4, (-4597), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 32789. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(52, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "protected final synchronized";
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("Yac/P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yac/P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@Jx2N](^A&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @Jx2N](^A&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short short0 = Utility.searchOpcode("Illegal type: ");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodSignatureReturnType("Double");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("46", string0);
      
      String string1 = Utility.methodSignatureReturnType("J[ag9SA_H|=d0%_P3", true);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.getSignature("boolean");
      try { 
        Utility.methodSignatureReturnType("{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "E'Y";
      try { 
        Utility.methodSignatureReturnType("E'Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.methodSignatureReturnType("V", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "?d?~zBwP1z", "V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-43);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 210, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.compactClassName("{EY(WI_HM8S", "$AO`OEHg*y>", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-24);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.printArray((Object[]) null);
      Utility.printArray((Object[]) null, true, true);
      Utility.setBit((-2482), (-2482));
      Utility.format((-2482), (-2482), true, '_');
      Utility.accessToString((-2482), true);
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.setBit(91, (-154));
      String string0 = "Hd,A_[]j6B";
      try { 
        Utility.typeOfSignature("Hd,A_[]j6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hd,A_[]j6B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "java.lang.";
      Utility.replace("java.lang.", "java.lang.", "java.lang.");
      String string1 = "NWji4";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NWji4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NWji4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = Utility.compactClassName("3uby");
      assertEquals("3uby", string0);
      
      int int0 = Utility.clearBit(245, 245);
      assertEquals(245, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-14);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-21);
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)113;
      byteArray1[4] = (byte)111;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "LM~:Bd V3";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("LM~:Bd V3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LM~:Bd V3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3346), (-52));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = (-750);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-750), 244);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Q!j";
      try { 
        Utility.typeOfSignature("Q!j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q!j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.compactClassName("b.#Zp2{:lv(&u[iy>EC", ")S]]j1X;", false);
      assertEquals("b.#Zp2{:lv(&u[iy>EC", string0);
      
      int int0 = Utility.clearBit((-1137), 175);
      assertEquals((-33905), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aaload", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(GHqkcRLk|vS`g", "ifle", "ifle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GHqkcRLk|vS`g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte) (-35), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hn7F0FI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hn7F0FI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Unreachable");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Unreachable", objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) mockPrintStream0;
      mockPrintStream0.println((-1301L));
      objectArray1[1] = (Object) "Unreachable";
      objectArray1[2] = (Object) locale0;
      objectArray1[3] = (Object) mockPrintStream0;
      objectArray1[4] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray1);
      Utility.replace("goto_w", "<illegal opcode>", "Unreachable");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "breakpoint");
      Utility.replace("Q(?}H3S&", "goto_w", "F5:!P");
      Utility.replace("J4$f1STE]Oi", "J4$f1STE]Oi", "F5:!P");
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)119;
      Utility.toHexString(byteArray0);
      Utility.isSet((byte)119, (byte)117);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "The wildcard list must not be null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The wildcard list must not be null");
      byteArray0[1] = (byte)92;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)90;
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", stringArray0);
      String string1 = "";
      Utility.replace("(L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;)L$l$8b$I$A$A$A$A$A$A$A;", "(L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;)L$l$8b$I$A$A$A$A$A$A$A;", "");
      Utility.methodSignatureArgumentTypes("(L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;)L$l$8b$I$A$A$A$A$A$A$A;", true);
      try { 
        Utility.decode(",bvkEJYcM|75a6 ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-20);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-380), 48);
      assertEquals("0:    lstore_2\n1:    land\n2:    lload_1\n3:    nop\n4:    astore_0\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "JTU";
      Utility.typeOfSignature("JTU");
      boolean boolean0 = false;
      Utility.format((byte)11, 53, false, 'G');
      int int0 = 51;
      Utility.accessToString(51);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      Constant[] constantArray0 = new Constant[5];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "void";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
      
      String string0 = Utility.replace("~|e4?lCA", "~|e4?lCA", "c]$jv*t)}KX");
      assertEquals("c]$jv*t)}KX", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~|e4?lCA";
      stringArray0[1] = "c]$jv*t)}KX";
      stringArray0[2] = "';XyjhlN6\"+$c:B(i@?";
      String string1 = Utility.methodTypeToSignature("';XyjhlN6\"+$c:B(i@?", stringArray0);
      assertEquals("(L~|e4?lCA;Lc]$jv*t)}KX;L';XyjhlN6\"+$c:B(i@?;)L';XyjhlN6\"+$c:B(i@?;", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)37;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("ee b7 67 25", string2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "(08-Dp";
      try { 
        Utility.methodSignatureArgumentTypes("(08-Dp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `08-Dp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-33);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.accessToString((-3412), true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8}XE#^BST,K//\"G[Qh*", "8i(DjB;", "monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8}XE#^BST,K//\"G[Qh*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "newInvokeSpecial";
      boolean boolean0 = true;
      Utility.compactClassName("newInvokeSpecial", "newInvokeSpecial", true);
      int int0 = (-339);
      Utility.accessToString((-339), true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)45;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$Al$82$94$A$i$z", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short short0 = Utility.searchOpcode("monitorenter");
      assertEquals((short)194, short0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Bg@m'Bx*m+}C", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.clearBit((-2305), 36);
      Utility.classOrInterface((-720));
      String string0 = "rV";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}#)", "class", "rV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }#)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.searchOpcode("float");
      MockFile mockFile0 = new MockFile("org.apache.bcel.classfile.Utility$1");
      MockFile mockFile1 = new MockFile(mockFile0, "float");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf("float", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "float";
      objectArray1[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "float";
      Object object1 = new Object();
      objectArray1[4] = object1;
      objectArray1[5] = (Object) "float";
      Utility.printArray(printStream0, objectArray1);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = Utility.clearBit(92, 92);
      assertEquals(92, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("CUhVyVCA'?s*ycql");
      assertEquals("CUhVyVCA'?s*ycql", string0);
      
      Utility.accessToString(92);
      String string1 = Utility.accessToString(1159);
      assertEquals("public private protected transient abstract", string1);
      
      Utility.compactClassName("impdep2");
      String string2 = Utility.convertString("lookupswitch");
      assertEquals("lookupswitch", string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "impdep2";
      objectArray0[1] = (Object) "impdep2";
      objectArray0[2] = (Object) "CUhVyVCA'?s*ycql";
      objectArray0[3] = (Object) "CUhVyVCA'?s*ycql";
      objectArray0[4] = (Object) "public private protected transient abstract";
      objectArray0[5] = (Object) "impdep2";
      objectArray0[6] = (Object) "lookupswitch";
      objectArray0[7] = (Object) "CUhVyVCA'?s*ycql";
      objectArray0[8] = (Object) "impdep2";
      String string3 = Utility.printArray(objectArray0, true);
      assertEquals("{impdep2, impdep2, CUhVyVCA'?s*ycql, CUhVyVCA'?s*ycql, public private protected transient abstract, impdep2, lookupswitch, CUhVyVCA'?s*ycql, impdep2}", string3);
      assertNotNull(string3);
      
      short short0 = Utility.searchOpcode("protected static final volatile");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("monitorexit", string4);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.classOrInterface(237);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "7t";
      try { 
        Utility.typeOfSignature("7t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kv>r'sUokV9D|_");
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1463), (-1463), false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto");
      String string0 = "%(_e|$%]B#<f*p,";
      try { 
        Utility.typeOfSignature("%(_e|$%]B#<f*p,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %(_e|$%]B#<f*p,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("void");
      Utility.fillup("void", 91, false, '%');
      Utility.fillup("J3}OGFXhPWKr}", 91, false, '&');
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "V";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.replace("IvxMdS~R@$!d", "V", "9[Tf~AC");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("9[Tf~AC", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Tf~AC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((-2324), true);
      try { 
        Utility.typeOfSignature("3DMZH}BxU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3DMZH}BxU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-124);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface((-70));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "double";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "double");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // double
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.replace("KrLH/]YPg3(HMa=V3(", "KrLH/]YPg3(HMa=V3(", "KrLH/]YPg3(HMa=V3(");
      Utility.classOrInterface((-1625));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KrLH/]YPg3(HMa=V3(";
      stringArray0[2] = "KrLH/]YPg3(HMa=V3(";
      stringArray0[3] = "class";
      stringArray0[4] = "KrLH/]YPg3(HMa=V3(";
      try { 
        Utility.methodSignatureReturnType("KrLH/]YPg3(HMa=V3(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KrLH/]YPg3(HMa=V3('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.methodSignatureReturnType("F");
      Utility.accessToString((-1611));
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "dup2";
      boolean boolean0 = false;
      Utility.decode("dup2", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dup2", "dup2", "dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "^Eb&/OFi#zUtbYa|";
      try { 
        Utility.typeOfMethodSignature("^Eb&/OFi#zUtbYa|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^Eb&/OFi#zUtbYa|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.accessToString((-2190));
      try { 
        Utility.typeOfSignature("private final synchronized volatile native interface abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private final synchronized volatile native interface abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oM7");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "+)v='B.";
      try { 
        Utility.methodSignatureReturnType("+)v='B.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v='B.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.compactClassName("LKrLH/]YPg3(HMa=V3(;V", "LKrLH/]YPg3(HMa=V3(;V", false);
      Utility.compactClassName("0O", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-19);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0O");
      byteArray0[4] = (byte) (-52);
      Utility.toHexString(byteArray0);
      Utility.isJavaIdentifierPart('L');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "LKrLH.]YPg3(HMa=V3(;V";
      objectArray0[1] = (Object) (byte)85;
      objectArray0[2] = (Object) "LKrLH/]YPg3(HMa=V3(;V";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)10;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{LKrLH.]YPg3(HMa=V3(;V, 85, LKrLH/]YPg3(HMa=V3(;V, java.lang.Object@2320a870, 10}", "|&8!>cI", "LKrLH.]YPg3(HMa=V3(;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {LKrLH.]YPg3(HMa=V3(;V, 85, LKrLH/]YPg3(HMa=V3(;V, java.lang.Object@2320a870, 10}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = Utility.setBit(4465, 4465);
      assertEquals(135537, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.classOrInterface(41);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3369, 41, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = 24;
      Utility.accessToString(24);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "static final";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "static final";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "static final";
      objectArray0[5] = (Object) "static final";
      objectArray0[6] = (Object) "static final";
      objectArray0[7] = (Object) "static final";
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      Utility.compactClassName("V", false);
      String string0 = "boolean";
      Utility.replace("static final", "boolean", (String) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Unreachable default case reached!";
      stringArray0[1] = "Unreachable default case reached!";
      stringArray0[2] = "Unreachable default case reached!";
      Utility.methodTypeToSignature("Unreachable default case reached!", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "~";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.isSet(0, 0);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = Utility.classOrInterface(95);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-27);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = 0;
      Utility.accessToString(0);
      Utility.fillup("", 0, false, ' ');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.replace("KrLH/]YPg3(HMa=V3(", "KrLH/]YPg3(HMa=V3(", "KrLH/]YPg3(HMa=V3(");
      Utility.classOrInterface((-1625));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "KrLH/]YPg3(HMa=V3(";
      stringArray0[1] = "class";
      stringArray0[2] = "KrLH/]YPg3(HMa=V3(";
      stringArray0[3] = "class";
      stringArray0[4] = "KrLH/]YPg3(HMa=V3(";
      Utility.methodTypeToSignature("KrLH/]YPg3(HMa=V3(", stringArray0);
      Utility.getSignature("(LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;)LKrLH/]YPg3(HMa=V3(;");
      Utility.compactClassName(">", "(LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;)LKrLH/]YPg3(HMa=V3(;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("(LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;)LKrLH/]YPg3(HMa=V3(;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;Lclass;LKrLH/]YPg3(HMa=V3(;)LKrLH/]YPg3(HMa=V3(;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.isJavaIdentifierPart('(');
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "ireturn";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ireturn");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      EvoSuiteFile evoSuiteFile1 = null;
      String string1 = "t~F&U)";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t~F&U)");
      Utility.isSet(997, 198);
      String string2 = "|q3)R;&z$i-sN],Y";
      Utility.compactClassName("|q3)R;&z$i-sN],Y");
      Utility.compactClassName("|q3)R;&z$i-sN],Y");
      try { 
        Utility.typeOfSignature("#iD[<Vgx7,:L Wf_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #iD[<Vgx7,:L Wf_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-99);
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.fillup("$K$9d", (byte) (-99), true, '1');
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$K$9d";
      stringArray0[1] = "$K$9d";
      stringArray0[2] = "org.apache.bcel.classfile.StackMapEntry";
      String string3 = Utility.methodTypeToSignature("org.apache.bcel.classfile.StackMapEntry", stringArray0);
      assertEquals("(L$K$9d;L$K$9d;Lorg/apache/bcel/classfile/StackMapEntry;)Lorg/apache/bcel/classfile/StackMapEntry;", string3);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.convertString("y',#N5");
      String string0 = Utility.format(2137, (-6430), false, 'Y');
      assertEquals("2137", string0);
      
      String string1 = Utility.convertString("y',#N5");
      assertEquals("y\\',#N5", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "2137";
      objectArray0[1] = (Object) "y',#N5";
      objectArray0[2] = (Object) "2137";
      objectArray0[3] = (Object) "y',#N5";
      objectArray0[4] = (Object) "2137";
      objectArray0[5] = (Object) "y',#N5";
      objectArray0[6] = (Object) "2137";
      objectArray0[7] = (Object) "2137";
      objectArray0[8] = (Object) "2137";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{2137, y',#N5, 2137, y',#N5, 2137, y',#N5, 2137, 2137, 2137}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "Integer";
      Utility.signatureToString("Integer");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-99);
      byte byte0 = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-101);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(792);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(20000);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte) (-113));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36765. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "aload_3";
      Utility.methodTypeToSignature("aload_3", stringArray0);
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1");
      Utility.methodSignatureToString("(Laload_3;)Laload_3;", "org.apache.bcel.classfile.Utility$1", "(Laload_3;)Laload_3;");
      Utility.compactClassName("aload_3", "9 r%=b", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.ext.dirs");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1260), 2806);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_3
         // 1:    ifle\t\t#3840
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.clearBit(82, (-1134));
      Utility.convertString("\tdefault = ");
      String string0 = "java.ext.dirs";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*%R<\u0002";
      stringArray0[1] = "java.ext.dirs";
      stringArray0[2] = "\tdefault = ";
      Utility.methodTypeToSignature("java.ext.dirs", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("*%R<\u0002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *%R<\u0002
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.accessToString(4712, true);
      Utility.getSignature("static volatile synthetic");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lstatic;";
      objectArray0[1] = (Object) "Lstatic;";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "static volatile synthetic";
      objectArray0[4] = (Object) "Lstatic;";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString((byte) (-21));
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[L<wNk|>.", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [L<wNk|>.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_(LJK!7:qxKEsY");
      try { 
        Utility.methodSignatureArgumentTypes("_(LJK!7:qxKEsY", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _(LJK!7:qxKEsY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
