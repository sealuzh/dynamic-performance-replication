/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 04:36:18 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>((Map<String, Map<Integer, String>>) null);
      Integer integer0 = new Integer((-584));
      doubleKeyMap0.put("#$6", integer0, "#$6");
      Map<Integer, String> map0 = doubleKeyMap0.remove("#$6");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = doubleKeyMap0.remove("eL&*V@8Ev", (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<HashMap<Object, String>, Integer, HashMap<Map<HashMap<Object, String>, String>, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Integer, HashMap<Map<HashMap<Object, String>, String>, Object>>();
      Map<String, Map<Object, Map<String, Object>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Map<String, Object>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<String, Object>>(map0);
      Map<String, Object> map1 = doubleKeyMap2.remove("", (Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Integer) null, "95ytHB6");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Object, Integer>>();
      DoubleKeyMap<Object, Map<HashMap<Object, String>, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<HashMap<Object, String>, String>, Object>();
      HashMap<HashMap<Object, String>, String> hashMap0 = new HashMap<HashMap<Object, String>, String>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<HashMap<Object, String>, String>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>((Map<HashMap<String, Object>, Map<Object, String>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(hashMap0, object0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Integer) null, "F[9fhen2rg9g#KA%j", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, Integer>((Map<String, Map<HashMap<Integer, String>, Integer>>) null);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, "(:gok(W/-=Y/^", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(17);
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<String, String>> hashMap0 = new HashMap<Map<Object, Integer>, Map<String, String>>();
      DoubleKeyMap<Map<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, String, String>(hashMap0);
      String string0 = doubleKeyMap0.get((Map<Object, Integer>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      HashMap<Object, Map<Integer, Map<HashMap<Object, String>, String>>> hashMap0 = new HashMap<Object, Map<Integer, Map<HashMap<Object, String>, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<HashMap<Object, String>, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<HashMap<Object, String>, String>>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Integer>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>();
      Map<HashMap<Object, String>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Integer, Object>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Object>, Integer>((Map<Integer, Map<Map<Integer, Object>, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, "", integer0);
      Integer integer1 = doubleKeyMap0.remove(integer0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      String string0 = doubleKeyMap0.remove("", (Object) "\"^a");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<Object, Map<String, Object>>, Map<HashMap<Object, String>, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<String, Object>>, Map<HashMap<Object, String>, String>, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      HashMap<HashMap<Object, String>, String> hashMap0 = new HashMap<HashMap<Object, String>, String>();
      doubleKeyMap0.put(map0, (Map<HashMap<Object, String>, String>) hashMap0, "");
      String string0 = doubleKeyMap0.put(map0, (Map<HashMap<Object, String>, String>) hashMap0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(17);
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Object object1 = doubleKeyMap0.get(integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<HashMap<Object, String>, String>, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<HashMap<Object, String>, String>, Object>, Object>();
      HashMap<Map<HashMap<Object, String>, String>, Object> hashMap0 = new HashMap<Map<HashMap<Object, String>, String>, Object>();
      doubleKeyMap0.put("", hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.get("", hashMap0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Map<Map<HashMap<Object, String>, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<HashMap<Object, String>, String>, Integer>>();
      DoubleKeyMap<String, Map<HashMap<Object, String>, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<Object, String>, String>, Integer>(hashMap0);
      DoubleKeyMap<String, String, HashMap<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, String, HashMap<Integer, Integer>>();
      Map<Object, Map<Map<HashMap<Object, String>, String>, HashMap<Map<HashMap<Object, String>, String>, Integer>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Map<HashMap<Object, String>, String>, HashMap<Map<HashMap<Object, String>, String>, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<HashMap<Object, String>, String>, HashMap<Map<HashMap<Object, String>, String>, Integer>>(map0);
      Map<Map<HashMap<Object, String>, String>, HashMap<Map<HashMap<Object, String>, String>, Integer>> map1 = doubleKeyMap2.remove((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, Map<HashMap<Object, String>, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Map<HashMap<Object, String>, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<HashMap<Object, String>, String> hashMap1 = new HashMap<HashMap<Object, String>, String>();
      doubleKeyMap0.put("Py", hashMap0, (Map<HashMap<Object, String>, String>) hashMap1);
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap0.remove("Py", hashMap0);
      assertTrue(map0.isEmpty());
  }
}
