/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:49:20 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1738);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-104);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 32;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(32, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 704;
      double[][] doubleArray0 = new double[6][4];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 704;
      int int1 = 13;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(13, 704, 1.0);
      assertEquals(704, denseMatrix0.columns());
      assertEquals(13, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(13, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 680;
      doubleArray0[1] = (double) 680;
      doubleArray0[2] = (double) 680;
      doubleArray0[3] = (double) 680;
      doubleArray0[4] = (double) 680;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(680, 680, doubleArray0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 3, 8);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(8, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.each(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(byteArray0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertEquals(0, cCSMatrix2.rows());
      assertFalse(cCSMatrix2.isRowMajor());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotNull(cCSMatrix2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CCSMatrix cCSMatrix3 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertFalse(cCSMatrix3.isRowMajor());
      assertEquals(0.0, cCSMatrix3.max(), 0.01);
      assertEquals(0, cCSMatrix3.cardinality());
      assertEquals(0.0, cCSMatrix3.min(), 0.01);
      assertEquals(0, cCSMatrix3.rows());
      assertEquals(Double.NaN, cCSMatrix3.density(), 0.01);
      assertEquals(0, cCSMatrix3.columns());
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix2));
      assertTrue(cCSMatrix3.equals((Object)cCSMatrix1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(cCSMatrix3, cCSMatrix1);
      assertNotSame(cCSMatrix3, cCSMatrix2);
      assertNotSame(cCSMatrix3, cCSMatrix0);
      assertNotNull(cCSMatrix3);
      
      // Undeclared exception!
      try { 
        cCSMatrix3.getOrElse((-2228), (-2228), (-2569.932289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2228' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("1rHq'7B)ez{<XC@)cV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 119;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 119;
      doubleArray0[4] = (double) 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(0, 119, doubleArray0);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(119, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertArrayEquals(new double[] {0.0, 119.0, 0.0, 119.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = cCSMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(702, 670.0);
      SparseMatrix.identity(702);
      cCSMatrix0.getRow(702);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-29);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-29), (-29), (double) (-29), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(byteArray0);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(2.0, cCSMatrix1.max(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(28, 28, 28);
      assertEquals(28, denseMatrix0.rows());
      assertEquals(28, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(700, 700);
      assertEquals(700, basic2DMatrix0.rows());
      assertEquals(700, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertEquals(700, basic2DMatrix0.rows());
      assertEquals(700, basic2DMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(700, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      Integer integer0 = Integer.valueOf(700);
      assertEquals(700, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1738, 1738);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1738, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1738, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(100.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInRow((-254), vectorAccumulator0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1738, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1738, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(100.0, double0, 0.01);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1769);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random(709, 1756, (double) 709, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(389.11210881);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-2460));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2459
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4365, 1212, 0);
      cCSMatrix0.setAll(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1724;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1724, 1724, 1724);
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 1724;
      doubleArray0[6] = (double) 1724;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(1724, 13, doubleArray0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
      cCSMatrix2.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1418, 704, 1418);
      cCSMatrix0.setAll((-3486.0));
      double double0 = 0.0;
      cCSMatrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1624, 1624);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.minInColumn(1624);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 663);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.maxInColumn(3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(50, 50, 50);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(673);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 673
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.constant(704, (-275.3374844));
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.subtract((-849.59509));
      Matrix matrix1 = Matrix.diagonal(704, 704);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix1, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 704);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 704);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)704, (double)704, (double)704, (double)704, (double)704).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 2449, 13);
      Matrix matrix0 = cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix.unit(704, 704);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 0.0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int int0 = 3;
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1769;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1769, 759.6914445);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      double double0 = (-655.33);
      cCSMatrix0.add(double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1757, 1757, (double) 0L, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Matrix.unit(704, 704);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(704);
      cCSMatrix0.add((double) 704);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.add(1318.1254946);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(32, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Matrix.unit(704, 704);
      CCSMatrix.diagonal(704, 704);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(704);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(242);
      cCSMatrix0.rank();
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(6, 6);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(11, 11);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-968.24605507);
      doubleArray0[1] = (-968.24605507);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-968.24605507);
      doubleArray0[4] = (-968.24605507);
      doubleArray0[5] = (-968.24605507);
      SparseVector.fromArray(doubleArray0);
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      columnMajorSparseMatrix0.toSparseMatrix();
      columnMajorSparseMatrix0.toDenseMatrix();
      int int0 = (-1251);
      ((CCSMatrix) columnMajorSparseMatrix0).getRow(0);
      ((CCSMatrix) columnMajorSparseMatrix0).nonZeroIteratorOfColumn(0);
      ((CCSMatrix) columnMajorSparseMatrix0).maxInColumn(0);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(0, 380, 401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(390, 390, 390);
      int int0 = 693;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      cCSMatrix0.select(intArray0, intArray1);
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1738);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(704.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(58, vectorAccumulator0);
      cCSMatrix0.getColumn(58);
      cCSMatrix0.maxInColumn(1242);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(691, 691);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 670;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(670, 670);
      ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Integer.valueOf(int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.unit(704, 704);
      CCSMatrix.diagonal(704, 704);
      CCSMatrix cCSMatrix0 = new CCSMatrix(704, 704);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Integer.valueOf(674);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      cCSMatrix0.copyOfShape(1026, 0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 9);
      cCSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1248, 1248);
      Integer integer0 = new Integer(1248);
      cCSMatrix0.minInColumn(701);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 704);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(16, 1793);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 13;
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1211;
      doubleArray0[2] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1211, 0, doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1705, Double.NEGATIVE_INFINITY);
      columnMajorSparseMatrix0.min();
      CCSMatrix.block(denseMatrix0, denseMatrix0, columnMajorSparseMatrix0, denseMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      byte[] byteArray0 = cCSMatrix0.toBinary();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      int int0 = 683;
      Matrix matrix0 = Matrix.unit(683, 683);
      doubleArray0[3] = 100.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      double[][] doubleArray1 = new double[16][1];
      doubleArray1[1] = doubleArray0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Integer.valueOf(683);
      Matrix matrix1 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix1, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Matrix.unit(704, 704);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 704);
      int int0 = 694;
      Integer integer0 = new Integer(694);
      cCSMatrix0.updateColumn(694, (VectorFunction) null);
      int int1 = 1899;
      cCSMatrix0.copyOfShape(int1, int1);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      int int1 = 1211;
      int int2 = 16;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, Double.NEGATIVE_INFINITY);
      columnMajorSparseMatrix0.blank();
      Integer integer0 = new Integer(1211);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 79);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(65, 48, (double[]) null);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      MockRandom mockRandom0 = new MockRandom(1475L);
      CCSMatrix.random(48, 67, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, Double.NEGATIVE_INFINITY);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2182, 2834);
      columnMajorSparseMatrix0.rank();
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("02");
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.getRow((-1247));
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-1247), (-1247), (-1247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1247x-1247
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 16, 0);
      Integer integer0 = new Integer(1211);
      cCSMatrix0.updateColumn(0, (VectorFunction) null);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(3925, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(11, 11);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(83, 11);
      cCSMatrix0.rank();
      cCSMatrix1.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Matrix.unit(704, 704);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 0.0);
      Integer integer0 = new Integer(704);
      int[] intArray0 = new int[2];
      intArray0[1] = 704;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = 1;
      cCSMatrix0.minInColumn(int0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, 704);
      double[] doubleArray0 = new double[1];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 704;
      intArray0[5] = 0;
      intArray0[6] = 704;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, denseMatrix0, denseMatrix0);
      cCSMatrix1.minInColumn(intArray0[5]);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Matrix.unit(1248, 1248);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(704, (-3372.67391638381));
      Integer integer0 = new Integer((-1899));
      cCSMatrix0.minInColumn(701);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(16, 16);
      Integer integer0 = new Integer(1211);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
