/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:33:37 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('}');
      assertFalse(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = IOUtils.encodeUTF8(iOUtils0.DIGITS, 2, 3, iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("fastjso.compatigleWithJavaBean");
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      IOUtils.getChars((byte)87, (int) (byte)87, iOUtils0.ASCII_CHARS);
      IOUtils.decodeBase64(iOUtils0.replaceChars, 28, 0);
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.properties");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((int) (byte)87, (int) (byte)87, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = IOUtils.firstIdentifier('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[2];
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      String string0 = IOUtils.getStringProperty("com.alibaba.fastjson.util.UTF8Decoder");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("O_2%qeMvY?OY4(rG8z");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(3025L);
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeUTF8(byteArray0, 4, 4, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ">}{";
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.firstIdentifier('<');
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 124, 124, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHJAVABEAN;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)50, (int) (byte)50, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 1313, (-2659));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(100000000000L);
      assertEquals(12, int0);
      
      IOUtils.getStringProperty("ABCDEFGHPJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      byte[] byteArray0 = IOUtils.decodeBase64("ABCDEFGHPJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(">a$p#p`v>XmtZf^4g=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">a$p#p`v>XmtZf^4g=");
      IOUtils.close(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, (int) '\"', 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.isIdent('L');
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      String string0 = "";
      // Undeclared exception!
      try { 
        IOUtils.getChars((int) (byte) (-64), (-577), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -578
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("A");
      IOUtils.isValidJsonpQueryParam("A");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils iOUtils0 = new IOUtils();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("fastjson.properties");
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("fastjson.properties");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("U}G:K?7Of4U$Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(30);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1191L), (-734), iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -735
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(1895L, (-1630), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1631
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 3, 3);
      char[] charArray0 = new char[2];
      IOUtils.stringSize((long) 3);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 3, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('+');
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithFieldName");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.isIdent('L');
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-64), (-764), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -765
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(23);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 1423);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65463
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.decodeBase64("");
      IOUtils.isValidJsonpQueryParam("");
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483647L, 52, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("O_2%qeMvY?OY4(rG8z");
      iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.stringSize(2147483664L);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 10, 8257536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.getStringProperty("Tye(Gq77:T*,lkwb:");
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.properties", 2, 2);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray1);
      
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray2 = IOUtils.decodeBase64(iOUtils0.DIGITS, 2, 2);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.decodeBase64("Wl.hrC?<9");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ">}{";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(">}{");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.isIdent('\u0000');
      byte[] byteArray0 = new byte[2];
      IOUtils.decodeUTF8(byteArray0, 1, 1, charArray0);
      byteArray0[0] = (byte)93;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 19, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.close((Closeable) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-5);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOUtils.getStringProperty("X5x\"b:6^Qu6");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("read string from reader error", (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 1, 1);
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.properties");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(158L);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.getChars((byte) (-40), 3, iOUtils0.DIGITS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("O_2%qeMvY?OY4(rG8z");
      byteBuffer0.putInt(1391);
      int int0 = IOUtils.stringSize(2147483664L);
      assertEquals(10, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 10, 10);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-99), (byte)58, (byte) (-45), (byte) (-67), (byte)60, (byte) (-45)}, byteArray0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", 10, 10);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)106, (byte)90, (byte) (-74), (byte)38, (byte) (-27), (byte)121}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("O_%qev?OY4(rG8z");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(3025L);
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeUTF8(byteArray0, 4, 4, iOUtils0.CA);
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils.decodeBase64(">a$p#p`v>XmtZf^4g=");
      IOUtils iOUtils0 = new IOUtils();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("fastjson.compatibleWithJavaBean", ">a$p#p`v>XmtZf^4g=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >a$p#p`v>XmtZf^4g=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'k';
      charArray0[2] = 'P';
      IOUtils.getChars(1, 1, charArray0);
      assertArrayEquals(new char[] {'1', 'k', 'P'}, charArray0);
      
      int int1 = IOUtils.stringSize(2147483681L);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = '\"';
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithFieldName");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = iOUtils0.UTF8.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[6];
      IOUtils.isIdent('\u0000');
      byte[] byteArray0 = new byte[2];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int2 = 796;
      // Undeclared exception!
      try { 
        IOUtils.getChars(796, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.getStringProperty("ABCDEFGHIJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      byte[] byteArray1 = IOUtils.specicalFlags_singleQuotes;
      IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 2, (int) (byte)57);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      assertEquals("IGNORE", codingErrorAction0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      iOUtils0.UTF8.encode("O_2%qeMvY?OY4(rG8z");
      iOUtils0.UTF8.encode("fastjson.properties");
      int int0 = IOUtils.stringSize(2147483664L);
      assertEquals(10, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 10, 10);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-99), (byte)58, (byte) (-45), (byte) (-67), (byte)60, (byte) (-45)}, byteArray0);
      
      IOUtils.getChars((-858L), 10, iOUtils0.CA);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(iOUtils0.specicalFlags_doubleQuotes);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, uTF8Decoder0);
      String string0 = IOUtils.readAll(inputStreamReader0);
      assertEquals("\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0001\u0001\u0001\u0004\u0001\u0001\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.getStringProperty("ABCDEFGHIJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      byte[] byteArray1 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSThVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.getChars((-2659), 46, iOUtils0.CA);
      IOUtils.stringSize((long) (-2659));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        Charset.forName("fastjson.compatibleWithJavaBean");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // fastjson.compatibleWithJavaBean
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils.decodeBase64("2");
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      // Undeclared exception!
      try { 
        IOUtils.getChars(622, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      IOUtils.getChars((byte)87, 2, charArray0);
      IOUtils.getChars(2L, 2, charArray0);
      assertArrayEquals(new char[] {'8', '2', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOUtils.firstIdentifier('I');
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2147483646), (-2147483646), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483647
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '';
      charArray0[2] = '';
      IOUtils.getChars((-1L), 3, charArray0);
      IOUtils.isIdent('^');
      IOUtils.getStringProperty("UTF-8");
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      String string0 = IOUtils.FASTJSON_PROPERTIES;
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 2, 2);
      char[] charArray0 = new char[9];
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      int int1 = 3950;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 3950, 2, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3950
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 2, 57, iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 2, (-1952257860), iOUtils0.CA);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 78);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.decodeUTF8(byteArray0, 0, 78, iOUtils0.ASCII_CHARS);
      IOUtils.getChars(54L, 4, iOUtils0.DIGITS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 2, 57, iOUtils0.specicalFlags_doubleQuotes);
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 2, 57, iOUtils0.CA);
      IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 78);
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      boolean boolean0 = IOUtils.isIdent('?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'd';
      // Undeclared exception!
      try { 
        IOUtils.getChars(2147483675L, (-77), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -78
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharsetDecoder charsetDecoder0 = iOUtils0.UTF8.newDecoder();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.replaceChars);
      String string0 = IOUtils.readAll(charArrayReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils.decodeBase64("01234567btnvfr\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      IOUtils.loadPropertiesFromFile();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      iOUtils0.UTF8.decode(byteBuffer0);
      CharBuffer charBuffer0 = CharBuffer.wrap(iOUtils0.DIGITS, 4, 4);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      String string1 = IOUtils.readAll(charArrayReader0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = '\u00A8';
      int int0 = 1;
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, '\u00A8', byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 2, 57, iOUtils0.specicalFlags_doubleQuotes);
      int int1 = (-1952257860);
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 2, (-1952257860), iOUtils0.CA);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 78);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.decodeUTF8(byteArray0, 0, 78, iOUtils0.ASCII_CHARS);
      IOUtils.isIdent('K');
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(3025L);
      int int0 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 4, 4, iOUtils0.DIGITS);
      Charset charset0 = Charset.defaultCharset();
      int int1 = IOUtils.stringSize(3025L);
      assertTrue(int1 == int0);
      
      IOUtils.loadPropertiesFromFile();
      int int2 = IOUtils.decodeUTF8(byteArray0, 4, 4, iOUtils0.CA);
      assertEquals((-1), int2);
      
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      charset0.encode("QC*9");
      ByteBuffer byteBuffer0 = charset0.encode("fastjson.properties");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      Charset charset1 = IOUtils.UTF8;
      Charset.defaultCharset();
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      int int3 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 27, 4, iOUtils0.specicalFlags_singleQuotes);
      assertEquals(12, int3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.encodeUTF8(iOUtils0.replaceChars, 2, 57, iOUtils0.specicalFlags_doubleQuotes);
      int int1 = (-1952257860);
      IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 2, (-1952257860), iOUtils0.CA);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 0, 78);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      IOUtils.decodeUTF8(byteArray0, 0, 78, iOUtils0.ASCII_CHARS);
      IOUtils.isIdent('K');
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "utf8 decode error, ";
      byte[] byteArray0 = IOUtils.decodeBase64("utf8 decode error, ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.stringSize(3026L);
      Charset charset0 = Charset.defaultCharset();
      IOUtils.stringSize((long) 4);
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeUTF8(byteArray0, 4, 1, iOUtils0.CA);
      charset0.newDecoder();
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("O_2%qhMvY?OY4(rG8z");
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 12, 12, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOUtils.isIdent('\u0000');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      IOUtils.loadPropertiesFromFile();
      byte[] byteArray0 = new byte[2];
      IOUtils.decodeUTF8(byteArray0, (-1708), (-1708), charArray0);
      byteArray0[0] = (byte)73;
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray1 = IOUtils.decodeBase64("6$BppUH=X]wg?oDf");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeUTF8(byteArray1, 4, 52, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((int) (byte)73, 23, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
