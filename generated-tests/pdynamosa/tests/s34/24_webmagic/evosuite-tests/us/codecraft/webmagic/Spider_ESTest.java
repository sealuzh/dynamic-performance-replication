/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:00:47 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider0.setSpawnUrl(false);
      Spider spider3 = spider1.setUUID("page status code error, page {} , code: {}");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page status code error, page {} , code: {}", "[g]+://");
      spider1.downloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/");
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Stopped");
      fileCacheQueueScheduler0.getDuplicateRemover();
      spider2.addPipeline(filePipeline0);
      spider2.setScheduler(fileCacheQueueScheduler0);
      spider4.isSpawnUrl();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "page status code error, page {} , code: {}";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n=Jum3]FI>*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.setExitWhenComplete(false);
      spider0.getThreadAlive();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("F&Iq hDkIMIq");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("sWwBwtbeS#?n)@%f", (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      Json json0 = new Json("4:");
      MockThread.getDefaultUncaughtExceptionHandler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider1.getAll((Collection<String>) linkedList0);
      spider2.getThreadAlive();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "sWwBwtbeS#?n)@%f";
      stringArray0[1] = "4:";
      stringArray0[2] = "sWwBwtbeS#?n)@%f";
      stringArray0[3] = "F&Iq hDkIMIq";
      stringArray0[4] = "F&Iq hDkIMIq";
      stringArray0[5] = null;
      stringArray0[6] = "F&Iq hDkIMIq";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(5000);
      spider0.setExitWhenComplete(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.get("[;UN}UwY{M'Cr");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider3.setExecutorService(forkJoinPool0);
      String string0 = "GxQJD(X&Tj-";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.startRequest((List<Request>) null);
      spider2.setExitWhenComplete(false);
      Json json0 = new Json("");
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      String string0 = "RX(";
      ReplaceSelector replaceSelector0 = null;
      try {
        replaceSelector0 = new ReplaceSelector("RX(", "RX(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid regex
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rG5l");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("/", "");
      spider0.getCollectorPipeline();
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1));
      spider4.downloader(phantomJSDownloader1);
      spider4.setUUID("GxQJD(X&Tj-");
      LinkedHashSet<Request> linkedHashSet0 = new LinkedHashSet<Request>();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list1 = andSelector0.selectList("");
      spider2.startUrls(list1);
      spider4.setExitWhenComplete(true);
      Page page0 = Page.fail();
      spider2.extractAndAddRequests(page0, false);
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue((-608));
      spider_Status0.getValue();
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(4869);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.scheduler(duplicateRemovedScheduler0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("", 1062);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-79);
      spider0.setEmptySleepTime((byte) (-14));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.thread(5000);
      spider0.setExitWhenComplete(true);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      linkedTransferQueue0.add("");
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider.create(simplePageProcessor0);
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 5000;
      spider0.thread(5000);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Spider spider1 = spider0.clearPipeline();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      spider1.extractAndAddRequests(page1, false);
      // Undeclared exception!
      try { 
        spider1.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.thread(2);
      Spider spider2 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.addPipeline((Pipeline) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Spider spider2 = spider1.clearPipeline();
      String string0 = spider2.getUUID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(732);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      Spider.Status.fromValue(125);
      spider_Status0.getValue();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      // Undeclared exception!
      try { 
        fileCacheQueueScheduler0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rG5l");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardPolicy0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("rG5l");
      spider0.pageProcessor = (PageProcessor) simplePageProcessor1;
      Spider spider1 = spider0.thread(1);
      spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5000, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.thread(1);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider0.setSpawnUrl(false);
      spider1.setUUID("page status code error, page {} , code: {}");
      Spider spider3 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider2.thread((ExecutorService) forkJoinPool0, 2);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      String[] stringArray0 = new String[0];
      spider2.addUrl(stringArray0);
      Json json0 = new Json("`j`G8&hy8nZ_EWa");
      Class<Selector> class0 = Selector.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      String[] stringArray0 = new String[0];
      spider2.addUrl(stringArray0);
      Json json0 = new Json("");
      MockThread.getDefaultUncaughtExceptionHandler();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider2.getThreadAlive();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      FilePipeline filePipeline0 = new FilePipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Spider {} closed! {} pages downloaded.");
      Spider spider1 = new Spider(simplePageProcessor1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.isSpawnUrl();
      spider0.sleep(1414);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      spider2.setScheduler((Scheduler) null);
      spider2.isSpawnUrl();
      spider0.sleep(1414);
      assertFalse(spider0.isExitWhenComplete());
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1414);
      spider2.setExecutorService(scheduledThreadPoolExecutor0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "[\\g]+:\\//";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.addHeader("[g]+://", "bx");
      Request request3 = request2.addCookie("", "tm?JeO mJ");
      Request request4 = request3.setPriority(0L);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = " error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 5000;
      Spider spider1 = spider0.thread(5000);
      spider1.setEmptySleepTime(5000);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      Json json0 = new Json("`j`G8&hy8nZ_EWa");
      MockThread.getDefaultUncaughtExceptionHandler();
      spider3.setExitWhenComplete(true);
      Spider spider4 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler(queueScheduler0);
      Spider spider5 = spider4.pipeline((Pipeline) null);
      Spider spider6 = spider5.scheduler(queueScheduler0);
      assertNotSame(spider6, spider0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline("[g]+://");
      Spider spider4 = spider3.pipeline(filePipeline0);
      Spider spider5 = spider4.clearPipeline();
      spider5.setExitWhenComplete(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider4.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.thread(2);
      String[] stringArray0 = new String[0];
      Json json0 = new Json("");
      MockThread.getDefaultUncaughtExceptionHandler();
      spider0.test(stringArray0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      String string0 = "GxQJD(X&Tj-";
      spider4.setPipelines((List<Pipeline>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Scheduler scheduler0 = spider0.getScheduler();
      assertNotNull(scheduler0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("hXn");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.thread(177);
      Spider spider3 = spider2.clearPipeline();
      spider3.setUUID("Sc+_CBtGX2Dh");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ao:h2L}yNNy(6*_?}3Z");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~#-9$.");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setUUID("Spider ");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Pipeline> list0 = spider2.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider4 = spider3.setPipelines(list0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(200);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 30000, 0L, timeUnit0, blockingQueue0);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) threadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("PM8Pb?GNK-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.downloader((Downloader) null);
      spider1.thread(2);
      Page page0 = Page.fail();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setRawText("PM8Pb?GNK-");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" error");
      spider0.setExitWhenComplete(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      spider1.getUUID();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider0.pipeline(collectorPipeline0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rG5l");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("rG5l");
      Spider spider0 = new Spider(simplePageProcessor1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5000);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9-4`koca", "9-4`koca");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider2.pipeline(consolePipeline0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      boolean boolean0 = spider5.isSpawnUrl();
      assertFalse(spider3.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[w]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      String string0 = "q4CBb\\u6`t]j C,q";
      Request request0 = new Request(string0);
      requestArray0[0] = request0;
      Spider spider1 = spider0.setUUID("_cycle_tried_times");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      spider1.setExitWhenComplete(true);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider2 = spider0.setSpawnUrl(true);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Date date0 = spider0.getStartTime();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[Fg]+://");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.setUUID("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Stopped");
      Spider spider2 = Spider.create(simplePageProcessor0);
      spider2.setDownloader(phantomJSDownloader0);
      Spider spider3 = Spider.create(simplePageProcessor0);
      spider3.setScheduler((Scheduler) null);
      spider1.isSpawnUrl();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "[\\g]+:\\//";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.setDownloader((Downloader) null);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(30032, 30032, 479L, timeUnit0, (BlockingQueue<Runnable>) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rG5l");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread.getDefaultUncaughtExceptionHandler();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy1 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardPolicy1);
      spider0.isSpawnUrl();
      Site site0 = spider0.getSite();
      assertFalse(site0.isDisableCookieManagement());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "[\\Fg]+:\\//";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1166);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider3.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(5000);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.getThreadAlive();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9-4`koca", "9-4`koca");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Request request0 = new Request("[g]+://");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      // Undeclared exception!
      try { 
        spider2.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("3");
      Spider spider0 = new Spider(simplePageProcessor1);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n=Jum3]FI>*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList1);
      Spider spider6 = spider5.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
      
      spider6.setExitWhenComplete(false);
      spider5.addPipeline(filePipeline0);
      assertFalse(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "Spider is already running!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Spider is already running!");
      spider1.setScheduler(fileCacheQueueScheduler0);
      String string1 = "[\\w]+://";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("[w]+://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider.Status.fromValue(2147483645);
      Request request0 = new Request("Z #\"/Coh'=l");
      Request request1 = request0.setPriority((-1041L));
      Request request2 = request1.setUrl("W+Qpy_nc#,58$`e=p)u");
      Request request3 = request2.setMethod("");
      Request request4 = request3.setCharset(", userAgent='");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[w]+://");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.start();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Request request1 = request0.setPriority(2159L);
      Request request2 = request1.setUrl("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-79);
      spider0.setEmptySleepTime((byte) (-14));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.thread(5000);
      spider0.setExitWhenComplete(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[w]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      String string0 = "q4CBb\\u6`t]j C,q";
      Request request0 = new Request(string0);
      requestArray0[0] = request0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      Json json0 = new Json("`j`G8&hy8nZ_EWa");
      MockThread.getDefaultUncaughtExceptionHandler();
      Spider spider4 = spider3.setExitWhenComplete(true);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      Spider spider5 = spider4.startRequest(list0);
      spider1.getSpiderListeners();
      spider1.getUUID();
      spider5.getCollectorPipeline();
      assertEquals(Spider.Status.Stopped, spider4.getStatus());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zq?z[15-");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      spider0.isSpawnUrl();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(741);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}?SlA#UpUjZO8jrl");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.thread(835);
      FilePipeline filePipeline0 = new FilePipeline("}?SlA#UpUjZO8jrl");
      spider2.addPipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6|v^pgU<>U=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("6|v^pgU<>U=");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.scheduler(duplicateRemovedScheduler0);
      Spider.Status spider_Status0 = Spider.Status.fromValue(1527);
      spider_Status0.getValue();
      // Undeclared exception!
      try { 
        fileCacheQueueScheduler0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, (-1600));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~NMkhF-l4z*% P4(k");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("~NMkhF-l4z*% P4(k");
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", charset='", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "?";
      stringArray0[2] = ", charset='";
      stringArray0[3] = ", charset='";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      String[] stringArray0 = new String[0];
      Spider spider3 = spider2.addUrl(stringArray0);
      Json json0 = new Json("");
      MockThread.getDefaultUncaughtExceptionHandler();
      Spider spider4 = spider3.setExitWhenComplete(true);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider4.startRequest(list0);
      Spider.Status.fromValue(2);
      spider3.close();
      assertEquals(Spider.Status.Stopped, spider3.getStatus());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("n");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider.Status.values();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("n");
      fileCacheQueueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setUUID("Running");
      ForkJoinTask.getPool();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      spider3.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[Fg]+://");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("[Fg]+://", "3V7<2u2cp\"*JrGk");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setExitWhenComplete(false);
      Spider spider2 = spider0.setScheduler((Scheduler) null);
      spider0.isSpawnUrl();
      Spider.Status.fromValue((-710));
      spider0.isExitWhenComplete();
      spider2.clearPipeline();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[Fg]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.isExitWhenComplete();
      int int0 = spider0.getThreadAlive();
      assertFalse(spider0.isSpawnUrl());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]nWSfWa\"(");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      Request request0 = new Request("MWfDS(f\"N0N");
      Request request1 = request0.addHeader("MWfDS(f\"N0N", "MWfDS(f\"N0N");
      Request request2 = request1.setPriority(634L);
      queueScheduler0.push(request2, spider3);
      Spider spider4 = spider3.thread(3);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider5 = spider4.addPipeline(collectorPipeline0);
      spider4.scheduler(queueScheduler0);
      spider5.threadNum = (-9);
      spider5.runAsync();
      spider1.setEmptySleepTime(3);
      spider0.getThreadAlive();
      spider1.getPageCount();
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider1.getStatus());
      
      spider2.thread(2473);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "[\\Fg]+:\\//";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[Fg]+://");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.scheduler(queueScheduler0);
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider3.setPipelines((List<Pipeline>) null);
      Spider spider4 = spider0.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider4.thread((-1287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("3");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("3");
      Spider spider0 = new Spider(simplePageProcessor1);
      Request request0 = new Request();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("]*");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("]*");
      spider0.getStartTime();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XPath error!");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5000, 5000, 5000, timeUnit0, linkedTransferQueue0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.setExecutorService(threadPoolExecutor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      Spider spider3 = spider2.setUUID("us.codecraft.webmagic.Spider$1");
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(";k|S|F|`j'.aL*3");
      Spider spider4 = spider3.addPipeline(jsonFilePipeline0);
      String[] stringArray0 = new String[0];
      spider4.destroyWhenExit = false;
      Spider spider5 = spider4.addUrl(stringArray0);
      spider5.setUUID((String) null);
      spider0.sleep(5000);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(5);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6|v^pgU<>U=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("6|v^pgU<>U=");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("6|v^pgU<>U=");
      fileCacheQueueScheduler0.poll(spider0);
      Request request0 = new Request();
      Request request1 = new Request();
      Request[] requestArray0 = new Request[7];
      requestArray0[0] = null;
      requestArray0[1] = request1;
      requestArray0[2] = request0;
      requestArray0[3] = request0;
      requestArray0[4] = null;
      requestArray0[5] = request0;
      requestArray0[6] = request1;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(5000);
      spider0.setExitWhenComplete(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "Page{request=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Page{request=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3199);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      String string1 = "";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.pipeline(resultItemsCollectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.thread((-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      spider0.isSpawnUrl();
      Request request0 = new Request("waitNewUrl - interrupted, error {}");
      Request request1 = request0.setMethod((String) null);
      Request request2 = request1.setPriority((-935L));
      Request request3 = request2.setCharset("BJaq8+9B");
      Request request4 = request3.setBinaryContent(false);
      // Undeclared exception!
      try { 
        spider0.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_AbortPolicy0);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 835);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("n=Jum3]FI>*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider3 = spider2.addPipeline(filePipeline0);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider3.getUUID();
      Spider spider5 = spider4.setPipelines(linkedList1);
      spider5.setSpawnUrl(false);
      spider4.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider4.thread((-2346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      spider0.getCollectorPipeline();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider1.startUrls(list0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.get("[;UN}UwY{M'Cr");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[Fg]+://");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.setUUID("[Fg]+://");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      spider1.threadNum = 34;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Stopped", "");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      spider5.setScheduler((Scheduler) null);
      spider1.isSpawnUrl();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Stopped";
      stringArray0[1] = "Stopped";
      stringArray0[2] = "[Fg]+://";
      stringArray0[3] = "[Fg]+://";
      stringArray0[4] = "[Fg]+://";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      spider0.stop();
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("item_");
      spider0.addPipeline(filePipeline0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.thread((ExecutorService) null, 5);
      Spider.Status spider_Status0 = spider1.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider0.setSpiderListeners(linkedList0);
      spider2.checkIfRunning();
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("]AH4K", (String) null);
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("[g]+://");
      Spider spider0 = new Spider(simplePageProcessor1);
      spider0.getStatus();
      Request request0 = new Request((String) null);
      Request request1 = request0.addHeader("[g]+://", "hdSvR\"-");
      Request request2 = request1.addCookie("hdSvR\"-", "");
      Request request3 = request2.setUrl((String) null);
      Request request4 = request3.setMethod("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = new Spider(simplePageProcessor0);
      assertTrue(spider2.isExitWhenComplete());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u0$ U']KfqN8", "V[5Rc2azu^#{!Ahmbh");
      spider1.downloader(phantomJSDownloader0);
      assertFalse(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("y!4BMm");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.pipeline(consolePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[w]+://");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      String string0 = "q4CBb\\u6`t]j C,q";
      Request request0 = new Request(string0);
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      spider3.getStartTime();
      assertFalse(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[g]+://");
      String string0 = "0hk6bsk3\"$1kKrj";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("0hk6bsk3\"$1kKrj");
      Spider spider0 = new Spider(simplePageProcessor1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0hk6bsk3\"$1kKrj";
      stringArray0[1] = "[g]+://";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
