/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:28:31 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.ImageCapabilities;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.im.InputContext;
import java.beans.EventSetDescriptor;
import java.beans.beancontext.BeanContextServices;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.IOException;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuSelectionManager;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.SimpleKMeans;
import weka.core.CheckOptionHandler;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.LibSVMSaver;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.StripChart;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("locale", "locale");
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      JComponent.isLightweightComponent(filter0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(imageSaver0, (Instances) null);
      trainingSetEvent0.m_maxSetNumber = (-2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      Sorter sorter0 = new Sorter();
      filter0.removeTestSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = new Classifier();
      filter0.removeTrainingSetListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassOrder classOrder0 = new ClassOrder();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleKMeans0.getClusterCentroids();
      DataSetEvent dataSetEvent0 = new DataSetEvent(classOrder0, (Instances) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassAssigner classAssigner0 = new ClassAssigner();
      MouseEvent mouseEvent0 = new MouseEvent(classAssigner0, 2933, 0L, 2933, 2933, 2933, 2933, false);
      classAssigner0.getPopupLocation(mouseEvent0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Filter filter0 = new Filter();
      filter0.getContainerListeners();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("V#0-7nDGv|", scatterPlotMatrix0);
      boolean boolean0 = filter0.eventGeneratable("V#0-7nDGv|");
      assertFalse(boolean0);
      
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("ERROR (See log for details).", "ERROR (See log for details).");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      defaultCaret0.setBlinkRate(1620);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      filter0.getCursor();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      boolean boolean1 = filter0.eventGeneratable("ERROR (See log for details).");
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.useDefaultVisual();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      filter0.connectionNotification("KrKAtJh#$$Oum6C[9^", "KrKAtJh#$$Oum6C[9^");
      filter0.setLog((Logger) null);
      Saver saver0 = new Saver();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("KrKAtJh#$$Oum6C[9^");
      filter0.getCursor();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = filter0.isBusy();
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("ERROR (See log for details).", "ERROR (See log for details).");
      filter0.setLog((Logger) null);
      filter0.getGraphicsConfiguration();
      filter0.getCustomName();
      Sorter sorter0 = new Sorter();
      filter0.getCursor();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.setVerifyInputWhenFocusTarget(false);
      filter0.getCursor();
      filter0.acceptInstance((InstanceEvent) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TextViewer textViewer0 = new TextViewer();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textViewer0, instances0, 1169, (-1854509484));
      filter0.acceptTrainingSet(trainingSetEvent0);
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      Saver saver0 = new Saver();
      StripChart stripChart0 = null;
      try {
        stripChart0 = new StripChart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.StripChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      DataSetEvent dataSetEvent0 = new DataSetEvent(crossValidationFoldMaker0, instances0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      SpreadSubsample.main(stringArray0);
      filter0.acceptDataSet(dataSetEvent0);
      Clusterer clusterer0 = new Clusterer();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestSetEvent testSetEvent0 = new TestSetEvent(defaultCaret0, instances0, (-1880020086), 3522, (byte)46, (-1880020086));
      assertEquals((-1880020086), testSetEvent0.getRunNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.remove(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      filter0.addMouseMotionListener(mouseMotionListener1);
      KeyStroke.getKeyStroke("D}gA8ENai");
      filter0.setVerifyInputWhenFocusTarget(false);
      filter0.getConditionForKeyStroke((KeyStroke) null);
      filter0.getCursor();
      filter0.acceptInstance((InstanceEvent) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D}gA8ENai");
      filter0.useDefaultVisual();
      boolean boolean0 = filter0.isBusy();
      filter0.connectionNotification("/}hF{PD@40L", "/}hF{PD@40L");
      Clusterer clusterer0 = new Clusterer();
      filter0.getGraphicsConfiguration();
      TextViewer textViewer0 = new TextViewer();
      filter0.connectionNotification("/}hF{PD@40L", textViewer0);
      boolean boolean1 = filter0.eventGeneratable("");
      assertTrue(boolean1 == boolean0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      GapContent gapContent0 = new GapContent(108);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      filter0.setFont(font0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getY();
      filter0.removeDataSourceListener(trainingSetMaker0);
      filter0.connectionNotification("MYWC^", "MYWC^");
      boolean boolean0 = filter0.connectionAllowed("MYWC^");
      assertFalse(boolean0);
      
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setWrappedAlgorithm(spreadSubsample0);
      filter0.eventGeneratable("apart");
      // Undeclared exception!
      try { 
        filter0.performRequest("apart");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // apart not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("ERROR (See log for details).", "ERROR (See log for details).");
      filter0.setLog((Logger) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Saver saver0 = new Saver();
      filter0.addTestSetListener(saver0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("ERROR (See log for details).");
      filter0.getCursor();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent1 = substringLabeler1.m_ie;
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.addMouseMotionListener(defaultCaret0);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "_}gA8ENai");
      filter0.setVerifyInputWhenFocusTarget(false);
      filter0.getConditionForKeyStroke(keyStroke0);
      filter0.getCursor();
      filter0.acceptInstance((InstanceEvent) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generateHelp();
      TimeZone.getAvailableIDs(0);
      TestSetEvent testSetEvent0 = new TestSetEvent(optionHandlerJavadoc0, instances0, 0, 0, 0, 0);
      filter0.acceptTestSet(testSetEvent0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      filter0.getAlignmentY();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      filter0.connectionNotification("`b[<c", checkOptionHandler0);
      filter0.disconnectionNotification("instance", "`b[<c");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Appender appender0 = new Appender();
      JSlider jSlider0 = new JSlider();
      jSlider0.getMinorTickSpacing();
      filter0.addTestSetListener(appender0);
      filter0.connectionNotification("instance", checkOptionHandler0);
      Appender appender1 = new Appender();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ClassOrder classOrder0 = new ClassOrder();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classOrder0, instances0, 2, 3);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.connectionNotification("Dr8,A?480_%%N?xA=", attributeSummarizer0);
      filter0.setLog((Logger) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      Saver saver0 = new Saver();
      filter0.addTestSetListener(attributeSummarizer0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("xsu&\"");
      filter0.getCursor();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      filter0.isBusy();
      filter0.addNotify();
      Appender appender0 = new Appender();
      ImageSaver imageSaver0 = new ImageSaver();
      Sorter sorter0 = new Sorter();
      filter0.addDataSourceListener(saver0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.requestFocusInWindow();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      filter0.addTestSetListener(saver0);
      EventSetDescriptor eventSetDescriptor0 = null;
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MenuSelectionManager.defaultManager();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.getCursor();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.m_hasLabels;
      ImageSaver imageSaver0 = new ImageSaver();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Enumeration enumeration0 = spreadSubsample0.listOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent("configuration", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      TestSetEvent testSetEvent0 = new TestSetEvent(enumeration0, instances0, 63, 22, (-1098907316), 1183);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('*');
      MenuSelectionManager.defaultManager();
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(2147483645);
      filter0.addTestSetListener(substringLabeler0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.getCursor();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent1 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      filter0.isBusy();
      filter0.getCustomName();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      filter0.eventGeneratable(";o]fiuration");
      JComponent.isLightweightComponent(filter0);
      filter0.getCursor();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Saver saver0 = new Saver();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.firePropertyChange("$X$[HPCC<NWM]w.\"*", (short)29, (short)16);
      filter0.addDataSourceListener(textViewer0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      predictionAppender0.updateUI();
      filter0.connectionAllowed("(sIC+^s#");
      filter0.eventGeneratable("];e75YM|;p$@LmhM");
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.connectionNotification("(sIC+^s#", imageSaver0);
      DataSetEvent dataSetEvent0 = new DataSetEvent("(sIC+^s#", instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.setCustomName(" instances.");
      filter0.getVisual();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      filter0.addInstanceListener(filter0);
      filter0.getAlignmentY();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      serializedModelSaver0.getInputContext();
      filter0.disconnectionNotification("GpaZSa=", serializedModelSaver0);
      Instances instances0 = null;
      InstanceEvent instanceEvent0 = new InstanceEvent(serializedModelSaver0, (Instances) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.connectionNotification("3Tas|", "GpaZSa=");
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      int int0 = 0;
      TrainingSetEvent trainingSetEvent0 = null;
      try {
        trainingSetEvent0 = new TrainingSetEvent((Object) null, (Instances) null, (-11), 360, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      defaultEditorKit_CopyAction0.getValue("+}5*\tV<9^ 2SJ+&K");
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_CopyAction0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classValuePicker0, instances0);
      substringLabeler0.acceptTrainingSet(trainingSetEvent0);
      instanceEvent0.setStatus(490);
      filter0.acceptInstance(instanceEvent0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Cursor cursor0 = filter0.getCursor();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent1 = substringLabeler1.m_ie;
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      InstanceEvent instanceEvent2 = new InstanceEvent(serializedModelSaver0, instances0);
      instanceEvent2.setStatus(2);
      filter0.acceptInstance(instanceEvent2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.isBusy();
      filter0.getCustomName();
      filter0.setFilter(multiFilter0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      filter0.disconnectionNotification("<!-- technical-plaintext-end -->", cursor0);
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(classifierPerformanceEvaluator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ClassifierPerformanceEvaluator : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('*');
      MenuSelectionManager.defaultManager();
      Filter filter0 = new Filter();
      filter0.eventGeneratable("configuration");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.addTestSetListener(substringLabeler0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("4Fd-<{_A<Rz\"(");
      filter0.getCursor();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generateHelp();
      TimeZone.getAvailableIDs(47);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TestSetEvent testSetEvent0 = new TestSetEvent(spreadSubsample0, instances0, 0, 2, (-2799), (-2799));
      filter0.acceptTestSet(testSetEvent0);
      filter0.removeInstanceListener(substringLabeler1);
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("E\"ROR (SeeDlog for details).", "E\"ROR (SeeDlog for details).");
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      JComponent.isLightweightComponent(filter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('\"');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, (-2233));
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Filter filter1 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getRevision();
      filter0.setFilter(multiFilter0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("yh0x");
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport((BeanContextServices) null, (Locale) null, true);
      KeyStroke.getKeyStroke('\"');
      filter0.getConditionForKeyStroke(keyStroke0);
      filter0.getCursor();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getBounds((Rectangle) defaultCaret0);
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-1));
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTrainingSetListener(flowByExpression0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      BeanVisual beanVisual0 = crossValidationFoldMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.removeTrainingSetListener(flowByExpression0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent1 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      flowByExpression0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(costBenefitAnalysis0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      defaultEditorKit_CopyAction0.getValue("+}5*\tV<9^ 2SJ+&K");
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_CopyAction0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setInputFormat(instances0);
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.m_consumeNonMatchingInstances = true;
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classValuePicker0, instances0);
      substringLabeler0.acceptTrainingSet(trainingSetEvent0);
      instanceEvent0.setStatus(540);
      filter0.acceptInstance(instanceEvent0);
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.getCursor();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      InstanceEvent instanceEvent1 = new InstanceEvent(serializedModelSaver0, instances0);
      filter0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null, filter0);
      debugGraphics0.setDebugOptions(1);
      Vector<MockMinguoDate> vector0 = new Stack<MockMinguoDate>();
      JTree jTree0 = new JTree(vector0);
      jTree0.getRowBounds(3153);
      // Undeclared exception!
      try { 
        debugGraphics0.getClipBounds((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('*');
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = LibSVMSaver.FILE_EXTENSION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      filter0.getGraphics();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.getComponents();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification(".libsvm", classAssigner0);
      filter0.eventGeneratable(".libsvm");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_animated.gif");
      ImageSaver imageSaver0 = new ImageSaver();
      // Undeclared exception!
      try { 
        filter0.performRequest("node.m_End+1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // node.m_End+1:  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      byteArray0[1] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[8] = (byte)56;
      byteArray0[2] = (byte)56;
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = LibSVMSaver.FILE_EXTENSION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImageSaver imageSaver0 = new ImageSaver();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      Associator associator0 = new Associator();
      associator0.getStructure(".libsvm");
      filter0.acceptDataSet((DataSetEvent) null);
      Filter filter1 = new Filter();
      filter1.setCustomName("");
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter1.removeDataSourceListener(trainTestSplitMaker0);
      filter0.getWrappedAlgorithm();
      Filter filter2 = new Filter();
      Filter filter3 = new Filter();
      filter1.globalInfo();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setAlignmentX(0.0F);
      filter0.hasFocus();
      MockThread mockThread0 = new MockThread("$c3Q[qlul?n");
      filter0.m_filterThread = (Thread) mockThread0;
      filter0.disconnectionNotification("$c3Q[qlul?n", "$c3Q[qlul?n");
      filter0.getName();
      filter0.getWrappedAlgorithm();
      filter0.connectionNotification("locale", "locale");
      filter0.setFocusable(true);
      filter0.enumerateRequests();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addDataSourceListener(classAssigner0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      defaultEditorKit_CopyAction0.getValue("+}5*\tV<9^ 2SJ+&K");
      JToggleButton jToggleButton0 = new JToggleButton(defaultEditorKit_CopyAction0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setInputFormat(instances0);
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.m_consumeNonMatchingInstances = true;
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      filter0.getCursor();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      InstanceEvent instanceEvent0 = new InstanceEvent(serializedModelSaver0, instances0);
      filter0.acceptInstance(instanceEvent0);
      filter0.isBusy();
      filter0.getCustomName();
      Sorter sorter0 = new Sorter();
      sorter0.add((String) null, (Component) serializedModelSaver0);
      filter0.addInstanceListener(sorter0);
      filter0.setFilter(multiFilter0);
      // Undeclared exception!
      try { 
        filter0.performRequest("The number of folds for cross-validation used to generate training data for logistic modMls (-1 means use training data).");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of folds for cross-validation used to generate training data for logistic modMls (-1 means use training data). not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }
}
