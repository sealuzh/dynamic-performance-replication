/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:21:30 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.functor.VectorAccumulator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(3, 3, (-1854.698507879965));
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(471, 1);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new OoPlaceMatricesSubtraction();
      SparseMatrix.zero(471, 1, 29);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldNonZeroInColumn(471, vectorAccumulator0);
      singularValueDecompositor0.applicableTo(rowMajorSparseMatrix0);
      singularValueDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix1 = DenseMatrix.constant(3, 3, (-1854.698507879965));
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix1, denseMatrix0);
      singularValueDecompositor0.applicableTo(denseMatrix1);
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor1.decompose();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(3, 3203);
      boolean boolean0 = singularValueDecompositor0.applicableTo(columnMajorSparseMatrix0);
      SingularValueDecompositor singularValueDecompositor2 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor1.decompose();
      boolean boolean1 = singularValueDecompositor1.applicableTo(matrix0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.applicableTo(denseMatrix0);
      singularValueDecompositor0.decompose();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix1 = DenseMatrix.constant(3, 4, 4);
      DenseMatrix denseMatrix2 = DenseMatrix.randomSymmetric(3, mockRandom0);
      singularValueDecompositor0.applicableTo(denseMatrix2);
      singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor1.applicableTo(denseMatrix1);
      singularValueDecompositor1.decompose();
      singularValueDecompositor1.applicableTo(denseMatrix1);
      Random.setNextRandom((-1058));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix1 = DenseMatrix.constant(3, 1404, 401.11359055091);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      singularValueDecompositor0.applicableTo(matrix0);
      singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor1.decompose();
      // Undeclared exception!
      singularValueDecompositor1.decompose();
  }
}
