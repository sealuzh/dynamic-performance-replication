/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:58:27 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byteString0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-2151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=c883e8388ee8888888842880866880088620e4080888888c8384ae28836ceece4880883c8888828088838882888eec28638e388848488a88a838328a8e288a3e]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      String string0 = byteString0.toString();
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
      
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[0];
      byteString0.EMPTY.rangeEquals(2814, byteArray0, 2814, (-1788));
      String string0 = byteString0.toString();
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byteString0.toString();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      String string0 = byteString1.toString();
      assertEquals("[hex=88]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      boolean boolean0 = byteString2.startsWith(byteArray0);
      assertTrue(boolean0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      String string0 = byteString0.toString();
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      int int0 = byteString1.indexOf(byteString0, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.of(byteArray0);
      Object object0 = new Object();
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource.sha256(hashingSource0);
      ByteString byteString0 = buffer0.sha512();
      byteString0.toByteArray();
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.rangeEquals((-507), byteString1, (-507), (-507));
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      String string0 = byteString0.toString();
      assertEquals("[hex=888888888888]", string0);
      
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      assertSame(byteString1, byteString0);
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("|{(,)?>(>ICA5b");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals(0, int0);
      
      ByteString byteString1 = buffer0.sha512();
      String string0 = byteString1.toString();
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
      
      ByteString byteString2 = byteString0.substring(0);
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha256();
      ByteString byteString2 = byteString0.EMPTY.toAsciiUppercase();
      ByteString byteString3 = ByteString.of(byteArray0);
      boolean boolean0 = byteString2.startsWith(byteArray0);
      boolean boolean1 = byteString2.EMPTY.equals(byteString0);
      ByteString byteString4 = byteString0.EMPTY.sha256();
      ByteString byteString5 = byteString4.md5();
      byteString5.hashCode = (int) (byte)70;
      ByteString byteString6 = byteString4.EMPTY.sha512();
      int int0 = byteString4.indexOf(byteString1);
      assertEquals(0, int0);
      
      byteString6.EMPTY.toAsciiLowercase();
      boolean boolean2 = byteString0.startsWith(byteArray0);
      assertFalse(boolean2 == boolean1);
      
      byteString2.rangeEquals((int) (byte)70, byteString0, (int) (byte)0, 0);
      ByteString.decodeBase64("");
      ByteString.decodeBase64("");
      ByteString byteString7 = byteString0.substring(2);
      assertEquals(4, byteString7.size());
      
      byteString6.sha1();
      boolean boolean3 = byteString0.endsWith(byteArray0);
      assertFalse(boolean3 == boolean0);
      
      ByteString byteString8 = ByteString.of(byteArray0);
      assertTrue(byteString8.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(1, byteString0.size());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertEquals("[text=d]", string0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("{g=pL", charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(5, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = byteString0.equals("{g=pL");
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(5, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha512();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha512();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = byteString0.toString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
      
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertNotNull(hashingSink0);
      assertNotSame(byteString0, byteString1);
      
      ByteString byteString2 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString2.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      boolean boolean0 = byteString1.equals(byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals(64, byteString2.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)64;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotNull(byteString0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      int int0 = byteString1.indexOf(byteArray0, (int) (byte)64);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha512(hashingSink0, byteString1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotNull(hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      
      ByteString byteString2 = hashingSink1.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(64, byteString2.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotNull(byteString2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      
      boolean boolean0 = byteString0.equals(byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(64, byteString2.size());
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)33, (byte)64}, byteArray0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(9, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(9, byteString0.size());
      assertEquals(9, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(9, byteString0.size());
      assertEquals("[hex=888888888888888888]", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertSame(byteString0, byteString1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      String string1 = byteString0.base64();
      assertEquals(9, byteString0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("AAAAAAAAAAAA", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertSame(byteString0, byteString1);
      
      int int1 = byteString0.lastIndexOf(byteString1, (int) (byte)121);
      assertEquals(9, byteString0.size());
      assertEquals(9, byteString1.size());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = byteString0.base64Url();
      assertEquals(0, byteString0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha256();
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("[text=y]", string0);
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("ID1ID2", charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(6, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.getByte((-3974));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3974
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)13}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0, 1);
      assertEquals(2, byteString0.size());
      assertEquals(1, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)13}, byteArray0);
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("#oZVgh-2Z%hhK&_");
      assertNotNull(mockPrintStream0);
      
      ByteString byteString2 = ByteString.encodeUtf8("#oZVgh-2Z%hhK&_");
      assertEquals(15, byteString2.size());
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotNull(byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      
      // Undeclared exception!
      try { 
        byteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        ByteString.read(sequenceInputStream0, (-4830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4830
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)121, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)121, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, bufferedInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)121, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      
      try { 
        ByteString.read(sequenceInputStream0, (byte)85);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)121, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha512();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertEquals(0, byteString1.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = byteString0.toString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("[hex=88838838888888888888888883388888838888888888888883888e8883388e8888888838888888888883888888888888338e388888888888883838888e888838]", string0);
      assertNotNull(string0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertNotNull(byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertEquals("[text=i]", string0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertNotNull(string0);
      
      int int0 = byteString0.lastIndexOf(byteArray0, (int) (byte)105);
      assertEquals(1, byteString0.size());
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      
      ByteString byteString0 = ByteString.read(sequenceInputStream0, (byte)0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertEquals("[hex=88]", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals(1, byteString0.size());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(byteString1);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(1, byteString0.size());
      assertEquals("[text=k]", string0);
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(string0);
      assertSame(byteString0, byteString1);
      
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(64, byteString2.size());
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertNotNull(byteString2);
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      byteString0.write(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("5*tEX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 5*tEX
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("ISIZE");
      byteString0.hashCode();
      ByteString byteString1 = byteString0.md5();
      ByteString.codePointIndexToCharIndex("E;6$m1A<XKis%S<", 0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      byteString2.asByteBuffer();
      byteString1.lastIndexOf(byteString0);
      byteString2.utf8();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byteString0.toAsciiLowercase();
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("#q]b9q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: #
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Ad=TbVDqm})N]{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.EMPTY.hmacSha256(byteString1);
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byteString0.toString();
      byteString0.toAsciiUppercase();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = ByteString.of(byteArray0);
      byteString1.equals(byteString2);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      Buffer buffer0 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      ByteString byteString0 = buffer0.sha512();
      byteString0.EMPTY.write(buffer0);
      Object object0 = new Object();
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 35, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=35 byteCount=35
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|KyL1Rs~)#a0<");
      byteString0.utf8();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("size < 8: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 33, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.hashCode();
      Object object0 = new Object();
      byteString0.toString();
      Object object1 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString1.compareTo(byteString1);
      byteString1.indexOf(byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      Object object0 = new Object();
      byteString0.toString();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.compareTo(byteString1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.compareTo(byteString0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("0.>4xE<^LBuu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.compareTo(byteString2);
      byteString1.indexOf(byteArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JODSI<;X");
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)65;
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      Object object0 = new Object();
      byteString0.compareTo(byteString1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.compareTo(byteString1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)25;
      ByteString byteString0 = ByteString.of(byteArray0);
      Object object0 = new Object();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      byteString1.sha256();
      byteString0.base64();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.toString();
      Object object1 = new Object();
      Object object2 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.of(byteArray0);
      byteString0.toString();
  }
}
