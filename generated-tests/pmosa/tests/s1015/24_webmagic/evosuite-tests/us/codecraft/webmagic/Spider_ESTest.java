/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:50:26 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.setPriority((-226L));
      PipedReader pipedReader0 = new PipedReader();
      int int0 = 34;
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      Request request2 = request1.putExtra("us.codecraft.webmagic.Spider", pushbackReader0);
      Request request3 = request2.setBinaryContent(true);
      Request request4 = request3.setMethod("_cycle_tried_times");
      requestArray0[0] = request4;
      Request request5 = request2.setBinaryContent(true);
      requestArray0[1] = request5;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      requestArray0[2] = null;
      Request request6 = new Request();
      requestArray0[3] = request6;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      requestArray0[4] = null;
      Request request7 = request6.setPriority(919L);
      requestArray0[5] = request7;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "@g&j~R&cWf";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@g&j~R&cWf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("@g&j~R&cWf");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Lg&j~R&0cf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-2876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(1440);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pIb@b+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("pIb@b+", "pIb@b+");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-795));
      Spider spider2 = spider1.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setExitWhenComplete(true);
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", rawText='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", rawText='";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "\\4]jajA}eS3";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\u0004]jajA}eS3");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 3;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 3);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("y");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.pipeline(jsonFilePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("%20");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "sga");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(0);
      Spider spider5 = spider4.setDownloader(phantomJSDownloader1);
      spider5.extractAndAddRequests((Page) null, false);
      assertEquals(1, linkedList0.size());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      List<Pipeline> list0 = null;
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider2.setScheduler(fileCacheQueueScheduler0);
      List<Locale.LanguageRange> list1 = null;
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("XQ&yVi<7M)A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.thread(2);
      Spider spider4 = spider3.clearPipeline();
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      Class<Request> class1 = Request.class;
      json0.toList(class1);
      spider4.startRequests = null;
      page0.setUrl(json0);
      json0.toList(class0);
      spider4.setPipelines((List<Pipeline>) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("XQ&yVi<7M)A", "XQ&yVi<7M)A");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      spider5.start();
      Spider.create(simplePageProcessor0);
      spider0.runAsync();
      spider3.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      // Undeclared exception!
      try { 
        spider2.scheduler(fileCacheQueueScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D/FdxV5J");
      Spider spider0 = Spider.create(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("*}0V!G", "D/FdxV5J");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@g&j~R&cWf");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      spider1.getStartTime();
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.setPriority((-226L));
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      Request request2 = request1.putExtra("us.codecraft.webmagic.Spider", pushbackReader0);
      Request request3 = request2.setBinaryContent(true);
      Request request4 = request3.setMethod("_cycle_tried_times");
      requestArray0[0] = request4;
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.setUUID("_cycle_tried_times");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      spider0.start();
      spider0.getStatus();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\n");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.pipeline(filePipeline0);
      spider1.setEmptySleepTime((-147));
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("us.codecraft.webmagic.Spider");
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.setPriority((-226L));
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 34);
      Request request2 = request1.putExtra("us.codecraft.webmagic.Spider", pushbackReader0);
      Request request3 = request2.setBinaryContent(true);
      Request request4 = request3.setMethod("_cycle_tried_times");
      requestArray0[0] = request4;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("*RfAg)au+,@H", "_cycle_tried_times");
      spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(34);
      spider3.getSite();
      spider3.getSpiderListeners();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider4 = spider1.scheduler(duplicateRemovedScheduler0);
      spider4.setSpiderListeners((List<SpiderListener>) null);
      spider0.setUUID("us.codecraft.webmagic.Spider");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "fc$$q";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("fc$$q");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = new LinkedList<Request>();
      Request[] requestArray0 = new Request[3];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider.Status spider_Status0 = spider1.getStatus();
      spider_Status0.getValue();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadFactory0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      Request[] requestArray0 = new Request[3];
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2824, threadFactory0);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      spider2.stop();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":p6");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      spider0.stop();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H<iyccsVz)yd'Eb");
      Spider spider0 = Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("/");
      fileCacheQueueScheduler0.getDuplicateRemover();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline1 = new ResultItemsCollectorPipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5, 5, 0L, timeUnit0, linkedTransferQueue0, threadFactory0);
      Spider spider2 = spider1.thread((ExecutorService) threadPoolExecutor0, 5);
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.thread(5);
      Spider spider5 = spider4.setUUID("");
      Spider spider6 = spider5.setSpawnUrl(true);
      spider6.getScheduler();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Lg&j~R&0cf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      spider0.setEmptySleepTime((-2254));
      Spider spider1 = spider0.clearPipeline();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Lg&j~R&0cf");
      String string0 = spider1.getUUID();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.spawnUrl = false;
      Spider spider1 = spider0.clearPipeline();
      spider0.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider1.start();
      spider0.isSpawnUrl();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover((DuplicateRemover) null);
      spider0.scheduler(duplicateRemovedScheduler0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Lg&j~R&0cf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider0.setUUID("Lg&j~R&0cf");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Lg&j~R&0cf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "charsets*=s*['\"]*([^s;'\"]*)");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("g&j~R&cWf");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("ZP(G3", "g&j~R&cWf");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g&j~R&cWf";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-^LJ|g!+P[MFVI/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      Logger logger0 = (Logger)spider2.logger;
      spider2.logger = (org.slf4j.Logger) logger0;
      Spider spider4 = spider3.scheduler((Scheduler) null);
      Spider spider5 = spider4.startRequest((List<Request>) null);
      spider5.stop();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N]V/uv?aq-");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("N]V/uv?aq-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N]V/uv?aq-", "N]V/uv?aq-");
      spider0.start();
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "N]V/uv?aq-";
      stringArray0[1] = "N]V/uv?aq-";
      stringArray0[2] = "N]V/uv?aq-";
      stringArray0[3] = "N]V/uv?aq-";
      stringArray0[4] = "N]V/uv?aq-";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N]V/uv?aq-");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N]V/uv?aq-");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("N]V/uv?aq-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N]V/uv?aq-", "N]V/uv?aq-");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider1.getAll((Collection<String>) linkedBlockingDeque0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N]V/uv?aq-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N]V/uv?aq-", "N]V/uv?aq-");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider1.getAll((Collection<String>) linkedBlockingDeque0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.create(simplePageProcessor0);
      spider0.sleep(2222);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N]V/uv?aq-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N]V/uv?aq-", "N]V/uv?aq-");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(4, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.pipeline(consolePipeline0);
      spider0.downloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", targetRequests=", "wWrM,}ptZ");
      spider0.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
