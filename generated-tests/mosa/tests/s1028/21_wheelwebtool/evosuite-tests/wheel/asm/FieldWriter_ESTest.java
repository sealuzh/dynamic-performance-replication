/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:39:55 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777183, "", "", "])", "])");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2102), "", "", "$;@e", "$;@e");
      fieldWriter0.visitAnnotation("$;@e", true);
      System.setCurrentTimeMillis(2);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777256);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777256, "", "", ":$2e", ":$2e");
      System.setCurrentTimeMillis(2);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "", "", "");
      ByteVector byteVector0 = new ByteVector(233);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2102), "", "", ":$e", ":$e");
      fieldWriter0.visitAnnotation(":$e", true);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(16777215);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      ClassWriter classWriter1 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 16777215, "Nq$'nvwkTc0L", "RuntimeInvisibleAnnotations", "k0bm!\",Wx", (Object) null);
      fieldWriter0.visitAnnotation("k0bm!\",Wx", true);
      System.setCurrentTimeMillis(1);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      ClassWriter classWriter1 = new ClassWriter(4078);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Synthetic", "", (String) null, (Object) null);
      fieldWriter0.visitAnnotation(":7NKNtbe>1pAuvh(I", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777215, "", "", "])", "])");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("])", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      ClassWriter classWriter1 = new ClassWriter(4078);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 167, "Synthetic", "Synthetic", (String) null, "Synthetic");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("e<7AsoVwR", true);
      System.setCurrentTimeMillis(16777215);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777215, "", "", "", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "Class not found", "Class not found", "", "Class not found");
      System.setCurrentTimeMillis(1);
      fieldWriter1.getSize();
      // Undeclared exception!
      try { 
        fieldWriter1.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2102), "", "", "])", "])");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute(".hxb:Ss8>'[dBw");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777164);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777164, "", "", "", "");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777215);
      classWriter0.version = (-2101);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777215, "", "", ":$e", ":$e");
      System.setCurrentTimeMillis(2);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation(":$e", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(2);
      boolean boolean0 = ClassReader.WRITER;
      classWriter1.visit(4, 889, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "Cr-0", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 65535, "RuntimeVisibleAnnotations", "KmlO;bqP|PYJPm", "RuntimeVisibleAnnotations", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", true);
      ByteVector byteVector0 = classWriter1.pool;
      ByteVector byteVector1 = byteVector0.put11((-1185), 1);
      fieldWriter0.put(byteVector1);
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.DirectoryFileFilter");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter(510);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter1.visit((-262), 8, "ConstantValue", "Q<!!nx.MZ{", "The suffix must not be null", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 6223, "<init>", "", "Cr-0", (Object) null);
      fieldWriter0.visitAnnotation("sW~CfgxL~t8=N(%5k", true);
      ByteVector byteVector0 = classWriter1.pool;
      ByteVector byteVector1 = byteVector0.put11(65535, 0);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitEnd();
  }
}
