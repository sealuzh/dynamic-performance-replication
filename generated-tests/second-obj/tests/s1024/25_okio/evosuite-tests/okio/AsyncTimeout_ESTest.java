/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:01:05 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.timeout(60000000000L, timeUnit0);
      asyncTimeout1.timedOut();
      asyncTimeout1.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        asyncTimeout2.timeout((-1174L), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout < 0: -1174
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AsyncTimeout asyncTimeout0 = new AsyncTimeout();
          Pipe pipe0 = new Pipe(100000000L);
          Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
          RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
          byte[] byteArray0 = new byte[4];
          byteArray0[2] = (byte)114;
          byteArray0[3] = (byte) (-2);
          BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
          HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
          Sink sink0 = hashingSink0.delegate();
          asyncTimeout0.sink(sink0);
          // Undeclared exception!
          try { 
            asyncTimeout0.waitUntilNotified((Object) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("okio.Timeout", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.throwIfReached();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadline(1000000L, timeUnit0);
      asyncTimeout0.exit(true);
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException((String) null);
      mockIOException0.getSuppressed();
      mockIOException0.printStackTrace();
      asyncTimeout1.exit();
      asyncTimeout0.enter();
      asyncTimeout0.exit((IOException) mockIOException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      long long0 = 1000000000L;
      Pipe pipe0 = new Pipe(1000000000L);
      Source source0 = pipe0.source();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      asyncTimeout0.deadline(1L, timeUnit0);
      asyncTimeout0.source(source0);
      asyncTimeout0.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.throwIfReached();
      Timeout timeout0 = asyncTimeout0.deadline(1000000L, timeUnit0);
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      asyncTimeout0.exit((IOException) null);
      MockIOException mockIOException0 = new MockIOException("size == 0", (Throwable) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException((IOException) null);
      timeout0.throwIfReached();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout1.exit();
      asyncTimeout1.exit(iOException0);
      asyncTimeout0.exit(false);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-3632L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -3632
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 60000000000L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.timeout(60000000000L, timeUnit0);
      asyncTimeout1.timedOut();
      asyncTimeout1.timedOut();
      asyncTimeout0.enter();
      asyncTimeout1.timedOut();
      asyncTimeout1.timedOut();
      // Undeclared exception!
      try { 
        asyncTimeout1.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }
}
