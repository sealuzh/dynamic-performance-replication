/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 19:07:13 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray(1135);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray1.fluentAdd((Object) jSONObject0);
      jSONArray1.isEmpty();
      long long0 = new Integer(80);
      jSONArray1.containsAll(jSONArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      ConcurrentHashMap.newKeySet();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray1.toJavaList(class0);
      jSONArray1.addAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3875);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3875, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(2036, false);
      Collection<Object> collection0 = jSONObject0.values();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, collection0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(2052);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2052, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getShort(3089);
      jSONArray1.getSqlDate(0);
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableCircularReferenceDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableCircularReferenceDetect;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowISO8601DateFormat;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.NonStringKeyAsString;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AllowUnQuotedFieldNames;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        JSON.parse("D`Gz|&fNaXn9", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : D`Gz|&fNaXn9
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains((Object) null);
      JSON.DEFFAULT_DATE_FORMAT = "%~KF^D9k`tq~{#";
      JSONArray jSONArray1 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSON.toJSONString((Object) null, false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ParserConfig.getGlobalInstance();
      ZoneId.getAvailableZoneIds();
      JSONObject jSONObject0 = new JSONObject(3562);
      jSONObject0.keySet();
      jSONArray0.fluentSet(80, jSONObject0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) "fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getJSONObject(80);
      Class<JSONObject> class1 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 82
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(4989, "(I)Z");
      Integer integer0 = new Integer(771);
      jSONArray0.isEmpty();
      jSONArray0.getFloatValue(3089);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains((Object) null);
      JSON.DEFFAULT_DATE_FORMAT = "";
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      ParserConfig parserConfig0 = new ParserConfig();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONArray1.remove((Object) set0);
      int int0 = 3562;
      JSONObject jSONObject0 = new JSONObject(3562);
      Set<String> set1 = jSONObject0.keySet();
      jSONArray1.fluentRemoveAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) "fastjson.parser.deny");
      Class<Object> class0 = Object.class;
      jSONArray2.retainAll(set1);
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray1.getLongValue(771);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.setRelatedArray(jSONArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray2.getDouble(80);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray2.size();
      jSONArray1.getShortValue(962);
      jSONArray0.getJSONArray(771);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-372));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4989;
      jSONArray0.fluentSet(4989, "(I)Z");
      int int1 = 771;
      Integer integer0 = new Integer(771);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(4989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(I)Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2903, (Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      parserConfig0.configFromPropety(properties1);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray1.getObject(80, class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.iterator();
      jSONArray1.getJSONObject(2375);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      jSONArray3.addAll((Collection<?>) jSONArray2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableASM;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.InternFieldNames;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.AllowUnQuotedFieldNames;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.DisableSpecialKeyDetect;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.SupportArrayToBean;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.DisableSpecialKeyDetect;
      featureArray0[8] = feature8;
      JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
      jSONArray3.indexOf((Object) null);
      assertEquals(5808, jSONArray1.size());
      assertEquals(5808, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2903, (Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      parserConfig0.configFromPropety(properties1);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray1.getObject(80, class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.iterator();
      jSONArray1.getJSONObject(2375);
      Class<ObjectInputStream> class1 = ObjectInputStream.class;
      Class<Object> class2 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("7!ixg*q>*=]'d$TM", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("%~KF^D9k`tq~{#", class1, class2, class2, (Field) null, 50900, 2375, 3089);
      Class<JSONObject> class3 = JSONObject.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getField();
      JSONObject jSONObject0 = new JSONObject(false);
      // Undeclared exception!
      try { 
        jSONArray2.add((-1957), (Object) jSONObject0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1957, Size: 2904
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(4989, "@type");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(4989);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray1.getLongValue(771);
      jSONArray0.setRelatedArray("(I)Z");
      JSONArray jSONArray2 = new JSONArray(80);
      JSON.toJSON((Object) jSONArray1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray1.forEach(consumer0);
      jSONArray1.defaultLocale.getUnicodeLocaleKeys();
      jSONArray1.addAll((Collection<?>) jSONArray2);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.getBigInteger(80);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-727), (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -727, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray1.getLongValue(771);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray2.getDouble(80);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray2.size();
      jSONArray1.getShortValue(962);
      jSONArray0.getJSONArray(771);
      jSONArray1.getShortValue(0);
      TypeReference<Annotation> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Annotation>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4989;
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray0.getLongValue(2003);
      jSONArray0.containsAll(jSONArray1);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray0.getDouble(3089);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.addAll((Collection<?>) jSONArray1);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(9980);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9980, Size: 9980
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray1.getLongValue(771);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray2.getDouble(80);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.getIntValue(82);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      jSONArray1.toJavaList((Class<JSONObject>) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(80);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2893, integer0);
      jSONArray2.getBoolean(1001);
      jSONArray2.getShort(1635);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll(1635, (Collection<?>) jSONArray1);
      jSONArray0.getComponentType();
      jSONArray0.getByteValue(80);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray4 = new JSONArray(jSONArray1);
      jSONArray4.getTimestamp(80);
      jSONArray4.getFloatValue(2875);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.getBigInteger(2875);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.global = parserConfig0;
      jSONArray1.getJSONArray(80);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JSONArray jSONArray5 = jSONArray2.fluentAdd(1635, (Object) sequenceInputStream0);
      jSONArray5.getTimestamp(80);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentPut("%~KF^D9k`tq~{#", (Object) null);
      Integer integer1 = new Integer(2587);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(1635);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.io.SequenceInputStream@5687d81a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "error");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "(I)Z");
      jSONArray1.getLongValue(771);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray2.getDouble(80);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray2.size();
      jSONArray1.getShortValue(962);
      jSONArray0.getJSONArray(771);
      TypeReference<Annotation> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Annotation>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ujg!,6LOafbyM7F", parserConfig0);
      ZoneId.getAvailableZoneIds();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      int int0 = jSONArray0.lastIndexOf(fileSystemHandling0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("YPl*", hashMap0);
      jSONArray0.contains((Object) null);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.containsAll(jSONArray2);
      Integer integer0 = new Integer((-2271));
      Integer integer1 = new Integer(3089);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.get(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<DefaultJSONParser> class0 = DefaultJSONParser.class;
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.equals(jSONArray0);
      jSONArray0.fluentClear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2375, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2375, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.contains(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0);
      ZoneId.getAvailableZoneIds();
      JSONObject jSONObject0 = new JSONObject(2883);
      Set<String> set0 = jSONObject0.keySet();
      jSONArray2.fluentRemoveAll(set0);
      jSONArray0.fluentAdd((Object) "%~KF^D9k`tq~{#");
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : %~KF^D9k`tq~{#
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      jSONArray0.remove((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray(0);
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) class0);
      assertNotSame(jSONArray2, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(2893, (Object) null);
      jSONArray1.remove((Object) null);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(2893, jSONArray1.size());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray2 = new JSONArray(3089);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)107;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray0.contains(jSONArray2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      JSONArray jSONArray3 = jSONArray1.fluentClear();
      jSONArray3.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray4 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(2858, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2858, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2863, (Object) null);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("VT:rAb]8w<U7M");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VT:rAb]8w<U7M");
      jSONArray2.getObject(2863, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Class<String> class1 = String.class;
      FieldInfo.getFieldType(class0, class1, class0);
      Integer integer0 = new Integer(1);
      Class<Object> class2 = Object.class;
      jSONArray1.toJavaList(class2);
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46", 3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getByte(79);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(80);
      jSONArray0.contains((Object) null);
      jSONArray0.fluentClear();
      jSONArray0.size();
      jSONArray1.remove((Object) integer0);
      jSONArray0.isEmpty();
      jSONArray1.clone();
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "";
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("", class0, 2893);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. 
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 0, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getIntValue(1);
      jSONArray0.get(985);
      JSONObject[] jSONObjectArray0 = new JSONObject[0];
      // Undeclared exception!
      try { 
        jSONArray0.toArray(jSONObjectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2893, (Object) null);
      Class<Integer> class0 = Integer.class;
      jSONArray2.getShort(80);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("VT:rAb]8w<U7M");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VT:rAb]8w<U7M");
      jSONArray2.getObject(2893, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray1.getObject(0, class1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "aF~aASulX7aE";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = null;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2872, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) jSONArray0);
      int int0 = 3878;
      // Undeclared exception!
      try { 
        jSONArray4.add(3878, (Object) fileSystemHandling0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3878, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray0.fluentClear();
      jSONArray0.remove((Object) jSONArray1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      Feature[] featureArray0 = new Feature[7];
      int int0 = 999;
      Integer integer0 = new Integer((-1691));
      // Undeclared exception!
      try { 
        jSONArray1.set((-1691), charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer integer0 = new Integer(80);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2893, integer0);
      jSONArray2.getBoolean(1001);
      jSONArray2.getShort(1635);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.getJSONObject(1635);
      jSONArray0.getBigInteger(80);
      jSONArray0.clone();
      JSONArray jSONArray3 = new JSONArray(jSONArray0);
      float float0 = new Integer((-1248));
      jSONArray2.fluentAddAll((Collection<?>) jSONArray3);
      jSONArray1.setRelatedArray(jSONArray0);
      jSONArray0.getFloat(3089);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray4.fluentRemoveAll(jSONArray3);
      jSONArray0.containsAll(jSONArray2);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      jSONArray2.toJavaList(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(161, (Collection<?>) linkedList0);
      jSONArray2.getTimestamp(1);
      jSONArray2.getFloatValue(80);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      Class<Object> class0 = Object.class;
      jSONArray2.toJavaList(class0);
      jSONArray0.fluentRemoveAll(jSONArray1);
      LinkedHashSet<JSONObject> linkedHashSet1 = new LinkedHashSet<JSONObject>();
      linkedList0.containsAll(linkedHashSet1);
      // Undeclared exception!
      try { 
        jSONArray2.getLongValue((-1427));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.remove((Object) fileSystemHandling0);
      jSONArray0.getBooleanValue(2893);
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray0.fluentClear();
      JSON.parseArray("");
      JSONArray jSONArray4 = jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray3.fluentSet(970, jSONArray4);
      jSONArray4.clone();
      assertEquals(971, jSONArray1.size());
      assertEquals(971, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(161, (Collection<?>) linkedList0);
      jSONArray2.getTimestamp(0);
      jSONArray2.getByte(2893);
      jSONArray1.getFloatValue(469);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      linkedList0.containsAll(linkedHashSet0);
      jSONArray1.getByte(1);
      jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray0.fluentRetainAll(jSONArray1);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+?w&;&yieW+^");
      jSONArray1.getObject(1, (Type) parameterizedTypeImpl0);
      defaultJSONParser0.getFieldTypeResolver();
      jSONArray1.getJSONObject(0);
      jSONArray0.getDate(1198);
      jSONArray1.getInteger(87);
      jSONArray1.fluentAdd((Object) defaultJSONParser0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(2877);
      jSONArray1.getBooleanValue(10);
      jSONArray0.clone();
      Integer integer1 = new Integer(3089);
      jSONArray0.toArray();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.getSqlDate(1);
      jSONArray1.getBigInteger(0);
      jSONArray3.getLong(2877);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-704));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.remove((Object) fileSystemHandling0);
      jSONArray0.isEmpty();
      jSONArray1.clone();
      assertEquals(2894, jSONArray0.size());
      
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray3 = jSONArray0.fluentRemoveAll(list0);
      jSONArray3.containsAll(jSONArray2);
      jSONArray0.fluentRetainAll(jSONArray2);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.fluentSet(80, jSONObject0);
      Class<Integer> class0 = Integer.class;
      jSONArray0.add((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)104;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, featureArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig((byte)105, false);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[7];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<JSONObject> class1 = JSONObject.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[6] = (SerializeFilter) pascalNameFilter2;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.MapSortField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VT:rAb]8w<U7M");
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2790), (Type) class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.contains(fileSystemHandling0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.size();
      jSONArray0.remove((Object) jSONArray1);
      jSONArray0.isEmpty();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), (byte)26);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      jSONArray3.add((Object) class0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%~KF^D9k`tq~{#");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      // Undeclared exception!
      try { 
        jSONArray0.getObject(80, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      jSONArray0.size();
      jSONArray0.remove((Object) null);
      jSONArray0.isEmpty();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = new JSONArray(87);
      int int0 = (-3285);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      Type type0 = null;
      jSONArray1.getObject(2893, (Type) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("%~KF^D9k`tq~{#");
      defaultJSONParser0.getFieldTypeResolver();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(1, (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject((-1281));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.getDoubleValue(15);
      JSON.toJSONBytes((Object) integer0, 213, serializerFeatureArray0);
      Integer integer1 = new Integer(466);
      JSONArray jSONArray2 = jSONArray0.fluentSet(1, "");
      jSONArray1.getFloat(2873);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      jSONArray2.getByte(30);
      jSONArray0.fluentRetainAll(jSONArray1);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.set((-1), jSONArray1);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(2893);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2893, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 15;
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(15, integer0);
      jSONArray0.getLong(15);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(15);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(3089);
      jSONArray0.set(239, integer0);
      EvoSuiteFile evoSuiteFile0 = null;
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.fluentAdd((Object) jSONArray2);
      int int0 = 2886;
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(1501);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      JSON.parseObject("");
      JSON.toJSONString((Object) null, 2594, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.fluentAddAll(0, (Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 0, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(161, (Collection<?>) linkedList0);
      jSONArray2.getTimestamp(0);
      assertEquals(2894, jSONArray0.size());
      
      float float0 = jSONArray1.getFloatValue(469);
      assertEquals(2894, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
      
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      linkedList0.containsAll(linkedHashSet0);
      jSONArray0.getLongValue(161);
      jSONArray2.toArray();
      jSONArray1.setComponentType(parameterizedTypeImpl0);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gIL,~=E9]oKMw>|%b&g");
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(80, true);
      jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(jSONObject0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(485, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aYsfa(?O_}%");
      jSONArray1.getObject(373, (Type) null);
      defaultJSONParser0.getFieldTypeResolver();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.getJSONObject(2);
      jSONArray0.getDate(2);
      jSONArray0.getInteger(192);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONObject1);
      jSONArray3.fluentRemove(192);
      jSONArray0.getBooleanValue(192);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue(1246);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1246, Size: 486
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.getFloat(1749);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.retainAll(jSONArray1);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(2893, (Object) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.utlIOUtils");
      JSONArray jSONArray2 = jSONArray1.fluentRemove(383);
      Integer integer0 = new Integer(999);
      jSONArray2.set(0, integer0);
      jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray0.getSqlDate(2886);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray1.fluentRemove(80);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-4130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.getDoubleValue(15);
      jSONArray0.getLong(15);
      jSONArray1.getBigDecimal(15);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator(2893);
      jSONArray0.getComponentType();
      jSONArray1.getBigDecimal(15);
      jSONArray1.getSqlDate(1378);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentRemove(2893);
      jSONArray2.getDouble(2869);
      int int0 = jSONArray2.indexOf(listIterator0);
      assertEquals(2893, jSONArray1.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      JSONObject jSONObject0 = new JSONObject(471, true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(map0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(471, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type");
      jSONArray0.getObject(15, (Type) null);
      defaultJSONParser0.getFieldTypeResolver();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray2.getJSONObject(15);
      jSONArray0.getInteger(0);
      jSONArray3.fluentAdd((Object) jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2893, (Object) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.utlIOUtils");
      JSONArray jSONArray3 = jSONArray1.fluentRemove(383);
      Integer integer0 = new Integer(999);
      jSONArray3.set(0, integer0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray3.getFloat(482);
      jSONArray2.getByteValue(80);
      jSONArray2.isEmpty();
      jSONArray2.removeAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(2845);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2845, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.getDoubleValue(15);
      jSONArray0.getLong(15);
      jSONArray1.getBigDecimal(15);
      jSONArray1.listIterator(2893);
      jSONArray0.getComponentType();
      jSONArray1.getBigDecimal(15);
      jSONArray1.getSqlDate(1378);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-2401));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray2.fluentSet(80, jSONArray1);
      int int0 = 2880;
      int int1 = 986;
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(986);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 986, Size: 81
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(2893, (Object) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.utlIOUtils");
      JSONArray jSONArray3 = jSONArray1.fluentRemove(383);
      Integer integer0 = new Integer(999);
      jSONArray3.set(0, integer0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      jSONArray3.getFloat(482);
      jSONArray3.fluentRetainAll(jSONArray1);
      jSONArray2.fluentAddAll(482, (Collection<?>) jSONArray1);
      assertEquals(5786, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      jSONArray0.getComponentType();
      jSONArray1.componentType = null;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 0, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray1.getFloat(2857);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(linkedList0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "aWCoJ^eeB");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.set(3089, jSONArray1);
      jSONArray1.getFloat(80);
      jSONArray2.fluentAddAll(3089, (Collection<?>) jSONArray0);
      assertEquals(6180, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 15;
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(24);
      JSONArray jSONArray1 = jSONArray0.fluentSet(80, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      jSONArray1.set(1, serializerFeature0);
      Class<String> class0 = String.class;
      JSON.parseObject("", class0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 81
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator((-344));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -344
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "aWCoJ^eeB");
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONArray1.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray3.fluentRetainAll(jSONArray1);
      JSONArray jSONArray4 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray4.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1501);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getFloat(1749);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      assertSame(jSONArray2, jSONArray3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray1 = jSONArray0.fluentSet(15, fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 16
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentSet(3641, jSONArray1);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      Class<Integer> class0 = Integer.class;
      jSONArray0.clear();
      jSONArray1.toJavaList(class0);
      jSONArray2.setRelatedArray(class0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(56, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(56) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gIL,~=E9]oKMw>|%b&g");
      byteArray0[0] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(80, true);
      jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(jSONObject0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(485, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aYsfa(?O_}%");
      jSONArray1.getObject(373, (Type) null);
      defaultJSONParser0.getFieldTypeResolver();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray3.toJavaList(class0);
      assertEquals(487, jSONArray3.size());
      
      JSONArray jSONArray4 = jSONArray2.fluentRemoveAll(jSONArray0);
      jSONArray4.containsAll(list0);
      JSONArray jSONArray5 = new JSONArray();
      jSONArray5.fluentRetainAll(jSONArray0);
      assertTrue(jSONArray0.equals((Object)jSONArray5));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(80);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      jSONArray1.setRelatedArray((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-83), 452);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -83
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      ConcurrentHashMap.KeySetView<JSONObject, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(2863);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) concurrentHashMap_KeySetView0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2893, jSONArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 49, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(148, (Collection<?>) concurrentHashMap_KeySetView0);
      jSONArray2.getTimestamp(80);
      // Undeclared exception!
      try { 
        jSONArray3.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2894
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, (Object) null);
      jSONArray0.fluentAdd(1, (Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2895
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 15;
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-27));
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray1.getBoolean(467);
      jSONArray0.getShort(2893);
      JSON.parseObject("");
      jSONArray1.getJSONObject(2887);
      jSONArray1.getBigInteger(80);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportAutoType;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableCircularReferenceDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.DisableFieldSmartMatch;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.IgnoreAutoType;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AutoCloseSource;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.UseBigDecimal;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.UseBigDecimal;
      featureArray0[8] = feature8;
      JSON.parse(byteArray0, featureArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(80, true);
      jSONObject0.getInnerMap();
      JSONObject jSONObject1 = new JSONObject(485, true);
      JSONArray jSONArray1 = jSONArray0.fluentSet(485, jSONObject1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject((-3338), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@type");
      Integer integer0 = new Integer(2873);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(80, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JSONArray jSONArray0 = new JSONArray(2892);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(3089, (Object) fileSystemHandling0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2894
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(24);
      JSONArray jSONArray1 = jSONArray0.fluentSet(80, integer0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONArray1.getDate(80);
      jSONArray0.getIntValue(80);
      jSONArray0.get(24);
      assertEquals(81, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-6752));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 15, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      jSONArray0.fluentSet(2893, integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(2893);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(80, true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(map0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(495, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aYsfa(?O_}%");
      JSONArray jSONArray2 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray2.toJavaList(class0);
      jSONArray0.fluentRemoveAll(list0);
      jSONArray1.containsAll(jSONArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray1 = new JSONArray(1845);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      Class<Annotation> class1 = Annotation.class;
      List<Annotation> list0 = jSONArray1.toJavaList(class1);
      jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(948, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 948, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.listIterator();
      jSONArray1.getString(3089);
      jSONArray1.remove(242);
      Class<String> class0 = String.class;
      FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(class0);
      jSONArray0.getBoolean(242);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray2.contains(jSONArray0);
      jSONArray0.fluentClear();
      jSONArray0.size();
      jSONArray0.remove((Object) jSONArray1);
      jSONArray1.isEmpty();
      jSONArray0.clone();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(80, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 0, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(161, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 161, Size: 81
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) integer0, 0, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getIntValue(1);
      jSONArray0.get(985);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processValue");
      jSONArray3.getObject(0, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray3.getObject(0, class1);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(80);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      jSONArray2.fluentSet(3947, jSONArray0);
      jSONArray0.hashCode();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getString(3089);
      Class<String> class0 = String.class;
      FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(class0);
      jSONArray0.getBoolean(242);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 242;
      JSON.defaultLocale = jSONArray0.defaultLocale;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1502
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      int int0 = 0;
      JSONArray jSONArray1 = new JSONArray(3089);
      Integer integer0 = new Integer((-2146));
      jSONArray1.fluentSet((-1), "@type");
      // Undeclared exception!
      try { 
        jSONArray1.getShort(2889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2889, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getShort(3089);
      jSONArray1.getJSONObject(2013);
      jSONArray0.getBigInteger(773);
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray0.fluentSet(0, jSONArray2);
      jSONArray1.hashCode();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(80, true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(map0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(495, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aYsfa(?O_}%");
      jSONArray1.getObject(373, (Type) null);
      defaultJSONParser0.getFieldTypeResolver();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getInteger(192);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONObject1);
      jSONArray3.fluentRemove(192);
      jSONArray0.getBooleanValue(192);
      jSONArray2.getBigDecimal(80);
      jSONArray0.iterator();
      assertEquals(496, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("@type");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 80);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.getObject(2, class0);
      JSONArray jSONArray2 = new JSONArray();
      jSONArray2.fluentAdd((Object) null);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      JSON.parse("", parserConfig0);
      jSONArray1.fluentRemove((Object) null);
      int int0 = 1455;
      Class<Object> class1 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      Class<JSONObject> class2 = JSONObject.class;
      JSONField jSONField0 = mock(JSONField.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONField0).format();
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("h]$$", (Method) null, (Field) null, class2, class0, (-1), 2, 80, jSONField0, jSONField0, "%~KF^D9k`tq~{#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processValue");
      jSONArray3.getObject(0, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray3.getObject(0, class1);
      JSONArray jSONArray4 = new JSONArray();
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) class0);
      jSONArray5.containsAll(jSONArray3);
      jSONArray1.clone();
      assertEquals(81, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processValue");
      jSONArray3.getObject(0, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray3.getObject(0, class1);
      JSONArray jSONArray4 = new JSONArray();
      jSONArray4.fluentAdd((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray4.getByteValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 242;
      EvoSuiteFile evoSuiteFile0 = null;
      JSON.defaultLocale = jSONArray0.defaultLocale;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1502
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getString(1476);
      Class<String> class0 = String.class;
      FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(class0);
      jSONArray0.getBoolean(242);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1502
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, 1420, serializerFeatureArray0);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray0.getString(1476);
      Class<Integer> class0 = Integer.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((-37));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(2861);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2861, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      int int0 = 2893;
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray0.getInteger(2893);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte) (-31);
      jSONArray0.equals((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((byte) (-31));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%~KF^D9k`tq~{#";
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(80, true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(map0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(495, jSONObject1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("aYsfa(?O_}%");
      jSONArray1.getObject(373, (Type) null);
      defaultJSONParser0.getFieldTypeResolver();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1605), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2526);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong((-568));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      jSONArray2.lastIndexOf((Object) null);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray3 = jSONArray0.fluentSet(0, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type");
      // Undeclared exception!
      try { 
        jSONArray3.getObject(80, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processValue");
      jSONArray3.getObject(0, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray3.getObject(0, class1);
      JSONArray jSONArray4 = new JSONArray();
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) class0);
      int int0 = 2383;
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      JSONArray jSONArray6 = jSONArray0.fluentRemove((Object) jSONObject0);
      jSONArray2.fluentSet(int0, jSONArray6);
      Object object0 = jSONArray5.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(80);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[6] = serializerFeature6;
      JSON.toJSONString((Object) jSONArray1, 94, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.subList((-260), 51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -260
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 4961;
      JSONArray jSONArray0 = new JSONArray(4961);
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray1.fluentSet(80, jSONArray2);
      Class<Integer> class0 = Integer.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("processValue");
      jSONArray3.getObject(0, (Type) class0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.AllowArbitraryCommas;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.CustomMapDeserializer;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AutoCloseSource;
      featureArray0[3] = feature3;
      // Undeclared exception!
      try { 
        JSON.parseObject("lrkICduh5gl#D@\"7)x", class0, (ParseProcess) null, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray1.subList(3089, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      Integer integer0 = new Integer(1);
      jSONArray0.fluentSet(2893, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2894
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray0.getString(1476);
      jSONArray0.getBoolean(1498);
      jSONArray1.indexOf(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((-510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      int int0 = 2893;
      Integer integer0 = new Integer(1);
      jSONArray0.fluentSet(2893, integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2894
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1602);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(963);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray1.getObject(952, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 952, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 2196;
      JSONArray jSONArray0 = new JSONArray(2196);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("", parserConfig0, 2196);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1781), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.size();
      double double0 = new Integer(3089);
      assertEquals(3089, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(15);
      Integer integer0 = new Integer(1);
      JSONArray jSONArray1 = jSONArray0.fluentSet(2893, integer0);
      jSONArray0.getString(1476);
      Class<Integer> class0 = Integer.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      jSONArray1.setComponentType(type0);
      jSONArray0.getBoolean(1498);
      assertEquals(2894, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(984);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1501, "1.2.46");
      jSONArray1.getDoubleValue(242);
      jSONArray0.getByteValue(80);
      jSONArray0.toArray();
      assertEquals(1502, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(984);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray0.remove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(984);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(3089, 561, 2189);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(561, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(3479);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3479, Size: 562
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@type";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "@type";
      stringArray0[3] = "%~KF^D9k`tq~{#";
      stringArray0[4] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1962), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 984;
      JSONArray jSONArray0 = new JSONArray(984);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(3600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3600, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.lastIndexOf(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getRelatedArray();
      jSONArray0.hashCode();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(984);
      Class<Object> class0 = Object.class;
      JSONScanner jSONScanner0 = new JSONScanner("@type", 984);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SupportArrayToBean;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.SupportArrayToBean;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.OrderedField;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      JSON.parseObject("", class0, (ParseProcess) null, featureArray0);
      jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 984, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      int int0 = (-393217);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-393217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.VERSION;
      Object object0 = jSONArray0.clone();
      assertNotSame(object0, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1015);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2771);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(2213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2213, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2169);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(24180);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24180, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray0.add((Object) linkedList0);
      int int0 = jSONArray1.lastIndexOf(linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray0.fluentSet(0, jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(2059);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2059, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(801);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 801, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.VERSION;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.getComponentType();
      jSONArray0.set(80, (Object) null);
      assertEquals(81, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(347);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 347, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3589, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-44));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(2135);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3041, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3041, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 2526;
      JSONArray jSONArray0 = new JSONArray();
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2771), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-2001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(80);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedList0);
      linkedList0.addFirst(jSONArray2);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray1.fluentRetainAll(linkedHashSet0);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      jSONArray2.addAll((Collection<?>) jSONArray0);
      jSONArray0.removeAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2526);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.addFirst(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 2526;
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(80);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2663);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2663), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2663, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(4989, "");
      jSONArray1.getLongValue(922);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.remove(4989);
      jSONArray2.getDouble(512);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray2.size();
      jSONArray1.getShortValue(962);
      jSONArray0.getJSONArray(512);
      TypeReference<Annotation> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<Annotation>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "AyTLx]8cqSJUj_k";
      stringArray0[1] = ",%BNOEHe`R/LM";
      stringArray0[2] = "bS19t+0K\"i2%YQ";
      stringArray0[3] = "DisableFieldSmartMatch";
      stringArray0[4] = "";
      stringArray0[5] = "5>$e,0`%uB'4C$V)z";
      stringArray0[6] = "com.alibaba.fastjson.serializer.AnnotationSerializer";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.util.ServiceLoader", treeMap0);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      JSONArray jSONArray0 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-1199), (Object) "bS19t+0K\"i2%YQ");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1199, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2526);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.addFirst(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray1.toJavaList(class0);
      boolean boolean0 = jSONArray0.addAll((Collection<?>) list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2111);
      int int0 = (-3058);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(2111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(111, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2526);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2526);
      ConcurrentSkipListMap<Integer, JSONObject> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, JSONObject>();
      Collection<JSONObject> collection0 = concurrentSkipListMap0.values();
      boolean boolean0 = jSONArray0.removeAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      int int0 = 455;
      // Undeclared exception!
      try { 
        jSONArray0.get(455);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 455, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      int int0 = 970;
      JSON.parse("'>}1qg[ez@A,.'>m~a", parserConfig0, 970);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(755, (Object) ">}1qg[ez@A,.");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 755, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      JSON.parseArray("");
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-812));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.set(1, "%~KF^D9k`tq~{#");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(627);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 627, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Field[] fieldArray0 = new Field[5];
      Integer integer0 = new Integer(80);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONBytes((Object) integer0, serializeConfig0, 80, serializerFeatureArray0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      fieldArray0[2] = null;
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      JSON.parseArray("");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      jSONArray0.fluentAddAll((Collection<?>) set0);
      JSONObject[] jSONObjectArray0 = new JSONObject[4];
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObjectArray0[0] = jSONObject0;
      JSONObject jSONObject1 = new JSONObject(true);
      jSONObjectArray0[1] = jSONObject1;
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray(3089);
      JSON.parseArray("");
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      jSONArray0.indexOf((Object) null);
      int int0 = (-3058);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-3058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(51068, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51068, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1464));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1516);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONObject jSONObject0 = new JSONObject(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      jSONArray0.toArray();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      jSONArray1.parallelStream();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray1.replaceAll(unaryOperator0);
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) jSONObject0, 3089, serializerFeatureArray0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1516);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1516, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      parserConfig0.compatibleWithJavaBean = false;
      jSONArray0.fluentRemoveAll(linkedList0);
      ParserConfig.global = parserConfig0;
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      linkedHashSet0.stream();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      Class<JSONArray> class0 = JSONArray.class;
      Class<JSONObject> class1 = JSONObject.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("hJ^nK:0%RH./kKr`a-", class0, class1, class1, (Field) null, 80, 42, 80);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONBytes((Object) null, 0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parseArray("");
      Set<String> set0 = new LinkedHashSet<String>();
      jSONArray0.fluentAddAll((Collection<?>) set0);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-2925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2135);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2135, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class1;
      classArray0[1] = class1;
      classArray0[2] = class0;
      Class<Integer>[] classArray1 = jSONArray0.toArray(classArray0);
      assertSame(classArray0, classArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 1516;
      JSONArray jSONArray0 = new JSONArray(1516);
      jSONArray0.fluentAdd((Object) jSONArray0);
      JSONObject jSONObject0 = new JSONObject(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) jSONObject0, 3089, serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[0];
      int int0 = (-1002);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1110, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      int int0 = (-2143);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-2415));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 1323;
      JSONArray jSONArray0 = new JSONArray(1323);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      Integer integer0 = new Integer(160);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[8];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "%~KF^D9k`tq~{#";
      stringArray0[3] = "%~KF^D9k`tq~{#";
      stringArray0[4] = "@type";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      Class<Integer> class0 = Integer.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter2;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "S";
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray1);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter3;
      SimplePropertyPreFilter simplePropertyPreFilter4 = new SimplePropertyPreFilter(class0, stringArray1);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter4;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray2 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter5 = new SimplePropertyPreFilter(stringArray2);
      serializeFilterArray0[6] = (SerializeFilter) simplePropertyPreFilter5;
      SimplePropertyPreFilter simplePropertyPreFilter6 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[7] = (SerializeFilter) simplePropertyPreFilter6;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.writeJSONString((OutputStream) mockPrintStream0, charset0, (Object) integer0, serializeConfig0, serializeFilterArray0, "%o\"%f^P", 80, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.add(546, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 546, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.parse("1.2.46", parserConfig0, (-2248));
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-3058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      JSON.parseArray("");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.fluentRetainAll(linkedList0);
      Class<JSONArray> class0 = JSONArray.class;
      Class<JSONObject> class1 = JSONObject.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("hJ^nK:0%RH./kKr`a-", class0, class1, class1, (Field) null, 80, 42, 80);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONBytes((Object) null, 0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2135);
      // Undeclared exception!
      try { 
        jSONArray0.getString(2135);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2135, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "";
      JSON.parseArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1516);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONObject jSONObject0 = new JSONObject(true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) jSONObject0, 3089, serializerFeatureArray0);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1516);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1516, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      jSONArray1.add(0, (Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      jSONArray0.fluentRemoveAll(linkedList0);
      ParserConfig.global = parserConfig0;
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      linkedHashSet0.stream();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.add(165, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) jSONObject0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(80, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll((-1), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 81
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 467;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(467);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 467, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%~KF^D9k`tq~{#";
      stringArray0[1] = "@type";
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("<^/3 Dbq3,mL;8=)08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -7
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
