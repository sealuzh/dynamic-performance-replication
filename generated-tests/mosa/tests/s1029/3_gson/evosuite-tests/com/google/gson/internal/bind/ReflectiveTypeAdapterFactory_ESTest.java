/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:09:24 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstructorConstructor constructorConstructor0 = null;
      Gson gson0 = new Gson();
      String string0 = gson0.toString();
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        gson0.fromJson(string0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unterminated array at line 1 column 42 path $.factories[0]
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Gson gson0 = new Gson();
      gson0.toJson((Object) jsonAdapterAnnotationTypeAdapterFactory0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      TypeToken<PushbackInputStream> typeToken0 = TypeToken.get(class0);
      jsonAdapterAnnotationTypeAdapterFactory0.create(gson0, typeToken0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      gson0.fromJson("{}", (Type) class0);
      Class<Integer> class1 = Integer.class;
      TypeToken.get(class1);
      Excluder excluder0 = Excluder.DEFAULT;
      assertNotNull(excluder0);
  }
}
