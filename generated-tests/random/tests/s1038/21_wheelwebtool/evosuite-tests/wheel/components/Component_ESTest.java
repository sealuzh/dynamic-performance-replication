/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:12:48 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Component component0 = errorPage0.area(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      tableBlock0.placeholder("}");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, "ol");
      Image image0 = new Image(submit0, "ol", "Tfoot component can be added only to a Table.");
      submit0.eval(image0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(image0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "fs|9%7LPL)X>", "c0rB3M]KU0yCofTw.");
      Hidden hidden0 = new Hidden(textArea0, "fs|9%7LPL)X>", "c0rB3M]KU0yCofTw.");
      Component component0 = hidden0.end();
      assertEquals("c0rB3M]KU0yCofTw.", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Form form0 = new Form("(ab7h_j");
      form0.create();
      assertEquals("(ab7h_j", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "org.mvel.CompileException");
      TextArea textArea0 = new TextArea(checkbox0, "E^;$~7oB^3", "`i(m ");
      List<ActionExpression> list0 = textArea0._getActions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ErrorPage errorPage0 = new ErrorPage();
      xmlEntityRef0._applyFormat(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("x", dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, ";k&PLK5 dRQo", "}");
      // Undeclared exception!
      try { 
        submit0.q((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "href", "href");
      TextInput textInput0 = new TextInput(fileInput0, "W", "b[\"W=i&G1&'");
      StandaloneComponent standaloneComponent0 = textInput0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.wBlock("fieldset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Form form0 = new Form("c^2d");
      // Undeclared exception!
      try { 
        form0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.textInput("2,vJ&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Form form0 = new Form("h'l4Bv-Vp+nG%");
      // Undeclared exception!
      try { 
        form0.sup((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("q(t~:Z{+(");
      // Undeclared exception!
      try { 
        xmlEntityRef0.submit("nar7>`(Re::(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, (String) null, (String) null);
      Radio radio0 = new Radio(textInput0, "reserved word in assignment: ", (String) null);
      Submit submit0 = new Submit(radio0, "Mxz", "Could not find component with id ");
      Table table0 = new Table(radio0, "reserved word in assignment: ");
      TableBlock tableBlock0 = table0.tbody();
      Any any0 = tableBlock0.col();
      DateInput dateInput0 = new DateInput(any0, "Z3qw!3d7X8$IddHb", (String) null, "Mxz");
      // Undeclared exception!
      try { 
        submit0.sub((Object) dateInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "8u_*q", "8u_*q");
      ActionExpression actionExpression0 = new ActionExpression("8u_*q");
      // Undeclared exception!
      try { 
        checkbox0.sub((Object) actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("");
      NumberInput numberInput0 = new NumberInput(form0, "java.lang.String@0000000008", "~j:&");
      // Undeclared exception!
      try { 
        numberInput0.strike((Object) "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Form form0 = new Form(" /+54_y");
      Radio radio0 = new Radio(form0, " /+54_y", " /+54_y");
      // Undeclared exception!
      try { 
        radio0.span((Object) " /+54_y");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "&@:B2POe{\"", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        checkbox0.samp((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "@k", "@k");
      // Undeclared exception!
      try { 
        checkbox0.q();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "dG^:#%C0|L{/$", "%|/");
      // Undeclared exception!
      try { 
        textInput0.pre((Object) "dG^:#%C0|L{/$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("code");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder("code");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.p((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("$_$Go(OE^B}E0");
      // Undeclared exception!
      try { 
        xmlEntityRef0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("button");
      Form form0 = new Form(errorPage0, "org.mvel.conversion.StringArrayCH$1", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "button", "href");
      Component component0 = errorPage0.cite((Object) textArea0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        component0.message("href", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Form form0 = new Form("h3");
      // Undeclared exception!
      try { 
        form0.message("java.lang.String@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("vjR");
      // Undeclared exception!
      try { 
        xmlEntityRef0.map("small");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Form form0 = new Form("(ab7h_j");
      // Undeclared exception!
      try { 
        form0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "java.lang.String@0000000008", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        submit0.ins((Object) "java.lang.String@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("HP9b^Ac.#`f,2myXQ+");
      // Undeclared exception!
      try { 
        form0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.StringArrayCH");
      // Undeclared exception!
      try { 
        xmlEntityRef0.img("", "jL+RB.Q860");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "%aDu[4z`C\\z&7&My", "%aDu[4z`C\\z&7&My", "%aDu[4z`C\\z&7&My");
      Radio radio0 = new Radio(dateInput0, "legend", "t");
      // Undeclared exception!
      try { 
        radio0.iframe();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Gr4iKw_;1w#^Hi}?", "4'|x]");
      TextInput textInput0 = new TextInput(textArea0, "strong", "strong");
      // Undeclared exception!
      try { 
        textInput0.hr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Form form0 = new Form("wheel.components.DateInput");
      TextInput textInput0 = new TextInput(form0, "rYB", "wheel.components.DateInput");
      // Undeclared exception!
      try { 
        form0.h6((Object) textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Hidden hidden0 = new Hidden(block0, (String) null, "");
      // Undeclared exception!
      try { 
        hidden0.h5((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(";j7QD\"#1N");
      ElExpression elExpression0 = new ElExpression(";j7QD\"#1N");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3((Object) elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "org.mvel.CompileException");
      TextArea textArea0 = new TextArea(checkbox0, "E^;$~7oB^3", "`i(m ");
      // Undeclared exception!
      try { 
        textArea0.form("org.mvel.CompileException", (ActionExpression) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Table table0 = new Table(tableBlock0, "unable to instantiate accessor compiler");
      FileInput fileInput0 = new FileInput(table0, "Could not find component with id ", "Could not find component with id ");
      // Undeclared exception!
      try { 
        fileInput0.fileInput("unable to instantiate accessor compiler");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Form form0 = new Form("u}vTK1");
      TextInput textInput0 = new TextInput(form0, "u}vTK1", "u}vTK1");
      // Undeclared exception!
      try { 
        textInput0.fileInput("u}vTK1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Form form0 = new Form("c\"}:$");
      // Undeclared exception!
      try { 
        form0.buttonInput("Could not evaluate finder expression ' ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "a;L9>y{BS7](Z[h");
      // Undeclared exception!
      try { 
        checkbox0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("JIT does not yet support fold operations.");
      // Undeclared exception!
      try { 
        xmlEntityRef0.base("JIT does not yet support fold operations.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        form0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, (String) null);
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      Table table0 = new Table(tableBlock0, "Q*rF:d+OySn.FY66H");
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(table0, "Q*rF:d+OySn.FY66H", (String) null);
      // Undeclared exception!
      try { 
        form0.addFormElement(checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getError("qyX0o");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "s-{!'");
      StandaloneComponent standaloneComponent0 = block0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Any any0 = new Any(block0, "");
      StandaloneComponent standaloneComponent0 = any0._getTopLevelComponent(false);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      Form form1 = form0._getForm(false);
      assertNull(form1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      assertTrue(block0._isGeneratedId());
      
      block0._setGeneratedId(false);
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ",\"CA6", ",\"CA6");
      checkbox0.label("java/lang/String");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.actionBinding((ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, ".~h{I#1?j", "wheel_ErrorPage");
      // Undeclared exception!
      try { 
        checkbox0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.end();
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.colgroup();
      Checkbox checkbox0 = new Checkbox(tableBlock0, "'Co+0GhI2y?/kKC[NV3", "y7Su0u2Q]hh[DjH");
      // Undeclared exception!
      try { 
        checkbox0.end("rY/dI/lnf$g0h[F#)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'rY/dI/lnf$g0h[F#)'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      TableBlock tableBlock0 = table0.tfoot();
      TableBlock tableBlock1 = tableBlock0.id("");
      Any any0 = tableBlock1.col();
      any0.end("");
      assertTrue(any0._isGeneratedId());
      assertFalse(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, ", right=");
      // Undeclared exception!
      try { 
        table0.end(", right=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ', right='.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, ">=", ">=");
      // Undeclared exception!
      try { 
        submit0.dateFormat(">=", ">=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.IntegerCH$2");
      Component component0 = errorPage0.renderHint(elExpression0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      Any any0 = new Any(errorPage0, elExpression0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, ".~h{I#1?j", "wheel_ErrorPage");
      List<Component> list0 = checkbox0.findAll((ElExpression) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, (String) null);
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(checkbox0, "ks#UIa", "t>.)o!", stringSelectModel0, "t>.)o!");
      Block block0 = new Block(select0, "java/lang/Character");
      Text text0 = new Text(checkbox0, errorPage0);
      block0.span((Object) text0);
      // Undeclared exception!
      try { 
        block0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      // Undeclared exception!
      try { 
        component0.find("|d,-iZ*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id |d,-iZ* on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "^Jh6&~ J)q>GY8|5", "^Jh6&~ J)q>GY8|5");
      // Undeclared exception!
      try { 
        checkbox0.up(738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ":", ":");
      TableRow tableRow0 = new TableRow(checkbox0);
      Table table0 = new Table(tableRow0, ":");
      table0.up((-3465));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("i-(,7#+#FTFFX?N{:");
      boolean boolean0 = xmlEntityRef0.equals((Object) null);
      assertEquals("i-(,7#+#FTFFX?N{:", xmlEntityRef0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Form form0 = new Form("null");
      boolean boolean0 = form0.equals(form0);
      assertTrue(boolean0);
      assertEquals("null", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Form form0 = new Form("c^2d");
      boolean boolean0 = form0.equals("c^2d");
      assertEquals("c^2d", form0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = new Boolean(false);
      Component component0 = errorPage0.h5((Object) boolean0);
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      TableBlock tableBlock0 = new TableBlock(link0, "q{Pl$PI=EHJO");
      Table table0 = new Table(tableBlock0, "=>X.\"K");
      Table table1 = table0.renderHint("=>X.\"K");
      table1._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(link0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      TableBlock tableBlock0 = new TableBlock(link0, "q{Pl$PI=EHJO");
      Table table0 = new Table(tableBlock0, "=>X.\"K");
      table0.link();
      table0._clear();
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Form form0 = new Form("h3");
      Form form1 = (Form)form0.addInternalRenderHint("&c-");
      Form form2 = (Form)form1.addInternalRenderHint("h3");
      assertEquals("h3", form2.getComponentId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "U4GN5%w'mj?x", "dd");
      Any any0 = new Any(textArea0, "dd");
      Checkbox checkbox0 = new Checkbox(any0, "Y.*r9^{p;b", "dd");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Form form0 = new Form("LdzuUb,$lE{|0%6");
      // Undeclared exception!
      try { 
        form0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Form form0 = new Form("out");
      FileInput fileInput0 = new FileInput(form0, "bQ(f", "K1}42!");
      Radio radio0 = new Radio(fileInput0, "K1}42!", "K1}42!");
      Form form1 = radio0._getVisibleForm(false);
      assertEquals("out", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      link0._getVisibleForm(true);
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(errorPage0, (String) null, (String) null, stringSelectModel0, elExpression0);
      ActionExpression actionExpression0 = new ActionExpression("pre");
      Form form0 = new Form(checkboxGroup0, "/I}~f0,1t|KgkWhrL9m", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("xh&<K|b'0&XLv0#O'=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "href", "href");
      TextInput textInput0 = new TextInput(fileInput0, "W", "b[\"W=i&G1&'");
      Submit submit0 = new Submit(textInput0, "href", " ^V}]pLB&WsKEs[");
      // Undeclared exception!
      try { 
        submit0.id("java.lang.String@0000000008");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "UJU");
      Table table1 = table0.renderHint((CharSequence) null);
      String string0 = table1._classReferenceFromHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Form form0 = new Form(".0+3");
      Checkbox checkbox0 = new Checkbox(form0, "vGdW .I_r1Grc", "vGdW .I_r1Grc");
      List<RenderableComponent> list0 = checkbox0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals(".0+3", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "wheel.util.WrappedException", "wheel.util.WrappedException");
      ActionExpression actionExpression0 = checkbox0._getAction();
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, ", parser stopped on", ", parser stopped on");
      String[] stringArray0 = new String[8];
      Radio radio1 = (Radio)radio0.attributes(stringArray0);
      assertEquals(", parser stopped on", radio1.getFormElementName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        errorPage0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, (String) null, "ol");
      String[] stringArray0 = new String[0];
      submit0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attributes((String[]) null);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Any any0 = new Any(errorPage0, (CharSequence) null);
      Component component0 = any0.renderHint((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Form form0 = new Form("(ab7h_j");
      form0.addInternalRenderHint("~gb");
      Form form1 = form0.renderHint("(ab7h_j");
      assertEquals("(ab7h_j", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "/:-|QDOyS5R {1", "C%'=ZUD;Z[,'Uyl");
      // Undeclared exception!
      try { 
        fileInput0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "{l-4TrI?2");
      TextArea textArea0 = new TextArea(checkbox0, "{l-4TrI?2", "@`(O!;S_.ig*I:");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        textArea0.em((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Form form0 = new Form("dWeM1j1#,p");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1400, 1400, 1400, 46, 46);
      // Undeclared exception!
      try { 
        form0.del((Object) mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(",");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noframes();
      Component component1 = component0.span();
      assertEquals("Block_3", component1.getComponentId());
      
      List<RenderableComponent> list0 = component0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("N4_R-k");
      Component component0 = errorPage0.pre((Object) xmlEntityRef0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
      assertEquals("N4_R-k", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Form form0 = new Form("+Yk9mp.7F]");
      // Undeclared exception!
      try { 
        form0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      Component component0 = errorPage0.addFirst(table0);
      assertEquals("Table_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Form form0 = new Form((String) null);
      DynamicSelectModel dynamicSelectModel0 = form0.selectModel();
      // Undeclared exception!
      try { 
        form0.select((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Checkbox checkbox0 = new Checkbox(tableBlock0, "2Xqz=+g.ExY+M;", "2Xqz=+g.ExY+M;");
      Table table0 = new Table(checkbox0, "2Xqz=+g.ExY+M;");
      ActionExpression actionExpression0 = new ActionExpression("2Xqz=+g.ExY+M;");
      table0.form("2Xqz=+g.ExY+M;", actionExpression0);
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "oxz7K!m-gzIcd/,W", "oxz7K!m-gzIcd/,W");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("table");
      // Undeclared exception!
      try { 
        checkbox0.a((Object) initialFieldValue0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Checkbox checkbox0 = new Checkbox(tableBlock0, "2Xqz=+g.ExY+M;", "2Xqz=+g.ExY+M;");
      ActionExpression actionExpression0 = new ActionExpression("2Xqz=+g.ExY+M;");
      // Undeclared exception!
      try { 
        checkbox0.label((Object) actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Form form0 = new Form("8ZC)(]C*/01@:b!!");
      // Undeclared exception!
      try { 
        form0.param("8ZC)(]C*/01@:b!!", "8ZC)(]C*/01@:b!!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Form form0 = new Form(">{.N+XR0");
      // Undeclared exception!
      try { 
        form0.reset(">{.N+XR0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Form form0 = new Form("wheel_ErrorPage");
      // Undeclared exception!
      try { 
        form0.big((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("map");
      Form form0 = new Form(errorPage0, "map", actionExpression0);
      Submit submit0 = new Submit(form0, "Zf)5|'#{^`T", "Zf)5|'#{^`T");
      // Undeclared exception!
      try { 
        submit0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0._setParent(table0);
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, "]j?sTL(rym.7Ka*&c?", "]j?sTL(rym.7Ka*&c?", "]j?sTL(rym.7Ka*&c?");
      FileInput fileInput0 = new FileInput(dateInput0, "k:ootS7&<t9am)S", "k:ootS7&<t9am)S");
      Text text0 = new Text(dateInput0, fileInput0);
      NumberInput numberInput0 = new NumberInput(text0, ".", ".");
      Label label0 = new Label(dateInput0, numberInput0);
      // Undeclared exception!
      try { 
        text0.address((Object) label0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Form form0 = new Form(" /+54_y");
      Radio radio0 = new Radio(form0, " /+54_y", " /+54_y");
      radio0._clear();
      assertEquals(" /+54_y", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      ActionExpression actionExpression0 = new ActionExpression("");
      Component component1 = component0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "wheel.components.CheckboxGroup", "wheel.components.CheckboxGroup");
      // Undeclared exception!
      try { 
        checkbox0.textarea("WNH3Io[UgS#5H$l+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "a", "-ZgT4('u*a}R@cl=T");
      // Undeclared exception!
      try { 
        radio0.u((Object) "a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "lC=[\"", "OKz=+");
      // Undeclared exception!
      try { 
        checkbox0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "wheel_ErrorPage", "' to Date.");
      // Undeclared exception!
      try { 
        textInput0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Tr component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        table0.textInput("Tr component can be added only to a TableBlock.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "Table_1", ");vQ^8V[>aC(SH.B'0");
      // Undeclared exception!
      try { 
        hidden0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      xmlEntityRef0.action(";-#");
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Form form0 = new Form("]: ");
      TextInput textInput0 = new TextInput(form0, "]: ", "wheel_ErrorPage");
      // Undeclared exception!
      try { 
        form0.rawText(textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("y!R8O/8&G2w3Lt1Jon");
      Form form0 = new Form(errorPage0, "[KF", actionExpression0);
      Table table0 = new Table(form0, "b");
      TableBlock tableBlock0 = table0.tfoot();
      ElExpression elExpression0 = new ElExpression("y!R8O/8&G2w3Lt1Jon");
      // Undeclared exception!
      try { 
        tableBlock0.radioGroup("[KF", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read value with binding y!R8O/8&G2w3Lt1Jon in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      block0.sub();
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("y!R8O/8&G2w3Lt1Jon");
      Form form0 = new Form(errorPage0, "[KF", actionExpression0);
      Table table0 = new Table(form0, "b");
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.submit("null");
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      component0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      component0.cite();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Y#-A&b,", "Y#-A&b,");
      // Undeclared exception!
      try { 
        submit0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Form form0 = new Form("gl)dInK");
      Checkbox checkbox0 = new Checkbox(form0, "aQ+a\"JBN3+Z,K", "body");
      // Undeclared exception!
      try { 
        checkbox0.strike();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, (String) null, "yZ0.vwf}BB}$D");
      // Undeclared exception!
      try { 
        submit0.h1((Object) "yZ0.vwf}BB}$D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "HTYTZK%!Z:4=%x.?Iz");
      Component component0 = table0.h5();
      Component component1 = component0.noframes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_3", component1.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      Component component1 = component0.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "Tr component can be added only to a TableBlock.");
      Component component0 = table0.dd((Object) errorPage0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title("}`{'L#zM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("62y0fe9$)8.0h~x*$y");
      Form form0 = new Form(errorPage0, "62y0fe9$)8.0h~x*$y", actionExpression0);
      Checkbox checkbox0 = new Checkbox(form0, "62y0fe9$)8.0h~x*$y", "62y0fe9$)8.0h~x*$y");
      // Undeclared exception!
      try { 
        checkbox0.tt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.hr();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone", "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone");
      // Undeclared exception!
      try { 
        fileInput0.hidden("zI\"J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = errorPage0.small((Object) tableBlock0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Form form0 = new Form(" xh-s@:L9");
      // Undeclared exception!
      try { 
        form0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Form form0 = new Form((String) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 23, 23, 1142, 23, 1142);
      // Undeclared exception!
      try { 
        form0.htmlText(mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "h4", "2W C#K)$d%Rm0;!%");
      TextArea textArea0 = new TextArea(submit0, "", "href");
      // Undeclared exception!
      try { 
        textArea0.li((Object) textArea0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "3>4:|7,Bn9Y`Ak*_", "3>4:|7,Bn9Y`Ak*_");
      // Undeclared exception!
      try { 
        hidden0.bdo("3>4:|7,Bn9Y`Ak*_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Double double0 = new Double((-348.1466074482004));
      Component component0 = errorPage0.h3((Object) double0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("1.7");
      Byte byte0 = new Byte((byte)60);
      // Undeclared exception!
      try { 
        xmlEntityRef0.code((Object) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "s!v9K$F", "s!v9K$F");
      // Undeclared exception!
      try { 
        checkbox0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "HTYTZK%!Z:4=%x.?Iz");
      // Undeclared exception!
      try { 
        table0.numberInput("^85x5x-ck*{", (CharSequence) "^85x5x-ck*{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "UNl1#/&:M[}sEI+", "UNl1#/&:M[}sEI+");
      // Undeclared exception!
      try { 
        fileInput0.text((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      Submit submit0 = new Submit(form0, "java.lang.String@0000000008", "c3");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@0jbs{aiq)u4lJG]");
      // Undeclared exception!
      try { 
        submit0.h4((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.abbr();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("14$Hs*J!");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      Component component1 = component0.cite((Object) errorPage0);
      Component component2 = component1.span((Object) null);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      tableBlock0.b();
      List<Component> list0 = tableBlock0._getChildren();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, ",D&:0[y*+J;", "=OJcl*6jq6-");
      FileInput fileInput0 = new FileInput(textInput0, "=OJcl*6jq6-", "*y<35@uI(PA6L6Y|\"R");
      Component component0 = errorPage0.b((Object) fileInput0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) xmlEntityRef0);
      // Undeclared exception!
      try { 
        component0.buttonInput("Qn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("");
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Form form0 = new Form("TableBlock_1");
      // Undeclared exception!
      try { 
        form0.passwordInput("I+a'z$nu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = new Boolean(false);
      Component component0 = errorPage0.h5((Object) boolean0);
      // Undeclared exception!
      try { 
        component0.encode("Col component can be added only to a TableBlock.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Any any0 = tableBlock0.col();
      errorPage0.var((Object) any0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "+2;>?-J@;E4keZ'x}", "+2;>?-J@;E4keZ'x}");
      // Undeclared exception!
      try { 
        fileInput0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "blg\"*S`g'_$j(", "blg\"*S`g'_$j(");
      // Undeclared exception!
      try { 
        numberInput0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form("Gd2,6Fse.");
      // Undeclared exception!
      try { 
        form0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Form form0 = new Form("INVOKEINTERFACE: get");
      // Undeclared exception!
      try { 
        form0.radio("IE1WR5,oc5Um:!@0DxB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      // Undeclared exception!
      try { 
        block0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "UJU");
      Component component0 = table0.tt((Object) "UJU");
      Component component1 = errorPage0.abbr((Object) component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, (String) null, "jA");
      TableRow tableRow0 = new TableRow(checkbox0);
      Component component0 = tableRow0.div();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      component0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Table table0 = new Table(tableBlock0, "unable to instantiate accessor compiler");
      Component component0 = table0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone", "http://xmlpull.org/v1/doc/features.html#xmldecl-standalone");
      String string0 = fileInput0.getComponentName();
      assertEquals("FileInput", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "C");
      TableBlock tableBlock0 = table0.tfoot();
      TextArea textArea0 = new TextArea(tableBlock0, "ADH-J6y#tq$ZYV", "C");
      // Undeclared exception!
      try { 
        textArea0.fieldset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "href", "href");
      TextInput textInput0 = new TextInput(fileInput0, "W", "b[\"W=i&G1&'");
      Submit submit0 = new Submit(textInput0, "href", " ^V}]pLB&WsKEs[");
      Label label0 = new Label(errorPage0, submit0);
      Component component0 = label0.base(" ^V}]pLB&WsKEs[");
      assertEquals("Any_1", component0.getComponentId());
      
      submit0.id("java.lang.String@0000000008");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) xmlEntityRef0);
      Component component1 = component0.strike((Object) null);
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Form form0 = new Form("i");
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      // Undeclared exception!
      try { 
        component0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      Checkbox checkbox0 = new Checkbox(component0, "J_76ahj#'yQyTWmtk:", "J_76ahj#'yQyTWmtk:");
      // Undeclared exception!
      try { 
        checkbox0.u();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      Component component1 = component0.form("<[e`o6)x>CV'k");
      Component component2 = component1.s((Object) errorPage0);
      assertTrue(component2._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Form form0 = new Form("B[m<Zkc<1");
      // Undeclared exception!
      try { 
        form0.imageSubmit("H%GjRn%b>W", "H%GjRn%b>W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "&/~w)", "&/~w)");
      // Undeclared exception!
      try { 
        hidden0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      Component component1 = component0.cite((Object) errorPage0);
      FileInput fileInput0 = new FileInput(component0, "^yaL~|eIk", "m'AZL]O");
      Component component2 = component1.legend((Object) fileInput0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, " in class ", " in class ");
      TableBlock tableBlock0 = new TableBlock(textArea0, " in class ");
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.samp((Object) errorPage0);
      // Undeclared exception!
      try { 
        component0.get(" in class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ' in class '.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("", (String) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("DNZe/U1nW'");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("wheel_ErrorPage");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "", "]: ");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression((String) null);
      // Undeclared exception!
      try { 
        textInput0.checkboxGroup((String) null, stringSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("internal error in parseEpilog");
      // Undeclared exception!
      try { 
        errorPage0.fileInput("", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      Component component1 = component0.sub((Object) errorPage0);
      Integer integer0 = new Integer(5);
      component1.i((Object) integer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("y!R8O/8&G2w3Lt1Jon");
      Form form0 = new Form(errorPage0, "[KF", actionExpression0);
      form0.fileInput("y!R8O/8&G2w3Lt1Jon");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("Block_1", component0.getComponentId());
      
      component0._setComponentId("=");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000008");
      Hidden hidden0 = new Hidden(form0, "?&^.G", "java.lang.String@0000000008");
      Map<String, String> map0 = hidden0.getAttributes();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, (String) null);
      table0.button();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "4phDrVqWk.$.)!qBO)", "table");
      ActionExpression actionExpression0 = new ActionExpression("rWXa9=ixSI^5.Bc_SGi");
      Form form0 = new Form(textInput0, "table", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "table", " does not exist.");
      // Undeclared exception!
      try { 
        textArea0.checkbox("other");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("wheel.components.TextArea");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "wheel.components.CheckboxGroup", "wheel.components.CheckboxGroup");
      Component component0 = errorPage0.ins((Object) checkbox0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, (String) null, "{l-4TrI?2");
      FormElement formElement0 = checkbox0.fieldBinding((String) null);
      assertSame(checkbox0, formElement0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Form form0 = new Form("5-7/RS,&!E0Eck");
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "CsWa:$Z+{]^i3", "java.lang.String@0000000008");
      // Undeclared exception!
      try { 
        fileInput0.acronym((Object) "java.lang.String@0000000008");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) xmlEntityRef0);
      Component component1 = component0.h3();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "numberInputError");
      TableBlock tableBlock0 = table0.tfoot();
      Any any0 = tableBlock0.col();
      // Undeclared exception!
      try { 
        any0.h6();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.s();
      Component component1 = component0.form("<[e`o6)x>CV'k");
      Component component2 = component1.dl();
      assertFalse(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component2.getComponentId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      Component component1 = component0.requestFocus();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "rY/dI/lnf$g0h[F#)", "rY/dI/lnf$g0h[F#)", "rY/dI/lnf$g0h[F#)");
      // Undeclared exception!
      try { 
        dateInput0.dateInput("rY/dI/lnf$g0h[F#)", "rY/dI/lnf$g0h[F#)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Form form0 = new Form("4|sFg1NZ6\"T]");
      // Undeclared exception!
      try { 
        form0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, (String) null);
      TableBlock tableBlock0 = new TableBlock(fileInput0);
      TableRow tableRow0 = tableBlock0.tr();
      Table table0 = new Table(tableBlock0, "Q*rF:d+OySn.FY66H");
      Label label0 = new Label(table0, tableBlock0);
      Component component0 = tableRow0.sup((Object) label0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(table0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, ",e2AZfH{Ez'JNQqYqz", ",e2AZfH{Ez'JNQqYqz");
      Checkbox checkbox0 = new Checkbox(hidden0, "Table_1", "Table_1");
      DateInput dateInput0 = new DateInput(checkbox0, "rY/dI/lnf$g0h[F#)", "table", "rY/dI/lnf$g0h[F#)");
      // Undeclared exception!
      try { 
        dateInput0.small();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "7wA2,+n<U", "7DRfQD6fGNM`");
      // Undeclared exception!
      try { 
        textInput0.frame("div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Form form0 = new Form("");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.ASTNode");
      // Undeclared exception!
      try { 
        form0.kbd((Object) xmlEntityRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "+2;>?-J@;E4keZ'x}", "+2;>?-J@;E4keZ'x}");
      // Undeclared exception!
      try { 
        fileInput0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Component component0 = link0.q();
      Component component1 = component0.iframe();
      // Undeclared exception!
      try { 
        component1.label();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.map("rV");
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ",\"CA6", ",\"CA6");
      // Undeclared exception!
      try { 
        checkbox0.dfn((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Component component0 = block0.actionBinding("");
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p((Object) null);
      // Undeclared exception!
      try { 
        component0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, (String) null, (String) null);
      Radio radio0 = new Radio(textInput0, "reserved word in assignment: ", (String) null);
      Table table0 = new Table(radio0, "reserved word in assignment: ");
      Double double0 = new Double((-1.0));
      Component component0 = table0.h6((Object) double0);
      Component component1 = component0.label();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
      assertEquals("reserved word in assignment: ", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Component component0 = errorPage0.h2((Object) mockGregorianCalendar0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Form form0 = new Form("kdb");
      Component component0 = form0.clasS("kdb");
      assertEquals("kdb", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("Th component can be added only to a TableRow.", (ISelectModel) null, "Th component can be added only to a TableRow.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "kbd", "kbd");
      // Undeclared exception!
      try { 
        fileInput0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Form form0 = new Form("C");
      // Undeclared exception!
      try { 
        form0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ",\"CA6", ",\"CA6");
      Submit submit0 = new Submit(checkbox0, "bdo", "={~CLHK}^j.Z'1L");
      submit0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(submit0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Form form0 = new Form("vTEcA4]]8h[");
      // Undeclared exception!
      try { 
        form0.dt((Object) form0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      Component component1 = component0.dd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_2", component1.getComponentId());
  }
}
