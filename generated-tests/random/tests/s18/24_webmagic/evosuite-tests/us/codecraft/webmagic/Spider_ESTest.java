/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:21:30 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("href");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "href");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(462, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      spider2.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      Spider spider5 = spider4.setUUID("");
      spider5.start();
      spider4.run();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "href";
      stringArray0[2] = "waitNewUrl - interrupted, error {}";
      stringArray0[3] = "";
      stringArray0[4] = "kbe(d6KKrbJ @\"";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("!");
      FilePipeline filePipeline0 = new FilePipeline("!");
      Spider spider2 = spider1.addPipeline(filePipeline0);
      spider2.destroyWhenExit = true;
      Spider spider3 = spider2.thread(3);
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Site");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.scheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.Spider", "us.codecraft.webmagic.Site");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-720));
      Spider spider3 = spider2.setDownloader(phantomJSDownloader1);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      Spider spider5 = spider4.setExecutorService((ExecutorService) null);
      spider5.initComponent();
      assertEquals(1, linkedList0.size());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      String string0 = "t3AI(BF-s5q{";
      Spider spider3 = spider2.setUUID("t3AI(BF-s5q{");
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider4 = spider3.addPipeline(filePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Z\"+(");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider4.scheduler(duplicateRemovedScheduler0);
      Request request0 = new Request();
      request0.setPriority((-151L));
      StringWriter stringWriter0 = new StringWriter(629);
      StringWriter stringWriter1 = stringWriter0.append('d');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "Thread interrupted when sleep");
      // Undeclared exception!
      try { 
        stringWriter2.write("Z\"+(", 629, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("");
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.clearPipeline();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(108, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, true);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 1949);
      Spider spider4 = spider3.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider5 = spider4.setScheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(3);
      Page page0 = new Page();
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      spider1.stop();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      spider0.getStartTime();
      spider2.checkIfRunning();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertNull(list0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Request request0 = null;
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[7];
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = null;
      requestArray0[3] = null;
      requestArray0[4] = null;
      requestArray0[5] = null;
      requestArray0[6] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      Spider spider4 = spider3.setUUID("");
      String[] stringArray0 = new String[0];
      Spider spider5 = spider4.addUrl(stringArray0);
      spider5.extractAndAddRequests(page0, false);
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jk");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("cddsIPQv");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider1.setUUID("cddsIPQv");
      spider1.stop();
      FilePipeline filePipeline0 = new FilePipeline("Jk");
      Spider spider3 = spider2.addPipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue((-1945));
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setUUID("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider2.addPipeline(resultItemsCollectorPipeline0);
      Spider spider4 = spider3.pipeline(resultItemsCollectorPipeline0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.setEmptySleepTime(1156);
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[9];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = new Request("_cycle_tried_times");
      requestArray0[1] = request1;
      Request request2 = request1.addHeader("", "_cycle_tried_times");
      requestArray0[2] = request2;
      Request request3 = request1.addHeader("_cycle_tried_times", "_cycle_tried_times");
      requestArray0[3] = request3;
      Request request4 = new Request();
      requestArray0[4] = request4;
      boolean boolean0 = true;
      Request request5 = request2.setBinaryContent(true);
      requestArray0[5] = request5;
      Request request6 = new Request();
      requestArray0[6] = request6;
      Request request7 = request4.setPriority((-1374L));
      requestArray0[7] = request7;
      Request request8 = request6.putExtra("_cycle_tried_times", spider0);
      requestArray0[8] = request8;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("ml+@]>y4");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.start();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList("Thread interrupted when sleep");
      Spider spider1 = spider0.startUrls(list0);
      spider1.getCollectorPipeline();
      EvoSuiteFile evoSuiteFile0 = null;
      spider0.uuid = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Thread interrupted when sleep");
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Qo?ghL4;71N:X(eU");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.thread(273);
      Spider spider3 = spider2.clearPipeline();
      spider1.getSpiderListeners();
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      Spider spider5 = spider4.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider6 = spider4.setExecutorService(forkJoinPool0);
      Site site0 = spider6.getSite();
      Site site1 = site0.addHeader("AxAd48?", "l8Bb8#eTtqf  \"-b");
      spider0.site = site1;
      spider5.getStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      ResultItems resultItems0 = page1.getResultItems();
      resultItems0.toString();
      multiPagePipeline0.process(resultItems0, spider5);
      Spider spider7 = Spider.create(simplePageProcessor0);
      spider2.runAsync();
      assertFalse(spider0.isSpawnUrl());
      
      spider7.getScheduler();
      spider7.stop();
      assertTrue(spider7.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zV");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider0.setScheduler(duplicateRemovedScheduler0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      spider0.startUrls(list0);
      String string0 = "$VALUES";
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("$VALUES");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":cq70;xb:tl");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("t0rpEB%^o1)*ZQ", ")7<l4J3w}cZ09c&2J{z");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Pipeline> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider2 = spider1.setPipelines(list0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setUUID("");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider5 = spider4.addPipeline(consolePipeline0);
      spider5.setSpawnUrl(false);
      spider4.isSpawnUrl();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("dV'^MEop.qlh-");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0BS");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("0BS", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-1311));
      spider0.downloader(phantomJSDownloader1);
      spider0.getAll((Collection<String>) linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A4e0");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("A4e0");
      spider1.sleep(1382);
      spider1.getCollectorPipeline();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      Page page0 = Page.fail();
      Page.fail();
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("parse document error ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("etw %+ak]N@7TnPxk", "parse document error ");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.thread(1902);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider5 = spider4.setSpiderListeners(linkedList1);
      long long0 = spider5.getPageCount();
      assertTrue(spider5.isSpawnUrl());
      assertEquals(0L, long0);
      assertTrue(spider5.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider3 = spider2.startRequest(list0);
      Spider spider4 = spider3.setUUID("");
      String[] stringArray0 = new String[0];
      Spider spider5 = spider4.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider5.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request("");
      Request request1 = request0.addCookie("/Sa\"ZYAcSA", (String) null);
      requestArray0[0] = request1;
      Request request2 = request1.setCharset(" K'#FuZt8Q ");
      requestArray0[1] = request2;
      Request request3 = new Request((String) null);
      requestArray0[2] = request3;
      request1.getExtras();
      Request request4 = request2.setExtras((Map<String, Object>) null);
      Request request5 = request4.setUrl("A0R3m,*SPNrx]");
      requestArray0[3] = request5;
      Request request6 = request2.addCookie((String) null, (String) null);
      requestArray0[4] = request6;
      Request request7 = request0.addCookie("H%$dynj", "_cycle_tried_times");
      requestArray0[5] = request7;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Spider.Status.values();
      int int0 = (-834);
      Spider.Status spider_Status0 = Spider.Status.fromValue((-834));
      spider_Status0.getValue();
      String string0 = "I<YK;O<R<";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I<YK;O<R<");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "*1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getScheduler();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      linkedBlockingQueue0.add("*1");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Qo?ghL4;71N:X(eU");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      Spider spider2 = spider1.thread(273);
      Spider spider3 = spider2.clearPipeline();
      spider1.getSpiderListeners();
      Spider spider4 = spider3.setSpiderListeners((List<SpiderListener>) null);
      Spider spider5 = spider4.setSpawnUrl(false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider6 = spider4.setExecutorService(forkJoinPool0);
      Site site0 = spider6.getSite();
      Site site1 = site0.addHeader("AxAd48?", "l8Bb8#eTtqf  \"-b");
      spider0.site = site1;
      spider5.getStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      ResultItems resultItems0 = page1.getResultItems();
      resultItems0.toString();
      multiPagePipeline0.process(resultItems0, spider5);
      Spider.create(simplePageProcessor0);
      spider2.runAsync();
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(linkedTransferQueue0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u$y;G&");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(",hI7m='gnf+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Spider spider3 = spider2.startRequest((List<Request>) null);
      spider3.setPipelines((List<Pipeline>) null);
      String string0 = "6w':L";
      ReplaceSelector replaceSelector0 = new ReplaceSelector("6w':L", ",hI7m='gnf+");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList(",hI7m='gnf+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "=$-dO8<2<6I8|-Y";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=$-dO8<2<6I8|-Y");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      Spider spider4 = spider3.setSpawnUrl(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=$-dO8<2<6I8|-Y");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Request request0 = new Request("=$-dO8<2<6I8|-Y");
      fileCacheQueueScheduler0.push(request0, spider4);
      Spider spider5 = spider4.setScheduler(duplicateRemovedScheduler0);
      spider5.getThreadAlive();
      spider5.getSpiderListeners();
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Site{domain='");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int int0 = (-3158);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-3158), threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.thread(5);
      Spider spider3 = spider2.setDownloader((Downloader) null);
      LinkedBlockingQueue<SpiderMonitor.MonitorSpiderListener> linkedBlockingQueue0 = new LinkedBlockingQueue<SpiderMonitor.MonitorSpiderListener>();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>(linkedBlockingQueue0);
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      assertTrue(spider4.isSpawnUrl());
      
      Spider spider5 = spider4.setSpawnUrl(false);
      spider5.getScheduler();
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "N";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      Spider spider5 = spider4.thread(554);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("N");
      ResultItems resultItems0 = new ResultItems();
      // Undeclared exception!
      try { 
        consolePipeline0.process(resultItems0, spider5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.ConsolePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AMP|kvY");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "AMP|kvY";
      stringArray0[1] = "AMP|kvY";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", downloadSuccess=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1231);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      Spider spider5 = spider4.thread((ExecutorService) forkJoinPool0, 1231);
      Spider spider6 = spider5.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", downloadSuccess=", "");
      spider6.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", downloadSuccess=";
      stringArray0[1] = ", downloadSuccess=";
      stringArray0[2] = ", downloadSuccess=";
      stringArray0[3] = ", downloadSuccess=";
      stringArray0[4] = ", downloadSuccess=";
      stringArray0[5] = "@9dE%EV[MnHnCJI";
      stringArray0[6] = ", downloadSuccess=";
      stringArray0[7] = ", downloadSuccess=";
      stringArray0[8] = ", downloadSuccess=";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "r_F9";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r_F9");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r_F9");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("hNH[");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      Spider spider4 = spider3.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("J-%Xz)8v{FdwpsexU");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      hashSetDuplicateRemover0.resetDuplicateCheck(spider4);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider4.scheduler = (Scheduler) duplicateRemovedScheduler0;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("r_F9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dx");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rK&O@xp{h]I?\"h");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", downloadSuccess=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1231);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      Spider spider5 = spider4.thread((ExecutorService) forkJoinPool0, 1231);
      Spider spider6 = spider5.setSpawnUrl(false);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(1231, forkJoinPool0);
      spider6.threadPool = countableThreadPool0;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", downloadSuccess=", "");
      spider6.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", downloadSuccess=";
      stringArray0[1] = ", downloadSuccess=";
      stringArray0[2] = ", downloadSuccess=";
      stringArray0[3] = ", downloadSuccess=";
      stringArray0[4] = ", downloadSuccess=";
      stringArray0[5] = "@9dE%EV[MnHnCJI";
      stringArray0[6] = ", downloadSuccess=";
      stringArray0[7] = ", downloadSuccess=";
      stringArray0[8] = ", downloadSuccess=";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("%]qgIR");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("%]qgIR", "M[vn.5R1%AhtO8]");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.downloader(phantomJSDownloader0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2, threadPoolExecutor_DiscardPolicy0);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider5 = spider4.setScheduler(priorityScheduler0);
      spider5.getStatus();
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "Spider is already running!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      int int0 = 5;
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider5 = spider4.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "voA]i9uP_PO-!b%n";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("voA]i9uP_PO-!b%n");
      Spider spider0 = Spider.create(simplePageProcessor0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "us.codecraft.webmagic.pipeline.MultiPagePipeline";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "us.codecraft.webmagic.pipeline.MultiPagePipeline");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      String string2 = "zTG6BVi1>Ia{GIMeJ=8";
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("zTG6BVi1>Ia{GIMeJ=8");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Spider.Status.fromValue((-1857));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=4qL} |Ee?g}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("T't[+U.LIF_Q59@_DJ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExecutorService executorService0 = null;
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.thread((-1857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
