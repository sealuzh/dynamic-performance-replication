/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:46:05 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, cRSMatrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1098);
      int[] intArray0 = new int[5];
      intArray0[0] = 1098;
      intArray0[1] = 1098;
      intArray0[2] = 1098;
      intArray0[3] = 1098;
      intArray0[4] = 1098;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1098' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2138;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2138, 2138);
      int int1 = 1037;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(1037, vectorFunction0);
      int int2 = 2157;
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn(2157);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2157' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 999;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(999, 2857.5584801495334);
      cRSMatrix0.isColumnMajor();
      cRSMatrix0.rowMajorIterator();
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      int int1 = 151;
      cRSMatrix0.minInRow(151);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-876), (-876), (-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -876x-876
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1980, 1980);
      int[] intArray0 = new int[8];
      intArray0[0] = 69;
      intArray0[1] = 1980;
      intArray0[2] = 1980;
      intArray0[3] = 69;
      intArray0[4] = 1980;
      intArray0[5] = 1980;
      intArray0[6] = 1980;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1980' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(3585, 3585);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = Matrix.constant(2281, 3585, 3585);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(5, 5);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 5);
      Matrix matrix1 = cRSMatrix0.removeFirstColumn();
      SparseVector sparseVector0 = SparseVector.zero(5, 5);
      Matrix matrix2 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix1, matrix0, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1980, 788.8563775);
      int[] intArray0 = new int[8];
      intArray0[0] = 69;
      intArray0[1] = 1980;
      intArray0[2] = 1980;
      intArray0[3] = 510;
      intArray0[4] = 1980;
      intArray0[5] = 1980;
      intArray0[6] = 1980;
      intArray0[7] = 1980;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1980' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(13, 1.0, (Random) mockRandom0);
      assertEquals(0.07100591715976332, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2342;
      doubleArray0[1] = (double) 1842;
      doubleArray0[2] = (double) 1842;
      doubleArray0[3] = (double) 2342;
      int[] intArray0 = new int[3];
      intArray0[0] = 2342;
      intArray0[1] = 2342;
      intArray0[2] = 2342;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2342, 1842, 2342, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4435;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4435, (-312.64098));
      int int1 = 2;
      // Undeclared exception!
      cRSMatrix0.setRow(2, 2128.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1340;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1340);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int1 = 237;
      Matrix matrix0 = cRSMatrix0.blankOfShape(237, 237);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(237, vectorProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, (-543.1305087408));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(8, (-1), (-543.1305087408));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toBinary();
      cRSMatrix0.max();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      doubleArray1[5] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) 3;
      doubleArray0[1] = doubleArray2;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = (double) 3;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 478.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 478.7;
      doubleArray2[1] = 478.7;
      doubleArray2[2] = 478.7;
      doubleArray2[3] = 478.7;
      doubleArray2[4] = 478.7;
      doubleArray2[5] = 5243.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 5243.0;
      doubleArray0[2] = doubleArray3;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(434, 434, 1);
      Matrix matrix0 = cRSMatrix0.sliceTopLeft(4, 1);
      cRSMatrix0.iteratorOfNonZeroRows();
      Matrix matrix1 = cRSMatrix0.blankOfColumns(1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix1, matrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(94, 0);
      cRSMatrix0.setAll(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.rotate();
      cRSMatrix0.transformRow(0, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(94, vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1310;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1310, 1310);
      MockRandom mockRandom0 = new MockRandom(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)14;
      mockRandom0.nextBytes(byteArray0);
      RowMajorSparseMatrix.randomSymmetric(0, (double) 1092, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1310, 1092, Double.POSITIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(364, 4);
      cRSMatrix0.rank();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.removeFirstRow();
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(1895, 2518, (-723.16924837065));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1895' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(491, 491);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(6857, 491, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6857
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 34;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 34, 3);
      int int1 = 3;
      cRSMatrix0.copyOfShape(3, 20);
      cRSMatrix0.blankOfRows(0);
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = 728.6137633683903;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 34;
      doubleArray2[1] = 728.6137633683903;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = 728.6137633683903;
      doubleArray2[4] = (double) 3;
      doubleArray2[5] = (double) 20;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 34;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 3;
      doubleArray4[1] = (double) 3;
      doubleArray4[2] = 728.6137633683903;
      doubleArray4[3] = (double) 3;
      doubleArray4[4] = (double) 20;
      doubleArray4[5] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 34;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = 728.6137633683903;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 728.6137633683903;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = (double) 20;
      doubleArray6[3] = (double) 34;
      doubleArray6[4] = (double) 0;
      doubleArray6[5] = 1497.0;
      doubleArray6[6] = (double) 34;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)119;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(1, 1, (-781.829));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[8];
      intArray0[0] = (-229);
      intArray0[1] = 13;
      intArray0[2] = 2816;
      intArray0[3] = 1997;
      intArray0[4] = 30;
      intArray0[5] = 24;
      intArray0[6] = (-1272);
      intArray0[7] = 16;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-229' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(908, 908);
      cRSMatrix0.nonZeroColumnMajorIterator();
      cRSMatrix0.columnMajorIterator();
      Matrix.zero(908, 908);
      cRSMatrix0.blankOfShape(1601, 559);
      cRSMatrix0.getOrElse(559, 559, 100.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(4, vectorProcedure0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      cRSMatrix0.multiplyByItsTranspose();
      int int1 = 1915;
      CRSMatrix.zero(13, 1915, 1915);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("SOoBr}X`mz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1137;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1137, 1455.203089072);
      String string0 = "jK]o*";
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(691, 691);
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-346), 668);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -346
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 15;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 15;
      doubleArray0[5] = (double) 15;
      doubleArray0[6] = (double) 15;
      CRSMatrix cRSMatrix0 = new CRSMatrix(15, 15, 15, doubleArray0, (int[]) null, (int[]) null);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero(matrixProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1982;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2928, 1982);
      cRSMatrix0.maxInRow(1982);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 1982;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(2928, (-1649.87619), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3;
      int int1 = 2619;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 2619, 3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(2920, 2, 1.0, (Random) mockRandom0);
      cRSMatrix0.setAll(1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2920;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2887;
      doubleArray0[3] = (double) 2887;
      doubleArray0[4] = (double) 2;
      // Undeclared exception!
      CRSMatrix.from1DArray(2920, 2887, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = (-1949.548193442916);
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.8;
      doubleArray3[1] = 488.140083775;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 9.745;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (-966.0);
      doubleArray4[3] = 488.140083775;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (-1949.548193442916);
      doubleArray4[6] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-966.0);
      doubleArray5[1] = 0.8;
      doubleArray5[2] = (-1949.548193442916);
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-3594.63);
      doubleArray5[6] = 9.745;
      doubleArray5[7] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-2381.97756);
      doubleArray6[1] = (-966.0);
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-1949.548193442916);
      doubleArray6[4] = 9.745;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (-1949.548193442916);
      doubleArray7[1] = 0.8;
      doubleArray7[2] = 488.140083775;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-2381.97756);
      doubleArray8[1] = 488.140083775;
      doubleArray8[2] = (-3594.63);
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Vector vector0 = cRSMatrix0.getColumn(516);
      assertEquals(16, vector0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(412, 412, 412);
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.isColumnMajor();
      cRSMatrix0.nonZeroIteratorOfRow(1);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(426);
      Matrix matrix0 = cRSMatrix1.blankOfShape(4, 433);
      assertEquals(4, matrix0.rows());
      assertEquals(433, matrix0.columns());
      
      double double0 = cRSMatrix1.min();
      assertEquals(426, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 3);
      cRSMatrix0.removeLastRow();
      cRSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-1698);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1698), (-1698), (double) (-1698), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 460;
      intArray0[1] = 460;
      intArray0[2] = 460;
      intArray0[3] = 460;
      intArray0[4] = 460;
      intArray0[5] = 460;
      CRSMatrix cRSMatrix0 = new CRSMatrix(460, 460, 460, doubleArray0, intArray0, intArray0);
      Matrix matrix0 = cRSMatrix0.copyOfShape(3, 456);
      assertEquals(3, matrix0.rows());
      assertEquals(456, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 772;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(772, 772);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      int int1 = (-1269);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-1269));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 463;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 463;
      doubleArray0[1] = (double) 463;
      doubleArray0[4] = (double) 463;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(463, 463, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(35, (-1.0));
      cRSMatrix0.toBinary();
      int int0 = 1943;
      MockRandom mockRandom0 = new MockRandom(35);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.randomSymmetric(1943, (-1650.4780580172765), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2147483648.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1222;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1222, 1222);
      int int1 = 1;
      cRSMatrix0.isZeroAt(1, 1222);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("6?ZO%AiV!.RM@~EHb1J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 632;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 632;
      doubleArray1[1] = (double) 632;
      doubleArray1[2] = (double) 632;
      doubleArray1[3] = 23.6375515;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 632;
      doubleArray1[6] = (double) 632;
      doubleArray0[0] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom((-653));
      // Undeclared exception!
      try { 
        Matrix.random((-653), (-653), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 439;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(439);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(439, (double) 439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 167;
      int int1 = 9;
      double[] doubleArray0 = new double[9];
      double double0 = (-1959.056536);
      doubleArray0[0] = (-1959.056536);
      doubleArray0[1] = (double) 167;
      doubleArray0[2] = (double) 167;
      double double1 = 779.358949996;
      doubleArray0[3] = 779.358949996;
      double double2 = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 167;
      doubleArray0[8] = (double) 9;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(167, 9, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1018.1381344722644);
      doubleArray0[4] = 632.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix1.isZeroAt((-796), (-288));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -796
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(104, (-1092.339));
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1455);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(570, 2, 2);
      double double0 = cRSMatrix0.minInRow(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 116;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(116);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      Matrix matrix0 = cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert(matrix0);
      assertEquals(13, cRSMatrix1.cardinality());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(8);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1619;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1619, 1619);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.blankOfShape(1619, 1619);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(1619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1620
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, (-765), (double) 0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-94);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 4;
      double double0 = 23.6375515;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CRSMatrix.random(4, 0, 23.6375515, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 0;
      CRSMatrix.identity(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 159;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(159, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 159
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, denseMatrix0, denseMatrix0);
      int int1 = 1;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1758, 32);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix.fromCSV("");
      int int0 = 1422;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(1422, (double) 1422, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2022084.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(2060320617, (double) 2060320617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2060320617
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1683.0);
      doubleArray1[1] = (-1627.0);
      doubleArray1[2] = (-52.0);
      doubleArray1[3] = (-553.901);
      doubleArray1[4] = (-750.0);
      doubleArray1[5] = 1268.7486;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1627.0);
      doubleArray2[1] = (-1627.0);
      doubleArray2[2] = (-750.0);
      doubleArray2[3] = (-750.0);
      doubleArray2[4] = (-750.0);
      doubleArray2[5] = (-1627.0);
      doubleArray2[6] = (-1683.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-52.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-5232.16328);
      doubleArray4[1] = (-1683.0);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-750.0);
      doubleArray4[4] = (-1683.0);
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 116;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(116);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2711.683910571141), (-1483.0018), 2332.07318323699, (-1483.0018), (-2711.683910571141)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 266;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 266;
      doubleArray0[3] = (double) 1966;
      doubleArray0[4] = (double) 1966;
      doubleArray0[5] = (double) 1966;
      doubleArray0[6] = (double) 1966;
      doubleArray0[7] = (-1645.2697);
      int[] intArray0 = new int[9];
      intArray0[0] = 266;
      intArray0[1] = 1966;
      intArray0[2] = 1966;
      intArray0[3] = 266;
      intArray0[4] = 1966;
      intArray0[5] = 1966;
      intArray0[6] = 1966;
      intArray0[7] = 266;
      intArray0[8] = 1966;
      CRSMatrix cRSMatrix0 = new CRSMatrix(266, 266, 1966, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      cRSMatrix0.setAll((-2831.22));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(48, (-2121.41639582506));
      cRSMatrix0.toString();
      cRSMatrix0.max();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 48;
      doubleArray1[1] = (-2121.41639582506);
      doubleArray1[2] = (-2121.41639582506);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 48;
      doubleArray3[3] = (-2121.41639582506);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 48;
      doubleArray4[3] = 508.26;
      doubleArray4[4] = (double) 48;
      doubleArray4[5] = (-2121.41639582506);
      doubleArray1[2] = (double) 48;
      doubleArray4[7] = (-2121.41639582506);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 508.26;
      doubleArray6[1] = 508.26;
      doubleArray6[2] = (double) 48;
      doubleArray6[3] = (double) 48;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 508.26;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 508.26;
      doubleArray7[1] = 508.26;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 382;
      doubleArray0[1] = (double) 382;
      doubleArray0[2] = (double) 382;
      doubleArray0[3] = (double) 382;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(382, 382, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      cRSMatrix0.subtract((double) 32);
      Matrix matrix0 = cRSMatrix0.copyOfShape(32, 17);
      assertEquals(32, matrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.03125, columnMajorSparseMatrix0.density(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(17, 32, 32);
      assertEquals(17, cRSMatrix1.rows());
  }
}
