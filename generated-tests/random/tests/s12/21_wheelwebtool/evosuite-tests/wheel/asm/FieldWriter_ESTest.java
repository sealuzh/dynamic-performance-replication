/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:58:26 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(635);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "u]a0@`t/v 0@l_85[(", "", "");
      Attribute attribute0 = new Attribute("u]a0@`t/v 0@l_85[(");
      fieldWriter0.visitAttribute(attribute0);
      byte[] byteArray0 = new byte[5];
      attribute0.value = byteArray0;
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      fieldWriter0.getSize();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, (-94), "", "", "Signature", pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "+LW)sx'|cD= <S?", "8E#Cr_&Au)V", "8E#Cr_&Au)V", "8E#Cr_&Au)V");
      ByteVector byteVector0 = classWriter0.pool;
      Attribute attribute0 = new Attribute("cf");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "+LW)sx'|cD= <S?", "8E#Cr_&Au)V", "8E#Cr_&Au)V", "8E#Cr_&Au)V");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("The strings must not be null", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "+LW)sx'|cD= <S?", "8E#Cr_&Au)V", "8E#Cr_&Au)V", "8E#Cr_&Au)V");
      fieldWriter0.visitAnnotation("8E#Cr_&Au)V", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(635);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")cA?S $Afp";
      stringArray0[2] = ")cA?S $Afp";
      classWriter0.visit(635, 635, "", ")cA?S $Afp", "char", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "u]a0@`t/v 0@l_85[(", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-195));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-195), "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(635);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "u]a0@`t/v 0@l_85[(", "", "");
      Attribute attribute0 = new Attribute("u]a0@`t/v 0@l_85[(");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "+LW)sx'|cD= <S?", "8E#Cr_&Au)V", "8E#Cr_&Au)V", "8E#Cr_&Au)V");
      fieldWriter0.visitAnnotation("8E#Cr_&Au)V", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(635);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")cA?S $Afp";
      stringArray0[2] = ")cA?S $Afp";
      classWriter0.visit(635, 635, "", ")cA?S $Afp", "char", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "u]a0@`t/v 0@l_85[(", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "+LW)sx'|cD= <S?", "8E#Cr_&Au)V", "8E#Cr_&Au)V", "8E#Cr_&Au)V");
      fieldWriter0.visitAnnotation("8E#Cr_&Au)V", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-195));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-195), "", "", (String) null, (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1389));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1389), "", "", "", "");
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-66), "", "", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "", "", "");
      fieldWriter0.visitEnd();
  }
}
