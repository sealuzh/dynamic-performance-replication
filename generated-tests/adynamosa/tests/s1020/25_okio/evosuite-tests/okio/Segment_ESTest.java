/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 07:33:50 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import okio.Segment;
import okio.SegmentPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.unsharedCopy();
      segment0.pos = 8192;
      segment1.writeTo(segment0, 8192);
      // Undeclared exception!
      try { 
        segment1.writeTo(segment0, 1675);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, (byte)110, 0, true, false);
      segment0.next = segment0;
      Segment segment1 = new Segment();
      Segment segment2 = segment0.next.push(segment1);
      Segment segment3 = segment1.sharedCopy();
      segment3.prev = segment0;
      segment3.prev.limit = 8192;
      segment0.next.push(segment1);
      Segment segment4 = segment0.split(1189);
      assertNotSame(segment4, segment2);
      assertNotSame(segment0, segment2);
      assertNotSame(segment4, segment0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, 1, 0, true, false);
      Segment segment1 = segment0.sharedCopy();
      segment0.next = segment0;
      segment1.prev = segment0;
      segment1.prev.limit = 8192;
      // Undeclared exception!
      try { 
        segment0.split(1189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, (byte)110, 0, true, false);
      segment0.next = segment0;
      Segment segment1 = segment0.sharedCopy();
      segment1.prev = segment0;
      segment1.prev.limit = 8192;
      segment0.next.push(segment0);
      Segment segment2 = segment0.split(1189);
      Segment segment3 = segment2.split(1189);
      assertNotSame(segment3, segment0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, false, false);
      Segment segment1 = new Segment();
      segment0.next = segment0;
      Segment segment2 = new Segment();
      segment2.prev = segment0;
      segment2.prev.limit = 8192;
      Segment segment3 = segment0.next.push(segment1);
      Segment segment4 = segment0.split(1024);
      assertNotSame(segment4, segment0);
      assertNotSame(segment4, segment3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.prev = segment1;
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, true, false);
      segment0.next = segment0;
      Segment segment1 = segment0.sharedCopy();
      segment1.prev = segment0;
      segment1.prev.push(segment0.next);
      Segment segment2 = segment0.next.pop();
      assertNull(segment2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, false, false);
      Segment segment1 = new Segment();
      segment0.next = segment0;
      Segment segment2 = segment0.next.push(segment1);
      Segment segment3 = segment2.pop();
      assertNotNull(segment3);
      assertNotSame(segment3, segment1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment((byte[]) null, (-440), (-440), true, true);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment0, (-440));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Segment segment0 = new Segment(byteArray0, (byte)72, 741, false, false);
      // Undeclared exception!
      try { 
        segment0.split(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.writeTo((Segment) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment((byte[]) null, 0, 1910, true, false);
      // Undeclared exception!
      try { 
        segment0.unsharedCopy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, (byte)110, 0, true, false);
      segment0.next = segment0;
      Segment segment1 = segment0.sharedCopy();
      segment1.prev = segment0;
      segment1.prev.limit = 8192;
      // Undeclared exception!
      try { 
        segment0.next.split(23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.push((Segment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.pos = (-796);
      SegmentPool.next = segment0;
      Segment segment1 = SegmentPool.next.unsharedCopy();
      segment0.prev = segment1;
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, 1, 1, true, true);
      Segment segment1 = segment0.unsharedCopy();
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.unsharedCopy();
      segment1.writeTo(segment0, 8192);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment0, 1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, 1, 1, true, true);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment0, 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Segment segment0 = new Segment(byteArray0, 3463, (byte)127, false, false);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, true, false);
      Segment segment1 = new Segment(byteArray0, 1, 0, true, false);
      segment0.next = segment1;
      Segment segment2 = segment0.sharedCopy();
      segment1.next = segment1;
      segment2.prev = segment1;
      segment2.prev.push(segment0.next);
      segment1.next.owner = true;
      segment2.prev.limit = 8192;
      Segment segment3 = segment1.split(1);
      segment1.next.compact();
      assertNotSame(segment1, segment3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, false, false);
      Segment segment1 = new Segment();
      segment0.next = segment1;
      Segment segment2 = segment0.sharedCopy();
      segment1.next = segment0;
      segment2.prev = segment1;
      segment2.prev.push(segment0.next);
      segment2.prev.limit = 8192;
      Segment segment3 = segment0.next.split(1);
      segment1.next.compact();
      assertFalse(segment1.equals((Object)segment3));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Segment segment0 = new Segment();
      SegmentPool.next = segment0;
      segment0.prev = SegmentPool.next;
      // Undeclared exception!
      try { 
        SegmentPool.next.compact();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, false, false);
      segment0.next = segment0;
      Segment segment1 = segment0.sharedCopy();
      segment1.prev = segment0;
      Segment segment2 = segment1.prev.push(segment0.next);
      segment1.prev.limit = 8192;
      Segment segment3 = segment2.split(1);
      segment0.next.compact();
      assertNotSame(segment0, segment3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split(321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split((byte) (-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Segment segment0 = new Segment(byteArray0, (byte)0, 0, false, false);
      // Undeclared exception!
      try { 
        segment0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }
}
