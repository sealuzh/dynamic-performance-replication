/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:42:11 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(281);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 281;
      doubleArray0[1] = (double) 281;
      doubleArray0[2] = (double) 281;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(18, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1761);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(21);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)21, (double)21, (-1.0), (double)21, 577.8701).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 21;
      doubleArray0[1] = (double) 21;
      doubleArray0[2] = (double) 21;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 21);
      assertEquals(21.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(28, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MnHesse mnHesse0 = new MnHesse((-669));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(2527);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianNCycles(0);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 0.51, (double)0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase3, mnUserParameters1, 1780);
      MnFcn mnFcn0 = new MnFcn(fCNBase2, (-4622.662675143207));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, (-4622.662675143207));
      MinimumParameters minimumParameters1 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 0.5);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MinimumState minimumState0 = new MinimumState(minimumParameters1, 0, 6058);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      assertNotSame(mnUserTransformation1, mnUserTransformation0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      mnHesse0.ncycles();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2134.3718898), 0.0, 576.3063241002507, (double)0, (double)0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnFcn mnFcn0 = new MnFcn(fCNBase2, (-4622.662675143207));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(1798);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState();
      MinimumState minimumState0 = new MinimumState(3);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1047);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-3622));
      mnHesse0.ncycles();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3622);
      doubleArray0[1] = (-182.57);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) (-3622);
      doubleArray0[4] = (double) (-3622);
      doubleArray0[5] = (double) 7;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-3622);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(7.0, (-182.57), 0.2, 7.0, (-182.57)).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnUserParameters1.add("<t6w@ztBi4$", 2.0, (-12.9333), 99.09379486852689, (-182.57));
      mnHesse0.calculate(fCNBase1, mnUserParameters1);
      doubleArray1[1] = (-182.57);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 724.698535617, 576.3063241002507, (double)0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add((String) null, 724.698535617, 576.3063241002507, 3665.65195, 0.1);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, 2498);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      int int0 = Double.BYTES;
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2134.3718898)).when(fCNBase2).valueOf(any(double[].class));
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase2, (-4623.535119618959));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      MinimumParameters minimumParameters0 = new MinimumParameters(6058);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(1);
      MinimumError.MnHesseFailed minimumError_MnHesseFailed0 = new MinimumError.MnHesseFailed();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, 576.3063241002507);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 9.851288363359354E-4, 8);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters are invalid
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 576.3063241002507;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray1, doubleArray1);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = new double[1];
      doubleArray1[0] = 576.3063241002507;
      mnHesse0.ncycles();
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2134.3718898), 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      FCNBase fCNBase4 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase3, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      mnAlgebraicVector0.toString();
      MinimumParameters minimumParameters0 = new MinimumParameters(1780);
      MinimumParameters minimumParameters1 = new MinimumParameters(1780);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MinimumState minimumState0 = new MinimumState(6058);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnUserTransformation0.clone();
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
      mnFcn0.valueOf(mnAlgebraicVector0);
      mnUserTransformation1.add("", (-2134.3718898), 1108.2357300344);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(460.5222466, 576.3063241002507, (double)0, (double)0, 576.3063241002507).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 576.3063241002507;
      mnHesse0.ncycles();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)5).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(5);
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, 0.51, (double)0, 576.3063241002507, 576.3063241002507).when(fCNBase2).valueOf(any(double[].class));
      mnStrategy0.setHessianG2Tolerance((-1836.114021442452));
      mnHesse1.calculate(fCNBase2, mnUserParameters0, 1780);
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 10.0);
      MinimumParameters minimumParameters0 = new MinimumParameters(1780);
      mnStrategy0.setHessianNCycles(0);
      mnFcn0.theNumCall = 5;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 10.0, (-1));
      mnHesse1.calculate(fCNBase0, mnUserParameters0);
      mnHesse0.tolerstp();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MinimumState minimumState1 = mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 5);
      assertNotSame(minimumState1, minimumState0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = 576.3063241002507;
      int int0 = Double.SIZE;
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2134.3718898), 576.3063241002507, 576.3063241002507, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnFcn mnFcn0 = new MnFcn(fCNBase2, 5163.01);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 5163.01);
      MinimumParameters minimumParameters1 = new MinimumParameters(1780);
      MnUserParameterState mnUserParameterState1 = new MnUserParameterState(mnUserParameters0);
      MinimumState minimumState0 = new MinimumState(64);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.ncycles();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, (-1073.3750002975));
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (MinimumError) null, functionGradient0, 5.802752989264939E-16, 3);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3887);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 724.698535617, 576.3063241002507, (double)0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, 2494);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 576.3063241002507;
      mnHesse0.ncycles();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 576.3063241002507, 576.3063241002507, (double)3, 576.3063241002507).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray1, doubleArray1);
      mnUserParameters0.setLowerLimit(0, (double) 3);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      MnFcn mnFcn0 = new MnFcn(fCNBase2, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(6058);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 576.3063241002507);
      MinimumParameters minimumParameters1 = new MinimumParameters(1780);
      MinimumState minimumState0 = new MinimumState(3);
      mnStrategy0.setHessianGradientNCycles(2494);
      mnUserParameters0.trafo();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnHesse0.tolerstp();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
