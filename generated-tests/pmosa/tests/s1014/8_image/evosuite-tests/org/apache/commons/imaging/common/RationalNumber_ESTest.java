/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:59:58 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(9, (-2116));
      String string0 = rationalNumber0.toString();
      assertEquals("9/-2116 (-0.004)", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.5143478231038898E-4);
      assertEquals(1.514348451578708E-4, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(4061L, 0L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber.valueOf(2752.9542);
      RationalNumber.factoryMethod(0L, (-2094L));
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(87L, (-3405L));
      rationalNumber2.negate();
      rationalNumber1.toString();
      // Undeclared exception!
      try { 
        rationalNumber1.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483646435547E9);
      assertEquals(2.147483646E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483646, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0427356755826622E-9);
      long long0 = rationalNumber0.longValue();
      assertEquals(959015811, rationalNumber0.divisor);
      assertEquals(0L, long0);
      assertEquals(1.0427356760231766E-9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483684L);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(795.5);
      assertEquals(1591, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1644.63066149);
      String string0 = rationalNumber0.toString();
      assertEquals("21605513/13137 (1,644.631)", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, 1L);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber3 = rationalNumber2.negate();
      assertEquals(0, rationalNumber3.numerator);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1,644.631", string1);
      
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-380.087518171818));
      assertEquals((-380.08752F), rationalNumber4.floatValue(), 0.01F);
      
      rationalNumber1.toDisplayString();
      rationalNumber1.toDisplayString();
      rationalNumber0.doubleValue();
      rationalNumber1.longValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      String string2 = rationalNumber6.toString();
      assertEquals("1", string2);
      
      rationalNumber5.longValue();
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(0L, 370L);
      RationalNumber.valueOf(370L);
      rationalNumber7.toDisplayString();
      float float0 = rationalNumber0.floatValue();
      assertEquals(1644.6306F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber1.floatValue(), 0.01F);
      
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1190.6);
      rationalNumber2.toString();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.0E-8);
      rationalNumber0.intValue();
      rationalNumber2.toDisplayString();
      String string1 = rationalNumber2.toString();
      assertEquals("5953/5 (1,190.6)", string1);
      
      RationalNumber rationalNumber4 = rationalNumber2.negate();
      RationalNumber rationalNumber5 = rationalNumber3.negate();
      RationalNumber.valueOf((-1594.0836426));
      rationalNumber5.negate();
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod((-745L), 1);
      rationalNumber6.negate();
      String string2 = rationalNumber6.toString();
      assertEquals("-745", string2);
      
      String string3 = rationalNumber3.toString();
      assertEquals("1/100000000 (0)", string3);
      
      String string4 = rationalNumber4.toDisplayString();
      assertEquals("-1,190.6", string4);
      assertEquals((byte) (-90), rationalNumber2.byteValue());
      
      RationalNumber rationalNumber7 = rationalNumber3.negate();
      rationalNumber7.negate();
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-694L), (-1921L));
      assertEquals(694, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2719.0078840473016);
      assertEquals(2719.009900990099, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483666L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483666, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2025), (-2025));
      RationalNumber.factoryMethod(2147483666L, 2147483666L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2025), 2147483666L);
      assertEquals((-9.434297601777429E-7), rationalNumber1.doubleValue(), 0.01);
      
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      String string1 = rationalNumber2.toString();
      assertEquals("-1", string1);
      
      RationalNumber.valueOf(1013);
      rationalNumber0.floatValue();
      RationalNumber.factoryMethod(949L, 263L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1L, 1013);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-1073741833), 1482L);
      RationalNumber.valueOf(109.0);
      String string2 = rationalNumber4.toString();
      assertEquals("1073741833/-1482 (-724,522.155)", string2);
      
      RationalNumber.factoryMethod((-1644), 1);
      rationalNumber3.doubleValue();
      RationalNumber rationalNumber5 = RationalNumber.valueOf(6668.0);
      String string3 = rationalNumber5.toString();
      assertEquals("6,668", string3);
      
      int int0 = rationalNumber4.intValue();
      assertEquals((-724522), int0);
      
      RationalNumber rationalNumber6 = rationalNumber3.negate();
      assertEquals((-9.871669E-4F), rationalNumber6.floatValue(), 0.01F);
      
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod(93L, (-2025));
      assertEquals((-0.045925925925925926), rationalNumber7.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-24), (-2132));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483663L), (-24));
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(8.9478486E7, rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-24/-2132 (0.011)", string0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(0.01125703564727955, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2025), (-2025));
      String string0 = rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(0L, 2147483666L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      String string1 = rationalNumber0.toString();
      assertTrue(string1.equals((Object)string0));
      
      rationalNumber1.floatValue();
      RationalNumber.factoryMethod(2334L, 3048L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-32L), 4424L);
      RationalNumber.factoryMethod(647L, 2334L);
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-3578.51467564));
      assertEquals((-3578.515F), rationalNumber4.floatValue(), 0.01F);
      
      String string2 = rationalNumber3.toString();
      assertEquals("-4/553 (-0.007)", string2);
      
      RationalNumber.factoryMethod(0L, (-19141475));
      RationalNumber rationalNumber5 = RationalNumber.valueOf((-1.0));
      rationalNumber5.doubleValue();
      assertEquals((-1), rationalNumber5.numerator);
      assertEquals((-1), rationalNumber5.intValue());
      
      RationalNumber rationalNumber6 = RationalNumber.valueOf(0.0F);
      String string3 = rationalNumber6.toString();
      assertEquals("0", string3);
      
      rationalNumber2.intValue();
      rationalNumber1.negate();
      String string4 = rationalNumber0.toString();
      assertEquals("1", string4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), (-2132));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483663L), (-1));
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertEquals(2.14748365E9F, rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber rationalNumber3 = new RationalNumber(2147483645, 114);
      rationalNumber3.floatValue();
      RationalNumber rationalNumber4 = new RationalNumber((-1), (-1));
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-1), 2147483645);
      assertEquals(1, rationalNumber5.numerator);
      assertEquals((-4.656613E-10F), rationalNumber5.floatValue(), 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-1/-2132 (0)", string0);
      
      long long0 = rationalNumber4.longValue();
      assertEquals(1L, long0);
  }
}
