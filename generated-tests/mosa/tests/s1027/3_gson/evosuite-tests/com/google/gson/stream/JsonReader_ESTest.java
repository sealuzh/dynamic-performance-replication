/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 18:23:59 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FRp1Jfg)[0N9q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X_o$>o*Sn");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2<pMZ}Zd");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j9wK7I2*j7");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(98);
      pipedReader0.close();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      StringReader stringReader0 = new StringReader("Z");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FRp1Jfg)[0N9q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonReader jsonReader0 = new JsonReader(mockFileReader0);
      // Undeclared exception!
      try { 
        jsonReader0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = 2;
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      stringReader0.ready();
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.hasNext();
      StringReader stringReader1 = new StringReader("{6N7");
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 't';
      charArray0[3] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = 2;
      charArrayReader0.read(charArray0);
      charArrayReader0.read();
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z|>gM");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertEquals("z|>gM", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FRp1Jfg)[0N9q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '/';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FRp1Jfg)[0N9q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z|>gM");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_DOCUMENT at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.doPeek();
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("n`H' l]Rr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      boolean boolean2 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader0 = new StringReader("a/s4~\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("}ra4|}ykm1G'SQXy");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("JsonReader at line 1 column 1 path $");
      assertNotNull(stringReader0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.isLenient();
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("Expected a boolean but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e]y:7L");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("Expected BEGIN_OBJECT but was ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("s.1&R6");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("s.1&R6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "{6N7";
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("U*\"cVsx");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.peeked = (-1);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean1 = jsonReader1.hasNext();
      assertFalse(jsonReader1.isLenient());
      assertTrue(boolean1);
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ni&qy");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[2] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'#', '\u0000', '#', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^i$");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[4] = 'j';
      StringReader stringReader0 = new StringReader("L~*U{gdDP6C[xJ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = 'j';
      charArray0[5] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', '6', '6', '7', 'j', '$'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'j', '6', '6', '7', 'j', '$'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 2 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)32;
      byteArray0[0] = (byte)57;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)57, (byte)32, (byte)57, (byte)32, (byte)0, (byte)3, (byte)57, (byte)32}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)57, (byte)32, (byte)57, (byte)32, (byte)0, (byte)3, (byte)57, (byte)32}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)57, (byte)32, (byte)57, (byte)32, (byte)0, (byte)3, (byte)57, (byte)32}, byteArray0);
      
      jsonReader0.skipValue();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)57, (byte)32, (byte)57, (byte)32, (byte)0, (byte)3, (byte)57, (byte)32}, byteArray0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 5 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertTrue(jsonReader0.isLenient());
      assertEquals("$.", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NAME at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '=';
      StringReader stringReader0 = new StringReader("dA!Q|H9heY3mec;#3p[");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "]]";
      StringReader stringReader0 = new StringReader("]]");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",:l*");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      StringReader stringReader0 = new StringReader("'_O7b^5Bz!sI,/{cn.k");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertFalse(jsonReader0.isLenient());
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{6N7");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("{6N7");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("s!9nNCq}kt_vUib@e");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'s', '!'}, charArray0);
      
      StringReader stringReader1 = new StringReader("END_ARRAY");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s!9nNCq}kt_vUib@e");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = true;
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2<pMZ}Zd");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated array at line 1 column 5 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)91;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)91}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)91, (byte)7, (byte)1, (byte)92, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)91, (byte)7, (byte)1, (byte)92, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)91, (byte)7, (byte)1, (byte)92, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      jsonReader0.beginArray();
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)7, (byte)1, (byte)92, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[3] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader0 = new StringReader(" path ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      StringReader stringReader0 = new StringReader("%<d>C>j,.o");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      jsonReader0.nextNull();
      assertFalse(jsonReader0.isLenient());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = ':';
      charArray0[2] = 't';
      charArray0[3] = '$';
      charArray0[4] = '5';
      charArray0[5] = ',';
      charArray0[6] = 'Y';
      charArray0[7] = '|';
      charArray0[8] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 17);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      charArrayReader0.mark(2);
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      int int0 = jsonReader0.doPeek();
      assertTrue(jsonReader0.isLenient());
      assertEquals(10, int0);
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'N', ':', 't', '$', '5', ',', 'Y', '|', 'w'}, charArray0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'.', 'H', '=', '\"', 'a', 'r'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUMBER");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      jsonReader0.skipValue();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertEquals(JsonToken.NUMBER, jsonToken0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      JsonToken jsonToken1 = jsonReader0.peek();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertEquals(JsonToken.NUMBER, jsonToken1);
      assertSame(jsonToken1, jsonToken0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertEquals("9", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)7, (byte)10, (byte)57, (byte)32, (byte)7, (byte)3, (byte)7, (byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      StringReader stringReader0 = new StringReader("8E|W7.Z\fCLVbCc");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q[j}A%(");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      stringReader0.reset();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean1 = jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1);
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader2 = new JsonReader(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art_[h4h63,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'g';
      charArray0[2] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'.', 'H', '='}, charArray0);
      
      int int1 = jsonReader0.doPeek();
      assertFalse(jsonReader0.isLenient());
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'.', 'H', '='}, charArray0);
      
      jsonReader0.peeked = 1599;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'g';
      charArray0[2] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'.', 'H', '='}, charArray0);
      
      jsonReader0.peeked = 1599;
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4/");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)78, (byte)78);
      assertEquals((-74), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)78, (byte)22, (byte)97, (byte)84}, byteArray0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals((-74), byteArrayInputStream0.available());
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)78, (byte)22, (byte)97, (byte)84}, byteArray0);
      
      StringReader stringReader0 = new StringReader("Unterminated comment");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'U', 'n', 't', 'e', 'r', 'm'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";F5^i+_K*Pv98e7ie");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      jsonReader0.skipValue();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)57, (byte)3, (byte)7, (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = 'j';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-36);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)35, (byte)100, (byte) (-127), (byte)123, (byte)69, (byte)47, (byte)84, (byte) (-36)}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)35, (byte)100, (byte) (-127), (byte)123, (byte)69, (byte)47, (byte)84, (byte) (-36)}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(jsonReader0.isLenient());
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)35, (byte)100, (byte) (-127), (byte)123, (byte)69, (byte)47, (byte)84, (byte) (-36)}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader0.isLenient());
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)35, (byte)100, (byte) (-127), (byte)123, (byte)69, (byte)47, (byte)84, (byte) (-36)}, byteArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-36), (byte)123, (byte) (-36), (byte)47, (byte)47, (byte)35, (byte)100}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-36), (byte)123, (byte) (-36), (byte)47, (byte)47, (byte)35, (byte)100}, byteArray0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-36), (byte)123, (byte) (-36), (byte)47, (byte)47, (byte)35, (byte)100}, byteArray0);
      
      jsonReader0.setLenient(true);
      assertEquals(8, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-36), (byte)123, (byte) (-36), (byte)47, (byte)47, (byte)35, (byte)100}, byteArray0);
      
      jsonReader0.skipValue();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-36), (byte)123, (byte) (-36), (byte)47, (byte)47, (byte)35, (byte)100}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)80, (byte) (-7), (byte) (-61), (byte) (-2), (byte)10}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(6, byteArrayInputStream0.available());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)47, (byte)80, (byte) (-7), (byte) (-61), (byte) (-2), (byte)10}, byteArray0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertArrayEquals(new byte[] {(byte)47, (byte)80, (byte) (-7), (byte) (-61), (byte) (-2), (byte)10}, byteArray0);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      jsonReader2.setLenient(true);
      assertEquals(6, byteArrayInputStream0.available());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(jsonReader2.isLenient());
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      assertArrayEquals(new byte[] {(byte)47, (byte)80, (byte) (-7), (byte) (-61), (byte) (-2), (byte)10}, byteArray0);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      try { 
        jsonReader2.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)64;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".H=\"art[h4h63,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'g';
      charArray0[2] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'.', 'H', '='}, charArray0);
      
      jsonReader0.peeked = 1599;
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
