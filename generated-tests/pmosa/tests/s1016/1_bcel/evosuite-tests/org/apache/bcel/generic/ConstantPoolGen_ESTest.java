/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:48:58 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchHandle;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.SWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.lookupFieldref("", "", "(start_pc = ");
      constantPoolGen0.addString("");
      constantPoolGen0.toString();
      constantPoolGen0.addString("1)CONSTANT_Utf8[1](\"\")\n2)CONSTANT_String[8](string_index = 1)\n");
      constantPoolGen0.toString();
      int int0 = (-1499);
      int int1 = 0;
      GETFIELD gETFIELD0 = new GETFIELD(0);
      // Undeclared exception!
      try { 
        gETFIELD0.getReferenceType(constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFieldref("ZR#)h$nbI&FdpCRz", "' on top of the stack. But stack top is a '", "ZR#)h$nbI&FdpCRz");
      assertEquals((-1), int0);
      
      constantPoolGen0.getConstant(127);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupLong(1L);
      int int1 = constantPoolGen0.lookupString("ZO*<- Rb^\"X");
      assertTrue(int1 == int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      int int1 = constantPoolGen0.lookupUtf8(":@mHp4I}p.&");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      int int0 = 76;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5961, 76);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = 0;
      constantPoolGen0.getConstant(0);
      constantArray0[1] = null;
      constantPoolGen0.getConstant(76);
      constantArray0[2] = null;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5961, 5961);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      int int2 = 0;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(0, 0);
      constantArray0[4] = (Constant) constantNameAndType2;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5961
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-3418L));
      constantPoolGen0.lookupMethodref("<", "astore_3", "FGk]v9geqU");
      constantPoolGen0.getConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFloat(0.0F);
      int int1 = constantPoolGen0.lookupInterfaceMethodref("Ljava/lang/NullPointerException;", "Ljava/lang/NullPointerException;", "Ljava/lang/NullPointerException;");
      assertTrue(int1 == int0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 2);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble(0L);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantLong constantLong2 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong2;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addLong(817L);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addLong(0L);
      String string0 = ")";
      constantPoolGen0.lookupClass(")");
      constantPoolGen0.addInteger((-1));
      constantPoolGen0.lookupString(")");
      constantPoolGen0.addFloat((-2440.772F));
      Frame.getThis();
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((Type) null, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(89, 89);
      ConstantClass constantClass0 = new ConstantClass(89);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addInteger(89);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2382, (-927));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble(2382);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(0, 0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.toString();
      Constant constant0 = constantNameAndType1.copy();
      constantArray0[3] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat(0);
      constantArray0[4] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong(2382);
      constantArray0[5] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((-927));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[6] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bipush");
      constantDouble0.clone();
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("a/*", "a/*", "a/*");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      constantPoolGen0.addDouble((-2495.06296325131));
      String string0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFloat(893L);
      constantPoolGen0.addLong(893L);
      constantPoolGen0.addDouble((-3599.426));
      constantPoolGen0.constants = constantArray0;
      String string0 = "fF9%2h1]@JeESW[z";
      constantPoolGen0.lookupFieldref("fF9%2h1]@JeESW[z", "fF9%2h1]@JeESW[z", "fF9%2h1]@JeESW[z");
      int int0 = 1084;
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(1084);
      // Undeclared exception!
      try { 
        iNSTANCEOF0.getLoadClassType(constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1084. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpeq");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = constantPoolGen0.lookupDouble(1.0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(127, 127);
      ConstantClass constantClass0 = new ConstantClass(2113);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      int int0 = Pattern.COMMENTS;
      int int1 = constantPoolGen0.addMethodref("", "", "");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      LCMP lCMP0 = new LCMP();
      Type type0 = lCMP0.getType(constantPoolGen0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen((-2612), type0, type0.NO_ARGS, (String[]) null, "dsub", "dsub", instructionList0, constantPoolGen0);
      int int0 = constantPoolGen0.addMethodref(methodGen0);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ObjectType objectType0 = Type.CLASS;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.constants = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("", "", "N@i[%yE0bs}r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-770), 2686);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addFloat(2686);
      constantPoolGen1.lookupMethodref((String) null, (String) null, " X}tM{}rmQ]bbo6");
      int int0 = constantPoolGen0.addInterfaceMethodref("WQYvLq5", "X", "oP*^# h2#");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1.0F);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantLong constantLong0 = new ConstantLong(1);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bipush");
      ConstantDouble constantDouble0 = new ConstantDouble(1.0F);
      constantDouble0.clone();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger1;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      constantPoolGen1.addInteger((-1));
      constantPoolGen1.getSize();
      constantDouble0.toString();
      constantPoolGen0.getSize();
      // Undeclared exception!
      try { 
        constantPool0.getConstant(4, (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("J[l/`~ySfy");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("'I|MwTjR54%", "LZX+GoMG%", "()J");
      constantPoolGen0.addFloat(1.0F);
      constantPoolGen0.lookupLong((-399L));
      constantPoolGen0.lookupInteger(1111);
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      constantPoolGen0.addString("}-rC%S91BCSQ-Qhjlu-");
      constantPoolGen0.lookupLong(0L);
      constantPoolGen0.lookupNameAndType((String) null, "}-rC%S91BCSQ-Qhjlu-");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("9O%<>)");
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant((-1), constantUtf8_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ObjectType objectType0 = new ObjectType("cZa_A>Tsa&0Qh ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(1224, objectType0, objectType0.NO_ARGS, (String[]) null, "", "<", instructionList0, constantPoolGen0);
      MethodGen methodGen1 = methodGen0.copy((String) null, constantPoolGen0);
      int int0 = constantPoolGen0.lookupMethodref(methodGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("", "Invalid byte tag in constant pool: ", "f3L1k8-/Uk$u9#");
      constantPoolGen0.lookupMethodref("<", "<", "<");
      InstructionHandle[] instructionHandleArray0 = new InstructionHandle[1];
      FADD fADD0 = (FADD)InstructionConstants.FADD;
      InstructionList instructionList0 = new InstructionList(fADD0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, 0.0F);
      InstructionList instructionList1 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) fADD0, instructionList1);
      instructionHandleArray0[0] = instructionHandle0;
      // Undeclared exception!
      try { 
        InstructionList.findHandle(instructionHandleArray0, (int[]) null, (-1), 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-> ");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      int int0 = constantPoolGen0.addFieldref("-> ", "-> ", "-> ");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(127, 127);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.lookupMethodref("<", "<", "<");
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1073L));
      constantPoolGen0.lookupLong((-1073L));
      constantPoolGen0.toString();
      constantPoolGen0.addUtf8("s");
      constantPoolGen0.addDouble((-399L));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 864);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant constant0 = constantNameAndType1.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 864
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(4821.8047F);
      String string0 = ")";
      constantPoolGen0.addLong(367L);
      constantPoolGen0.lookupClass(")");
      constantPoolGen0.addFloat(2);
      String string1 = ":.VwI7^]6KM";
      String string2 = "}@<*r|4,:[D6aNPE<g";
      constantPoolGen0.lookupMethodref(":.VwI7^]6KM", "\":tKJ#'=FxY*O=)", "}@<*r|4,:[D6aNPE<g");
      constantPoolGen0.lookupLong(1);
      constantPoolGen0.addNameAndType("}@<*r|4,:[D6aNPE<g", "lookupswitch");
      int int0 = 1988;
      OperandStack operandStack0 = new OperandStack(7);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.pop((-1));
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)57;
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.EOFException
         //
         verifyException("org.apache.bcel.generic.InstructionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(61, 61);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(61);
      constantPoolGen0.addString("eK6ZYi][Q$K;r(h");
      int int0 = constantPoolGen0.lookupFloat(3);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1.0F);
      assertEquals(2, constantPoolGen0.getSize());
      
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantLong constantLong0 = new ConstantLong(1);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bipush");
      ConstantDouble constantDouble0 = new ConstantDouble(1.0F);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger1;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 1);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantNameAndType1.copy();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen2.addConstant(constantInteger1, constantPoolGen1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[9];
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 1490);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3, 128);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(2072.469F);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(128);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[6] = (Constant) constantMethodType1;
      ConstantInteger constantInteger0 = new ConstantInteger(128);
      constantArray0[7] = (Constant) constantInteger0;
      int int0 = 1710;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(3, 1710);
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      constantArray0[8] = (Constant) constantMethodHandle2;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(63);
      int int0 = constantPoolGen0.addDouble(63);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2053), 1097);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2105376123), 128);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref((-2053), 128);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2053), 3);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2105376123
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-4657), (-4657));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(217, 149);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref2);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(2689L);
      int int0 = constantPoolGen1.addConstant(constantLong0, constantPoolGen2);
      assertEquals(4, constantPoolGen1.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[9];
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 1490);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3, 128);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(4);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1490, 4738);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(4, 183);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1597), (-1597));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 1490, reference_index = 4738)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong((-2361L));
      ConstantInteger constantInteger0 = new ConstantInteger(18);
      ConstantInteger constantInteger1 = new ConstantInteger(18);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(";bC4}em&@");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantInteger2;
      constantArray0[8] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(18, 18);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(18, 132);
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      constantNameAndType0.copy();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addConstant(constantInteger2, constantPoolGen0);
      assertEquals(6, int0);
      assertEquals(9, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1.0F);
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantLong constantLong0 = new ConstantLong(1);
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("bipush");
      ConstantDouble constantDouble0 = new ConstantDouble(1.0F);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger1;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPoolGen0.addString("bipush");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addConstant(constantArray0[5], constantPoolGen0);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2400, 2400);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(217, (-2111692251));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFieldref constantFieldref2 = new ConstantFieldref((-709), (-2111692251));
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref2);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      constantPoolGen3.addConstant(constantDouble1, constantPoolGen0);
      constantPoolGen3.addDouble(1);
      assertEquals(5, constantPoolGen3.getSize());
      
      int int0 = constantPoolGen2.lookupString("1)null\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.lookupMethodref((String) null, (String) null, (String) null);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantFloat0.dump(dataOutputStream0);
      constantPoolGen1.addConstant(constantFloat0, constantPoolGen0);
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(2, constantPoolGen1.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 1492);
      ConstantPoolGen constantPoolGen4 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1492
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(89, 89);
      ConstantClass constantClass0 = new ConstantClass(46);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ARETURN aRETURN0 = new ARETURN();
      Type type0 = aRETURN0.getType(constantPoolGen0);
      aRETURN0.consumeStack(constantPoolGen0);
      byte[] byteArray0 = new byte[0];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      MethodGen methodGen0 = new MethodGen(3469, type0, type0.NO_ARGS, (String[]) null, "(h+<7azX6!wN", "(h+<7azX6!wN", instructionList0, constantPoolGen0);
      int int0 = constantPoolGen0.addInterfaceMethodref(methodGen0);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
