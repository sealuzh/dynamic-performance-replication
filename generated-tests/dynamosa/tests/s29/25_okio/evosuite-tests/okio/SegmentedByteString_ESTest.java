/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:18:32 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      byteBuffer0.getLong();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      segmentedByteString0.equals(byteString0);
      assertEquals(9, byteBuffer0.position());
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      buffer0.readUtf8CodePoint();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      byte[] byteArray0 = new byte[3];
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      boolean boolean0 = segmentedByteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = segmentedByteString0.rangeEquals(0, byteArray0, 3, (int) (byte) (-113));
      assertTrue(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|D");
      buffer1.readByte();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.compareTo((ByteString) segmentedByteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Za[@eGnx1");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(9, byteArrayOutputStream0.size());
      assertEquals("Za[@eGnx1", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCunt  Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      String string0 = segmentedByteString0.toString();
      assertEquals("[text=byteCunt ]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)90, (byte)97, (byte)91, (byte)64, (byte)101, (byte)71, (byte)110, (byte)120, (byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      assertEquals(9, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = segmentedByteString0.substring(9, 9);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = segmentedByteString0.substring((int) (byte)2);
      assertEquals(7, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      Charset charset0 = Charset.defaultCharset();
      String string0 = segmentedByteString0.string(charset0);
      assertEquals("Za[@eGnx1", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      int int0 = segmentedByteString0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      assertEquals(1, segmentedByteString0.size());
      
      byte[] byteArray0 = segmentedByteString0.internalArray();
      boolean boolean0 = segmentedByteString0.rangeEquals(0, byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      boolean boolean0 = segmentedByteString0.rangeEquals(25, (ByteString) segmentedByteString0, (-1828), (-416));
      assertEquals(9, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = segmentedByteString0.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      byte[] byteArray0 = new byte[1];
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 2239);
      assertEquals((-1), int0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      byte[] byteArray0 = new byte[0];
      int int0 = segmentedByteString0.indexOf(byteArray0, 9);
      assertEquals(9, int0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      byte[] byteArray0 = new byte[6];
      int int0 = segmentedByteString0.indexOf(byteArray0, (-351));
      assertEquals(9, segmentedByteString0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      byte byte0 = segmentedByteString0.getByte(0);
      assertEquals(9, segmentedByteString0.size());
      assertEquals((byte)98, byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      String string0 = segmentedByteString0.base64();
      assertEquals("WmFbQGVHbngx", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-7), (-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-501));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(31, (byte[]) null, 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = segmentedByteString0.rangeEquals((-1212), byteString0, 0, (-1212));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (-2876));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 25);
      byte[] byteArray0 = new byte[0];
      int int0 = segmentedByteString0.lastIndexOf(byteArray0, 25);
      assertEquals(25, segmentedByteString0.size());
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, (-929));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("source is closed");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      segmentedByteString0.hmacSha256(segmentedByteString0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-1244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Object object0 = new Object();
      boolean boolean0 = segmentedByteString0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|D");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(31, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_ALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(1442);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.size();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("YIb;sR.h3J)5Lq=h");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(2, (byte[]) null, 2, (-1289));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("^kio.SentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 17);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, (ByteString) null, (-3322), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, (ByteString) segmentedByteString0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 802);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCunt  Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = segmentedByteString0.substring(1);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegentdByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 18);
      ByteString byteString0 = segmentedByteString0.substring(18);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("iikQ{]1*wR#>$");
      byte[] byteArray0 = new byte[3];
      Segment segment0 = new Segment(byteArray0, 15, (byte)94, true, true);
      buffer1.head = segment0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        segmentedByteString0.equals(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString((Buffer) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(8);
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertEquals(9, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCunt  Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(9);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertEquals(9, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = ByteString.encodeUtf8("byteCount > Integer.MAX_VALUE: ");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      boolean boolean0 = segmentedByteString0.equals(byteString1);
      assertFalse(boolean0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.equals(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.equals(segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("d");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 560, (-4));
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("^kiG.SentcHteStin8");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 13);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(13, byteArray0, (-3421), (-3421));
      assertEquals(13, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("byteCunt  Integer.MAX_VALUE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertEquals(9, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte) (-1), byteArray0, 102, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      boolean boolean0 = segmentedByteString0.startsWith((ByteString) segmentedByteString0);
      assertEquals(9, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      boolean boolean0 = segmentedByteString0.rangeEquals(9, (ByteString) segmentedByteString0, 9, 9);
      assertEquals(9, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      boolean boolean0 = segmentedByteString0.rangeEquals(3, byteString0, 9, 1);
      assertEquals(9, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegentdByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      Buffer buffer2 = new Buffer();
      segmentedByteString0.write(buffer2);
      assertFalse(buffer2.exhausted());
      assertFalse(buffer0.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.write(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("d");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        segmentedByteString0.write(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("^kio.SentedByteString");
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer1, 17);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      assertEquals(9, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.SegentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("YIZ;s%uh3gJ)5q=h");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 15);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegentdByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 18);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      assertEquals(18, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.SegmentedByteString");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[0];
      int int0 = segmentedByteString0.indexOf(byteArray0, (-2006));
      assertEquals(0, int0);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      String string0 = segmentedByteString0.hex();
      assertEquals(2, segmentedByteString0.size());
      assertEquals("5a61", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      segmentedByteString0.sha1();
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.sha256();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("byteCunt 5Integer.MAX^VALE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      ByteString byteString0 = segmentedByteString0.substring(4, 9);
      assertEquals(5, byteString0.size());
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("|");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = segmentedByteString0.internalArray();
      segmentedByteString0.lastIndexOf(byteArray0, 1634);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("byteCunt 5Integer.MAX^VALE: ");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      String string0 = segmentedByteString0.utf8();
      assertEquals("byteCunt ", string0);
      assertEquals(9, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("Za[@eGnx1");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 9);
      String string0 = segmentedByteString0.base64Url();
      assertEquals("WmFbQGVHbngx", string0);
      assertEquals(9, segmentedByteString0.size());
  }
}
