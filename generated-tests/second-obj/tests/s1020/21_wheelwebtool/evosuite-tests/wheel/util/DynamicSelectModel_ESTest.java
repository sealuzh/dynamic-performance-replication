/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:53:42 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("The wildcard must not be null");
      elExpression0.chars();
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5]V8AGcl");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.value("5]V8AGcl");
      assertSame(dynamicSelectModel2, dynamicSelectModel1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      Collection collection0 = new LinkedList<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getLabel((-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("org.mvel.OptimizationFailure");
      dynamicSelectModel1.validate();
      assertSame(dynamicSelectModel1, dynamicSelectModel0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.setComponent((Component) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.label("");
      dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("f0:g#t|");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.collection("3");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression 3 evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      dynamicSelectModel0.enumeration("[] from ");
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("S- yg;uM");
      Object object0 = new Object();
      dynamicSelectModel1.empty("Expression");
      // Undeclared exception!
      try { 
        dynamicSelectModel0.translateValue(" R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ordinal() to create a value for dynamic ISelectModel. Index was 0
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("[] from ");
      dynamicSelectModel1.getOptionCount();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.label("S- yg;uM");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.empty("Expression");
      dynamicSelectModel0.translateValue(" R");
      StandaloneComponent standaloneComponent0 = dynamicSelectModel3.getTopLevelComponent();
      assertNull(standaloneComponent0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(chronoField0);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.enumeration("Could not evaluate expression ");
      dynamicSelectModel2.enumeration("[] from ");
      dynamicSelectModel1.getOptionCount();
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.label("S- yg;uM");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.translator("]AR");
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      dynamicSelectModel0.getOptionCount();
      Object object0 = dynamicSelectModel4.translateValue("S- yg;uM");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(chronoField0);
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.enumeration("Could not evaluate expression ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.enumeration("[] from ");
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel2.translator("S- yg;uM");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel4.translator("]AR");
      dynamicSelectModel5.getOptionCount();
      dynamicSelectModel1.translator("Expression");
      DynamicSelectModel dynamicSelectModel6 = dynamicSelectModel4.collection("Expression");
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.translator("]AR");
      DynamicSelectModel dynamicSelectModel7 = dynamicSelectModel3.translator("S- yg;uM");
      DynamicSelectModel dynamicSelectModel8 = dynamicSelectModel7.translator(" to create a dynamic ISelectModel.");
      dynamicSelectModel8.label("S- yg;uM");
      dynamicSelectModel3.getTopLevelComponent();
      dynamicSelectModel6.getOptionCount();
      // Undeclared exception!
      try { 
        dynamicSelectModel3.translateValue("java.lang.Integer@0000000036");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression  to create a dynamic ISelectModel. to translate value ' java.lang.Integer@0000000036'
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }
}
