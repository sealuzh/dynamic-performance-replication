/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 11:02:00 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.setAll(1625);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(171.5033692562, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      //  // Unstable assertion: assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[6];
      CompressedVector compressedVector0 = new CompressedVector(5, (-5295), doubleArray0, intArray0);
      Vector vector0 = compressedVector0.divide((-5295));
      assertEquals(5, vector0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-3226), vectorFunction1);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      //  // Unstable assertion: assertEquals(0.875, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 853.761101;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2472.04923606)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.25, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(19);
      CompressedVector compressedVector0 = CompressedVector.random(1951, 0.7204593035977047, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.7204593035977047).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1951, vectorFunction0);
      compressedVector0.swapElements(1272, (-667));
      compressedVector0.each(vectorProcedure0);
      assertEquals(1406, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[7];
      CompressedVector compressedVector0 = new CompressedVector(9, (-2130), doubleArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals((-2130), compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(485);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(485, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[6];
      CompressedVector compressedVector0 = new CompressedVector(1, (-599), doubleArray0, intArray0);
      compressedVector0.setAll((-1764.3));
      assertArrayEquals(new double[] {(-1764.3), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1491.28);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(0, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.random(9, 0.0, (Random) mockRandom0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3472, 3);
      double double0 = compressedVector0.getOrElse(3, 3);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 744);
      assertEquals(0.0013440860215053765, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(937);
      linkedList0.offerLast(integer0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(8, compressedVector1.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, (-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -880.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(51, 51);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(0, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(4019, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(30);
      compressedVector0.setAll((-2018.744750342));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1209L));
      CompressedVector compressedVector0 = CompressedVector.random(0, 0.0, (Random) mockRandom0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1650, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1650' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(0, 711.69387275);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '0' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(84);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(84, (-793.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '84' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1597);
      assertEquals(1597, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37);
      Vector vector0 = compressedVector0.blankOfLength(10);
      assertEquals(10, vector0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-11), (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -11
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -343
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(32, 32, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(168, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = new CompressedVector(1625, (-120), doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(1100, 1100, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      CompressedVector compressedVector0 = new CompressedVector(0, (-3654), doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-3654));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[3];
      CompressedVector compressedVector0 = new CompressedVector(4610, 22, (double[]) null, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.setAll(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(4, 4610, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.setAll(87.1796626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = new CompressedVector(1951, 1000, doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.set(1000, 2371.1984131250597);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.set((-4363), (-1068.1746));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-4363' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(1100, 1100, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.set(1, (-1.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random(1685, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-488), (double) 1L, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[7];
      CompressedVector compressedVector0 = new CompressedVector(4500, 4500, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.nonZeroAt(4500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-2146420402), (-2146420402));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2146420402' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("X%Dd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMap((Map<Integer, ? extends Number>) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("'%%~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(1100, 1100, doubleArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero(vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(1951, 1215, doubleArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.each(vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CompressedVector compressedVector0 = new CompressedVector(0, 0, doubleArray0, (int[]) null);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -888
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-2386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2386
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(1497, 0.7204593035977047, (Random) mockRandom0);
      compressedVector0.set(13, 1497);
      assertEquals(0.7201068804275217, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction1);
      assertEquals(0.125, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4610);
      compressedVector0.setAll(4610);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(11, 11);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(7);
      Float float0 = new Float(0.0F);
      hashMap0.put(integer0, float0);
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 11);
      assertEquals(0.09090909090909091, sparseVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) sparseVector0);
      assertEquals(11, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(1, 515);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 515.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1689.0335436842656)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(8, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(sparseVector0, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("5");
      boolean boolean0 = compressedVector0.nonZeroAt((-1424));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625, 1625);
      compressedVector0.setAll(1625);
      boolean boolean0 = compressedVector0.nonZeroAt(31);
      assertEquals(1625, compressedVector0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.setAll(1625);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.setAll(1625);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(1624, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1607);
      compressedVector0.setAll(1607);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 32, doubleArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(32, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2075900859);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      compressedVector0.each(vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[2];
      CompressedVector compressedVector0 = new CompressedVector(2060, 2060, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(2060);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1625);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1624);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1624, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      compressedVector0.swapElements(3344, 8);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      compressedVector0.swapElements(8, 10);
      assertEquals(0.125, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.setAll(1625);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.setAll(1625);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-534), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1600);
      compressedVector0.setAll(1600);
      compressedVector0.swapElements(238, 135);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625);
      compressedVector0.swapElements(1625, 1599);
      assertEquals(1625, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(0, 0);
      compressedVector0.setAll(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1625, 1625);
      compressedVector0.setAll(1625);
      compressedVector0.set(31, 0.0);
      assertEquals(1624, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(61);
      CompressedVector compressedVector0 = CompressedVector.random(1951, 0.7204593035977047, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.7204593035977047).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1951, vectorFunction0);
      compressedVector0.swapElements(1272, (-667));
      compressedVector0.set(1272, 0.7204593035977047);
      assertEquals(1407, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-2574));
      Byte byte0 = new Byte((byte)48);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(51);
      compressedVector0.setAll(51);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(51, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(16, (double) 16, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-2107), (double) (-2107), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(61);
      CompressedVector compressedVector0 = CompressedVector.random(1951, 0.7204593035977047, (Random) mockRandom0);
      // Undeclared exception!
      compressedVector0.sliceLeft(1951);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2371.1984131250597).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      compressedVector0.swapElements((-1048), 8);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(1497, 0.7204593035977047, (Random) mockRandom0);
      compressedVector0.swapElements((-5353), (-5353));
      assertEquals(0.7201068804275217, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }
}
