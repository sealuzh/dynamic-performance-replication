/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:19:41 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(35, 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.encodeUtf8("");
      byteString0.toString();
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.EMPTY.write(buffer0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("`QZ4YYV w6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: `
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteString.decodeHex("");
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 110, (int) (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=110 byteCount=33
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset.defaultCharset();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)29);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)108;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(buffer_UnsafeCursor0.buffer);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteString0.sha1();
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString0.toString();
      assertEquals("[text=)]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("iz < 4: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("J2I! 0{;Fy5>|xi2(5", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = new ByteString((byte[]) null);
      ByteString.decodeBase64("data");
      // Undeclared exception!
      try { 
        byteString1.lastIndexOf(byteString0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)98;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(88, byteArray0, (int) (byte)98, 2864);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      ByteString byteString0 = ByteString.decodeBase64("fx");
      byteString0.EMPTY.hashCode();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.hmacSha1(byteString1);
      byteArray0[3] = (byte) (-107);
      byteString0.indexOf(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString0.base64();
      assertEquals("fw==", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)70;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.indexOf((ByteString) null, (int) (byte)33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-79), (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("out == null");
      boolean boolean0 = byteString0.EMPTY.equals((Object) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = byteString0.hex();
      assertEquals("37777b7b37377b3b773b3b", string0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string1 = byteString0.toString();
      assertEquals("[text=out == null]", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)0;
      int int1 = byteString0.lastIndexOf(byteArray0, (int) (byte)114);
      assertEquals((-1), int1);
      
      boolean boolean1 = byteString0.rangeEquals(3230, byteArray0, (-1), (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[1] = (byte)85;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      byteString0.lastIndexOf(byteArray0);
      byteString0.getByte(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater((byte)85, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      String string0 = "";
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.startsWith(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte)118;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.rangeEquals((int) (byte)0, byteArray0, 3138, 2);
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("out == nul");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteString0.toAsciiLowercase();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)78;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.base64();
      byteString0.toAsciiLowercase();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("^}*;wRM99ORtgW}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: ^}*;wRM99ORtgW}
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pipe pipe0 = new Pipe(8201L);
      Sink sink0 = pipe0.sink();
      HashingSink.sha1(sink0);
      Charset charset0 = Charset.defaultCharset();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("uF-jd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setExecutable(false);
      ByteString byteString0 = ByteString.encodeString("", charset0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@;M(*oJI");
      byte[] byteArray0 = new byte[5];
      ByteString byteString1 = byteString0.EMPTY.sha1();
      byteArray0[0] = (byte) (-96);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)54;
      byteString0.EMPTY.hmacSha256(byteString1);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      
      byteArray0[4] = (byte) (-114);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte) (-96));
      assertEquals((-1), int0);
      assertEquals(8, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0);
      Charset.defaultCharset();
      HashingSink.sha256(buffer0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("out == null");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteString0.toString();
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1((Source) null, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      try { 
        ByteString.read(sequenceInputStream0, (byte)29);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.asByteBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha1(pipe_PipeSource0);
      Source source0 = hashingSource0.delegate();
      HashingSource hashingSource1 = HashingSource.sha256(source0);
      ByteString byteString0 = hashingSource1.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = ByteString.decodeBase64("fx");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      byteString0.indexOf(byteArray0);
      int int1 = ObjectStreamConstants.baseWireHandle;
      String string0 = byteString0.toString();
      assertEquals("[hex=77]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)118;
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8("t|]~.^B2:+BtZ#.a");
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("t|]~.^B2:+BtZ#.a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-55);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      ByteString byteString1 = hashingSource1.hash();
      boolean boolean0 = byteString1.rangeEquals(16, byteArray0, (int) (byte) (-55), (-666));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString.decodeBase64(")`CtZT''KC-");
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=lzzz]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)67;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.base64();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dnp6Qw==");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("dnp6Qw==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: n
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.read(pipedInputStream0, (byte)0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1094
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)1;
      ByteString byteString0 = ByteString.encodeUtf8("}");
      byteString0.base64Url();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        ByteString.encodeString("}", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(0);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource.hmacSha1(((RealBufferedSink) bufferedSink0).buffer, byteString0);
      byteString0.substring(0);
      byteString0.toAsciiUppercase();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString("+D$=KD-i_5", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "k Nlv(/_";
      ByteString.encodeUtf8("k Nlv(/_");
      Charset charset0 = Charset.defaultCharset();
      String string1 = null;
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      MockFile mockFile0 = new MockFile("><C\"\"EE", "endIndex < beginIndex");
      mockFile0.setExecutable(false);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)123;
      Charset.defaultCharset();
      ByteString.decodeBase64("t|]~.^B2:+BtZ#.a");
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("3C)s4v(*m<Kp\"eZK (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: )
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)64;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.base64();
      ByteString byteString1 = byteString0.sha512();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.indexOf(byteArray0, (int) (byte)118);
      byteString1.base64();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)118);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      String string0 = byteString0.toString();
      assertEquals("[text=)]", string0);
      
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1526);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset.defaultCharset();
      byte byte0 = (byte)120;
      byte[] byteArray0 = null;
      int int0 = 118;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 118, 1233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("out == null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byteString0.hex();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.utf8();
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (-3221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)122;
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.compareTo(byteString0);
      ByteString.codePointIndexToCharIndex("", (byte)108);
      ByteString byteString2 = ByteString.of(byteArray0);
      assertEquals(4, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Pipe pipe0 = new Pipe(8201L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.base64Url();
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.equals(object0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.md5();
      MockFile mockFile0 = new MockFile("uF-jd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byteString1.write(mockPrintStream0);
      ByteBuffer byteBuffer0 = charset0.encode("2jmj7l5rSw0yVb_vlWAYkK_YBwk=");
      mockFile0.setExecutable(false);
      ByteString byteString2 = ByteString.of(byteBuffer0);
      String string0 = byteString2.toString();
      assertEquals("[text=2jmj7l5rSw0yVb_vlWAYkK_YBwk=]", string0);
      
      byteString2.write(mockPrintStream0);
      HashingSink hashingSink1 = HashingSink.hmacSha1(sink0, byteString0);
      ByteString byteString3 = hashingSink1.hash();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int0 = byteString1.compareTo(byteString3);
      int int1 = ByteString.codePointIndexToCharIndex("\uFFFD9\uFFFD\uFFFD^kK\r2U\uFFFD\uFFFD\uFFFD`\u0018\uFFFD\uFFFD\uFFFD\u0007\t", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Pipe pipe0 = new Pipe(8201L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      byteString0.base64Url();
      Object object0 = new Object();
      boolean boolean0 = byteString0.EMPTY.equals(object0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.md5();
      MockFile mockFile0 = new MockFile("uF-jd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byteString1.write(mockPrintStream0);
      ByteBuffer byteBuffer0 = charset0.encode("2jmj7l5rSw0yVb_vlWAYkK_YBwk=");
      byteString1.rangeEquals(1583, (byte[]) null, 1528, (-205));
      mockFile0.setExecutable(false);
      ByteString byteString2 = ByteString.of(byteBuffer0);
      String string0 = byteString2.toString();
      assertEquals("[text=2jmj7l5rSw0yVb_vlWAYkK_YBwk=]", string0);
      
      byteString2.write(mockPrintStream0);
      ByteString byteString3 = hashingSink0.hash();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = byteString1.compareTo(byteString3);
      int int1 = ByteString.codePointIndexToCharIndex("\uFFFD9\uFFFD\uFFFD^kK\r2U\uFFFD\uFFFD\uFFFD`\u0018\uFFFD\uFFFD\uFFFD\u0007\t", (-1));
      assertTrue(int1 == int0);
      
      int int2 = byteString1.lastIndexOf(byteString3, 1528);
      assertTrue(byteString0.equals((Object)byteString3));
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      String string0 = byteString0.toString();
      assertEquals("[hex=bbbbbbbb]", string0);
      
      int int3 = byteString2.compareTo(byteString0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = byteString0.equals(object1);
      assertFalse(boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int1 = byteString1.indexOf(byteArray0, 36);
      assertEquals((-1), int1);
      
      int int2 = ObjectStreamConstants.baseWireHandle;
      byteString0.utf8();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString.decodeBase64(" content=");
      int int3 = byteString2.compareTo(byteString1);
      assertEquals(1, int3);
      
      int int4 = ByteString.codePointIndexToCharIndex("Cu!`l/&t&3", 908);
      assertEquals(10, int4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Pipe pipe0 = new Pipe(8201L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      Object object0 = new Object();
      byteString0.EMPTY.equals(object0);
      ByteString byteString1 = byteString0.md5();
      MockFile mockFile0 = new MockFile("uF-jd");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byteString1.write(mockPrintStream0);
      ByteBuffer byteBuffer0 = charset0.encode("\uFFFD9\uFFFD\uFFFD^kK\r2U\uFFFD\uFFFD\uFFFD`\u0018\uFFFD\uFFFD\uFFFD\u0007\t");
      mockFile0.setExecutable(false);
      ByteString byteString2 = ByteString.of(byteBuffer0);
      byteString2.toString();
      byteString2.write(mockPrintStream0);
      HashingSink hashingSink1 = HashingSink.hmacSha1(sink0, byteString0);
      hashingSink1.hash();
      byteString1.hashCode();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\uFFFD9\uFFFD\uFFFD^kK\r2U\uFFFD\uFFFD\uFFFD`\u0018\uFFFD\uFFFD\uFFFD\u0007\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \uFFFD
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[0] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.hex();
      ByteString byteString1 = ByteString.decodeBase64("7a000008");
      int int1 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString2 = byteString0.sha512();
      byteString0.base64();
      ByteString byteString3 = ByteString.decodeBase64("egAACA==");
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString4 = hashingSink0.hash();
      byteString2.equals(byteString4);
      byteString1.indexOf(byteString3, (int) (byte)8);
      byteString0.toString();
      byteString4.hex();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byteString0.startsWith(byteArray0);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      MockFile mockFile0 = new MockFile("7a000008");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byte byte0 = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)30;
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.base64();
      ByteString byteString2 = ByteString.decodeBase64("AN");
      ByteString byteString3 = byteString0.sha512();
      byteString0.indexOf(byteString1, 50);
      byteString3.indexOf(byteArray0, 122);
      String string0 = byteString2.utf8;
      ByteString.decodeBase64(")");
      ByteString byteString4 = new ByteString(byteArray0);
      byteString4.toString();
      byteString2.toString();
      // Undeclared exception!
      try { 
        byteString1.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.base64();
      ByteString byteString1 = ByteString.decodeBase64("bHp6eg==");
      ByteString byteString2 = byteString1.sha512();
      byteString1.indexOf(byteString0, (int) (byte)108);
      byteString1.indexOf(byteArray0, (int) (byte)122);
      String string0 = byteString1.utf8;
      ByteString byteString3 = ByteString.decodeBase64("bHp6eg==");
      byteString1.indexOf(byteString2, 2616);
      byteString3.indexOf(byteArray0, (-1));
      byteString2.hex();
      ByteString byteString4 = ByteString.decodeBase64("7c09c2ed1ac06bca5cc313fd47558c9ac7068de811575ae7d6fadb35743a1a6cc15d0cea409f236c647c69265af6a7a6e79d0b846cd5866c743f3eeaed250873");
      ByteString byteString5 = new ByteString(byteArray0);
      byteString5.equals(byteString2);
      byteString2.toString();
      byteString4.toString();
      byteString5.toAsciiLowercase();
      byteString2.endsWith(byteString3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1898
         //
         verifyException("okio.ByteString", e);
      }
  }
}
