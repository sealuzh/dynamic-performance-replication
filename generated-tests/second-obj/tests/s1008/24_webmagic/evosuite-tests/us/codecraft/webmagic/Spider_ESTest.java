/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:29:59 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.start();
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider0.startRequest(linkedList0);
      spider2.addUrl(stringArray0);
      // Undeclared exception!
      try { 
        spider2.checkIfRunning();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k9OfW,@40q|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      boolean boolean0 = spider2.isSpawnUrl();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" stop fail!");
      ForkJoinTask.getPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider3 = spider0.clearPipeline();
      spider3.getThreadAlive();
      Locale locale0 = new Locale("gpEkuExH?27z0\"vb", "us.codecraft.webmagic.selector.Html");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "us.codecraft.webmagic.selector.Html";
      Request[] requestArray0 = new Request[0];
      Spider spider4 = spider2.addRequest(requestArray0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider4.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yC&5O,=0~E^ap");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-1851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.setUUID("page status code error, page {} , code: {}");
      assertTrue(spider1.isExitWhenComplete());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider1.setPipelines(linkedList0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Page page0 = Page.fail();
      spider3.extractAndAddRequests(page0, false);
      spider2.getUUID();
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("T]Y-");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Page page0 = Page.fail();
      Page page1 = new Page();
      Spider spider2 = spider1.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      String string0 = "J6wPHeNa7>*~%9/$H$";
      FilePipeline filePipeline0 = new FilePipeline("J6wPHeNa7>*~%9/$H$");
      SpiderMonitor.instance();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      spider2.setExitWhenComplete(false);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = " stop fail!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.setSpawnUrl(true);
      ForkJoinPool.commonPool();
      Spider spider2 = spider1.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.stop();
      // Undeclared exception!
      try { 
        spider2.sleep((-1885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.clearPipeline();
      Spider spider1 = spider0.setUUID("page status code error, page {} , code: {}");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider0.setPipelines(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider1.setScheduler(queueScheduler0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider1.startRequest(linkedList1);
      spider3.setSpiderListeners((List<SpiderListener>) null);
      Request request0 = new Request("page status code error, page {} , code: {}");
      spider2.getCollectorPipeline();
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("B");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("");
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2753);
      spider1.thread((ExecutorService) forkJoinPool0, 40);
      String string0 = spider0.getUUID();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertNull(string0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("//title");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Request[] requestArray0 = new Request[5];
      Request request0 = new Request("//title");
      Request request1 = request0.addCookie("t_nv{JQKXA", "//title");
      Request request2 = request1.addHeader("//title", "//title");
      requestArray0[0] = request2;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request0.setExtras(hashMap0);
      Request request4 = request3.setMethod("");
      requestArray0[1] = request4;
      Request request5 = new Request("t_nv{JQKXA");
      requestArray0[2] = request5;
      Request request6 = request5.setMethod("");
      requestArray0[3] = request6;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[4] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spider.Status.fromValue((-519));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "page status code error, page {} , code: {}";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      spider0.setScheduler(fileCacheQueueScheduler0);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".1#w~+,l");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      spider0.setScheduler(fileCacheQueueScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider1 = spider0.clearPipeline();
      Locale locale0 = new Locale("", "page status code error, page {} , code: {}");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) forkJoinPool0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.stop();
      spider0.clearPipeline();
      Locale locale0 = new Locale("gpEkuExH?27z0\"vb", "us.codecraft.webmagic.selector.Html");
      locale0.getUnicodeLocaleKeys();
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "(?is)<!DOCTYPE.*?>";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/24_webmagic");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[1] = "page status code error, page {} , code: {}";
      spider0.getScheduler();
      stringArray0[1] = "page status code error, page {} , code: {}";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2753);
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 2753);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Json json0 = new Json((List<String>) null);
      Json json1 = new Json((List<String>) null);
      Class<SpiderListener> class0 = SpiderListener.class;
      json1.toList(class0);
      spider3.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider4 = spider3.scheduler(priorityScheduler0);
      spider4.getUUID();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      ForkJoinTask.getPool();
      Spider spider2 = spider1.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.stop();
      Spider spider3 = spider1.startRequest(linkedList0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3);
      spider1.thread(3);
      spider3.getThreadAlive();
      Locale locale0 = new Locale("gpEkuExH?27z0\"vb", "us.codecraftHwebmagic.selector.Html");
      Set<String> set0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(".");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("*F:qDtuqh6l2", "");
      spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider2 = spider1.clearPipeline();
      Locale locale0 = new Locale("", "m%PvU?~>");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" stop fail!");
      ForkJoinTask.getPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      int int0 = 5;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider3 = spider0.clearPipeline();
      spider3.getThreadAlive();
      Locale locale0 = new Locale("gpEkuExH?27z0\"vb", "us.codecraft.webmagic.selector.Html");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      String[] stringArray0 = new String[4];
      spider2.initComponent();
      stringArray0[0] = "us.codecraft.webmagic.selector.Html";
      stringArray0[1] = "gpEkuExH?27z0\"vb";
      stringArray0[2] = "$lZE5i%w";
      stringArray0[3] = " stop fail!";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("(?is)<!DOCTYPE.*?>", "1");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<!DOCTYPE.*?>";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray1 = new String[0];
      spider0.addUrl(stringArray1);
      spider1.getStatus();
      ForkJoinPool forkJoinPool1 = null;
      try {
        forkJoinPool1 = new ForkJoinPool((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      ForkJoinTask.getPool();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".1#w~+,l");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "}KKu##\"Lu?IG78");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-63);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Page page0 = Page.fail();
      spider2.extractAndAddRequests(page0, false);
      spider2.getUUID();
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      fileCacheQueueScheduler0.poll(spider1);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" stop fail!");
      ForkJoinTask.getPool();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "");
      spider1.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider2 = spider0.clearPipeline();
      spider2.getThreadAlive();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Page page0 = Page.fail();
      Page page1 = new Page();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider1.scheduler(priorityScheduler0);
      spider3.extractAndAddRequests(page0, false);
      spider0.getUUID();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("*EX|1IDAXTkL-+`9&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "1");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      spider0.clearPipeline();
      Locale locale0 = new Locale("page status code error, page {} , code: {}", "");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List<String> list0 = orSelector0.selectList("us.codecraft.webmagic.Spider");
      Spider spider3 = spider2.startUrls(list0);
      spider3.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider1.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f}.<%UBg%HH`(i");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("f}.<%UBg%HH`(i");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f}.<%UBg%HH`(i";
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Page.fail();
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      spider0.getSite();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("f}.<%UBg%HH`(i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/24_webmagic");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(?is)<!DOCTYPE.*?>");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("page status code error, page {} , code: {}");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("(?is)<!DOCTYPE.*?>", "1");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?is)<!DOCTYPE.*?>";
      stringArray0[1] = "page status code error, page {} , code: {}";
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider2 = spider0.clearPipeline();
      Locale locale0 = new Locale("$>lZE5i%w", "(?is)<!DOCTYPE.*?>");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider2.getAll((Collection<String>) set0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.startRequest(linkedList0);
      spider1.get(stringArray0[2]);
      spider0.isSpawnUrl();
      spider2.setEmptySleepTime(765);
  }
}
