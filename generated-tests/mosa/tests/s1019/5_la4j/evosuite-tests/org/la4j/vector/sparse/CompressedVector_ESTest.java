/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:36:17 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2099);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2099, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1121);
      assertEquals(1121, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(663);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 144);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(8, (double) 8, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      compressedVector0.setAll(7);
      compressedVector0.swapElements(7, (-982));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("org.la4j.matrix.dense.Basic2DMatrix");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      compressedVector0.setAll(4);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2655);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(37);
      assertEquals(37, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-54));
      // Undeclared exception!
      try { 
        CompressedVector.random((-54), (double) (-54), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1578);
      compressedVector0.setAll(1578);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1544, 1578);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.sliceLeft(1);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.get(1);
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1, (-1417));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, 920);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 920.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2678);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2678, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.getOrElse(7, 2678);
      assertEquals(2678.0, double0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2678, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(27, 27);
      assertEquals(27, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(27);
      assertEquals(27, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(27, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(27, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(1, (-1417));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(10);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(10);
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(10, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(10, compressedVector0.cardinality());
      assertEquals(10, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(7);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(7);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-315), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(14);
      assertEquals(14, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double((-1.2));
      assertEquals((-1.2), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put(integer0, double0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(double1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2554);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(3.9154267815191856E-4, compressedVector0.density(), 0.01);
      assertEquals(2554, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(7);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(7);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      String string0 = compressedVector1.toCSV();
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals("0.000, 1.000", string0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertNotNull(string0);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector1.swapElements((-1382), 1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements((-1417), 1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-1381), 1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-4874), vectorFunction0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-4874), (-4874));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-4874' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(55, 55);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(55, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blank();
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(55, compressedVector0.length());
      assertEquals(55, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.toSparseVector();
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(55, compressedVector0.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(55, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertSame(compressedVector2, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.valueOf((-924));
      assertEquals((-924), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = Short.valueOf((short)2923);
      assertEquals((short)2923, (short)short0);
      assertNotNull(short0);
      
      Short short1 = hashMap0.put(integer0, short0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(short1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1165.213;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1165.213}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new double[] {1165.213}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 859);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(859, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.set(5, 5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(859, compressedVector0.length());
      assertEquals(0.0011641443538998836, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 3;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-1381), 3);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-4874), vectorFunction0);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-4874), (-4874));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-4874' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector1.toDiagonalMatrix();
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.04, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector2.density(), 0.01);
      assertEquals(5, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      compressedVector2.swapElements(1, 1);
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector2.density(), 0.01);
      assertEquals(5, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      compressedVector0.set(0, 1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      
      compressedVector2.swapElements((-1673), 16);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, compressedVector2.density(), 0.01);
      assertEquals(5, compressedVector2.length());
      assertEquals(1, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(2209, (-3909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -3909.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      compressedVector1.swapElements(1, 1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(1, vectorFunction0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(7);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(7);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-1990));
      assertFalse(boolean0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.setAll((-3722.123105974989));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1597)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(1, (-55));
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1578);
      assertEquals(1578, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1578);
      assertEquals(1578, compressedVector0.cardinality());
      assertEquals(1578, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1916), 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(7);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      boolean boolean0 = compressedVector1.nonZeroAt((-1952));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(7, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("gg]v4wzM?qte|MGLD ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(7, 7);
      assertEquals(7, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(7);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (double)7, (double)7, (double)7, (-1294.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.columns());
      assertEquals((-1294.0), cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.subtract((Vector) compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.swapElements(7, 7);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      org.evosuite.runtime.Random.setNextRandom(7);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(7, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 7);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(7, compressedVector2.length());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(1, 16);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.25, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(6, 1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1578);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1578, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1578);
      assertEquals(1578, compressedVector0.cardinality());
      assertEquals(1578, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(8, 1575);
      assertEquals(1578, compressedVector0.cardinality());
      assertEquals(1578, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1578);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1578, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(40);
      assertEquals(40, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(40);
      assertEquals(40, compressedVector0.cardinality());
      assertEquals(40, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, (-1930));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1176;
      CompressedVector compressedVector0 = new CompressedVector(1176);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1176, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double double0 = Double.NEGATIVE_INFINITY;
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1176, compressedVector0.cardinality());
      assertEquals(1176, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1176, compressedVector0.cardinality());
      assertEquals(1176, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1176, compressedVector0.cardinality());
      assertEquals(1176, compressedVector0.length());
      assertNotNull(byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1176, compressedVector0.cardinality());
      assertEquals(1176, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1176, compressedVector1.cardinality());
      assertEquals(1176, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector.zero(1176);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
