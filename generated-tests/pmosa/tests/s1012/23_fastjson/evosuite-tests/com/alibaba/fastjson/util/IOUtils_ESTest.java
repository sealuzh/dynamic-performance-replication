/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:53:54 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("*SWY[wc*R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.stringSize(0);
      IOUtils iOUtils0 = new IOUtils();
      StringWriter stringWriter0 = new StringWriter(1183);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      stringWriter0.flush();
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      stringWriter0.flush();
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) " 1O_kZs";
      stringWriter0.flush();
      objectArray0[4] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " 1O_kZs", objectArray0);
      IOUtils.close(printWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      IOUtils.isIdent('C');
      IOUtils.close(printWriter0);
      IOUtils.isValidJsonpQueryParam(" 1O_kZs");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 0, 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wy{9C^[TCmOn.<H");
      IOUtils.loadPropertiesFromFile();
      IOUtils.close((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.getStringProperty("utf8 decode error, ");
      int int0 = IOUtils.stringSize((-3384));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64(iOUtils0.CA, 0, 0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 1187, 56);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", (-1276), (-1276));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1071), (-1071), iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1072
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        IOUtils.getChars(16, 1922, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-181), (-181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -363
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, (-1649), (-3055));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4705
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.close((Closeable) null);
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'K';
      charArray0[2] = 'S';
      charArray0[3] = '{';
      charArray0[4] = 'l';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 50, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 6, 1192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1197
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = IOUtils.stringSize((-2392L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      IOUtils.decodeBase64("");
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'T';
      charArray0[2] = '<';
      charArray0[3] = 'M';
      charArray0[4] = '~';
      charArray0[5] = '(';
      charArray0[6] = 'v';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray1, (byte)0, 69, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-8");
      Locale locale0 = new Locale("}j]p' }M3$VFR^p66");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "utf8 decode error, ";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "}j]p' }M3$VFR^p66";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "UTF-8";
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "utf8 decode error, ", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      IOUtils.close(mockPrintStream1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)36;
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'Z';
      IOUtils.decodeUTF8(byteArray0, (-1075), 0, charArray0);
      IOUtils.stringSize(576);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-81), 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "fastjson.properties", 18, 18);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "fastjson.compatibleWithFieldName");
      charArrayWriter2.reset();
      charArrayWriter2.append('X');
      charArrayWriter2.write(18);
      IOUtils.close(charArrayWriter2);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      IOUtils.firstIdentifier('?');
      int int0 = 24;
      IOUtils.stringSize(24);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 2, 2, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      boolean boolean0 = IOUtils.firstIdentifier('l');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(1671L);
      IOUtils.stringSize(0L);
      char char0 = '7';
      IOUtils.firstIdentifier('7');
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        uTF8Decoder0.replaceWith("fastjson.compatibleWithFieldName");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Replacement too long
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '$';
      charArray0[2] = 'V';
      charArray0[3] = 'Y';
      charArray0[4] = 'c';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-697L), (-2), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 8, (-2943), iOUtils0.CA);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2944
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(255);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = ',';
      IOUtils.getChars(0L, 3, charArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (-1418), 3968, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1418
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.firstIdentifier('3');
      IOUtils.stringSize((-4017L));
      IOUtils.stringSize(1);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-4017L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((long) 5, 5, iOUtils0.replaceChars);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 5, 5);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-82), (byte) (-37)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(255);
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = '#';
      charArray0[3] = ',';
      IOUtils.getChars(0L, 3, charArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[8] = (byte)127;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)119;
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)18, (int) (byte)0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.firstIdentifier('>');
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.ASCII_CHARS);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F", string0);
      
      int int0 = IOUtils.stringSize((-1975L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("dQGf%^~820^l6X");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, byteBuffer1, charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CoderResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("7");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      IOUtils.decodeBase64(">Wd]r %rlX\"v[(Fj");
      IOUtils.stringSize((-2392L));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 1, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("aK");
      assertArrayEquals(new byte[] {(byte)104}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("UTF-8");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '2';
      charArray0[2] = 'O';
      charArray0[3] = '\'';
      charArray0[4] = 'F';
      charArray0[5] = 'Y';
      charArray0[6] = '?';
      charArray0[7] = 'Y';
      charArray0[8] = 'r';
      IOUtils.getChars((byte)2, 2, charArray0);
      assertArrayEquals(new char[] {'`', '2', 'O', '\'', 'F', 'Y', '?', 'Y', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.getChars((byte)58, 48, iOUtils0.ASCII_CHARS);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isIdent('L');
      assertTrue(boolean0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.replaceChars, 1, 1, iOUtils0.specicalFlags_doubleQuotes);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils.getStringProperty("Pj~jv`7V");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPORT;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("Pj~jv`7V");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertEquals(0, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64("I-T=|A#RY), jj7H", 1, 1);
      IOUtils.decodeBase64("encodeUTF8 error", 1, 1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = uTF8Decoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("I-T=|A#RY), jj7H");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertEquals("\uFFFD", uTF8Decoder0.replacement());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '4';
      charArray0[2] = '.';
      charArray0[3] = '|';
      charArray0[4] = '$';
      IOUtils.decodeUTF8(byteArray0, (-1114), (-1114), charArray0);
      IOUtils.firstIdentifier('4');
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 1, 4, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      iOUtils0.UTF8.encode("fastjson.compatibleWithJavaBean");
      IOUtils.stringSize(0L);
      IOUtils.firstIdentifier('7');
      UTF8Decoder uTF8Decoder1 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder1.onMalformedInput(codingErrorAction0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-102), 1, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      IOUtils.close(pipedInputStream0);
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)109;
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(21, 21, iOUtils0.ASCII_CHARS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.decodeBase64("I-T=|A#RY), jj7H", 1, 1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '>';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'W';
      charArray0[5] = 'G';
      // Undeclared exception!
      try { 
        IOUtils.getChars(3827, 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOUtils.close(pipedInputStream0);
      byte[] byteArray0 = IOUtils.decodeBase64("a}s:X$*b=5!36Pwb");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'B';
      charArray0[2] = 'g';
      charArray0[3] = '';
      charArray0[4] = 'L';
      charArray0[5] = '&';
      charArray0[6] = 'g';
      charArray0[7] = '[';
      int int0 = IOUtils.decodeUTF8(byteArray0, 2, 15, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', 'B', 'g', '', 'L', '&', 'g', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-29);
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, (byte)4, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-71);
      char[] charArray0 = new char[4];
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.decodeBase64("I-T=|A#RY), jj7H", 5, 5);
      String string0 = IOUtils.getStringProperty("W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IOUtils.decodeBase64("I-T=|A#RY), jj7H", 7, 7);
      IOUtils.stringSize((-1686));
      Charset charset0 = IOUtils.UTF8;
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      // Undeclared exception!
      try { 
        IOUtils.decode(charsetDecoder0, (ByteBuffer) null, (CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("I-T=H|A#RY), jj7H", 7, 7);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-2)}, byteArray0);
      
      int int0 = IOUtils.stringSize(7);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("I-T=|A#RY), jj7H", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'L';
      charArray0[2] = 'V';
      charArray0[3] = '6';
      charArray0[4] = ' ';
      charArray0[5] = 'f';
      charArray0[6] = '\"';
      charArray0[7] = ']';
      IOUtils.getChars(100000L, 7, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (-2872), (-2872), (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.replaceChars, 5, 5);
      byte[] byteArray1 = IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-57);
      char[] charArray0 = new char[4];
      IOUtils.decodeUTF8(byteArray0, 3, 3, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-29);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '|';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = '.';
      IOUtils.decodeUTF8(byteArray0, 3, (byte)16, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.DIGITS, 2126834766, 94, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2126834766
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IOUtils.isIdent('\u00B9');
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      char[] charArray0 = new char[9];
      charArray0[0] = '\u00B9';
      charArray0[1] = '4';
      charArray0[2] = '\u00B9';
      charArray0[3] = '\u00B9';
      charArray0[4] = '\u00B9';
      charArray0[5] = '\u00B9';
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)5, 154, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u00B9');
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte) (-44);
      char[] charArray0 = new char[9];
      charArray0[0] = '\u00B9';
      charArray0[1] = '4';
      charArray0[2] = '\u00B9';
      charArray0[3] = '\u00B9';
      charArray0[4] = '\u00B9';
      charArray0[5] = '\u00B9';
      charArray0[6] = '\u00B9';
      charArray0[7] = '\u00B9';
      charArray0[8] = '\u00B9';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)3, 2, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = IOUtils.decodeBase64(charArray0, (-1), (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', '4', '\u00B9', '\u00B9', '\u00B9', '\u00B9', '\u00B9', '\u00B9', '\u00B9'}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      PipedReader pipedReader0 = new PipedReader((byte)5);
      boolean boolean1 = IOUtils.firstIdentifier('\u00B9');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)16;
      IOUtils.loadPropertiesFromFile();
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)16;
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64(",GZhgikz-$V6* =");
      assertArrayEquals(new byte[] {(byte)25, (byte) (-104), (byte)96, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.firstIdentifier('\u0108');
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0108';
      charArray0[1] = '\u0108';
      charArray0[2] = '~';
      charArray0[3] = '\u0108';
      charArray0[4] = 'm';
      charArray0[5] = '\u0108';
      charArray0[6] = '\u0108';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-20);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 2006, 2006, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2006
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, (int) (byte)16, (int) (byte)77);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 10, 10);
      IOUtils.decodeBase64(iOUtils0.replaceChars, 6, 77);
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 6, 77, iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)103;
      IOUtils.loadPropertiesFromFile();
      byteArray0[3] = (byte)103;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-29);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.loadPropertiesFromFile();
      IOUtils.decodeUTF8(byteArray0, 3, 3, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2225, (int) (byte)105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2225
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)100;
      IOUtils.loadPropertiesFromFile();
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-11);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)100;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
      
      boolean boolean0 = IOUtils.isIdent('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u010F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)100;
      IOUtils.loadPropertiesFromFile();
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-11);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)100;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
      
      boolean boolean0 = IOUtils.isIdent('|');
      boolean boolean1 = IOUtils.firstIdentifier('|');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      char char0 = '|';
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)100;
      IOUtils.loadPropertiesFromFile();
      byteArray0[2] = (byte) (-107);
      IOUtils.loadPropertiesFromFile();
      byteArray0[4] = (byte) (-40);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)100;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)100;
      IOUtils.loadPropertiesFromFile();
      byteArray0[1] = (byte) (-101);
      byteArray0[4] = (byte) (-11);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.properties");
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)77;
      IOUtils.loadPropertiesFromFile();
      byteArray0[2] = (byte) (-107);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 3, (byte)16, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
