/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:13 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaCharStream.hexval('9');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k!JYXGaa@;b/M");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, (-2305), 87, (byte)1);
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 1, 4);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4093);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2141, (-1612));
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 3, 3);
      javaCharStream0.ReInit((Reader) null, 3, 0, 3);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char char0 = 'P';
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char char0 = ']';
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(70);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2594, 2);
      javaCharStream0.maxNextCharInd = 2594;
      javaCharStream0.adjustBeginLineColumn(70, 2);
      assertEquals(2, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 78, (byte)88);
      javaCharStream0.BeginToken();
      javaCharStream0.backup((byte)88);
      javaCharStream0.adjustBeginLineColumn((byte)0, (-11));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("FKD>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.readChar();
      javaCharStream0.getColumn();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('t');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 44, 44, 44);
      javaCharStream0.BeginToken();
      char char0 = File.pathSeparatorChar;
      javaCharStream0.ExpandBuff(true);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 72, 714);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UX<v)m");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      javaCharStream0.ReInit((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaCharStream.hexval('9');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)1, (-626), 3096);
      PipedReader pipedReader0 = new PipedReader(9);
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      javaCharStream0.ReInit((Reader) bufferedReader0, 1, 1);
      javaCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4096, 4096);
      javaCharStream0.backup((-34));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2594, 2);
      javaCharStream0.maxNextCharInd = 2594;
      javaCharStream0.prevCharIsLF = false;
      javaCharStream0.getBeginColumn();
      javaCharStream0.ReadByte();
      javaCharStream0.GetImage();
      javaCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      javaCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 44, 44, 44);
      javaCharStream0.BeginToken();
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 44, 44, 44);
      javaCharStream0.BeginToken();
      javaCharStream0.GetImage();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)127, 78, (byte)86);
      javaCharStream0.BeginToken();
      javaCharStream0.backup(192);
      javaCharStream0.adjustBeginLineColumn((byte)127, 78);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.column = 94;
      javaCharStream0.GetImage();
      javaCharStream0.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileReader0, 83, (byte)26, (byte)26);
      javaCharStream0.GetSuffix(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      JavaCharStream.hexval('D');
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = ObjectStreamConstants.baseWireHandle;
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char char0 = '[';
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaCharStream.hexval('d');
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 4063, 1294);
      javaCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char char0 = 'Y';
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaCharStream.hexval('B');
      try { 
        JavaCharStream.hexval('w');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('0');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 4270, (-2392), 4270);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 71, 4270, 1537);
      byteArrayInputStream0.markSupported();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaCharStream.hexval('a');
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('B');
      char char0 = 'N';
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaCharStream.hexval('1');
      JavaCharStream.hexval('3');
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('C');
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 12);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, (-1), 12);
      PipedInputStream pipedInputStream1 = new PipedInputStream(100);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char char0 = 'J';
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('8');
      try { 
        JavaCharStream.hexval('}');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"hb@O9");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 4544, (byte)127, 3254);
      javaCharStream0.GetSuffix((byte)127);
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('4');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-2869), (-2869));
      javaCharStream0.Done();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) pipedInputStream1, (-2869), 89, (-1));
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('B');
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JavaCharStream.hexval('E');
      PipedReader pipedReader0 = new PipedReader('B');
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream.hexval('2');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JavaCharStream.hexval('c');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}Xv3W5EE|AC/^r,");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('\'');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JavaCharStream.hexval('b');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)127;
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)127);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = JavaCharStream.staticFlag;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)92, 0, (-3007));
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JavaCharStream.hexval('e');
      JavaCharStream.hexval('3');
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)98;
      byteArray0[2] = (byte)98;
      JavaCharStream.hexval('F');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('h');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      JavaCharStream.hexval('f');
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JavaCharStream.hexval('a');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int1 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream.hexval('A');
      JavaCharStream.hexval('5');
      // Undeclared exception!
      try { 
        pipedInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int1 = ObjectStreamConstants.baseWireHandle;
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JavaCharStream.hexval('a');
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, 10, (-697));
      javaCharStream0.bufsize = 10;
      javaCharStream0.AdjustBuffSize();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, 8257536, (byte)12);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/Invalid escape character at line ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      javaCharStream0.readChar();
      javaCharStream0.inBuf = 72;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      int int3 = ObjectStreamConstants.baseWireHandle;
      javaCharStream0.readChar();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JavaCharStream.hexval('7');
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 80, (-691));
      javaCharStream0.bufsize = (int) (byte)0;
      int int0 = ObjectStreamConstants.baseWireHandle;
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.readChar();
      javaCharStream0.GetSuffix(84);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 565);
      javaCharStream0.ReInit((Reader) pushbackReader0, (int) (byte) (-29), 7);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JavaCharStream.hexval('a');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int1 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte)4;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.reset();
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 989, 989, 989);
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      javaCharStream0.adjustBeginLineColumn(8257536, 8257536);
      JavaCharStream.hexval('a');
      byteArrayInputStream0.read(byteArray0);
      StringReader stringReader0 = new StringReader("-Ah-Y8S9");
      javaCharStream0.available = 0;
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)88;
      byteArray0[4] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)88, (byte)88);
      char char0 = File.separatorChar;
      javaCharStream0.backup((byte)88);
      javaCharStream0.getBeginLine();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char char1 = File.pathSeparatorChar;
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 78, (byte)88);
      javaCharStream0.BeginToken();
      javaCharStream0.backup((byte)88);
      javaCharStream0.getBeginLine();
      javaCharStream0.getColumn();
      JavaCharStream.hexval('6');
      javaCharStream0.readChar();
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader((-2904));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 8257536, 5, 8257536);
      javaCharStream0.BeginToken();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int1 = ObjectStreamConstants.baseWireHandle;
      javaCharStream0.UpdateLineColumn('!');
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pipedInputStream0.markSupported();
      int int0 = ObjectStreamConstants.baseWireHandle;
      JavaCharStream.hexval('6');
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JavaCharStream.hexval('e');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, 14, (byte)12);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char char0 = File.pathSeparatorChar;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int2 = ObjectStreamConstants.baseWireHandle;
      byteArrayInputStream0.mark(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      javaCharStream0.getBeginColumn();
      javaCharStream0.BeginToken();
      int int3 = ObjectStreamConstants.PROTOCOL_VERSION_1;
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1, 4089, 4089);
      javaCharStream0.BeginToken();
      javaCharStream0.backup(1);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, 4153, 0, (-319));
      byteArrayInputStream1.read(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      byteArrayInputStream0.mark(4095);
      javaCharStream0.BeginToken();
      javaCharStream0.getBeginColumn();
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int1 = 6;
      int int2 = 63;
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 6, 63, (-2381));
      javaCharStream0.BeginToken();
      javaCharStream0.backup(2);
      char char0 = File.separatorChar;
      PipedReader pipedReader0 = new PipedReader();
      javaCharStream0.readChar();
      javaCharStream0.readChar();
      javaCharStream0.adjustBeginLineColumn(347, 72);
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-1), (byte)10, (-1668));
      javaCharStream0.readChar();
      javaCharStream0.adjustBeginLineColumn((byte)92, 1);
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = JavaCharStream.staticFlag;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (byte)92, 0, (-3007));
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, 4096);
      javaCharStream0.FillBuff();
      javaCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      char char0 = File.separatorChar;
      int int1 = (-1266);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, 395, (-1266));
      javaCharStream0.nextCharInd = 1;
      javaCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteArrayInputStream0.reset();
      char char0 = File.separatorChar;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, (-4206), 6144);
      javaCharStream0.BeginToken();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = JavaCharStream.staticFlag;
      javaCharStream0.backup(253);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      javaCharStream1.ReInit((InputStream) byteArrayInputStream0, 253, 253);
      javaCharStream0.backup(987);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JavaCharStream.hexval('a');
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      int int1 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)90;
      byte[] byteArray2 = new byte[18];
      byteArray2[0] = (byte)90;
      byteArray2[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      JavaCharStream.hexval('a');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)92, (byte)92, (-1897));
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
