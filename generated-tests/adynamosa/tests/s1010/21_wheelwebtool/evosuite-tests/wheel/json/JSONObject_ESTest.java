/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 13:15:52 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      String string0 = JSONObject.valueToString(hashMap0, (-2918), 64);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("*Af?><b\"^-rySsrLO{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of *Af?><b\"^-rySsrLO{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Float float0 = new Float(3332.974F);
      hashMap0.put((Long) null, float0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) "wheel.json.JSONObject");
      Object object0 = jSONObject1.remove("wheel.json.JSONObject");
      assertEquals("wheel.json.JSONObject", object0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("java.lang.Short@0000000004.", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      jSONObject0.put("wheel.json.JSONException", (Map) hashMap0);
      String string0 = jSONObject0.optString("wheel.json.JSONException");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("SIQU2b>gt?bH7ZS\"b*", (-165));
      long long0 = jSONObject0.optLong("SIQU2b>gt?bH7ZS\"b*");
      assertEquals(4, jSONObject0.length());
      assertEquals((-165L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)125);
      jSONObject0.append("Null pointer", short0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Null pointer");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("LglttoSYring", 17);
      int int0 = jSONObject0.optInt("LglttoSYring");
      assertEquals(4, jSONObject0.length());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(13);
      jSONObject0.accumulate("D0niN3B]_SaC%yuo=CK", integer0);
      double double0 = jSONObject0.optDouble("D0niN3B]_SaC%yuo=CK");
      assertEquals(13.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-582.4581F));
      JSONObject jSONObject1 = jSONObject0.accumulate("oyu!T0a", float0);
      double double0 = jSONObject1.optDouble("oyu!T0a");
      assertEquals((-582.4581298828125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0u(d.TA/][3](;5", true);
      boolean boolean0 = jSONObject1.optBoolean("0u(d.TA/][3](;5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.42931450724169284);
      Integer integer0 = Integer.valueOf(55);
      JSONObject jSONObject1 = jSONObject0.put(" o* ", (Object) integer0);
      jSONObject1.accumulate(" o* ", double0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt(" o* ");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("4d+^MHhLGmc2'$", (Object) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short)3953);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.putOpt("", short0);
      boolean boolean0 = jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("0l.\u0003itgjtJ *|", false);
      String string0 = jSONObject1.getString("0l.\u0003itgjtJ *|");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((double) 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("75#!T>E", float0);
      jSONObject0.getLong("75#!T>E");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (-3915.321320238));
      long long0 = jSONObject1.getLong("wheel.json.JSONException");
      assertEquals((-3915L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1488.13867);
      jSONObject0.put("getformat", (-2114.6966394));
      JSONObject jSONObject1 = jSONObject0.accumulate("getformat", double0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("getformat");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("issubstring", 0L);
      int int0 = jSONObject0.getInt("issubstring");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1837.0));
      JSONObject jSONObject1 = jSONObject0.put("\"java.util.function.UnaryOperator$$Lambda$54/940841654@0000000002\"", (Object) double0);
      int int0 = jSONObject1.getInt("\"java.util.function.UnaryOperator$$Lambda$54/940841654@0000000002\"");
      assertEquals((-1837), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Long@0000000002", (int) (short)16320);
      double double0 = jSONObject0.getDouble("java.lang.Long@0000000002");
      assertEquals(16320.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Long@0000000002\":\"java.lang.Object@0000000003\"}");
      jSONObject0.accumulate("{\"java.lang.Long@0000000002\":\"java.lang.Object@0000000003\"}", long0);
      double double0 = jSONObject0.getDouble("{\"java.lang.Long@0000000002\":\"java.lang.Object@0000000003\"}");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("eli6\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-40792343));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("", false);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-462L));
      hashMap0.put("wheel.json.JSONTokener", double0);
      JSONObject jSONObject1 = jSONObject0.put("-462", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("spl", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Collection<Object> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", collection0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (long) 92);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.Long@0000000002\":\"java.lang.Object@0000000003\"}");
      JSONObject jSONObject1 = jSONObject0.put("-rPATB", 0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.put("", 116);
      long long0 = jSONObject0.optLong("");
      assertEquals(3, jSONObject0.length());
      assertEquals(116L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("\"\"", stringArray0);
      try { 
        jSONObject0.put((String) null, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "\"java.lang.String@0000000002\"");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString("", "Oq");
      assertEquals(1, jSONObject0.length());
      assertEquals("Oq", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("] is not a JSONArray.", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 343L);
      assertEquals(343L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("", (-1434L));
      assertEquals((-1434L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wheel.json.JSONException");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      int int0 = jSONObject0.optInt(" of ", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, (-3124));
      assertEquals((-3124), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", (int) (byte)10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(383.0F);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("val", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      JSONObject jSONObject0 = new JSONObject(float0);
      double double0 = jSONObject0.optDouble("JSONObject[", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 748.888619117);
      assertEquals(748.888619117, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      boolean boolean0 = jSONObject0.optBoolean(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(43);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.has("@IU[85?BQ@$,u/%E");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate(".", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1282L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("593.11", stringArray0);
      try { 
        jSONObject0.put((String) null, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("J_w,\"", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject0.put("wti(U<#v^]", (Map) hashMap0);
      String string0 = jSONObject0.toString((-2984), 9);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1069), (-3011));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(12, 12);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("f*LW4t5'Ox/l^2@B");
      assertEquals("\"f*LW4t5'Ox/l^2@B\"", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("F!*eiYW`ye", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("isjoin", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) byte0);
      double double0 = jSONObject1.optDouble("wheel.json.JSONObject", 332.73004574);
      assertEquals(13.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONException", (-3915.321320238));
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.json.JSONException");
      Float float0 = new Float((float) (-3915L));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("LglttoSYring", 17);
      int int0 = jSONObject0.getInt("LglttoSYring");
      assertEquals(4, jSONObject0.length());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", (Object) "isdoubleToString");
      try { 
        jSONObject1.getDouble("isdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(0.0);
      jSONObject0.put("oNsN2J]&|", (Object) double0);
      try { 
        jSONObject0.getBoolean("oNsN2J]&|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oNsN2J]&|\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("oyu!T0a", "oyu!T0a");
      try { 
        jSONObject0.getBoolean("oyu!T0a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oyu!T0a\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"[;~gfY.@E>t=\"", (Object) "\"[;~gfY.@E>t=\"");
      Object object0 = jSONObject1.get("\"[;~gfY.@E>t=\"");
      assertEquals("\"[;~gfY.@E>t=\"", object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{jvc'V,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {jvc'V,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", 0L);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) jSONArray0);
      jSONObject2.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject0.put("xeim_E)r2~6Wwiy1Ov", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(8448);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-270.326");
      // Undeclared exception!
      jSONObject0.toString(1026);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONObject0.append("", hashMap0);
      String string0 = jSONObject0.toString((-27), (-27));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 92, 92);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.append("1", (Object) null);
      String string0 = jSONObject0.toString((-2984), 9);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      StringWriter stringWriter0 = new StringWriter(1016);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(709.4014F);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("java.lang.Float@0000000001", (Collection) linkedList0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(862, 97);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(2222.488F);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      String string0 = JSONObject.valueToString(unaryOperator0, '\'', 59);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote("\"Wj{+</v.9");
      assertEquals("\"\\\"Wj{+<\\/v.9\"", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getInt("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DTJ{:#5{6-3j,@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1469L));
      jSONObject0.putOpt("java.lang.Short@0000000004.", long0);
      jSONObject0.optString("java.lang.Short@0000000004.", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject0.put("wti(U<#v^]", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wti(U<#v^]");
      assertNotSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(2210.6082F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("oyu!T0a", (Collection) linkedList0);
      jSONObject0.optJSONArray("oyu!T0a");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[28];
      JSONArray jSONArray0 = jSONObject0.optJSONArray(stringArray0[7]);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(0.0);
      jSONObject0.put("oNsN2J]&|", (Object) double0);
      double double1 = jSONObject0.optDouble("oNsN2J]&|");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\n", "\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(0.0);
      linkedList0.add((Object) float0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) "\n");
      JSONArray jSONArray2 = new JSONArray();
      jSONArray1.toJSONObject(jSONArray1);
      jSONArray2.optLong(39);
      String string0 = JSONObject.valueToString(linkedList0, 39, 39);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject1 = jSONObject0.put("xeim_E)r2~6Wwiy1Ov", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("xeim_E)r2~6Wwiy1Ov");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Double double0 = new Double(709.4014F);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("java.lang.Float@0000000001");
      assertFalse(linkedList0.contains(jSONArray0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Oq", "Oq");
      try { 
        jSONObject1.getJSONArray("Oq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Oq\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONObject0.append("", hashMap0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(0.0);
      jSONObject0.put("oNsN2J]&|", (Object) double0);
      jSONObject0.getDouble("oNsN2J]&|");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("oNsN2J]&|", true);
      boolean boolean0 = jSONObject0.getBoolean("oNsN2J]&|");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("oNsN2J]&|", (Object) double0);
      boolean boolean0 = jSONObject1.optBoolean("oNsN2J]&|", false);
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Float float0 = new Float(2210.9624F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("oNsN2J]&|", false);
      boolean boolean0 = jSONObject0.getBoolean("oNsN2J]&|");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", "{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      try { 
        jSONObject0.getLong("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n\\\"java.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\n\\\"java.lang.String@0000000006\\\": \\\"java.lang.Class@0000000007\\\"\\n}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-14482067));
      assertEquals("-1.4482067E7", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1726.5103141697011);
      assertEquals("1726.5103141697011", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject", (Object) "wheel.json.JSONObject");
      Boolean boolean0 = new Boolean("U?g");
      try { 
        jSONObject0.append("wheel.json.JSONObject", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONObject] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("%<b!&7Vn(", (Collection) linkedList0);
      Iterator iterator0 = jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject0.append("%<b!&7Vn(", iterator0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(3298L);
      jSONObject0.append("toS", long0);
      JSONArray jSONArray0 = jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", "{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject1.accumulate("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Object) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float(2222.488F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Zd=cDlY3p+~@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {Zd=cDlY3p+~@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("GW1&WIC[1j,TUI2", "GW1&WIC[1j,TUI2");
      boolean boolean0 = jSONObject1.isNull("GW1&WIC[1j,TUI2");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("I`<l`oi:P", (-262));
      int int0 = jSONObject1.optInt("I`<l`oi:P");
      assertEquals(2, jSONObject0.length());
      assertEquals((-262), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getappend", 705.36336180586);
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject0.getLong("getappend");
      assertEquals(705L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.FALSE;
      JSONArray jSONArray1 = jSONArray0.put((Object) boolean0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject1 = jSONArray2.toJSONObject(jSONArray1);
      assertNotNull(jSONObject1);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
