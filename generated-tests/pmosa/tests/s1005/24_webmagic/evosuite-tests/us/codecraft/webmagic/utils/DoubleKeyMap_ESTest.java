/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:25:39 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      String string0 = "";
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Map<Object, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      String string0 = doubleKeyMap0.get("", "G}RU4yRtpgbX]B");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.remove((String) null);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0, class0);
      String string0 = " +H'{";
      doubleKeyMap1.remove((Object) " +H'{");
      doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) class0);
      Object object0 = new Object();
      doubleKeyMap0.get("", object0);
      doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(class0);
      Map<String, Object> map1 = null;
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) map0, (Map<String, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0, class0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(integer1, integer2, (Object) null);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(class1);
      doubleKeyMap1.remove((Object) class1);
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap2.newMap();
      Object object0 = new Object();
      doubleKeyMap1.remove(object0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Integer, Object>(class1);
      Map<Object, Object> map1 = doubleKeyMap4.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap3.put((Object) null, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.remove("@v$_kY");
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      doubleKeyMap1.put((Object) "@v$_kY", (Object) null, "@v$_kY");
      doubleKeyMap1.remove((Object) "@v$_kY", (Object) "@v$_kY");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      doubleKeyMap1.remove((Object) integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("", "", "");
      doubleKeyMap0.get("", "G}RU4yRtpgbX]B");
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, Map<Map<Object, Object>, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Map<Object, Object>, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Object, Object>, Object>(map0, class0);
      Integer integer0 = new Integer((-4185));
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Object>((Map<Object, Map<Integer, Object>>) null, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
