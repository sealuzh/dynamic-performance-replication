/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:51:01 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.SystemColor;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Method;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import java.util.Locale;
import java.util.function.BiFunction;
import javax.swing.JComponent;
import javax.swing.plaf.synth.SynthRadioButtonUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.core.CheckGOE;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.TestInstances;
import weka.core.converters.LibSVMSaver;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addTestSetListener(scatterPlotMatrix0);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.removeInstanceListener(substringReplacer0);
      // Undeclared exception!
      try { 
        filter0.performRequest("&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // & not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.isDoubleBuffered();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      String string1 = filter0.getCustomName();
      assertEquals("AllFilter", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getStructure("4&8N23fz");
      DataSetEvent dataSetEvent0 = new DataSetEvent(incrementalClassifierEvaluator0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      BeanVisual beanVisual0 = predictionAppender0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("PredictionAppender", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isDoubleBuffered();
      filter0.getFilter();
      filter0.isBusy();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      BeanVisual beanVisual0 = attributeSummarizer0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("AttributeSummarizer", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.enumerateRequests();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      Saver saver0 = new Saver();
      filter0.removeTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine(">`3=i&$'3e$");
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Associator associator0 = new Associator();
      associator0.getStructure(">`3=i&$'3e$");
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      AWTEventMulticaster.remove(keyListener1, keyListener1);
      trainingSetMaker0.addKeyListener((KeyListener) null);
      Dimension dimension0 = filter0.getSize();
      flowByExpression0.setPreferredSize(dimension0);
      flowByExpression0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.removeTrainingSetListener(textViewer0);
      filter0.connectionNotification("", "");
      filter0.isBusy();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      filter0.removeContainerListener((ContainerListener) null);
      CheckGOE checkGOE0 = new CheckGOE();
      checkGOE0.getRevision();
      filter0.connectionNotification("", checkGOE0);
      Loader loader0 = new Loader();
      BeanVisual beanVisual0 = loader0.m_visual;
      filter0.setVisual(beanVisual0);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.acceptTestSet((TestSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVerifyInputWhenFocusTarget();
      filter0.setCustomName("ylyAu?)");
      filter0.getVisual();
      assertEquals("ylyAu?)", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable(")S%[5k~g?bK<4");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      FlowByExpression flowByExpression1 = new FlowByExpression();
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      FlowByExpression flowByExpression2 = new FlowByExpression();
      FlowByExpression flowByExpression3 = new FlowByExpression();
      filter0.notifyInstanceListeners(instanceEvent0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression2, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Filter filter0 = new Filter();
      Hashtable<AttributedCharacterIterator.Attribute, Container> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Container>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " instances.");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      testInstances0.generate("The class that constructs a ball tree bottom up.");
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setWrappedAlgorithm(stratifiedRemoveFolds0);
      filter0.globalInfo();
      assertEquals("<html><font color=blue>This filter takes a dataset and outputs a specified fold for cross validation</font><br><br> If you do not want the folds to be stratified use the unsupervised version.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(classAssigner0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      TextViewer textViewer0 = new TextViewer();
      filter0.addTrainingSetListener(textViewer0);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Filter filter0 = new Filter();
      Hashtable<AttributedCharacterIterator.Attribute, Container> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Container>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      hashtable0.put(attributedCharacterIterator_Attribute0, filter0);
      Font font0 = new Font(hashtable0);
      filter0.setFont(font0);
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.connectionNotification("", "");
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.acceptDataSet((DataSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      BiFunction<Object, Container, FlowByExpression> biFunction0 = (BiFunction<Object, Container, FlowByExpression>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      JComponent.getDefaultLocale();
      filter0.connectionNotification("however", "however");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      LibSVMSaver libSVMSaver0 = new LibSVMSaver();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Classifier classifier0 = new Classifier();
      filter0.eventGeneratable("configuration");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      // Undeclared exception!
      try { 
        filter0.performRequest("configuration");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // configuration not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HZmZQ~p=/7");
      FlowByExpression flowByExpression1 = new FlowByExpression();
      filter0.disconnectionNotification(".bsi", flowByExpression0);
      flowByExpression1.setFocusCycleRoot(false);
      flowByExpression0.getColorModel();
      SystemInUtil.addInputLine("7L/)w#@A-WsP");
      filter0.addTrainingSetListener(flowByExpression0);
      Filter filter1 = new Filter();
      filter1.addDataSourceListener(flowByExpression1);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      filter0.addTestSetListener(filter1);
      DataSetEvent dataSetEvent0 = new DataSetEvent(nGramTokenizer0, instances0);
      filter1.acceptDataSet(dataSetEvent0);
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      SynthRadioButtonUI synthRadioButtonUI0 = new SynthRadioButtonUI();
      synthRadioButtonUI0.getAccessibleChild(filter0, 3146);
      synthRadioButtonUI0.getMinimumSize(filter0);
      filter0.addPropertyChangeListener((PropertyChangeListener) synthRadioButtonUI0);
      filter0.enumerateRequests();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addTrainingSetListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setVisual((BeanVisual) null);
      Class<FlowByExpression.ExpressionClause.ExpressionType> class0 = FlowByExpression.ExpressionClause.ExpressionType.class;
      Method[] methodArray0 = new Method[0];
      EventSetDescriptor eventSetDescriptor0 = new EventSetDescriptor(".\n", class0, methodArray0, (Method) null, (Method) null);
      boolean boolean0 = filter0.connectionAllowed(eventSetDescriptor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Sorter sorter0 = new Sorter();
      TestInstances testInstances0 = new TestInstances();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      filter0.addHierarchyListener((HierarchyListener) null);
      testInstances0.generate(".bsi");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      testInstances0.setNumRelationalNominal(10001);
      filter0.getFilter();
      // Undeclared exception!
      try { 
        filter0.performRequest("@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @relation not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      filter0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      filter0.connectionNotification("ERROR (See log for details).", "ERROR (See log for details).");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.stop();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.disconnectionNotification("ow;,H|J}:OF_.?FWZ", stratifiedRemoveFolds0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      BiFunction<Object, Container, FlowByExpression> biFunction0 = (BiFunction<Object, Container, FlowByExpression>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute1 = AttributedCharacterIterator.Attribute.LANGUAGE;
      JComponent.getDefaultLocale();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      filter0.connectionNotification("however", costBenefitAnalysis0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      LibSVMSaver libSVMSaver0 = new LibSVMSaver();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Random.setNextRandom(1);
      FlowByExpression flowByExpression1 = new FlowByExpression();
      // Undeclared exception!
      try { 
        filter0.performRequest("G8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G8 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Hashtable<AttributedCharacterIterator.Attribute, Container> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Container>();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(" ", instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      testInstances0.setRelationalClassFormat(instances0);
      instanceEvent0.setStructure(instances0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      TestSetEvent testSetEvent0 = new TestSetEvent(trainingSetEvent0, instances0, 400, 2, (-2237), 2);
      filter0.acceptTestSet(testSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(attributedCharacterIterator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.text.AttributedCharacterIterator$Attribute : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      Hashtable<AttributedCharacterIterator.Attribute, Container> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Container>();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Font font0 = new Font(hashtable0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.connectionNotification("however", "however");
      LibSVMSaver libSVMSaver0 = new LibSVMSaver();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ImageSaver imageSaver0 = new ImageSaver();
      filter0.eventGeneratable("however");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "@relation");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      FlowByExpression flowByExpression1 = new FlowByExpression();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.disconnectionNotification(".bsi", trainingSetMaker0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      flowByExpression1.setFocusCycleRoot(false);
      SystemInUtil.addInputLine("oE6xM Bf#X");
      Filter filter1 = new Filter();
      filter1.updateUI();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.addDataSourceListener(trainingSetMaker0);
      filter0.addTestSetListener(flowByExpression1);
      ListOptions listOptions0 = new ListOptions();
      DataSetEvent dataSetEvent0 = new DataSetEvent(listOptions0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      TestInstances testInstances0 = new TestInstances();
      filter0.removeTestSetListener(flowByExpression0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNominal((-2));
      Filter filter2 = new Filter();
      filter2.getVisual();
      filter0.removeTestSetListener(filter1);
      filter2.removeTestSetListener(flowByExpression0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TestSetEvent testSetEvent0 = new TestSetEvent(classValuePicker0, instances0, (-2), (-1), 482, 2);
      filter0.acceptTestSet(testSetEvent0);
      filter0.connectionNotification(" ", filter1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}p");
      filter0.removeTrainingSetListener(filter0);
      filter0.globalInfo();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      attributeSelection0.getOptions();
      Add add0 = new Add();
      filter0.setFilter(add0);
      MetaBean metaBean0 = new MetaBean();
      Filter filter1 = new Filter();
      filter0.connectionAllowed("instance");
      ListOptions listOptions0 = new ListOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter2 = new Filter();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter1.getFilter();
      filter1.removeDataSourceListener(filter2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PredictionAppender predictionAppender0 = new PredictionAppender();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Logger logger0 = predictionAppender0.m_logger;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      Filter filter2 = new Filter();
      filter0.connectionAllowed("instance");
      ListOptions listOptions0 = new ListOptions();
      Filter filter3 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter3);
      filter3.notifyInstanceListeners(instanceEvent0);
      filter1.acceptInstance(instanceEvent0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      Discretize discretize0 = new Discretize();
      filter2.enumerateRequests();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      // Undeclared exception!
      try { 
        filter3.performRequest("instance");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // instance not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      SystemInUtil.addInputLine("5eR`[907");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      AttributeSelection attributeSelection0 = new AttributeSelection();
      Add add0 = new Add();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      TestInstances testInstances0 = new TestInstances();
      MetaBean metaBean0 = new MetaBean();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Filter filter2 = new Filter();
      ListOptions listOptions0 = new ListOptions();
      Filter filter3 = new Filter();
      InstanceEvent instanceEvent1 = new InstanceEvent(attributeSelection0);
      filter3.notifyInstanceListeners(instanceEvent1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter3.acceptInstance(instanceEvent1);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      Discretize discretize0 = new Discretize();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      TestInstances testInstances1 = new TestInstances();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(flowByExpression1);
      filter3.removeTestSetListener(filter2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Filter filter1 = new Filter();
      filter1.removeTrainingSetListener(filter0);
      filter0.globalInfo();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      Add add0 = new Add();
      filter0.setFilter(add0);
      TestInstances testInstances0 = new TestInstances();
      MetaBean metaBean0 = new MetaBean();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Filter filter2 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(pipedOutputStream1);
      filter2.notifyInstanceListeners(instanceEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.acceptInstance(instanceEvent0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.setBounds(0, (-162), 2, 256);
      ClassValuePicker classValuePicker1 = new ClassValuePicker();
      Logger logger0 = classValuePicker1.m_logger;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      BeanVisual beanVisual0 = substringLabeler0.m_visual;
      filter2.setVisual(beanVisual0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusCycleRoot(true);
      Sorter sorter0 = new Sorter();
      filter0.addTestSetListener(sorter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      filter0.removeTestSetListener(sorter0);
      filter0.addInstanceListener(sorter0);
      filter0.getVisual();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      filter0.getCustomName();
      filter0.removeTestSetListener(flowByExpression0);
      filter0.addInstanceListener(flowByExpression0);
      filter0.getVisual();
      filter0.connectionNotification("3m", "AllFilter");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      BiFunction<Object, Container, FlowByExpression> biFunction0 = (BiFunction<Object, Container, FlowByExpression>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute1 = AttributedCharacterIterator.Attribute.LANGUAGE;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TestSetMaker testSetMaker0 = new TestSetMaker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetMaker0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Instances instances1 = testInstances0.generate();
      Instances instances2 = new Instances(instances1, 0, (-2));
      testInstances0.setRelationalClassFormat(instances2);
      instanceEvent0.setStructure(instances0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      sorter0.getToolkit();
      TestSetEvent testSetEvent0 = new TestSetEvent(instanceEvent0, instances0, (-9000), (-521), (-8), 627);
      TestSetEvent testSetEvent1 = new TestSetEvent(instances0, instances2, (-8), (-8));
      filter0.acceptTestSet(testSetEvent1);
      filter0.removeTestSetListener(sorter0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(testSetMaker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.TestSetMaker : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      Locale locale0 = Locale.US;
      Loader loader0 = new Loader();
      loader0.getDebugGraphicsOptions();
      filter0.connectionNotification("inA_GD", loader0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      LibSVMSaver libSVMSaver0 = new LibSVMSaver();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      flowByExpression0.setForeground(systemColor0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Classifier classifier0 = new Classifier();
      filter0.eventGeneratable("inA_GD");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      filter0.setCustomName("la%");
      filter0.isBusy();
      filter0.removeTestSetListener(flowByExpression0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Logger logger0 = classValuePicker0.m_logger;
      filter0.setLog((Logger) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }
}
